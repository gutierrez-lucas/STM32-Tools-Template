
bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003094  08003094  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003094  08003094  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800309c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  20000054  080030f0  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  080030f0  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008340  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001826  00000000  00000000  00028400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  00029c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bd  00000000  00000000  0002a628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001675f  00000000  00000000  0002ade5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab6f  00000000  00000000  00041544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083eb1  00000000  00000000  0004c0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002964  00000000  00000000  000cff64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d28c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08003058 	.word	0x08003058

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08003058 	.word	0x08003058

0800014c <rgb_matrix_clear_buffer>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM1_Init(void);

void rgb_matrix_clear_buffer(uint8_t *buffer, uint16_t bytenumber) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	for (uint32_t i = 0; i < bytenumber-1; ++i) {
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
 800015c:	e007      	b.n	800016e <rgb_matrix_clear_buffer+0x22>
		buffer[i] = LOW_BIT;
 800015e:	687a      	ldr	r2, [r7, #4]
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	4413      	add	r3, r2
 8000164:	221d      	movs	r2, #29
 8000166:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < bytenumber-1; ++i) {
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	3301      	adds	r3, #1
 800016c:	60fb      	str	r3, [r7, #12]
 800016e:	887b      	ldrh	r3, [r7, #2]
 8000170:	3b01      	subs	r3, #1
 8000172:	461a      	mov	r2, r3
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	4293      	cmp	r3, r2
 8000178:	d3f1      	bcc.n	800015e <rgb_matrix_clear_buffer+0x12>
	}
	buffer[bytenumber] = 0;//needs to be 0 to silent PWM at the end of transaction
 800017a:	887b      	ldrh	r3, [r7, #2]
 800017c:	687a      	ldr	r2, [r7, #4]
 800017e:	4413      	add	r3, r2
 8000180:	2200      	movs	r2, #0
 8000182:	701a      	strb	r2, [r3, #0]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
	...

08000190 <rgb_process_colors>:
typedef enum show_mode_t{
	POINTS = 0,
	LINES = 1
}show_mode_t;

void rgb_process_colors(rgb_mode_t mode, uint8_t* colors, uint8_t amplitude){
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	6039      	str	r1, [r7, #0]
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	4613      	mov	r3, r2
 800019e:	71bb      	strb	r3, [r7, #6]
	switch(mode){
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <rgb_process_colors+0x1c>
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d00c      	beq.n	80001c4 <rgb_process_colors+0x34>
 80001aa:	e08e      	b.n	80002ca <rgb_process_colors+0x13a>
		case(OFF):
			colors[0] = 0;colors[1] = 0;colors[2] = 0; break;
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	3301      	adds	r3, #1
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	3302      	adds	r3, #2
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]
 80001c2:	e08e      	b.n	80002e2 <rgb_process_colors+0x152>
		case(LIMITS):
			switch(amplitude){
 80001c4:	79bb      	ldrb	r3, [r7, #6]
 80001c6:	2b07      	cmp	r3, #7
 80001c8:	d872      	bhi.n	80002b0 <rgb_process_colors+0x120>
 80001ca:	a201      	add	r2, pc, #4	; (adr r2, 80001d0 <rgb_process_colors+0x40>)
 80001cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d0:	080001f1 	.word	0x080001f1
 80001d4:	08000209 	.word	0x08000209
 80001d8:	08000221 	.word	0x08000221
 80001dc:	08000239 	.word	0x08000239
 80001e0:	08000251 	.word	0x08000251
 80001e4:	08000269 	.word	0x08000269
 80001e8:	08000281 	.word	0x08000281
 80001ec:	08000299 	.word	0x08000299
				case 0: colors[0] = 0; colors[1] = 200; colors[2] = 0; break;
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	2200      	movs	r2, #0
 80001f4:	701a      	strb	r2, [r3, #0]
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	3301      	adds	r3, #1
 80001fa:	22c8      	movs	r2, #200	; 0xc8
 80001fc:	701a      	strb	r2, [r3, #0]
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	3302      	adds	r3, #2
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
 8000206:	e05f      	b.n	80002c8 <rgb_process_colors+0x138>
				case 1: colors[0] = 10; colors[1] = 200; colors[2] = 100; break;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	220a      	movs	r2, #10
 800020c:	701a      	strb	r2, [r3, #0]
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	22c8      	movs	r2, #200	; 0xc8
 8000214:	701a      	strb	r2, [r3, #0]
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	3302      	adds	r3, #2
 800021a:	2264      	movs	r2, #100	; 0x64
 800021c:	701a      	strb	r2, [r3, #0]
 800021e:	e053      	b.n	80002c8 <rgb_process_colors+0x138>
				case 2: colors[0] = 10; colors[1] = 75; colors[2] = 80; break;
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	220a      	movs	r2, #10
 8000224:	701a      	strb	r2, [r3, #0]
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	224b      	movs	r2, #75	; 0x4b
 800022c:	701a      	strb	r2, [r3, #0]
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	3302      	adds	r3, #2
 8000232:	2250      	movs	r2, #80	; 0x50
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e047      	b.n	80002c8 <rgb_process_colors+0x138>
				case 3: colors[0] = 10; colors[1] = 0; colors[2] = 80; break;
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	220a      	movs	r2, #10
 800023c:	701a      	strb	r2, [r3, #0]
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	3301      	adds	r3, #1
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	3302      	adds	r3, #2
 800024a:	2250      	movs	r2, #80	; 0x50
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	e03b      	b.n	80002c8 <rgb_process_colors+0x138>
				case 4: colors[0] = 300; colors[1] = 0; colors[2] = 80; break;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	222c      	movs	r2, #44	; 0x2c
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	3302      	adds	r3, #2
 8000262:	2250      	movs	r2, #80	; 0x50
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e02f      	b.n	80002c8 <rgb_process_colors+0x138>
				case 5: colors[0] = 80; colors[1] = 0; colors[2] = 80; break;
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	2250      	movs	r2, #80	; 0x50
 800026c:	701a      	strb	r2, [r3, #0]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	3302      	adds	r3, #2
 800027a:	2250      	movs	r2, #80	; 0x50
 800027c:	701a      	strb	r2, [r3, #0]
 800027e:	e023      	b.n	80002c8 <rgb_process_colors+0x138>
				case 6: colors[0] = 80; colors[1] = 60; colors[2] = 10; break;
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	2250      	movs	r2, #80	; 0x50
 8000284:	701a      	strb	r2, [r3, #0]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	223c      	movs	r2, #60	; 0x3c
 800028c:	701a      	strb	r2, [r3, #0]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	3302      	adds	r3, #2
 8000292:	220a      	movs	r2, #10
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	e017      	b.n	80002c8 <rgb_process_colors+0x138>
				case 7: colors[0] = 0; colors[1] = 0; colors[2] = 10; break;
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	3302      	adds	r3, #2
 80002aa:	220a      	movs	r2, #10
 80002ac:	701a      	strb	r2, [r3, #0]
 80002ae:	e00b      	b.n	80002c8 <rgb_process_colors+0x138>
				default: colors[0] = 80; colors[1] = 10; colors[2] = 0; break;
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	2250      	movs	r2, #80	; 0x50
 80002b4:	701a      	strb	r2, [r3, #0]
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	220a      	movs	r2, #10
 80002bc:	701a      	strb	r2, [r3, #0]
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	3302      	adds	r3, #2
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
 80002c6:	bf00      	nop
			}
			break;
 80002c8:	e00b      	b.n	80002e2 <rgb_process_colors+0x152>
		default: colors[0] = 0;colors[1] = 0;colors[2] = 0; break;
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	3301      	adds	r3, #1
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	3302      	adds	r3, #2
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
 80002e0:	bf00      	nop
	}
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <rgb_process_rotation>:

void rgb_process_rotation(rotation_t rotation, uint8_t* coordinates, uint8_t x, uint8_t y){
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6039      	str	r1, [r7, #0]
 80002f4:	4611      	mov	r1, r2
 80002f6:	461a      	mov	r2, r3
 80002f8:	4603      	mov	r3, r0
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	460b      	mov	r3, r1
 80002fe:	71bb      	strb	r3, [r7, #6]
 8000300:	4613      	mov	r3, r2
 8000302:	717b      	strb	r3, [r7, #5]
	switch (rotation) {
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b03      	cmp	r3, #3
 8000308:	d836      	bhi.n	8000378 <rgb_process_rotation+0x8c>
 800030a:	a201      	add	r2, pc, #4	; (adr r2, 8000310 <rgb_process_rotation+0x24>)
 800030c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000310:	08000321 	.word	0x08000321
 8000314:	08000331 	.word	0x08000331
 8000318:	08000347 	.word	0x08000347
 800031c:	08000363 	.word	0x08000363
		case ROTATION_0:
			coordinates[1] = y;
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	3301      	adds	r3, #1
 8000324:	797a      	ldrb	r2, [r7, #5]
 8000326:	701a      	strb	r2, [r3, #0]
			coordinates[0] = x;
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	79ba      	ldrb	r2, [r7, #6]
 800032c:	701a      	strb	r2, [r3, #0]
			break;
 800032e:	e02b      	b.n	8000388 <rgb_process_rotation+0x9c>
		case ROTATION_90:
			coordinates[1] = x;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	79ba      	ldrb	r2, [r7, #6]
 8000336:	701a      	strb	r2, [r3, #0]
			coordinates[0] = MATRIX_SIZE - y + 1;
 8000338:	797b      	ldrb	r3, [r7, #5]
 800033a:	f1c3 0309 	rsb	r3, r3, #9
 800033e:	b2da      	uxtb	r2, r3
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	701a      	strb	r2, [r3, #0]
			break;
 8000344:	e020      	b.n	8000388 <rgb_process_rotation+0x9c>
		case ROTATION_180:
			coordinates[1] = MATRIX_SIZE - y + 1;
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	3301      	adds	r3, #1
 800034a:	797a      	ldrb	r2, [r7, #5]
 800034c:	f1c2 0209 	rsb	r2, r2, #9
 8000350:	b2d2      	uxtb	r2, r2
 8000352:	701a      	strb	r2, [r3, #0]
			coordinates[0] = MATRIX_SIZE - x + 1;
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	f1c3 0309 	rsb	r3, r3, #9
 800035a:	b2da      	uxtb	r2, r3
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	701a      	strb	r2, [r3, #0]
			break;
 8000360:	e012      	b.n	8000388 <rgb_process_rotation+0x9c>
		case ROTATION_270:
			coordinates[1] = MATRIX_SIZE - x + 1;
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	79ba      	ldrb	r2, [r7, #6]
 8000368:	f1c2 0209 	rsb	r2, r2, #9
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	701a      	strb	r2, [r3, #0]
			coordinates[0] = y;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	797a      	ldrb	r2, [r7, #5]
 8000374:	701a      	strb	r2, [r3, #0]
			break;
 8000376:	e007      	b.n	8000388 <rgb_process_rotation+0x9c>
		default: coordinates[1] = y; coordinates[0] = x; break;
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	797a      	ldrb	r2, [r7, #5]
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	701a      	strb	r2, [r3, #0]
 8000386:	bf00      	nop
	}
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <rgb_matrix_set_pixel>:

uint32_t rgb_matrix_set_pixel(uint8_t *buffer, rgb_mode_t mode, uint8_t x, uint8_t y, rotation_t rotation) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	4608      	mov	r0, r1
 800039e:	4611      	mov	r1, r2
 80003a0:	461a      	mov	r2, r3
 80003a2:	4603      	mov	r3, r0
 80003a4:	70fb      	strb	r3, [r7, #3]
 80003a6:	460b      	mov	r3, r1
 80003a8:	70bb      	strb	r3, [r7, #2]
 80003aa:	4613      	mov	r3, r2
 80003ac:	707b      	strb	r3, [r7, #1]

	if(x*y>NUM_OF_LEDS){return -1;}//in case we mess up
 80003ae:	78bb      	ldrb	r3, [r7, #2]
 80003b0:	787a      	ldrb	r2, [r7, #1]
 80003b2:	fb02 f303 	mul.w	r3, r2, r3
 80003b6:	2b40      	cmp	r3, #64	; 0x40
 80003b8:	dd02      	ble.n	80003c0 <rgb_matrix_set_pixel+0x2c>
 80003ba:	f04f 33ff 	mov.w	r3, #4294967295
 80003be:	e0ba      	b.n	8000536 <rgb_matrix_set_pixel+0x1a2>

	uint8_t y_rot, x_rot;
	uint8_t colors[3] = {100,0,0};
 80003c0:	4a5f      	ldr	r2, [pc, #380]	; (8000540 <rgb_matrix_set_pixel+0x1ac>)
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	6812      	ldr	r2, [r2, #0]
 80003c8:	4611      	mov	r1, r2
 80003ca:	8019      	strh	r1, [r3, #0]
 80003cc:	3302      	adds	r3, #2
 80003ce:	0c12      	lsrs	r2, r2, #16
 80003d0:	701a      	strb	r2, [r3, #0]
	uint8_t coordinates[2] = {1,1};
 80003d2:	f240 1301 	movw	r3, #257	; 0x101
 80003d6:	81bb      	strh	r3, [r7, #12]

	rgb_process_colors(mode, colors, y);
 80003d8:	787a      	ldrb	r2, [r7, #1]
 80003da:	f107 0110 	add.w	r1, r7, #16
 80003de:	78fb      	ldrb	r3, [r7, #3]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff fed5 	bl	8000190 <rgb_process_colors>
	rgb_process_rotation(rotation, coordinates, x, y);
 80003e6:	787b      	ldrb	r3, [r7, #1]
 80003e8:	78ba      	ldrb	r2, [r7, #2]
 80003ea:	f107 010c 	add.w	r1, r7, #12
 80003ee:	f897 0020 	ldrb.w	r0, [r7, #32]
 80003f2:	f7ff ff7b 	bl	80002ec <rgb_process_rotation>

	uint8_t led_index = (coordinates[1]-1)*MATRIX_SIZE + coordinates[0] -1;
 80003f6:	7b7b      	ldrb	r3, [r7, #13]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	7b3b      	ldrb	r3, [r7, #12]
 8000402:	4413      	add	r3, r2
 8000404:	b2db      	uxtb	r3, r3
 8000406:	3b01      	subs	r3, #1
 8000408:	74fb      	strb	r3, [r7, #19]

	for (uint32_t i = 0; i < BYTES_PER_LED * 8; ++i) { //we need to store every bit
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e08d      	b.n	800052c <rgb_matrix_set_pixel+0x198>

		if (i < 8) { //this means first byte R
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	2b07      	cmp	r3, #7
 8000414:	d821      	bhi.n	800045a <rgb_matrix_set_pixel+0xc6>
			if (colors[1] & (0x80 >> i)) { //this is a mask for reading every bit inside the byte R
 8000416:	7c7b      	ldrb	r3, [r7, #17]
 8000418:	4619      	mov	r1, r3
 800041a:	2280      	movs	r2, #128	; 0x80
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	fa42 f303 	asr.w	r3, r2, r3
 8000422:	400b      	ands	r3, r1
 8000424:	2b00      	cmp	r3, #0
 8000426:	d00c      	beq.n	8000442 <rgb_matrix_set_pixel+0xae>
				buffer[i + led_index * BYTES_PER_LED * 8] = HIGH_BIT;
 8000428:	7cfa      	ldrb	r2, [r7, #19]
 800042a:	4613      	mov	r3, r2
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	4413      	add	r3, r2
 8000430:	00db      	lsls	r3, r3, #3
 8000432:	461a      	mov	r2, r3
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	4413      	add	r3, r2
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	4413      	add	r3, r2
 800043c:	223a      	movs	r2, #58	; 0x3a
 800043e:	701a      	strb	r2, [r3, #0]
 8000440:	e00b      	b.n	800045a <rgb_matrix_set_pixel+0xc6>
			} else {
				buffer[i + led_index * BYTES_PER_LED * 8] = LOW_BIT;
 8000442:	7cfa      	ldrb	r2, [r7, #19]
 8000444:	4613      	mov	r3, r2
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	4413      	add	r3, r2
 800044a:	00db      	lsls	r3, r3, #3
 800044c:	461a      	mov	r2, r3
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	4413      	add	r3, r2
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	221d      	movs	r2, #29
 8000458:	701a      	strb	r2, [r3, #0]
			}
		}

		if ((i >= 8) & (i < 16)) { //this means second byte G
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	2b07      	cmp	r3, #7
 800045e:	bf8c      	ite	hi
 8000460:	2301      	movhi	r3, #1
 8000462:	2300      	movls	r3, #0
 8000464:	b2da      	uxtb	r2, r3
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	2b0f      	cmp	r3, #15
 800046a:	bf94      	ite	ls
 800046c:	2301      	movls	r3, #1
 800046e:	2300      	movhi	r3, #0
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4013      	ands	r3, r2
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d022      	beq.n	80004c0 <rgb_matrix_set_pixel+0x12c>
			if (colors[0] & (0x80 >> (i - 8))) {
 800047a:	7c3b      	ldrb	r3, [r7, #16]
 800047c:	4619      	mov	r1, r3
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3b08      	subs	r3, #8
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	fa42 f303 	asr.w	r3, r2, r3
 8000488:	400b      	ands	r3, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d00c      	beq.n	80004a8 <rgb_matrix_set_pixel+0x114>
				buffer[i + led_index * BYTES_PER_LED * 8] = HIGH_BIT;
 800048e:	7cfa      	ldrb	r2, [r7, #19]
 8000490:	4613      	mov	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	4413      	add	r3, r2
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	461a      	mov	r2, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	4413      	add	r3, r2
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	223a      	movs	r2, #58	; 0x3a
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	e00b      	b.n	80004c0 <rgb_matrix_set_pixel+0x12c>
			} else {
				buffer[i + led_index * BYTES_PER_LED * 8] = LOW_BIT;
 80004a8:	7cfa      	ldrb	r2, [r7, #19]
 80004aa:	4613      	mov	r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	00db      	lsls	r3, r3, #3
 80004b2:	461a      	mov	r2, r3
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	4413      	add	r3, r2
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	4413      	add	r3, r2
 80004bc:	221d      	movs	r2, #29
 80004be:	701a      	strb	r2, [r3, #0]
			}
		}

		if ((i >= 16) & (i < 24)) { //this means third byte B
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	2b0f      	cmp	r3, #15
 80004c4:	bf8c      	ite	hi
 80004c6:	2301      	movhi	r3, #1
 80004c8:	2300      	movls	r3, #0
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	2b17      	cmp	r3, #23
 80004d0:	bf94      	ite	ls
 80004d2:	2301      	movls	r3, #1
 80004d4:	2300      	movhi	r3, #0
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	4013      	ands	r3, r2
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d022      	beq.n	8000526 <rgb_matrix_set_pixel+0x192>
			if (colors[2] & (0x80 >> (i - 16))) {
 80004e0:	7cbb      	ldrb	r3, [r7, #18]
 80004e2:	4619      	mov	r1, r3
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	3b10      	subs	r3, #16
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	fa42 f303 	asr.w	r3, r2, r3
 80004ee:	400b      	ands	r3, r1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d00c      	beq.n	800050e <rgb_matrix_set_pixel+0x17a>
				buffer[i + led_index * BYTES_PER_LED * 8] = HIGH_BIT;
 80004f4:	7cfa      	ldrb	r2, [r7, #19]
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	461a      	mov	r2, r3
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	4413      	add	r3, r2
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	223a      	movs	r2, #58	; 0x3a
 800050a:	701a      	strb	r2, [r3, #0]
 800050c:	e00b      	b.n	8000526 <rgb_matrix_set_pixel+0x192>
			} else {
				buffer[i + led_index * BYTES_PER_LED * 8] = LOW_BIT;
 800050e:	7cfa      	ldrb	r2, [r7, #19]
 8000510:	4613      	mov	r3, r2
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4413      	add	r3, r2
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	461a      	mov	r2, r3
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	4413      	add	r3, r2
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	221d      	movs	r2, #29
 8000524:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < BYTES_PER_LED * 8; ++i) { //we need to store every bit
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	2b17      	cmp	r3, #23
 8000530:	f67f af6e 	bls.w	8000410 <rgb_matrix_set_pixel+0x7c>
			}
		}

	}
	return 1;
 8000534:	2301      	movs	r3, #1
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	08003070 	.word	0x08003070

08000544 <matrix_test_vertical_levels>:
	{0, 0, 1, 1, 1, 2, 1, 0},
	{0, 0, 0, 1, 1, 1, 0, 0},
	{0, 0, 0, 1, 0, 0, 0, 0}
};

void matrix_test_vertical_levels(rotation_t rotation, show_mode_t mode){
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af02      	add	r7, sp, #8
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	71bb      	strb	r3, [r7, #6]
	static uint8_t table = 0;
	rgb_matrix_clear_buffer(&rgbw_arr, sizeof(rgbw_arr));
 8000554:	f240 6101 	movw	r1, #1537	; 0x601
 8000558:	4829      	ldr	r0, [pc, #164]	; (8000600 <matrix_test_vertical_levels+0xbc>)
 800055a:	f7ff fdf7 	bl	800014c <rgb_matrix_clear_buffer>
	for(uint8_t i=1; i<=MATRIX_SIZE; i++){
 800055e:	2301      	movs	r3, #1
 8000560:	73fb      	strb	r3, [r7, #15]
 8000562:	e039      	b.n	80005d8 <matrix_test_vertical_levels+0x94>
		if(mode == POINTS){
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d114      	bne.n	8000594 <matrix_test_vertical_levels+0x50>
			rgb_matrix_set_pixel(&rgbw_arr, LIMITS, i, test_matrix[table][i-1]+1, rotation);
 800056a:	4b26      	ldr	r3, [pc, #152]	; (8000604 <matrix_test_vertical_levels+0xc0>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	461a      	mov	r2, r3
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	3b01      	subs	r3, #1
 8000574:	4924      	ldr	r1, [pc, #144]	; (8000608 <matrix_test_vertical_levels+0xc4>)
 8000576:	00d2      	lsls	r2, r2, #3
 8000578:	440a      	add	r2, r1
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	b2d9      	uxtb	r1, r3
 8000582:	7bfa      	ldrb	r2, [r7, #15]
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	460b      	mov	r3, r1
 800058a:	2101      	movs	r1, #1
 800058c:	481c      	ldr	r0, [pc, #112]	; (8000600 <matrix_test_vertical_levels+0xbc>)
 800058e:	f7ff ff01 	bl	8000394 <rgb_matrix_set_pixel>
 8000592:	e01e      	b.n	80005d2 <matrix_test_vertical_levels+0x8e>
		}else if(mode == LINES){
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d11b      	bne.n	80005d2 <matrix_test_vertical_levels+0x8e>
			for(uint8_t j=1; j<=test_matrix[table][i-1]; j++){
 800059a:	2301      	movs	r3, #1
 800059c:	73bb      	strb	r3, [r7, #14]
 800059e:	e00b      	b.n	80005b8 <matrix_test_vertical_levels+0x74>
				rgb_matrix_set_pixel(&rgbw_arr, LIMITS, i, j, rotation);
 80005a0:	7bb9      	ldrb	r1, [r7, #14]
 80005a2:	7bfa      	ldrb	r2, [r7, #15]
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	460b      	mov	r3, r1
 80005aa:	2101      	movs	r1, #1
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <matrix_test_vertical_levels+0xbc>)
 80005ae:	f7ff fef1 	bl	8000394 <rgb_matrix_set_pixel>
			for(uint8_t j=1; j<=test_matrix[table][i-1]; j++){
 80005b2:	7bbb      	ldrb	r3, [r7, #14]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73bb      	strb	r3, [r7, #14]
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <matrix_test_vertical_levels+0xc0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4911      	ldr	r1, [pc, #68]	; (8000608 <matrix_test_vertical_levels+0xc4>)
 80005c4:	00d2      	lsls	r2, r2, #3
 80005c6:	440a      	add	r2, r1
 80005c8:	4413      	add	r3, r2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	7bba      	ldrb	r2, [r7, #14]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d9e6      	bls.n	80005a0 <matrix_test_vertical_levels+0x5c>
	for(uint8_t i=1; i<=MATRIX_SIZE; i++){
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3301      	adds	r3, #1
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b08      	cmp	r3, #8
 80005dc:	d9c2      	bls.n	8000564 <matrix_test_vertical_levels+0x20>
			}
		}
	}
	table++;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <matrix_test_vertical_levels+0xc0>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <matrix_test_vertical_levels+0xc0>)
 80005e8:	701a      	strb	r2, [r3, #0]
	if(table == 9){
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <matrix_test_vertical_levels+0xc0>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b09      	cmp	r3, #9
 80005f0:	d102      	bne.n	80005f8 <matrix_test_vertical_levels+0xb4>
		table = 0;
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <matrix_test_vertical_levels+0xc0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
	}
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000fc 	.word	0x200000fc
 8000604:	200006fe 	.word	0x200006fe
 8000608:	20000000 	.word	0x20000000

0800060c <main>:

int main(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	HAL_Init();
 8000612:	f000 faa5 	bl	8000b60 <HAL_Init>

	SystemClock_Config();
 8000616:	f000 f83f 	bl	8000698 <SystemClock_Config>

	MX_GPIO_Init();
 800061a:	f000 f941 	bl	80008a0 <MX_GPIO_Init>
	MX_DMA_Init();
 800061e:	f000 f921 	bl	8000864 <MX_DMA_Init>
	MX_TIM1_Init();
 8000622:	f000 f87f 	bl	8000724 <MX_TIM1_Init>

	rgb_matrix_clear_buffer(&rgbw_arr, sizeof(rgbw_arr));
 8000626:	f240 6101 	movw	r1, #1537	; 0x601
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <main+0x48>)
 800062c:	f7ff fd8e 	bl	800014c <rgb_matrix_clear_buffer>

	bool mode = true;
 8000630:	2301      	movs	r3, #1
 8000632:	71fb      	strb	r3, [r7, #7]

	while (1) {

		matrix_test_vertical_levels(ROTATION_90, POINTS);
 8000634:	2100      	movs	r1, #0
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff ff84 	bl	8000544 <matrix_test_vertical_levels>
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, &rgbw_arr,sizeof(rgbw_arr));
 800063c:	f240 6301 	movw	r3, #1537	; 0x601
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <main+0x48>)
 8000642:	2100      	movs	r1, #0
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <main+0x4c>)
 8000646:	f001 fcc9 	bl	8001fdc <HAL_TIM_PWM_Start_DMA>

		HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	; 0x64
 800064c:	f000 faea 	bl	8000c24 <HAL_Delay>
		matrix_test_vertical_levels(ROTATION_90, POINTS);
 8000650:	e7f0      	b.n	8000634 <main+0x28>
 8000652:	bf00      	nop
 8000654:	200000fc 	.word	0x200000fc
 8000658:	20000070 	.word	0x20000070

0800065c <HAL_TIM_PWM_PulseFinishedCallback>:
	}
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800066a:	f001 f80d 	bl	8001688 <HAL_GPIO_TogglePin>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800066e:	2100      	movs	r1, #0
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000672:	f001 fe4d 	bl	8002310 <HAL_TIM_PWM_Stop_DMA>
	htim1.Instance->CCR1 = 0;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2200      	movs	r2, #0
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
	done = true;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40011000 	.word	0x40011000
 8000690:	20000070 	.word	0x20000070
 8000694:	200006fd 	.word	0x200006fd

08000698 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b090      	sub	sp, #64	; 0x40
 800069c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2228      	movs	r2, #40	; 0x28
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fca9 	bl	8002ffe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 ffeb 	bl	80016bc <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x58>
		Error_Handler();
 80006ec:	f000 f924 	bl	8000938 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000700:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fa58 	bl	8001bc0 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x82>
		Error_Handler();
 8000716:	f000 f90f 	bl	8000938 <Error_Handler>
	}
}
 800071a:	bf00      	nop
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	; 0x58
 8000728:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800072a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000738:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fc4e 	bl	8002ffe <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000762:	4b3e      	ldr	r3, [pc, #248]	; (800085c <MX_TIM1_Init+0x138>)
 8000764:	4a3e      	ldr	r2, [pc, #248]	; (8000860 <MX_TIM1_Init+0x13c>)
 8000766:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000768:	4b3c      	ldr	r3, [pc, #240]	; (800085c <MX_TIM1_Init+0x138>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b3b      	ldr	r3, [pc, #236]	; (800085c <MX_TIM1_Init+0x138>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 90 - 1;
 8000774:	4b39      	ldr	r3, [pc, #228]	; (800085c <MX_TIM1_Init+0x138>)
 8000776:	2259      	movs	r2, #89	; 0x59
 8000778:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b38      	ldr	r3, [pc, #224]	; (800085c <MX_TIM1_Init+0x138>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000780:	4b36      	ldr	r3, [pc, #216]	; (800085c <MX_TIM1_Init+0x138>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b35      	ldr	r3, [pc, #212]	; (800085c <MX_TIM1_Init+0x138>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800078c:	4833      	ldr	r0, [pc, #204]	; (800085c <MX_TIM1_Init+0x138>)
 800078e:	f001 fb7d 	bl	8001e8c <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x78>
		Error_Handler();
 8000798:	f000 f8ce 	bl	8000938 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007a6:	4619      	mov	r1, r3
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <MX_TIM1_Init+0x138>)
 80007aa:	f001 ff2d 	bl	8002608 <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0x94>
		Error_Handler();
 80007b4:	f000 f8c0 	bl	8000938 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80007b8:	4828      	ldr	r0, [pc, #160]	; (800085c <MX_TIM1_Init+0x138>)
 80007ba:	f001 fbb6 	bl	8001f2a <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0xa4>
		Error_Handler();
 80007c4:	f000 f8b8 	bl	8000938 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80007d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d4:	4619      	mov	r1, r3
 80007d6:	4821      	ldr	r0, [pc, #132]	; (800085c <MX_TIM1_Init+0x138>)
 80007d8:	f002 fb62 	bl	8002ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 80007e2:	f000 f8a9 	bl	8000938 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2360      	movs	r3, #96	; 0x60
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_TIM1_Init+0x138>)
 800080c:	f001 fe3e 	bl	800248c <HAL_TIM_PWM_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8000816:	f000 f88f 	bl	8000938 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800082e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000832:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4807      	ldr	r0, [pc, #28]	; (800085c <MX_TIM1_Init+0x138>)
 800083e:	f002 fb8d 	bl	8002f5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8000848:	f000 f876 	bl	8000938 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <MX_TIM1_Init+0x138>)
 800084e:	f000 f8f3 	bl	8000a38 <HAL_TIM_MspPostInit>

}
 8000852:	bf00      	nop
 8000854:	3758      	adds	r7, #88	; 0x58
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000070 	.word	0x20000070
 8000860:	40012c00 	.word	0x40012c00

08000864 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_DMA_Init+0x38>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <MX_DMA_Init+0x38>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_DMA_Init+0x38>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	200c      	movs	r0, #12
 8000888:	f000 fac7 	bl	8000e1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800088c:	200c      	movs	r0, #12
 800088e:	f000 fae0 	bl	8000e52 <HAL_NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_GPIO_Init+0x90>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <MX_GPIO_Init+0x90>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_GPIO_Init+0x90>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0310 	and.w	r3, r3, #16
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_GPIO_Init+0x90>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <MX_GPIO_Init+0x90>)
 80008d2:	f043 0320 	orr.w	r3, r3, #32
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_GPIO_Init+0x90>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0320 	and.w	r3, r3, #32
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_GPIO_Init+0x90>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <MX_GPIO_Init+0x90>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_GPIO_Init+0x90>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_GPIO_Init+0x94>)
 8000904:	f000 fea8 	bl	8001658 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2302      	movs	r3, #2
 8000918:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	4619      	mov	r1, r3
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_GPIO_Init+0x94>)
 8000922:	f000 fd15 	bl	8001350 <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000
 8000934:	40011000 	.word	0x40011000

08000938 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_MspInit+0x5c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <HAL_MspInit+0x5c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_MspInit+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x5c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x5c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_MspInit+0x60>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_MspInit+0x60>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010000 	.word	0x40010000

080009a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <HAL_TIM_Base_MspInit+0x80>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d132      	bne.n	8000a20 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_TIM_Base_MspInit+0x84>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <HAL_TIM_Base_MspInit+0x84>)
 80009c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c4:	6193      	str	r3, [r2, #24]
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_TIM_Base_MspInit+0x84>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 80009d4:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_TIM_Base_MspInit+0x8c>)
 80009d6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 80009da:	2210      	movs	r2, #16
 80009dc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000a04:	480a      	ldr	r0, [pc, #40]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 8000a06:	f000 fa3f 	bl	8000e88 <HAL_DMA_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8000a10:	f7ff ff92 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <HAL_TIM_Base_MspInit+0x88>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40012c00 	.word	0x40012c00
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	200000b8 	.word	0x200000b8
 8000a34:	4002001c 	.word	0x4002001c

08000a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_TIM_MspPostInit+0x5c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d118      	bne.n	8000a8a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_TIM_MspPostInit+0x60>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_TIM_MspPostInit+0x60>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_TIM_MspPostInit+0x60>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_TIM_MspPostInit+0x64>)
 8000a86:	f000 fc63 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40012c00 	.word	0x40012c00
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010800 	.word	0x40010800

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <MemManage_Handler+0x4>

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <BusFault_Handler+0x4>

08000abe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f87e 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <DMA1_Channel2_IRQHandler+0x10>)
 8000afa:	f000 faf5 	bl	80010e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000b8 	.word	0x200000b8

08000b08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b16:	e003      	b.n	8000b20 <LoopCopyDataInit>

08000b18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b1e:	3104      	adds	r1, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b28:	d3f6      	bcc.n	8000b18 <CopyDataInit>
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b2c:	e002      	b.n	8000b34 <LoopFillZerobss>

08000b2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b30:	f842 3b04 	str.w	r3, [r2], #4

08000b34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b38:	d3f9      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b3a:	f7ff ffe5 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f002 fa67 	bl	8003010 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b42:	f7ff fd63 	bl	800060c <main>
  bx lr
 8000b46:	4770      	bx	lr
  ldr r3, =_sidata
 8000b48:	0800309c 	.word	0x0800309c
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b50:	20000054 	.word	0x20000054
  ldr r2, =_sbss
 8000b54:	20000054 	.word	0x20000054
  ldr r3, = _ebss
 8000b58:	20000704 	.word	0x20000704

08000b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_2_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x28>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x28>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f947 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fee2 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f95f 	bl	8000e6e <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f927 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000048 	.word	0x20000048
 8000be4:	20000050 	.word	0x20000050
 8000be8:	2000004c 	.word	0x2000004c

08000bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x1c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x20>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <HAL_IncTick+0x20>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	20000050 	.word	0x20000050
 8000c0c:	20000700 	.word	0x20000700

08000c10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <HAL_GetTick+0x10>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	20000700 	.word	0x20000700

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff fff0 	bl	8000c10 <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffe0 	bl	8000c10 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000050 	.word	0x20000050

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4906      	ldr	r1, [pc, #24]	; (8000d04 <__NVIC_EnableIRQ+0x34>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff90 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff2d 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff42 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff35 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e043      	b.n	8000f26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_DMA_Init+0xa8>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <HAL_DMA_Init+0xac>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	009a      	lsls	r2, r3, #2
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_DMA_Init+0xb0>)
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ed2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ed6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	bffdfff8 	.word	0xbffdfff8
 8000f34:	cccccccd 	.word	0xcccccccd
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_DMA_Start_IT+0x20>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e04a      	b.n	8000ff2 <HAL_DMA_Start_IT+0xb6>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d13a      	bne.n	8000fe4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2202      	movs	r2, #2
 8000f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f000 f9ae 	bl	80012f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 020e 	orr.w	r2, r2, #14
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e00f      	b.n	8000fd2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0204 	bic.w	r2, r2, #4
 8000fc0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 020a 	orr.w	r2, r2, #10
 8000fd0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0201 	orr.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e005      	b.n	8000ff0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fec:	2302      	movs	r3, #2
 8000fee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800100e:	2b02      	cmp	r3, #2
 8001010:	d005      	beq.n	800101e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2204      	movs	r2, #4
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e051      	b.n	80010c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 020e 	bic.w	r2, r2, #14
 800102c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a22      	ldr	r2, [pc, #136]	; (80010cc <HAL_DMA_Abort_IT+0xd0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d029      	beq.n	800109c <HAL_DMA_Abort_IT+0xa0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <HAL_DMA_Abort_IT+0xd4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d022      	beq.n	8001098 <HAL_DMA_Abort_IT+0x9c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <HAL_DMA_Abort_IT+0xd8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d01a      	beq.n	8001092 <HAL_DMA_Abort_IT+0x96>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_DMA_Abort_IT+0xdc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d012      	beq.n	800108c <HAL_DMA_Abort_IT+0x90>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_DMA_Abort_IT+0xe0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d00a      	beq.n	8001086 <HAL_DMA_Abort_IT+0x8a>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <HAL_DMA_Abort_IT+0xe4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d102      	bne.n	8001080 <HAL_DMA_Abort_IT+0x84>
 800107a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800107e:	e00e      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 8001080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001084:	e00b      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 8001086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108a:	e008      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	e005      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 8001092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001096:	e002      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 8001098:	2310      	movs	r3, #16
 800109a:	e000      	b.n	800109e <HAL_DMA_Abort_IT+0xa2>
 800109c:	2301      	movs	r3, #1
 800109e:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <HAL_DMA_Abort_IT+0xe8>)
 80010a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	4798      	blx	r3
    } 
  }
  return status;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020008 	.word	0x40020008
 80010d0:	4002001c 	.word	0x4002001c
 80010d4:	40020030 	.word	0x40020030
 80010d8:	40020044 	.word	0x40020044
 80010dc:	40020058 	.word	0x40020058
 80010e0:	4002006c 	.word	0x4002006c
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	2204      	movs	r2, #4
 8001106:	409a      	lsls	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d04f      	beq.n	80011b0 <HAL_DMA_IRQHandler+0xc8>
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b00      	cmp	r3, #0
 8001118:	d04a      	beq.n	80011b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0320 	and.w	r3, r3, #32
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0204 	bic.w	r2, r2, #4
 8001136:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a66      	ldr	r2, [pc, #408]	; (80012d8 <HAL_DMA_IRQHandler+0x1f0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d029      	beq.n	8001196 <HAL_DMA_IRQHandler+0xae>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a65      	ldr	r2, [pc, #404]	; (80012dc <HAL_DMA_IRQHandler+0x1f4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d022      	beq.n	8001192 <HAL_DMA_IRQHandler+0xaa>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a63      	ldr	r2, [pc, #396]	; (80012e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01a      	beq.n	800118c <HAL_DMA_IRQHandler+0xa4>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a62      	ldr	r2, [pc, #392]	; (80012e4 <HAL_DMA_IRQHandler+0x1fc>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d012      	beq.n	8001186 <HAL_DMA_IRQHandler+0x9e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a60      	ldr	r2, [pc, #384]	; (80012e8 <HAL_DMA_IRQHandler+0x200>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00a      	beq.n	8001180 <HAL_DMA_IRQHandler+0x98>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a5f      	ldr	r2, [pc, #380]	; (80012ec <HAL_DMA_IRQHandler+0x204>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d102      	bne.n	800117a <HAL_DMA_IRQHandler+0x92>
 8001174:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001178:	e00e      	b.n	8001198 <HAL_DMA_IRQHandler+0xb0>
 800117a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800117e:	e00b      	b.n	8001198 <HAL_DMA_IRQHandler+0xb0>
 8001180:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001184:	e008      	b.n	8001198 <HAL_DMA_IRQHandler+0xb0>
 8001186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118a:	e005      	b.n	8001198 <HAL_DMA_IRQHandler+0xb0>
 800118c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001190:	e002      	b.n	8001198 <HAL_DMA_IRQHandler+0xb0>
 8001192:	2340      	movs	r3, #64	; 0x40
 8001194:	e000      	b.n	8001198 <HAL_DMA_IRQHandler+0xb0>
 8001196:	2304      	movs	r3, #4
 8001198:	4a55      	ldr	r2, [pc, #340]	; (80012f0 <HAL_DMA_IRQHandler+0x208>)
 800119a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8094 	beq.w	80012ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011ae:	e08e      	b.n	80012ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	2202      	movs	r2, #2
 80011b6:	409a      	lsls	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d056      	beq.n	800126e <HAL_DMA_IRQHandler+0x186>
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d051      	beq.n	800126e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10b      	bne.n	80011f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 020a 	bic.w	r2, r2, #10
 80011e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a38      	ldr	r2, [pc, #224]	; (80012d8 <HAL_DMA_IRQHandler+0x1f0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d029      	beq.n	800124e <HAL_DMA_IRQHandler+0x166>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a37      	ldr	r2, [pc, #220]	; (80012dc <HAL_DMA_IRQHandler+0x1f4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d022      	beq.n	800124a <HAL_DMA_IRQHandler+0x162>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <HAL_DMA_IRQHandler+0x1f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01a      	beq.n	8001244 <HAL_DMA_IRQHandler+0x15c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a34      	ldr	r2, [pc, #208]	; (80012e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d012      	beq.n	800123e <HAL_DMA_IRQHandler+0x156>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a32      	ldr	r2, [pc, #200]	; (80012e8 <HAL_DMA_IRQHandler+0x200>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d00a      	beq.n	8001238 <HAL_DMA_IRQHandler+0x150>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a31      	ldr	r2, [pc, #196]	; (80012ec <HAL_DMA_IRQHandler+0x204>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d102      	bne.n	8001232 <HAL_DMA_IRQHandler+0x14a>
 800122c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001230:	e00e      	b.n	8001250 <HAL_DMA_IRQHandler+0x168>
 8001232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001236:	e00b      	b.n	8001250 <HAL_DMA_IRQHandler+0x168>
 8001238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123c:	e008      	b.n	8001250 <HAL_DMA_IRQHandler+0x168>
 800123e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001242:	e005      	b.n	8001250 <HAL_DMA_IRQHandler+0x168>
 8001244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001248:	e002      	b.n	8001250 <HAL_DMA_IRQHandler+0x168>
 800124a:	2320      	movs	r3, #32
 800124c:	e000      	b.n	8001250 <HAL_DMA_IRQHandler+0x168>
 800124e:	2302      	movs	r3, #2
 8001250:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <HAL_DMA_IRQHandler+0x208>)
 8001252:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	2b00      	cmp	r3, #0
 8001262:	d034      	beq.n	80012ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800126c:	e02f      	b.n	80012ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	2208      	movs	r2, #8
 8001274:	409a      	lsls	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d028      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x1e8>
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d023      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 020e 	bic.w	r2, r2, #14
 8001296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f202 	lsl.w	r2, r1, r2
 80012a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	4798      	blx	r3
    }
  }
  return;
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
}
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40020008 	.word	0x40020008
 80012dc:	4002001c 	.word	0x4002001c
 80012e0:	40020030 	.word	0x40020030
 80012e4:	40020044 	.word	0x40020044
 80012e8:	40020058 	.word	0x40020058
 80012ec:	4002006c 	.word	0x4002006c
 80012f0:	40020000 	.word	0x40020000

080012f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b10      	cmp	r3, #16
 8001320:	d108      	bne.n	8001334 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001332:	e007      	b.n	8001344 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	60da      	str	r2, [r3, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b08b      	sub	sp, #44	; 0x2c
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	e169      	b.n	8001638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001364:	2201      	movs	r2, #1
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 8158 	bne.w	8001632 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4a9a      	ldr	r2, [pc, #616]	; (80015f0 <HAL_GPIO_Init+0x2a0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d05e      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 800138c:	4a98      	ldr	r2, [pc, #608]	; (80015f0 <HAL_GPIO_Init+0x2a0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d875      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 8001392:	4a98      	ldr	r2, [pc, #608]	; (80015f4 <HAL_GPIO_Init+0x2a4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d058      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 8001398:	4a96      	ldr	r2, [pc, #600]	; (80015f4 <HAL_GPIO_Init+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d86f      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 800139e:	4a96      	ldr	r2, [pc, #600]	; (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d052      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013a4:	4a94      	ldr	r2, [pc, #592]	; (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d869      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013aa:	4a94      	ldr	r2, [pc, #592]	; (80015fc <HAL_GPIO_Init+0x2ac>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d04c      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013b0:	4a92      	ldr	r2, [pc, #584]	; (80015fc <HAL_GPIO_Init+0x2ac>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d863      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013b6:	4a92      	ldr	r2, [pc, #584]	; (8001600 <HAL_GPIO_Init+0x2b0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d046      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013bc:	4a90      	ldr	r2, [pc, #576]	; (8001600 <HAL_GPIO_Init+0x2b0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d85d      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d82a      	bhi.n	800141c <HAL_GPIO_Init+0xcc>
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d859      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013ca:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <HAL_GPIO_Init+0x80>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	0800144b 	.word	0x0800144b
 80013d4:	08001425 	.word	0x08001425
 80013d8:	08001437 	.word	0x08001437
 80013dc:	08001479 	.word	0x08001479
 80013e0:	0800147f 	.word	0x0800147f
 80013e4:	0800147f 	.word	0x0800147f
 80013e8:	0800147f 	.word	0x0800147f
 80013ec:	0800147f 	.word	0x0800147f
 80013f0:	0800147f 	.word	0x0800147f
 80013f4:	0800147f 	.word	0x0800147f
 80013f8:	0800147f 	.word	0x0800147f
 80013fc:	0800147f 	.word	0x0800147f
 8001400:	0800147f 	.word	0x0800147f
 8001404:	0800147f 	.word	0x0800147f
 8001408:	0800147f 	.word	0x0800147f
 800140c:	0800147f 	.word	0x0800147f
 8001410:	0800147f 	.word	0x0800147f
 8001414:	0800142d 	.word	0x0800142d
 8001418:	08001441 	.word	0x08001441
 800141c:	4a79      	ldr	r2, [pc, #484]	; (8001604 <HAL_GPIO_Init+0x2b4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001422:	e02c      	b.n	800147e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e029      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	3304      	adds	r3, #4
 8001432:	623b      	str	r3, [r7, #32]
          break;
 8001434:	e024      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	3308      	adds	r3, #8
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e01f      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	330c      	adds	r3, #12
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e01a      	b.n	8001480 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001452:	2304      	movs	r3, #4
 8001454:	623b      	str	r3, [r7, #32]
          break;
 8001456:	e013      	b.n	8001480 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	611a      	str	r2, [r3, #16]
          break;
 800146a:	e009      	b.n	8001480 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	615a      	str	r2, [r3, #20]
          break;
 8001476:	e003      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x130>
          break;
 800147e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2bff      	cmp	r3, #255	; 0xff
 8001484:	d801      	bhi.n	800148a <HAL_GPIO_Init+0x13a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	e001      	b.n	800148e <HAL_GPIO_Init+0x13e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3304      	adds	r3, #4
 800148e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	; 0xff
 8001494:	d802      	bhi.n	800149c <HAL_GPIO_Init+0x14c>
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x152>
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	3b08      	subs	r3, #8
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	210f      	movs	r1, #15
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	6a39      	ldr	r1, [r7, #32]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	431a      	orrs	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80b1 	beq.w	8001632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d0:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a4c      	ldr	r2, [pc, #304]	; (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e8:	4a48      	ldr	r2, [pc, #288]	; (800160c <HAL_GPIO_Init+0x2bc>)
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a40      	ldr	r2, [pc, #256]	; (8001610 <HAL_GPIO_Init+0x2c0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_Init+0x1ec>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3f      	ldr	r2, [pc, #252]	; (8001614 <HAL_GPIO_Init+0x2c4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1e8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3e      	ldr	r2, [pc, #248]	; (8001618 <HAL_GPIO_Init+0x2c8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1e4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3d      	ldr	r2, [pc, #244]	; (800161c <HAL_GPIO_Init+0x2cc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1e0>
 800152c:	2303      	movs	r3, #3
 800152e:	e006      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001530:	2304      	movs	r3, #4
 8001532:	e004      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001534:	2302      	movs	r3, #2
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 800153c:	2300      	movs	r3, #0
 800153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001540:	f002 0203 	and.w	r2, r2, #3
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	4093      	lsls	r3, r2
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154e:	492f      	ldr	r1, [pc, #188]	; (800160c <HAL_GPIO_Init+0x2bc>)
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	492c      	ldr	r1, [pc, #176]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	4928      	ldr	r1, [pc, #160]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001580:	4013      	ands	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4922      	ldr	r1, [pc, #136]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	491e      	ldr	r1, [pc, #120]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	4918      	ldr	r1, [pc, #96]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4914      	ldr	r1, [pc, #80]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d021      	beq.n	8001624 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60cb      	str	r3, [r1, #12]
 80015ec:	e021      	b.n	8001632 <HAL_GPIO_Init+0x2e2>
 80015ee:	bf00      	nop
 80015f0:	10320000 	.word	0x10320000
 80015f4:	10310000 	.word	0x10310000
 80015f8:	10220000 	.word	0x10220000
 80015fc:	10210000 	.word	0x10210000
 8001600:	10120000 	.word	0x10120000
 8001604:	10110000 	.word	0x10110000
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000
 8001610:	40010800 	.word	0x40010800
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40011000 	.word	0x40011000
 800161c:	40011400 	.word	0x40011400
 8001620:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_GPIO_Init+0x304>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	43db      	mvns	r3, r3
 800162c:	4909      	ldr	r1, [pc, #36]	; (8001654 <HAL_GPIO_Init+0x304>)
 800162e:	4013      	ands	r3, r2
 8001630:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	f47f ae8e 	bne.w	8001364 <HAL_GPIO_Init+0x14>
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	372c      	adds	r7, #44	; 0x2c
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	611a      	str	r2, [r3, #16]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	041a      	lsls	r2, r3, #16
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43d9      	mvns	r1, r3
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	400b      	ands	r3, r1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e272      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8087 	beq.w	80017ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016dc:	4b92      	ldr	r3, [pc, #584]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d00c      	beq.n	8001702 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e8:	4b8f      	ldr	r3, [pc, #572]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d112      	bne.n	800171a <HAL_RCC_OscConfig+0x5e>
 80016f4:	4b8c      	ldr	r3, [pc, #560]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001700:	d10b      	bne.n	800171a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	4b89      	ldr	r3, [pc, #548]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d06c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x12c>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d168      	bne.n	80017e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e24c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x76>
 8001724:	4b80      	ldr	r3, [pc, #512]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a7f      	ldr	r2, [pc, #508]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e02e      	b.n	8001790 <HAL_RCC_OscConfig+0xd4>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x98>
 800173a:	4b7b      	ldr	r3, [pc, #492]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7a      	ldr	r2, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b78      	ldr	r3, [pc, #480]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a77      	ldr	r2, [pc, #476]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800174c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e01d      	b.n	8001790 <HAL_RCC_OscConfig+0xd4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0xbc>
 800175e:	4b72      	ldr	r3, [pc, #456]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a71      	ldr	r2, [pc, #452]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b6f      	ldr	r3, [pc, #444]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a6e      	ldr	r2, [pc, #440]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0xd4>
 8001778:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a6a      	ldr	r2, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b68      	ldr	r3, [pc, #416]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a67      	ldr	r2, [pc, #412]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fa3a 	bl	8000c10 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fa36 	bl	8000c10 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e200      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b5d      	ldr	r3, [pc, #372]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0xe4>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fa26 	bl	8000c10 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fa22 	bl	8000c10 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1ec      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x10c>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d063      	beq.n	80018be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f6:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001802:	4b49      	ldr	r3, [pc, #292]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d11c      	bne.n	8001848 <HAL_RCC_OscConfig+0x18c>
 800180e:	4b46      	ldr	r3, [pc, #280]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	4b43      	ldr	r3, [pc, #268]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x176>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1c0      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b3d      	ldr	r3, [pc, #244]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4939      	ldr	r1, [pc, #228]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	e03a      	b.n	80018be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001850:	4b36      	ldr	r3, [pc, #216]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff f9db 	bl	8000c10 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff f9d7 	bl	8000c10 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1a1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4927      	ldr	r1, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff f9ba 	bl	8000c10 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff f9b6 	bl	8000c10 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e180      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d03a      	beq.n	8001940 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d019      	beq.n	8001906 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_RCC_OscConfig+0x274>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff f99a 	bl	8000c10 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff f996 	bl	8000c10 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e160      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018fe:	2001      	movs	r0, #1
 8001900:	f000 faa6 	bl	8001e50 <RCC_Delay>
 8001904:	e01c      	b.n	8001940 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_RCC_OscConfig+0x274>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff f980 	bl	8000c10 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001912:	e00f      	b.n	8001934 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff f97c 	bl	8000c10 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d908      	bls.n	8001934 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e146      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	42420000 	.word	0x42420000
 8001930:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	4b92      	ldr	r3, [pc, #584]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e9      	bne.n	8001914 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a6 	beq.w	8001a9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001952:	4b8b      	ldr	r3, [pc, #556]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10d      	bne.n	800197a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a87      	ldr	r2, [pc, #540]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b85      	ldr	r3, [pc, #532]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001976:	2301      	movs	r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b82      	ldr	r3, [pc, #520]	; (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d118      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7e      	ldr	r2, [pc, #504]	; (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001992:	f7ff f93d 	bl	8000c10 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199a:	f7ff f939 	bl	8000c10 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b64      	cmp	r3, #100	; 0x64
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e103      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x312>
 80019c0:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a6e      	ldr	r2, [pc, #440]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	e02d      	b.n	8001a2a <HAL_RCC_OscConfig+0x36e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x334>
 80019d6:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a69      	ldr	r2, [pc, #420]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a66      	ldr	r2, [pc, #408]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6213      	str	r3, [r2, #32]
 80019ee:	e01c      	b.n	8001a2a <HAL_RCC_OscConfig+0x36e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	d10c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x356>
 80019f8:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a60      	ldr	r2, [pc, #384]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	4b5e      	ldr	r3, [pc, #376]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a5d      	ldr	r2, [pc, #372]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	e00b      	b.n	8001a2a <HAL_RCC_OscConfig+0x36e>
 8001a12:	4b5b      	ldr	r3, [pc, #364]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a5a      	ldr	r2, [pc, #360]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	4b58      	ldr	r3, [pc, #352]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a57      	ldr	r2, [pc, #348]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d015      	beq.n	8001a5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff f8ed 	bl	8000c10 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f8e9 	bl	8000c10 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0b1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0ee      	beq.n	8001a3a <HAL_RCC_OscConfig+0x37e>
 8001a5c:	e014      	b.n	8001a88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f8d7 	bl	8000c10 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff f8d3 	bl	8000c10 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e09b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ee      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d105      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a3b      	ldr	r2, [pc, #236]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8087 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d061      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d146      	bne.n	8001b46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff f8a7 	bl	8000c10 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff f8a3 	bl	8000c10 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e06d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aec:	d108      	bne.n	8001b00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4921      	ldr	r1, [pc, #132]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a19      	ldr	r1, [r3, #32]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	430b      	orrs	r3, r1
 8001b12:	491b      	ldr	r1, [pc, #108]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f877 	bl	8000c10 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff f873 	bl	8000c10 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e03d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x46a>
 8001b44:	e035      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f860 	bl	8000c10 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f85c 	bl	8000c10 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e026      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x498>
 8001b72:	e01e      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e019      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40007000 	.word	0x40007000
 8001b88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_OscConfig+0x500>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0d0      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b6a      	ldr	r3, [pc, #424]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d910      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4965      	ldr	r1, [pc, #404]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b8      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c1c:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	494d      	ldr	r1, [pc, #308]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d040      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d115      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e073      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e06b      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4936      	ldr	r1, [pc, #216]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7fe ffae 	bl	8000c10 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7fe ffaa 	bl	8000c10 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e053      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d210      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0207 	bic.w	r2, r3, #7
 8001cf6:	4922      	ldr	r1, [pc, #136]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e032      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4916      	ldr	r1, [pc, #88]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	490e      	ldr	r1, [pc, #56]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d4e:	f000 f821 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	490a      	ldr	r1, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	5ccb      	ldrb	r3, [r1, r3]
 8001d62:	fa22 f303 	lsr.w	r3, r2, r3
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x1cc>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x1d0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe ff0c 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	08003084 	.word	0x08003084
 8001d8c:	20000048 	.word	0x20000048
 8001d90:	2000004c 	.word	0x2000004c

08001d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	b490      	push	{r4, r7}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d9a:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d9c:	1d3c      	adds	r4, r7, #4
 8001d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001da4:	f240 2301 	movw	r3, #513	; 0x201
 8001da8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d002      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0x46>
 8001dd2:	e02b      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dd6:	623b      	str	r3, [r7, #32]
      break;
 8001dd8:	e02b      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	0c9b      	lsrs	r3, r3, #18
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3328      	adds	r3, #40	; 0x28
 8001de4:	443b      	add	r3, r7
 8001de6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0c5b      	lsrs	r3, r3, #17
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	3328      	adds	r3, #40	; 0x28
 8001e02:	443b      	add	r3, r7
 8001e04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e0e:	fb03 f202 	mul.w	r2, r3, r2
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1a:	e004      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	623b      	str	r3, [r7, #32]
      break;
 8001e2a:	e002      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e2e:	623b      	str	r3, [r7, #32]
      break;
 8001e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e32:	6a3b      	ldr	r3, [r7, #32]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc90      	pop	{r4, r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	08003074 	.word	0x08003074
 8001e44:	40021000 	.word	0x40021000
 8001e48:	007a1200 	.word	0x007a1200
 8001e4c:	003d0900 	.word	0x003d0900

08001e50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <RCC_Delay+0x34>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <RCC_Delay+0x38>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	0a5b      	lsrs	r3, r3, #9
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e6c:	bf00      	nop
  }
  while (Delay --);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	60fa      	str	r2, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f9      	bne.n	8001e6c <RCC_Delay+0x1c>
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	20000048 	.word	0x20000048
 8001e88:	10624dd3 	.word	0x10624dd3

08001e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e041      	b.n	8001f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe fd78 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f000 fd44 	bl	8002958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e041      	b.n	8001fc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f839 	bl	8001fc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3304      	adds	r3, #4
 8001f66:	4619      	mov	r1, r3
 8001f68:	4610      	mov	r0, r2
 8001f6a:	f000 fcf5 	bl	8002958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_TIM_PWM_Start_DMA+0x28>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e022      	b.n	800204a <HAL_TIM_PWM_Start_DMA+0x6e>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b04      	cmp	r3, #4
 8002008:	d109      	bne.n	800201e <HAL_TIM_PWM_Start_DMA+0x42>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	bf0c      	ite	eq
 8002016:	2301      	moveq	r3, #1
 8002018:	2300      	movne	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	e015      	b.n	800204a <HAL_TIM_PWM_Start_DMA+0x6e>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d109      	bne.n	8002038 <HAL_TIM_PWM_Start_DMA+0x5c>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	e008      	b.n	800204a <HAL_TIM_PWM_Start_DMA+0x6e>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800204e:	2302      	movs	r3, #2
 8002050:	e14e      	b.n	80022f0 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <HAL_TIM_PWM_Start_DMA+0x90>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e022      	b.n	80020b2 <HAL_TIM_PWM_Start_DMA+0xd6>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d109      	bne.n	8002086 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	e015      	b.n	80020b2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b08      	cmp	r3, #8
 800208a:	d109      	bne.n	80020a0 <HAL_TIM_PWM_Start_DMA+0xc4>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	e008      	b.n	80020b2 <HAL_TIM_PWM_Start_DMA+0xd6>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d024      	beq.n	8002100 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_PWM_Start_DMA+0xea>
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e114      	b.n	80022f0 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PWM_Start_DMA+0xfa>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d4:	e016      	b.n	8002104 <HAL_TIM_PWM_Start_DMA+0x128>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d104      	bne.n	80020e6 <HAL_TIM_PWM_Start_DMA+0x10a>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e4:	e00e      	b.n	8002104 <HAL_TIM_PWM_Start_DMA+0x128>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d104      	bne.n	80020f6 <HAL_TIM_PWM_Start_DMA+0x11a>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f4:	e006      	b.n	8002104 <HAL_TIM_PWM_Start_DMA+0x128>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020fe:	e001      	b.n	8002104 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0f5      	b.n	80022f0 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	f200 80ae 	bhi.w	8002268 <HAL_TIM_PWM_Start_DMA+0x28c>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <HAL_TIM_PWM_Start_DMA+0x138>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	08002149 	.word	0x08002149
 8002118:	08002269 	.word	0x08002269
 800211c:	08002269 	.word	0x08002269
 8002120:	08002269 	.word	0x08002269
 8002124:	08002191 	.word	0x08002191
 8002128:	08002269 	.word	0x08002269
 800212c:	08002269 	.word	0x08002269
 8002130:	08002269 	.word	0x08002269
 8002134:	080021d9 	.word	0x080021d9
 8002138:	08002269 	.word	0x08002269
 800213c:	08002269 	.word	0x08002269
 8002140:	08002269 	.word	0x08002269
 8002144:	08002221 	.word	0x08002221
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	4a6a      	ldr	r2, [pc, #424]	; (80022f8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	4a69      	ldr	r2, [pc, #420]	; (80022fc <HAL_TIM_PWM_Start_DMA+0x320>)
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	4a68      	ldr	r2, [pc, #416]	; (8002300 <HAL_TIM_PWM_Start_DMA+0x324>)
 800215e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3334      	adds	r3, #52	; 0x34
 800216c:	461a      	mov	r2, r3
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	f7fe fee4 	bl	8000f3c <HAL_DMA_Start_IT>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_TIM_PWM_Start_DMA+0x1a2>
      {
        /* Return error status */
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0b8      	b.n	80022f0 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218c:	60da      	str	r2, [r3, #12]
      break;
 800218e:	e06c      	b.n	800226a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_TIM_PWM_Start_DMA+0x320>)
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_TIM_PWM_Start_DMA+0x324>)
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3338      	adds	r3, #56	; 0x38
 80021b4:	461a      	mov	r2, r3
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	f7fe fec0 	bl	8000f3c <HAL_DMA_Start_IT>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_TIM_PWM_Start_DMA+0x1ea>
      {
        /* Return error status */
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e094      	b.n	80022f0 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d4:	60da      	str	r2, [r3, #12]
      break;
 80021d6:	e048      	b.n	800226a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	4a46      	ldr	r2, [pc, #280]	; (80022f8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	4a45      	ldr	r2, [pc, #276]	; (80022fc <HAL_TIM_PWM_Start_DMA+0x320>)
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	4a44      	ldr	r2, [pc, #272]	; (8002300 <HAL_TIM_PWM_Start_DMA+0x324>)
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	333c      	adds	r3, #60	; 0x3c
 80021fc:	461a      	mov	r2, r3
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	f7fe fe9c 	bl	8000f3c <HAL_DMA_Start_IT>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_TIM_PWM_Start_DMA+0x232>
      {
        /* Return error status */
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e070      	b.n	80022f0 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221c:	60da      	str	r2, [r3, #12]
      break;
 800221e:	e024      	b.n	800226a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_TIM_PWM_Start_DMA+0x320>)
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	4a32      	ldr	r2, [pc, #200]	; (8002300 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002236:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3340      	adds	r3, #64	; 0x40
 8002244:	461a      	mov	r2, r3
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	f7fe fe78 	bl	8000f3c <HAL_DMA_Start_IT>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_TIM_PWM_Start_DMA+0x27a>
      {
        /* Return error status */
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e04c      	b.n	80022f0 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002264:	60da      	str	r2, [r3, #12]
      break;
 8002266:	e000      	b.n	800226a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8002268:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2201      	movs	r2, #1
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fdf0 	bl	8002e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_TIM_PWM_Start_DMA+0x328>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d107      	bne.n	8002292 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00e      	beq.n	80022ba <HAL_TIM_PWM_Start_DMA+0x2de>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a4:	d009      	beq.n	80022ba <HAL_TIM_PWM_Start_DMA+0x2de>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d004      	beq.n	80022ba <HAL_TIM_PWM_Start_DMA+0x2de>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a15      	ldr	r2, [pc, #84]	; (800230c <HAL_TIM_PWM_Start_DMA+0x330>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d111      	bne.n	80022de <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d010      	beq.n	80022ee <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022dc:	e007      	b.n	80022ee <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	08002847 	.word	0x08002847
 80022fc:	080028ef 	.word	0x080028ef
 8002300:	080027b5 	.word	0x080027b5
 8002304:	40012c00 	.word	0x40012c00
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800

08002310 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b0c      	cmp	r3, #12
 800231e:	d855      	bhi.n	80023cc <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	0800235d 	.word	0x0800235d
 800232c:	080023cd 	.word	0x080023cd
 8002330:	080023cd 	.word	0x080023cd
 8002334:	080023cd 	.word	0x080023cd
 8002338:	08002379 	.word	0x08002379
 800233c:	080023cd 	.word	0x080023cd
 8002340:	080023cd 	.word	0x080023cd
 8002344:	080023cd 	.word	0x080023cd
 8002348:	08002395 	.word	0x08002395
 800234c:	080023cd 	.word	0x080023cd
 8002350:	080023cd 	.word	0x080023cd
 8002354:	080023cd 	.word	0x080023cd
 8002358:	080023b1 	.word	0x080023b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800236a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fe43 	bl	8000ffc <HAL_DMA_Abort_IT>
      break;
 8002376:	e02a      	b.n	80023ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002386:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fe35 	bl	8000ffc <HAL_DMA_Abort_IT>
      break;
 8002392:	e01c      	b.n	80023ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fe27 	bl	8000ffc <HAL_DMA_Abort_IT>
      break;
 80023ae:	e00e      	b.n	80023ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fe19 	bl	8000ffc <HAL_DMA_Abort_IT>
      break;
 80023ca:	e000      	b.n	80023ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80023cc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fd3e 	bl	8002e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a29      	ldr	r2, [pc, #164]	; (8002488 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d117      	bne.n	8002416 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a1a      	ldr	r2, [r3, #32]
 80023ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_TIM_PWM_Stop_DMA+0x106>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	f240 4344 	movw	r3, #1092	; 0x444
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a1a      	ldr	r2, [r3, #32]
 800242c:	f240 4344 	movw	r3, #1092	; 0x444
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d107      	bne.n	8002446 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <HAL_TIM_PWM_Stop_DMA+0x146>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002454:	e013      	b.n	800247e <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d104      	bne.n	8002466 <HAL_TIM_PWM_Stop_DMA+0x156>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002464:	e00b      	b.n	800247e <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d104      	bne.n	8002476 <HAL_TIM_PWM_Stop_DMA+0x166>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002474:	e003      	b.n	800247e <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40012c00 	.word	0x40012c00

0800248c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e0ac      	b.n	8002600 <HAL_TIM_PWM_ConfigChannel+0x174>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	f200 809f 	bhi.w	80025f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	080025f5 	.word	0x080025f5
 80024c4:	080025f5 	.word	0x080025f5
 80024c8:	080025f5 	.word	0x080025f5
 80024cc:	08002531 	.word	0x08002531
 80024d0:	080025f5 	.word	0x080025f5
 80024d4:	080025f5 	.word	0x080025f5
 80024d8:	080025f5 	.word	0x080025f5
 80024dc:	08002573 	.word	0x08002573
 80024e0:	080025f5 	.word	0x080025f5
 80024e4:	080025f5 	.word	0x080025f5
 80024e8:	080025f5 	.word	0x080025f5
 80024ec:	080025b3 	.word	0x080025b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fa90 	bl	8002a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0208 	orr.w	r2, r2, #8
 800250a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6999      	ldr	r1, [r3, #24]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	619a      	str	r2, [r3, #24]
      break;
 800252e:	e062      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fad6 	bl	8002ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	619a      	str	r2, [r3, #24]
      break;
 8002570:	e041      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fb1f 	bl	8002bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0208 	orr.w	r2, r2, #8
 800258c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0204 	bic.w	r2, r2, #4
 800259c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	61da      	str	r2, [r3, #28]
      break;
 80025b0:	e021      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fb69 	bl	8002c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69d9      	ldr	r1, [r3, #28]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	021a      	lsls	r2, r3, #8
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	61da      	str	r2, [r3, #28]
      break;
 80025f2:	e000      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80025f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_TIM_ConfigClockSource+0x18>
 800261c:	2302      	movs	r3, #2
 800261e:	e0b3      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x180>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800263e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002646:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002658:	d03e      	beq.n	80026d8 <HAL_TIM_ConfigClockSource+0xd0>
 800265a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265e:	f200 8087 	bhi.w	8002770 <HAL_TIM_ConfigClockSource+0x168>
 8002662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002666:	f000 8085 	beq.w	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266e:	d87f      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x168>
 8002670:	2b70      	cmp	r3, #112	; 0x70
 8002672:	d01a      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0xa2>
 8002674:	2b70      	cmp	r3, #112	; 0x70
 8002676:	d87b      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x168>
 8002678:	2b60      	cmp	r3, #96	; 0x60
 800267a:	d050      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x116>
 800267c:	2b60      	cmp	r3, #96	; 0x60
 800267e:	d877      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x168>
 8002680:	2b50      	cmp	r3, #80	; 0x50
 8002682:	d03c      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xf6>
 8002684:	2b50      	cmp	r3, #80	; 0x50
 8002686:	d873      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x168>
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d058      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x136>
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d86f      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x168>
 8002690:	2b30      	cmp	r3, #48	; 0x30
 8002692:	d064      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x156>
 8002694:	2b30      	cmp	r3, #48	; 0x30
 8002696:	d86b      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x168>
 8002698:	2b20      	cmp	r3, #32
 800269a:	d060      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x156>
 800269c:	2b20      	cmp	r3, #32
 800269e:	d867      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x168>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05c      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x156>
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d05a      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026a8:	e062      	b.n	8002770 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f000 fbae 	bl	8002e1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	609a      	str	r2, [r3, #8]
      break;
 80026d6:	e04e      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f000 fb97 	bl	8002e1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fa:	609a      	str	r2, [r3, #8]
      break;
 80026fc:	e03b      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	461a      	mov	r2, r3
 800270c:	f000 fb0e 	bl	8002d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2150      	movs	r1, #80	; 0x50
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fb65 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 800271c:	e02b      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fb2c 	bl	8002d88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2160      	movs	r1, #96	; 0x60
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fb55 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 800273c:	e01b      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	461a      	mov	r2, r3
 800274c:	f000 faee 	bl	8002d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2140      	movs	r1, #64	; 0x40
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fb45 	bl	8002de6 <TIM_ITRx_SetConfig>
      break;
 800275c:	e00b      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f000 fb3c 	bl	8002de6 <TIM_ITRx_SetConfig>
        break;
 800276e:	e002      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002770:	bf00      	nop
 8002772:	e000      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002774:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d107      	bne.n	80027dc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027da:	e02a      	b.n	8002832 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d107      	bne.n	80027f6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2202      	movs	r2, #2
 80027ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f4:	e01d      	b.n	8002832 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d107      	bne.n	8002810 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2204      	movs	r2, #4
 8002804:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280e:	e010      	b.n	8002832 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	d107      	bne.n	800282a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2208      	movs	r2, #8
 800281e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002828:	e003      	b.n	8002832 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7ff ffb5 	bl	80027a2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	771a      	strb	r2, [r3, #28]
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d10b      	bne.n	8002876 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d136      	bne.n	80028da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002874:	e031      	b.n	80028da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d10b      	bne.n	8002898 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2202      	movs	r2, #2
 8002884:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d125      	bne.n	80028da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002896:	e020      	b.n	80028da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d10b      	bne.n	80028ba <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2204      	movs	r2, #4
 80028a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d114      	bne.n	80028da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	e00f      	b.n	80028da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d10a      	bne.n	80028da <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2208      	movs	r2, #8
 80028c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d103      	bne.n	80028da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7fd febe 	bl	800065c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	771a      	strb	r2, [r3, #28]
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	d103      	bne.n	800290e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	771a      	strb	r2, [r3, #28]
 800290c:	e019      	b.n	8002942 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d103      	bne.n	8002920 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2202      	movs	r2, #2
 800291c:	771a      	strb	r2, [r3, #28]
 800291e:	e010      	b.n	8002942 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	d103      	bne.n	8002932 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2204      	movs	r2, #4
 800292e:	771a      	strb	r2, [r3, #28]
 8002930:	e007      	b.n	8002942 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d102      	bne.n	8002942 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2208      	movs	r2, #8
 8002940:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f7ff ff24 	bl	8002790 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	771a      	strb	r2, [r3, #28]
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <TIM_Base_SetConfig+0xb8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00b      	beq.n	8002988 <TIM_Base_SetConfig+0x30>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002976:	d007      	beq.n	8002988 <TIM_Base_SetConfig+0x30>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <TIM_Base_SetConfig+0xbc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d003      	beq.n	8002988 <TIM_Base_SetConfig+0x30>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a25      	ldr	r2, [pc, #148]	; (8002a18 <TIM_Base_SetConfig+0xc0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d108      	bne.n	800299a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <TIM_Base_SetConfig+0xb8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00b      	beq.n	80029ba <TIM_Base_SetConfig+0x62>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a8:	d007      	beq.n	80029ba <TIM_Base_SetConfig+0x62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <TIM_Base_SetConfig+0xbc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0x62>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <TIM_Base_SetConfig+0xc0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <TIM_Base_SetConfig+0xb8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d103      	bne.n	8002a00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	615a      	str	r2, [r3, #20]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800

08002a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f023 0201 	bic.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f023 0302 	bic.w	r3, r3, #2
 8002a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <TIM_OC1_SetConfig+0xc8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10c      	bne.n	8002a92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f023 0308 	bic.w	r3, r3, #8
 8002a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <TIM_OC1_SetConfig+0xc8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d111      	bne.n	8002abe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	621a      	str	r2, [r3, #32]
}
 8002ad8:	bf00      	nop
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40012c00 	.word	0x40012c00

08002ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f023 0210 	bic.w	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0320 	bic.w	r3, r3, #32
 8002b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <TIM_OC2_SetConfig+0xd0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10d      	bne.n	8002b64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <TIM_OC2_SetConfig+0xd0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d113      	bne.n	8002b94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	40012c00 	.word	0x40012c00

08002bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <TIM_OC3_SetConfig+0xd0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10d      	bne.n	8002c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <TIM_OC3_SetConfig+0xd0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d113      	bne.n	8002c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	621a      	str	r2, [r3, #32]
}
 8002c80:	bf00      	nop
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40012c00 	.word	0x40012c00

08002c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	031b      	lsls	r3, r3, #12
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <TIM_OC4_SetConfig+0x98>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d109      	bne.n	8002d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	019b      	lsls	r3, r3, #6
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	621a      	str	r2, [r3, #32]
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	40012c00 	.word	0x40012c00

08002d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0201 	bic.w	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f023 030a 	bic.w	r3, r3, #10
 8002d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f023 0210 	bic.w	r2, r3, #16
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002db2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	031b      	lsls	r3, r3, #12
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	621a      	str	r2, [r3, #32]
}
 8002ddc:	bf00      	nop
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f043 0307 	orr.w	r3, r3, #7
 8002e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b087      	sub	sp, #28
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	021a      	lsls	r2, r3, #8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	609a      	str	r2, [r3, #8]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1a      	ldr	r2, [r3, #32]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	621a      	str	r2, [r3, #32]
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e046      	b.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f04:	d009      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10c      	bne.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800

08002f5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e03d      	b.n	8002ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <memset>:
 8002ffe:	4603      	mov	r3, r0
 8003000:	4402      	add	r2, r0
 8003002:	4293      	cmp	r3, r2
 8003004:	d100      	bne.n	8003008 <memset+0xa>
 8003006:	4770      	bx	lr
 8003008:	f803 1b01 	strb.w	r1, [r3], #1
 800300c:	e7f9      	b.n	8003002 <memset+0x4>
	...

08003010 <__libc_init_array>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	2600      	movs	r6, #0
 8003014:	4d0c      	ldr	r5, [pc, #48]	; (8003048 <__libc_init_array+0x38>)
 8003016:	4c0d      	ldr	r4, [pc, #52]	; (800304c <__libc_init_array+0x3c>)
 8003018:	1b64      	subs	r4, r4, r5
 800301a:	10a4      	asrs	r4, r4, #2
 800301c:	42a6      	cmp	r6, r4
 800301e:	d109      	bne.n	8003034 <__libc_init_array+0x24>
 8003020:	f000 f81a 	bl	8003058 <_init>
 8003024:	2600      	movs	r6, #0
 8003026:	4d0a      	ldr	r5, [pc, #40]	; (8003050 <__libc_init_array+0x40>)
 8003028:	4c0a      	ldr	r4, [pc, #40]	; (8003054 <__libc_init_array+0x44>)
 800302a:	1b64      	subs	r4, r4, r5
 800302c:	10a4      	asrs	r4, r4, #2
 800302e:	42a6      	cmp	r6, r4
 8003030:	d105      	bne.n	800303e <__libc_init_array+0x2e>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	f855 3b04 	ldr.w	r3, [r5], #4
 8003038:	4798      	blx	r3
 800303a:	3601      	adds	r6, #1
 800303c:	e7ee      	b.n	800301c <__libc_init_array+0xc>
 800303e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003042:	4798      	blx	r3
 8003044:	3601      	adds	r6, #1
 8003046:	e7f2      	b.n	800302e <__libc_init_array+0x1e>
 8003048:	08003094 	.word	0x08003094
 800304c:	08003094 	.word	0x08003094
 8003050:	08003094 	.word	0x08003094
 8003054:	08003098 	.word	0x08003098

08003058 <_init>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr

08003064 <_fini>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	bf00      	nop
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr
