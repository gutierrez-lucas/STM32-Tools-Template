
concurrency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065d0  080065d0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080065d0  080065d0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065d0  080065d0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065d4  080065d4  000165d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080065d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  2000006c  08006644  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012f8  08006644  000212f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014467  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003317  00000000  00000000  0003453f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  00037858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea0  00000000  00000000  00038b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b76d  00000000  00000000  000399d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163b5  00000000  00000000  0005513d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be2a  00000000  00000000  0006b4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005728  00000000  00000000  0010731c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010ca44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080064ac 	.word	0x080064ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080064ac 	.word	0x080064ac

08000150 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
return 0;
 8000160:	2300      	movs	r3, #0
}
 8000162:	4618      	mov	r0, r3
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800016a:	b480      	push	{r7}
 800016c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
	...

08000178 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	60f8      	str	r0, [r7, #12]
 8000180:	60b9      	str	r1, [r7, #8]
 8000182:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <vApplicationGetIdleTaskMemory+0x28>)
 8000188:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	4a05      	ldr	r2, [pc, #20]	; (80001a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800018e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2280      	movs	r2, #128	; 0x80
 8000194:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000196:	bf00      	nop
 8000198:	3714      	adds	r7, #20
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	20000088 	.word	0x20000088
 80001a4:	20000138 	.word	0x20000138

080001a8 <_write>:

UART_HandleTypeDef huart1;
ADC_HandleTypeDef hadc1;
TIM_HandleTypeDef htim2;

int _write(int file, char *data, int len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
		 if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)){
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d00a      	beq.n	80001d0 <_write+0x28>
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	2b02      	cmp	r3, #2
 80001be:	d007      	beq.n	80001d0 <_write+0x28>
						errno = EBADF;
 80001c0:	f005 fa78 	bl	80056b4 <__errno>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2209      	movs	r2, #9
 80001c8:	601a      	str	r2, [r3, #0]
						return -1;
 80001ca:	f04f 33ff 	mov.w	r3, #4294967295
 80001ce:	e00f      	b.n	80001f0 <_write+0x48>
		 }
		 HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	b29a      	uxth	r2, r3
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	68b9      	ldr	r1, [r7, #8]
 80001da:	4807      	ldr	r0, [pc, #28]	; (80001f8 <_write+0x50>)
 80001dc:	f002 fd3e 	bl	8002c5c <HAL_UART_Transmit>
 80001e0:	4603      	mov	r3, r0
 80001e2:	75fb      	strb	r3, [r7, #23]

		 return (status == HAL_OK ? len : 0);
 80001e4:	7dfb      	ldrb	r3, [r7, #23]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d101      	bne.n	80001ee <_write+0x46>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	e000      	b.n	80001f0 <_write+0x48>
 80001ee:	2300      	movs	r3, #0
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3718      	adds	r7, #24
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000338 	.word	0x20000338

080001fc <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]
	// printf("Stack Overflow inminent\r\n");
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <trace_on>:
	}else{
		return;
	}
}

void trace_on(int tag){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	if(tag == 1){
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d106      	bne.n	800022c <trace_on+0x1c>
		HAL_GPIO_WritePin(trace_1_GPIO_Port, trace_1_Pin, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000224:	4817      	ldr	r0, [pc, #92]	; (8000284 <trace_on+0x74>)
 8000226:	f001 fcc3 	bl	8001bb0 <HAL_GPIO_WritePin>
 800022a:	e028      	b.n	800027e <trace_on+0x6e>
	}else if(tag == 2){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b02      	cmp	r3, #2
 8000230:	d106      	bne.n	8000240 <trace_on+0x30>
		HAL_GPIO_WritePin(trace_2_GPIO_Port, trace_2_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000238:	4812      	ldr	r0, [pc, #72]	; (8000284 <trace_on+0x74>)
 800023a:	f001 fcb9 	bl	8001bb0 <HAL_GPIO_WritePin>
 800023e:	e01e      	b.n	800027e <trace_on+0x6e>
	}else if(tag == 0){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d106      	bne.n	8000254 <trace_on+0x44>
		HAL_GPIO_WritePin(trace_3_GPIO_Port, trace_3_Pin, GPIO_PIN_SET);
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800024c:	480e      	ldr	r0, [pc, #56]	; (8000288 <trace_on+0x78>)
 800024e:	f001 fcaf 	bl	8001bb0 <HAL_GPIO_WritePin>
 8000252:	e014      	b.n	800027e <trace_on+0x6e>
	}else if(tag == 4){
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b04      	cmp	r3, #4
 8000258:	d106      	bne.n	8000268 <trace_on+0x58>
		HAL_GPIO_WritePin(trace_4_GPIO_Port, trace_4_Pin, GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000260:	4808      	ldr	r0, [pc, #32]	; (8000284 <trace_on+0x74>)
 8000262:	f001 fca5 	bl	8001bb0 <HAL_GPIO_WritePin>
 8000266:	e00a      	b.n	800027e <trace_on+0x6e>
	}else if(tag == 5){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b05      	cmp	r3, #5
 800026c:	d106      	bne.n	800027c <trace_on+0x6c>
		HAL_GPIO_WritePin(trace_5_GPIO_Port, trace_5_Pin, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000274:	4803      	ldr	r0, [pc, #12]	; (8000284 <trace_on+0x74>)
 8000276:	f001 fc9b 	bl	8001bb0 <HAL_GPIO_WritePin>
 800027a:	e000      	b.n	800027e <trace_on+0x6e>
	}else{
		return;
 800027c:	bf00      	nop
	}
}
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40010800 	.word	0x40010800
 8000288:	40010c00 	.word	0x40010c00

0800028c <trace_off>:

void trace_off(int tag){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	if(tag == 1){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d106      	bne.n	80002a8 <trace_off+0x1c>
		HAL_GPIO_WritePin(trace_1_GPIO_Port, trace_1_Pin, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a0:	4817      	ldr	r0, [pc, #92]	; (8000300 <trace_off+0x74>)
 80002a2:	f001 fc85 	bl	8001bb0 <HAL_GPIO_WritePin>
 80002a6:	e028      	b.n	80002fa <trace_off+0x6e>
	}else if(tag == 2){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d106      	bne.n	80002bc <trace_off+0x30>
		HAL_GPIO_WritePin(trace_2_GPIO_Port, trace_2_Pin, GPIO_PIN_RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b4:	4812      	ldr	r0, [pc, #72]	; (8000300 <trace_off+0x74>)
 80002b6:	f001 fc7b 	bl	8001bb0 <HAL_GPIO_WritePin>
 80002ba:	e01e      	b.n	80002fa <trace_off+0x6e>
	}else if(tag == 0){
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d106      	bne.n	80002d0 <trace_off+0x44>
		HAL_GPIO_WritePin(trace_3_GPIO_Port, trace_3_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c8:	480e      	ldr	r0, [pc, #56]	; (8000304 <trace_off+0x78>)
 80002ca:	f001 fc71 	bl	8001bb0 <HAL_GPIO_WritePin>
 80002ce:	e014      	b.n	80002fa <trace_off+0x6e>
	}else if(tag == 4){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	d106      	bne.n	80002e4 <trace_off+0x58>
		HAL_GPIO_WritePin(trace_4_GPIO_Port, trace_4_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002dc:	4808      	ldr	r0, [pc, #32]	; (8000300 <trace_off+0x74>)
 80002de:	f001 fc67 	bl	8001bb0 <HAL_GPIO_WritePin>
 80002e2:	e00a      	b.n	80002fa <trace_off+0x6e>
	}else if(tag == 5){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b05      	cmp	r3, #5
 80002e8:	d106      	bne.n	80002f8 <trace_off+0x6c>
		HAL_GPIO_WritePin(trace_5_GPIO_Port, trace_5_Pin, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <trace_off+0x74>)
 80002f2:	f001 fc5d 	bl	8001bb0 <HAL_GPIO_WritePin>
 80002f6:	e000      	b.n	80002fa <trace_off+0x6e>
	}else{
		return;
 80002f8:	bf00      	nop
	}
}
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40010800 	.word	0x40010800
 8000304:	40010c00 	.word	0x40010c00

08000308 <main>:
QueueHandle_t adc_queue;

#define BUFFER_SIZE 200

int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	HAL_Init();
 800030e:	f000 fcb3 	bl	8000c78 <HAL_Init>
	SystemClock_Config();
 8000312:	f000 f935 	bl	8000580 <SystemClock_Config>

	MX_GPIO_Init();
 8000316:	f000 f9f5 	bl	8000704 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800031a:	f000 f9c9 	bl	80006b0 <MX_USART1_UART_Init>
	// MX_TIM2_Init();
	MX_ADC1_Init();
 800031e:	f000 f989 	bl	8000634 <MX_ADC1_Init>

	printf("\r\n\r\nACD system\r\n");
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <main+0x78>)
 8000324:	f005 f822 	bl	800536c <puts>

	adc_queue = xQueueCreate(BUFFER_SIZE+100, sizeof(uint16_t));
 8000328:	2200      	movs	r2, #0
 800032a:	2102      	movs	r1, #2
 800032c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000330:	f002 ff2c 	bl	800318c <xQueueGenericCreate>
 8000334:	4603      	mov	r3, r0
 8000336:	4a13      	ldr	r2, [pc, #76]	; (8000384 <main+0x7c>)
 8000338:	6013      	str	r3, [r2, #0]

	xTaskCreate(adc_task, "adc_task", 128, NULL, tskIDLE_PRIORITY+2, &adc_task_handle);
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <main+0x80>)
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2302      	movs	r3, #2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2300      	movs	r3, #0
 8000344:	2280      	movs	r2, #128	; 0x80
 8000346:	4911      	ldr	r1, [pc, #68]	; (800038c <main+0x84>)
 8000348:	4811      	ldr	r0, [pc, #68]	; (8000390 <main+0x88>)
 800034a:	f003 fae9 	bl	8003920 <xTaskCreate>
	xTaskCreate(print_task, "print_task", 230, NULL, tskIDLE_PRIORITY+1, &print_task_handle);
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <main+0x8c>)
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2300      	movs	r3, #0
 8000358:	22e6      	movs	r2, #230	; 0xe6
 800035a:	490f      	ldr	r1, [pc, #60]	; (8000398 <main+0x90>)
 800035c:	480f      	ldr	r0, [pc, #60]	; (800039c <main+0x94>)
 800035e:	f003 fadf 	bl	8003920 <xTaskCreate>

	vTaskSetApplicationTaskTag( print_task_handle, ( void * ) TRACE_PRINT );
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <main+0x8c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2102      	movs	r1, #2
 8000368:	4618      	mov	r0, r3
 800036a:	f003 fe91 	bl	8004090 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( adc_task_handle, ( void * ) TRACE_ADC );
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <main+0x80>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2101      	movs	r1, #1
 8000374:	4618      	mov	r0, r3
 8000376:	f003 fe8b 	bl	8004090 <vTaskSetApplicationTaskTag>

	vTaskStartScheduler();
 800037a:	f003 fca7 	bl	8003ccc <vTaskStartScheduler>

	while (1){
 800037e:	e7fe      	b.n	800037e <main+0x76>
 8000380:	080064e0 	.word	0x080064e0
 8000384:	20000400 	.word	0x20000400
 8000388:	200003f8 	.word	0x200003f8
 800038c:	080064f0 	.word	0x080064f0
 8000390:	080004dd 	.word	0x080004dd
 8000394:	200003fc 	.word	0x200003fc
 8000398:	080064fc 	.word	0x080064fc
 800039c:	080003a1 	.word	0x080003a1

080003a0 <print_task>:
}

uint8_t max_queue_stored = 0;
UBaseType_t task_watermark;

void print_task(void *pvParameters){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b0ea      	sub	sp, #424	; 0x1a8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80003aa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80003ae:	6018      	str	r0, [r3, #0]
	printf("PRINT task\r\n");
 80003b0:	4844      	ldr	r0, [pc, #272]	; (80004c4 <print_task+0x124>)
 80003b2:	f004 ffdb 	bl	800536c <puts>

	char str_buffer[10];
	uint32_t acumulator = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	uint16_t adc_buffer[BUFFER_SIZE];
	uint8_t counter = 0, i = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
 80003c2:	2300      	movs	r3, #0
 80003c4:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2

	while(1){
		while( uxQueueMessagesWaiting(adc_queue) != 0 && counter < BUFFER_SIZE ){
 80003c8:	e016      	b.n	80003f8 <print_task+0x58>
			if( xQueueReceive(adc_queue, &adc_buffer+counter, 0) == pdTRUE ){
 80003ca:	4b3f      	ldr	r3, [pc, #252]	; (80004c8 <print_task+0x128>)
 80003cc:	6818      	ldr	r0, [r3, #0]
 80003ce:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 80003d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80003d6:	fb02 f303 	mul.w	r3, r2, r3
 80003da:	f107 0208 	add.w	r2, r7, #8
 80003de:	4413      	add	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	4619      	mov	r1, r3
 80003e4:	f003 f832 	bl	800344c <xQueueReceive>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d104      	bne.n	80003f8 <print_task+0x58>
				counter++;
 80003ee:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 80003f2:	3301      	adds	r3, #1
 80003f4:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
		while( uxQueueMessagesWaiting(adc_queue) != 0 && counter < BUFFER_SIZE ){
 80003f8:	4b33      	ldr	r3, [pc, #204]	; (80004c8 <print_task+0x128>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f003 f905 	bl	800360c <uxQueueMessagesWaiting>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d003      	beq.n	8000410 <print_task+0x70>
 8000408:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 800040c:	2bc7      	cmp	r3, #199	; 0xc7
 800040e:	d9dc      	bls.n	80003ca <print_task+0x2a>
			}
		}
		if( counter == BUFFER_SIZE ){
 8000410:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8000414:	2bc8      	cmp	r3, #200	; 0xc8
 8000416:	d150      	bne.n	80004ba <print_task+0x11a>
			for(i = 0; i < counter; i++){
 8000418:	2300      	movs	r3, #0
 800041a:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
 800041e:	e027      	b.n	8000470 <print_task+0xd0>
				acumulator+=adc_buffer[i];
 8000420:	f897 21a2 	ldrb.w	r2, [r7, #418]	; 0x1a2
 8000424:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000428:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800042c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000430:	461a      	mov	r2, r3
 8000432:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000436:	4413      	add	r3, r2
 8000438:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
				sprintf(str_buffer, "%05d\r\n", adc_buffer[i]);
 800043c:	f897 21a2 	ldrb.w	r2, [r7, #418]	; 0x1a2
 8000440:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000444:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000448:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800044c:	461a      	mov	r2, r3
 800044e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000452:	491e      	ldr	r1, [pc, #120]	; (80004cc <print_task+0x12c>)
 8000454:	4618      	mov	r0, r3
 8000456:	f004 ff91 	bl	800537c <siprintf>
				printf("%s", str_buffer);
 800045a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800045e:	4619      	mov	r1, r3
 8000460:	481b      	ldr	r0, [pc, #108]	; (80004d0 <print_task+0x130>)
 8000462:	f004 ff1d 	bl	80052a0 <iprintf>
			for(i = 0; i < counter; i++){
 8000466:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 800046a:	3301      	adds	r3, #1
 800046c:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
 8000470:	f897 21a2 	ldrb.w	r2, [r7, #418]	; 0x1a2
 8000474:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8000478:	429a      	cmp	r2, r3
 800047a:	d3d1      	bcc.n	8000420 <print_task+0x80>
			}
			acumulator/=BUFFER_SIZE;
 800047c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000480:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <print_task+0x134>)
 8000482:	fba2 2303 	umull	r2, r3, r2, r3
 8000486:	099b      	lsrs	r3, r3, #6
 8000488:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
			sprintf(str_buffer, "%05d\r\n", acumulator);
 800048c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000490:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000494:	490d      	ldr	r1, [pc, #52]	; (80004cc <print_task+0x12c>)
 8000496:	4618      	mov	r0, r3
 8000498:	f004 ff70 	bl	800537c <siprintf>
			printf("%s", str_buffer);
 800049c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80004a0:	4619      	mov	r1, r3
 80004a2:	480b      	ldr	r0, [pc, #44]	; (80004d0 <print_task+0x130>)
 80004a4:	f004 fefc 	bl	80052a0 <iprintf>
			acumulator = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
			counter = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
			max_queue_stored = 0;
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <print_task+0x138>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
		}
		ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(50));
 80004ba:	2132      	movs	r1, #50	; 0x32
 80004bc:	2001      	movs	r0, #1
 80004be:	f004 f93f 	bl	8004740 <ulTaskNotifyTake>
		while( uxQueueMessagesWaiting(adc_queue) != 0 && counter < BUFFER_SIZE ){
 80004c2:	e799      	b.n	80003f8 <print_task+0x58>
 80004c4:	08006508 	.word	0x08006508
 80004c8:	20000400 	.word	0x20000400
 80004cc:	08006514 	.word	0x08006514
 80004d0:	0800651c 	.word	0x0800651c
 80004d4:	51eb851f 	.word	0x51eb851f
 80004d8:	20000404 	.word	0x20000404

080004dc <adc_task>:
	printf("Destroying print task \r\n");
	vTaskDelete(print_task_handle);
}


void adc_task(void *pvParameters){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	printf("ACD task\r\n");
 80004e4:	4818      	ldr	r0, [pc, #96]	; (8000548 <adc_task+0x6c>)
 80004e6:	f004 ff41 	bl	800536c <puts>
         
	TickType_t xLastWakeTime;
	uint16_t value;

	while(1){
		xLastWakeTime = xTaskGetTickCount();
 80004ea:	f003 fd05 	bl	8003ef8 <xTaskGetTickCount>
 80004ee:	4603      	mov	r3, r0
 80004f0:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Start(&hadc1);
 80004f2:	4816      	ldr	r0, [pc, #88]	; (800054c <adc_task+0x70>)
 80004f4:	f000 fcca 	bl	8000e8c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004f8:	f04f 31ff 	mov.w	r1, #4294967295
 80004fc:	4813      	ldr	r0, [pc, #76]	; (800054c <adc_task+0x70>)
 80004fe:	f000 fd73 	bl	8000fe8 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1);
 8000502:	4812      	ldr	r0, [pc, #72]	; (800054c <adc_task+0x70>)
 8000504:	f000 fe76 	bl	80011f4 <HAL_ADC_GetValue>
 8000508:	4603      	mov	r3, r0
 800050a:	b29b      	uxth	r3, r3
 800050c:	817b      	strh	r3, [r7, #10]
		xQueueSend(adc_queue, (uint16_t*)&value, 0);
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <adc_task+0x74>)
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	f107 010a 	add.w	r1, r7, #10
 8000516:	2300      	movs	r3, #0
 8000518:	2200      	movs	r2, #0
 800051a:	f002 fe99 	bl	8003250 <xQueueGenericSend>
		xTaskNotifyGive(print_task_handle);
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <adc_task+0x78>)
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2202      	movs	r2, #2
 8000526:	2100      	movs	r1, #0
 8000528:	f004 f956 	bl	80047d8 <xTaskGenericNotify>

		max_queue_stored++;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <adc_task+0x7c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <adc_task+0x7c>)
 8000536:	701a      	strb	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(5));
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2105      	movs	r1, #5
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fb46 	bl	8003bd0 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000544:	e7d1      	b.n	80004ea <adc_task+0xe>
 8000546:	bf00      	nop
 8000548:	08006520 	.word	0x08006520
 800054c:	20000380 	.word	0x20000380
 8000550:	20000400 	.word	0x20000400
 8000554:	200003fc 	.word	0x200003fc
 8000558:	20000404 	.word	0x20000404

0800055c <HAL_TIM_PeriodElapsedCallback>:
	}
	printf("Destroying ADC task \r\n");
	vTaskDelete(adc_task_handle);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
// 	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
	if (htim->Instance == TIM1) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d101      	bne.n	8000572 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800056e:	f000 fb99 	bl	8000ca4 <HAL_IncTick>
// 	}else if (htim->Instance == TIM2) {
// 		trace_toggle(3);
// 		vTaskNotifyGiveFromISR(xConversion_task_handle, &xHigherPriorityTaskWoken);
	}
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40012c00 	.word	0x40012c00

08000580 <SystemClock_Config>:
// void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
// 	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
// 	xTaskNotifyFromISR(xConversion_task_handle,(uint32_t)HAL_ADC_GetValue(&hadc1), eSetValueWithOverwrite, &xHigherPriorityTaskWoken); 
// }

void SystemClock_Config(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800058a:	2228      	movs	r2, #40	; 0x28
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 ffec 	bl	800556c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	2301      	movs	r3, #1
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fb02 	bl	8001be0 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80005e2:	f000 f8f1 	bl	80007c8 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	617b      	str	r3, [r7, #20]
								|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fd6e 	bl	80020e4 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x92>
	{
		Error_Handler();
 800060e:	f000 f8db 	bl	80007c8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000612:	2302      	movs	r3, #2
 8000614:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4618      	mov	r0, r3
 800061e:	f001 ff1f 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xac>
	{
		Error_Handler();
 8000628:	f000 f8ce 	bl	80007c8 <Error_Handler>
	}
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <MX_ADC1_Init>:

static void MX_ADC1_Init(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]

	hadc1.Instance = ADC1;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_ADC1_Init+0x74>)
 8000646:	4a19      	ldr	r2, [pc, #100]	; (80006ac <MX_ADC1_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_ADC1_Init+0x74>)
 800064c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000650:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_ADC1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_ADC1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_ADC1_Init+0x74>)
 8000660:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000664:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_ADC1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1; 
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_ADC1_Init+0x74>)
 800066e:	2201      	movs	r2, #1
 8000670:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_ADC1_Init+0x74>)
 8000674:	f000 fb32 	bl	8000cdc <HAL_ADC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 800067e:	f000 f8a3 	bl	80007c8 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_6;
 8000682:	2306      	movs	r3, #6
 8000684:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
	// sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4619      	mov	r1, r3
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <MX_ADC1_Init+0x74>)
 8000690:	f000 fe8e 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x6a>
	{
		Error_Handler();
 800069a:	f000 f895 	bl	80007c8 <Error_Handler>
	}
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000380 	.word	0x20000380
 80006ac:	40012400 	.word	0x40012400

080006b0 <MX_USART1_UART_Init>:
//   /* USER CODE END TIM2_Init 2 */

// }

static void MX_USART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART1_UART_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 19200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006bc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80006c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK){
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006e8:	f002 fa68 	bl	8002bbc <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80006f2:	f000 f869 	bl	80007c8 <Error_Handler>
	}

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000338 	.word	0x20000338
 8000700:	40013800 	.word	0x40013800

08000704 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_GPIO_Init+0xb8>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a27      	ldr	r2, [pc, #156]	; (80007bc <MX_GPIO_Init+0xb8>)
 800071e:	f043 0320 	orr.w	r3, r3, #32
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_GPIO_Init+0xb8>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0320 	and.w	r3, r3, #32
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_GPIO_Init+0xb8>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <MX_GPIO_Init+0xb8>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_GPIO_Init+0xb8>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_GPIO_Init+0xb8>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <MX_GPIO_Init+0xb8>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_GPIO_Init+0xb8>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]


  HAL_GPIO_WritePin(GPIOA, trace_1_Pin|trace_2_Pin|trace_4_Pin|trace_5_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <MX_GPIO_Init+0xbc>)
 8000768:	f001 fa22 	bl	8001bb0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = trace_1_Pin|trace_2_Pin|trace_4_Pin|trace_5_Pin;
 800076c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000772:	2311      	movs	r3, #17
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	480e      	ldr	r0, [pc, #56]	; (80007c0 <MX_GPIO_Init+0xbc>)
 8000786:	f001 f88f 	bl	80018a8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOB, trace_3_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_GPIO_Init+0xc0>)
 8000792:	f001 fa0d 	bl	8001bb0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = trace_3_Pin;
 8000796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800079c:	2311      	movs	r3, #17
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_GPIO_Init+0xc0>)
 80007b0:	f001 f87a 	bl	80018a8 <HAL_GPIO_Init>

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010800 	.word	0x40010800
 80007c4:	40010c00 	.word	0x40010c00

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_MspInit+0x68>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_MspInit+0x68>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_MspInit+0x68>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_MspInit+0x68>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <HAL_MspInit+0x68>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x68>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f001 f81e 	bl	8001852 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_MspInit+0x6c>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_MspInit+0x6c>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	40010000 	.word	0x40010000

08000844 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <HAL_ADC_MspInit+0x7c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d129      	bne.n	80008b8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_ADC_MspInit+0x80>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <HAL_ADC_MspInit+0x80>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_ADC_MspInit+0x80>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_ADC_MspInit+0x80>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <HAL_ADC_MspInit+0x80>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_ADC_MspInit+0x80>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000894:	2301      	movs	r3, #1
 8000896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <HAL_ADC_MspInit+0x84>)
 80008a4:	f001 f800 	bl	80018a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 6, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2106      	movs	r1, #6
 80008ac:	2012      	movs	r0, #18
 80008ae:	f000 ffd0 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008b2:	2012      	movs	r0, #18
 80008b4:	f000 ffe9 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40012400 	.word	0x40012400
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010800 	.word	0x40010800

080008cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008dc:	d113      	bne.n	8000906 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_TIM_Base_MspInit+0x44>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <HAL_TIM_Base_MspInit+0x44>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_TIM_Base_MspInit+0x44>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2105      	movs	r1, #5
 80008fa:	201c      	movs	r0, #28
 80008fc:	f000 ffa9 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000900:	201c      	movs	r0, #28
 8000902:	f000 ffc2 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <HAL_UART_MspInit+0xa4>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d13d      	bne.n	80009b0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <HAL_UART_MspInit+0xa8>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a20      	ldr	r2, [pc, #128]	; (80009bc <HAL_UART_MspInit+0xa8>)
 800093a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <HAL_UART_MspInit+0xa8>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_UART_MspInit+0xa8>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <HAL_UART_MspInit+0xa8>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_UART_MspInit+0xa8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000964:	2340      	movs	r3, #64	; 0x40
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4812      	ldr	r0, [pc, #72]	; (80009c0 <HAL_UART_MspInit+0xac>)
 8000978:	f000 ff96 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <HAL_UART_MspInit+0xac>)
 8000990:	f000 ff8a 	bl	80018a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_UART_MspInit+0xb0>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
 80009aa:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_UART_MspInit+0xb0>)
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010c00 	.word	0x40010c00
 80009c4:	40010000 	.word	0x40010000

080009c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <HAL_InitTick+0xd4>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	4a2e      	ldr	r2, [pc, #184]	; (8000a9c <HAL_InitTick+0xd4>)
 80009e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009e8:	6193      	str	r3, [r2, #24]
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <HAL_InitTick+0xd4>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f6:	f107 020c 	add.w	r2, r7, #12
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fcdf 	bl	80023c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a06:	f001 fcc9 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_InitTick+0xd8>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	0c9b      	lsrs	r3, r3, #18
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <HAL_InitTick+0xdc>)
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <HAL_InitTick+0xe0>)
 8000a22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <HAL_InitTick+0xdc>)
 8000a26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <HAL_InitTick+0xdc>)
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_InitTick+0xdc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <HAL_InitTick+0xdc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_InitTick+0xdc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a44:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <HAL_InitTick+0xdc>)
 8000a46:	f001 fe77 	bl	8002738 <HAL_TIM_Base_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d11b      	bne.n	8000a90 <HAL_InitTick+0xc8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <HAL_InitTick+0xdc>)
 8000a5a:	f001 febd 	bl	80027d8 <HAL_TIM_Base_Start_IT>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d111      	bne.n	8000a90 <HAL_InitTick+0xc8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a6c:	2019      	movs	r0, #25
 8000a6e:	f000 ff0c 	bl	800188a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d808      	bhi.n	8000a8a <HAL_InitTick+0xc2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	2019      	movs	r0, #25
 8000a7e:	f000 fee8 	bl	8001852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_InitTick+0xe4>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	e002      	b.n	8000a90 <HAL_InitTick+0xc8>
      }
      else
      {
        status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	431bde83 	.word	0x431bde83
 8000aa4:	20000408 	.word	0x20000408
 8000aa8:	40012c00 	.word	0x40012c00
 8000aac:	20000004 	.word	0x20000004

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
	...

08000adc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <ADC1_2_IRQHandler+0x10>)
 8000ae2:	f000 fb93 	bl	800120c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000380 	.word	0x20000380

08000af0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM1_UP_IRQHandler+0x10>)
 8000af6:	f001 fec1 	bl	800287c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000408 	.word	0x20000408

08000b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <TIM2_IRQHandler+0x10>)
 8000b0a:	f001 feb7 	bl	800287c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200003b0 	.word	0x200003b0

08000b18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e00a      	b.n	8000b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	4601      	mov	r1, r0
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf0      	blt.n	8000b2a <_read+0x12>
  }

  return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b78:	605a      	str	r2, [r3, #4]
  return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <_isatty>:

int _isatty(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f004 fd66 	bl	80056b4 <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <_sbrk+0x64>)
 8000c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20005000 	.word	0x20005000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	20000450 	.word	0x20000450
 8000c1c:	200012f8 	.word	0x200012f8

08000c20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8000c2c:	f7ff fff8 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c32:	490c      	ldr	r1, [pc, #48]	; (8000c64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c34:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c48:	4c09      	ldr	r4, [pc, #36]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c56:	f004 fd33 	bl	80056c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5a:	f7ff fb55 	bl	8000308 <main>
  bx lr
 8000c5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c68:	080065d8 	.word	0x080065d8
  ldr r2, =_sbss
 8000c6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c70:	200012f8 	.word	0x200012f8

08000c74 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <CAN1_RX1_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x28>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 fdd7 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f7ff fe9a 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fd9e 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_IncTick+0x1c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000454 	.word	0x20000454

08000cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <HAL_GetTick+0x10>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	20000454 	.word	0x20000454

08000cdc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e0be      	b.n	8000e7c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d109      	bne.n	8000d20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fd92 	bl	8000844 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 fc97 	bl	8001654 <ADC_ConversionStop_Disable>
 8000d26:	4603      	mov	r3, r0
 8000d28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8099 	bne.w	8000e6a <HAL_ADC_Init+0x18e>
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 8095 	bne.w	8000e6a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d48:	f023 0302 	bic.w	r3, r3, #2
 8000d4c:	f043 0202 	orr.w	r2, r3, #2
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7b1b      	ldrb	r3, [r3, #12]
 8000d62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d74:	d003      	beq.n	8000d7e <HAL_ADC_Init+0xa2>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d102      	bne.n	8000d84 <HAL_ADC_Init+0xa8>
 8000d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d82:	e000      	b.n	8000d86 <HAL_ADC_Init+0xaa>
 8000d84:	2300      	movs	r3, #0
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7d1b      	ldrb	r3, [r3, #20]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d119      	bne.n	8000dc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7b1b      	ldrb	r3, [r3, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d109      	bne.n	8000db0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	035a      	lsls	r2, r3, #13
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	e00b      	b.n	8000dc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	f043 0220 	orr.w	r2, r3, #32
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	f043 0201 	orr.w	r2, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <HAL_ADC_Init+0x1a8>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000df8:	d003      	beq.n	8000e02 <HAL_ADC_Init+0x126>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d104      	bne.n	8000e0c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	051b      	lsls	r3, r3, #20
 8000e0a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e12:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_ADC_Init+0x1ac>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d10b      	bne.n	8000e48 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	f023 0303 	bic.w	r3, r3, #3
 8000e3e:	f043 0201 	orr.w	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e46:	e018      	b.n	8000e7a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4c:	f023 0312 	bic.w	r3, r3, #18
 8000e50:	f043 0210 	orr.w	r2, r3, #16
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	f043 0201 	orr.w	r2, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e68:	e007      	b.n	8000e7a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	f043 0210 	orr.w	r2, r3, #16
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	ffe1f7fd 	.word	0xffe1f7fd
 8000e88:	ff1f0efe 	.word	0xff1f0efe

08000e8c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d101      	bne.n	8000ea6 <HAL_ADC_Start+0x1a>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e098      	b.n	8000fd8 <HAL_ADC_Start+0x14c>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fb76 	bl	80015a0 <ADC_Enable>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8087 	bne.w	8000fce <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ec8:	f023 0301 	bic.w	r3, r3, #1
 8000ecc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a41      	ldr	r2, [pc, #260]	; (8000fe0 <HAL_ADC_Start+0x154>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d105      	bne.n	8000eea <HAL_ADC_Start+0x5e>
 8000ede:	4b41      	ldr	r3, [pc, #260]	; (8000fe4 <HAL_ADC_Start+0x158>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d115      	bne.n	8000f16 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d026      	beq.n	8000f52 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f14:	e01d      	b.n	8000f52 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <HAL_ADC_Start+0x158>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d004      	beq.n	8000f36 <HAL_ADC_Start+0xaa>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <HAL_ADC_Start+0x154>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10d      	bne.n	8000f52 <HAL_ADC_Start+0xc6>
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <HAL_ADC_Start+0x158>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d007      	beq.n	8000f52 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f023 0206 	bic.w	r2, r3, #6
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f6a:	e002      	b.n	8000f72 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f06f 0202 	mvn.w	r2, #2
 8000f82:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f92:	d113      	bne.n	8000fbc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f98:	4a11      	ldr	r2, [pc, #68]	; (8000fe0 <HAL_ADC_Start+0x154>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d105      	bne.n	8000faa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_ADC_Start+0x158>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d108      	bne.n	8000fbc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	e00c      	b.n	8000fd6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	e003      	b.n	8000fd6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40012800 	.word	0x40012800
 8000fe4:	40012400 	.word	0x40012400

08000fe8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ffe:	f7ff fe63 	bl	8000cc8 <HAL_GetTick>
 8001002:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	f043 0220 	orr.w	r2, r3, #32
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0d3      	b.n	80011d2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001034:	2b00      	cmp	r3, #0
 8001036:	d131      	bne.n	800109c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001042:	2b00      	cmp	r3, #0
 8001044:	d12a      	bne.n	800109c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001046:	e021      	b.n	800108c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104e:	d01d      	beq.n	800108c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_ADC_PollForConversion+0x7e>
 8001056:	f7ff fe37 	bl	8000cc8 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d212      	bcs.n	800108c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10b      	bne.n	800108c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f043 0204 	orr.w	r2, r3, #4
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e0a2      	b.n	80011d2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0d6      	beq.n	8001048 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800109a:	e070      	b.n	800117e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800109c:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <HAL_ADC_PollForConversion+0x1f4>)
 800109e:	681c      	ldr	r4, [r3, #0]
 80010a0:	2002      	movs	r0, #2
 80010a2:	f001 fa93 	bl	80025cc <HAL_RCCEx_GetPeriphCLKFreq>
 80010a6:	4603      	mov	r3, r0
 80010a8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6919      	ldr	r1, [r3, #16]
 80010b2:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <HAL_ADC_PollForConversion+0x1f8>)
 80010b4:	400b      	ands	r3, r1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d118      	bne.n	80010ec <HAL_ADC_PollForConversion+0x104>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68d9      	ldr	r1, [r3, #12]
 80010c0:	4b48      	ldr	r3, [pc, #288]	; (80011e4 <HAL_ADC_PollForConversion+0x1fc>)
 80010c2:	400b      	ands	r3, r1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d111      	bne.n	80010ec <HAL_ADC_PollForConversion+0x104>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6919      	ldr	r1, [r3, #16]
 80010ce:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <HAL_ADC_PollForConversion+0x200>)
 80010d0:	400b      	ands	r3, r1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d108      	bne.n	80010e8 <HAL_ADC_PollForConversion+0x100>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68d9      	ldr	r1, [r3, #12]
 80010dc:	4b43      	ldr	r3, [pc, #268]	; (80011ec <HAL_ADC_PollForConversion+0x204>)
 80010de:	400b      	ands	r3, r1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_ADC_PollForConversion+0x100>
 80010e4:	2314      	movs	r3, #20
 80010e6:	e020      	b.n	800112a <HAL_ADC_PollForConversion+0x142>
 80010e8:	2329      	movs	r3, #41	; 0x29
 80010ea:	e01e      	b.n	800112a <HAL_ADC_PollForConversion+0x142>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6919      	ldr	r1, [r3, #16]
 80010f2:	4b3d      	ldr	r3, [pc, #244]	; (80011e8 <HAL_ADC_PollForConversion+0x200>)
 80010f4:	400b      	ands	r3, r1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d106      	bne.n	8001108 <HAL_ADC_PollForConversion+0x120>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d9      	ldr	r1, [r3, #12]
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_ADC_PollForConversion+0x204>)
 8001102:	400b      	ands	r3, r1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00d      	beq.n	8001124 <HAL_ADC_PollForConversion+0x13c>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6919      	ldr	r1, [r3, #16]
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <HAL_ADC_PollForConversion+0x208>)
 8001110:	400b      	ands	r3, r1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d108      	bne.n	8001128 <HAL_ADC_PollForConversion+0x140>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68d9      	ldr	r1, [r3, #12]
 800111c:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <HAL_ADC_PollForConversion+0x208>)
 800111e:	400b      	ands	r3, r1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_ADC_PollForConversion+0x140>
 8001124:	2354      	movs	r3, #84	; 0x54
 8001126:	e000      	b.n	800112a <HAL_ADC_PollForConversion+0x142>
 8001128:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001130:	e021      	b.n	8001176 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d01a      	beq.n	8001170 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <HAL_ADC_PollForConversion+0x168>
 8001140:	f7ff fdc2 	bl	8000cc8 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d20f      	bcs.n	8001170 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d90b      	bls.n	8001170 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	f043 0204 	orr.w	r2, r3, #4
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e030      	b.n	80011d2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	429a      	cmp	r2, r3
 800117c:	d8d9      	bhi.n	8001132 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f06f 0212 	mvn.w	r2, #18
 8001186:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800119e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011a2:	d115      	bne.n	80011d0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d111      	bne.n	80011d0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	f043 0201 	orr.w	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000000 	.word	0x20000000
 80011e0:	24924924 	.word	0x24924924
 80011e4:	00924924 	.word	0x00924924
 80011e8:	12492492 	.word	0x12492492
 80011ec:	00492492 	.word	0x00492492
 80011f0:	00249249 	.word	0x00249249

080011f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	2b00      	cmp	r3, #0
 800122c:	d03e      	beq.n	80012ac <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d039      	beq.n	80012ac <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800125a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800125e:	d11d      	bne.n	800129c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001264:	2b00      	cmp	r3, #0
 8001266:	d119      	bne.n	800129c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0220 	bic.w	r2, r2, #32
 8001276:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f874 	bl	800138a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f06f 0212 	mvn.w	r2, #18
 80012aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d04d      	beq.n	8001352 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d048      	beq.n	8001352 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80012e2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80012e6:	d012      	beq.n	800130e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d125      	bne.n	8001342 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001300:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001304:	d11d      	bne.n	8001342 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d119      	bne.n	8001342 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800131c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f9c7 	bl	80016d6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f06f 020c 	mvn.w	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001358:	2b00      	cmp	r3, #0
 800135a:	d012      	beq.n	8001382 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00d      	beq.n	8001382 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f812 	bl	800139c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f06f 0201 	mvn.w	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x20>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e0dc      	b.n	800158a <HAL_ADC_ConfigChannel+0x1da>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b06      	cmp	r3, #6
 80013de:	d81c      	bhi.n	800141a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	3b05      	subs	r3, #5
 80013f2:	221f      	movs	r2, #31
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	4019      	ands	r1, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	3b05      	subs	r3, #5
 800140c:	fa00 f203 	lsl.w	r2, r0, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
 8001418:	e03c      	b.n	8001494 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b0c      	cmp	r3, #12
 8001420:	d81c      	bhi.n	800145c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	3b23      	subs	r3, #35	; 0x23
 8001434:	221f      	movs	r2, #31
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	4019      	ands	r1, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	3b23      	subs	r3, #35	; 0x23
 800144e:	fa00 f203 	lsl.w	r2, r0, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
 800145a:	e01b      	b.n	8001494 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	3b41      	subs	r3, #65	; 0x41
 800146e:	221f      	movs	r2, #31
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	4019      	ands	r1, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b41      	subs	r3, #65	; 0x41
 8001488:	fa00 f203 	lsl.w	r2, r0, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b09      	cmp	r3, #9
 800149a:	d91c      	bls.n	80014d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68d9      	ldr	r1, [r3, #12]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	3b1e      	subs	r3, #30
 80014ae:	2207      	movs	r2, #7
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4019      	ands	r1, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	6898      	ldr	r0, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	3b1e      	subs	r3, #30
 80014c8:	fa00 f203 	lsl.w	r2, r0, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	e019      	b.n	800150a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6919      	ldr	r1, [r3, #16]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	2207      	movs	r2, #7
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	4019      	ands	r1, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6898      	ldr	r0, [r3, #8]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b10      	cmp	r3, #16
 8001510:	d003      	beq.n	800151a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001516:	2b11      	cmp	r3, #17
 8001518:	d132      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_ADC_ConfigChannel+0x1e4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d125      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d126      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001540:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b10      	cmp	r3, #16
 8001548:	d11a      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <HAL_ADC_ConfigChannel+0x1e8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_ADC_ConfigChannel+0x1ec>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	0c9a      	lsrs	r2, r3, #18
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001560:	e002      	b.n	8001568 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3b01      	subs	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f9      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x1b2>
 800156e:	e007      	b.n	8001580 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f043 0220 	orr.w	r2, r3, #32
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40012400 	.word	0x40012400
 8001598:	20000000 	.word	0x20000000
 800159c:	431bde83 	.word	0x431bde83

080015a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d040      	beq.n	8001640 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 0201 	orr.w	r2, r2, #1
 80015cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <ADC_Enable+0xac>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <ADC_Enable+0xb0>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	0c9b      	lsrs	r3, r3, #18
 80015da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015dc:	e002      	b.n	80015e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015ea:	f7ff fb6d 	bl	8000cc8 <HAL_GetTick>
 80015ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015f0:	e01f      	b.n	8001632 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015f2:	f7ff fb69 	bl	8000cc8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d918      	bls.n	8001632 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b01      	cmp	r3, #1
 800160c:	d011      	beq.n	8001632 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	f043 0210 	orr.w	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	f043 0201 	orr.w	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e007      	b.n	8001642 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d1d8      	bne.n	80015f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d12e      	bne.n	80016cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800167e:	f7ff fb23 	bl	8000cc8 <HAL_GetTick>
 8001682:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001684:	e01b      	b.n	80016be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001686:	f7ff fb1f 	bl	8000cc8 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d914      	bls.n	80016be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d10d      	bne.n	80016be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f043 0210 	orr.w	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e007      	b.n	80016ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d0dc      	beq.n	8001686 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4906      	ldr	r1, [pc, #24]	; (8001780 <__NVIC_EnableIRQ+0x34>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff4f 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff64 	bl	8001730 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ffb2 	bl	80017d8 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff81 	bl	8001784 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff57 	bl	800174c <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b08b      	sub	sp, #44	; 0x2c
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	e169      	b.n	8001b90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018bc:	2201      	movs	r2, #1
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8158 	bne.w	8001b8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a9a      	ldr	r2, [pc, #616]	; (8001b48 <HAL_GPIO_Init+0x2a0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d05e      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 80018e4:	4a98      	ldr	r2, [pc, #608]	; (8001b48 <HAL_GPIO_Init+0x2a0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d875      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 80018ea:	4a98      	ldr	r2, [pc, #608]	; (8001b4c <HAL_GPIO_Init+0x2a4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d058      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 80018f0:	4a96      	ldr	r2, [pc, #600]	; (8001b4c <HAL_GPIO_Init+0x2a4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d86f      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 80018f6:	4a96      	ldr	r2, [pc, #600]	; (8001b50 <HAL_GPIO_Init+0x2a8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d052      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 80018fc:	4a94      	ldr	r2, [pc, #592]	; (8001b50 <HAL_GPIO_Init+0x2a8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d869      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 8001902:	4a94      	ldr	r2, [pc, #592]	; (8001b54 <HAL_GPIO_Init+0x2ac>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d04c      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 8001908:	4a92      	ldr	r2, [pc, #584]	; (8001b54 <HAL_GPIO_Init+0x2ac>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d863      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 800190e:	4a92      	ldr	r2, [pc, #584]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d046      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 8001914:	4a90      	ldr	r2, [pc, #576]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d85d      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 800191a:	2b12      	cmp	r3, #18
 800191c:	d82a      	bhi.n	8001974 <HAL_GPIO_Init+0xcc>
 800191e:	2b12      	cmp	r3, #18
 8001920:	d859      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 8001922:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <HAL_GPIO_Init+0x80>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	080019a3 	.word	0x080019a3
 800192c:	0800197d 	.word	0x0800197d
 8001930:	0800198f 	.word	0x0800198f
 8001934:	080019d1 	.word	0x080019d1
 8001938:	080019d7 	.word	0x080019d7
 800193c:	080019d7 	.word	0x080019d7
 8001940:	080019d7 	.word	0x080019d7
 8001944:	080019d7 	.word	0x080019d7
 8001948:	080019d7 	.word	0x080019d7
 800194c:	080019d7 	.word	0x080019d7
 8001950:	080019d7 	.word	0x080019d7
 8001954:	080019d7 	.word	0x080019d7
 8001958:	080019d7 	.word	0x080019d7
 800195c:	080019d7 	.word	0x080019d7
 8001960:	080019d7 	.word	0x080019d7
 8001964:	080019d7 	.word	0x080019d7
 8001968:	080019d7 	.word	0x080019d7
 800196c:	08001985 	.word	0x08001985
 8001970:	08001999 	.word	0x08001999
 8001974:	4a79      	ldr	r2, [pc, #484]	; (8001b5c <HAL_GPIO_Init+0x2b4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d013      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800197a:	e02c      	b.n	80019d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e029      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	3304      	adds	r3, #4
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e024      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	3308      	adds	r3, #8
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e01f      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	330c      	adds	r3, #12
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e01a      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019aa:	2304      	movs	r3, #4
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e013      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b8:	2308      	movs	r3, #8
 80019ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	611a      	str	r2, [r3, #16]
          break;
 80019c2:	e009      	b.n	80019d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c4:	2308      	movs	r3, #8
 80019c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	615a      	str	r2, [r3, #20]
          break;
 80019ce:	e003      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          break;
 80019d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d801      	bhi.n	80019e2 <HAL_GPIO_Init+0x13a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	e001      	b.n	80019e6 <HAL_GPIO_Init+0x13e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3304      	adds	r3, #4
 80019e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2bff      	cmp	r3, #255	; 0xff
 80019ec:	d802      	bhi.n	80019f4 <HAL_GPIO_Init+0x14c>
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_Init+0x152>
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	3b08      	subs	r3, #8
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	210f      	movs	r1, #15
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	6a39      	ldr	r1, [r7, #32]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	431a      	orrs	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80b1 	beq.w	8001b8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a40:	4a48      	ldr	r2, [pc, #288]	; (8001b64 <HAL_GPIO_Init+0x2bc>)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d013      	beq.n	8001a94 <HAL_GPIO_Init+0x1ec>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a3f      	ldr	r2, [pc, #252]	; (8001b6c <HAL_GPIO_Init+0x2c4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00d      	beq.n	8001a90 <HAL_GPIO_Init+0x1e8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a3e      	ldr	r2, [pc, #248]	; (8001b70 <HAL_GPIO_Init+0x2c8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <HAL_GPIO_Init+0x1e4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3d      	ldr	r2, [pc, #244]	; (8001b74 <HAL_GPIO_Init+0x2cc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_GPIO_Init+0x1e0>
 8001a84:	2303      	movs	r3, #3
 8001a86:	e006      	b.n	8001a96 <HAL_GPIO_Init+0x1ee>
 8001a88:	2304      	movs	r3, #4
 8001a8a:	e004      	b.n	8001a96 <HAL_GPIO_Init+0x1ee>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e002      	b.n	8001a96 <HAL_GPIO_Init+0x1ee>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_GPIO_Init+0x1ee>
 8001a94:	2300      	movs	r3, #0
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	f002 0203 	and.w	r2, r2, #3
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	4093      	lsls	r3, r2
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aa6:	492f      	ldr	r1, [pc, #188]	; (8001b64 <HAL_GPIO_Init+0x2bc>)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	492c      	ldr	r1, [pc, #176]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	4928      	ldr	r1, [pc, #160]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	4922      	ldr	r1, [pc, #136]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60cb      	str	r3, [r1, #12]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	491e      	ldr	r1, [pc, #120]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4918      	ldr	r1, [pc, #96]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4914      	ldr	r1, [pc, #80]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d021      	beq.n	8001b7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	490e      	ldr	r1, [pc, #56]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e021      	b.n	8001b8a <HAL_GPIO_Init+0x2e2>
 8001b46:	bf00      	nop
 8001b48:	10320000 	.word	0x10320000
 8001b4c:	10310000 	.word	0x10310000
 8001b50:	10220000 	.word	0x10220000
 8001b54:	10210000 	.word	0x10210000
 8001b58:	10120000 	.word	0x10120000
 8001b5c:	10110000 	.word	0x10110000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000
 8001b68:	40010800 	.word	0x40010800
 8001b6c:	40010c00 	.word	0x40010c00
 8001b70:	40011000 	.word	0x40011000
 8001b74:	40011400 	.word	0x40011400
 8001b78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	4909      	ldr	r1, [pc, #36]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f47f ae8e 	bne.w	80018bc <HAL_GPIO_Init+0x14>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	372c      	adds	r7, #44	; 0x2c
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	40010400 	.word	0x40010400

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e272      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8087 	beq.w	8001d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c00:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d00c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d112      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
 8001c18:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d10b      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x12c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d168      	bne.n	8001d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e24c      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x76>
 8001c48:	4b80      	ldr	r3, [pc, #512]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a7f      	ldr	r2, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e02e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x98>
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7a      	ldr	r2, [pc, #488]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b78      	ldr	r3, [pc, #480]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a77      	ldr	r2, [pc, #476]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0xbc>
 8001c82:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a71      	ldr	r2, [pc, #452]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6e      	ldr	r2, [pc, #440]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a67      	ldr	r2, [pc, #412]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f804 	bl	8000cc8 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f800 	bl	8000cc8 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e200      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe4>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fff0 	bl	8000cc8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7fe ffec 	bl	8000cc8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1ec      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x10c>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d063      	beq.n	8001de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1c0      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4939      	ldr	r1, [pc, #228]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe ffa5 	bl	8000cc8 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7fe ffa1 	bl	8000cc8 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1a1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4927      	ldr	r1, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ff84 	bl	8000cc8 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7fe ff80 	bl	8000cc8 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e180      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03a      	beq.n	8001e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d019      	beq.n	8001e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7fe ff64 	bl	8000cc8 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7fe ff60 	bl	8000cc8 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e160      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 fafe 	bl	8002424 <RCC_Delay>
 8001e28:	e01c      	b.n	8001e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7fe ff4a 	bl	8000cc8 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	e00f      	b.n	8001e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e38:	f7fe ff46 	bl	8000cc8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d908      	bls.n	8001e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e146      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	42420000 	.word	0x42420000
 8001e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e9      	bne.n	8001e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a6 	beq.w	8001fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10d      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a87      	ldr	r2, [pc, #540]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7e      	ldr	r2, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe ff07 	bl	8000cc8 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7fe ff03 	bl	8000cc8 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b64      	cmp	r3, #100	; 0x64
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e103      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b75      	ldr	r3, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x4c8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x312>
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a6e      	ldr	r2, [pc, #440]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e02d      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x334>
 8001efa:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a69      	ldr	r2, [pc, #420]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a66      	ldr	r2, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	e01c      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x356>
 8001f1c:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a60      	ldr	r2, [pc, #384]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	4b5e      	ldr	r3, [pc, #376]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a5d      	ldr	r2, [pc, #372]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	e00b      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a5a      	ldr	r2, [pc, #360]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a57      	ldr	r2, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d015      	beq.n	8001f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe feb7 	bl	8000cc8 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7fe feb3 	bl	8000cc8 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0b1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ee      	beq.n	8001f5e <HAL_RCC_OscConfig+0x37e>
 8001f80:	e014      	b.n	8001fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7fe fea1 	bl	8000cc8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fe9d 	bl	8000cc8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e09b      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8087 	beq.w	80020d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d061      	beq.n	8002098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d146      	bne.n	800206a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fdc:	4b33      	ldr	r3, [pc, #204]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fe71 	bl	8000cc8 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe fe6d 	bl	8000cc8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e06d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4921      	ldr	r1, [pc, #132]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a19      	ldr	r1, [r3, #32]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	430b      	orrs	r3, r1
 8002036:	491b      	ldr	r1, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe fe41 	bl	8000cc8 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe fe3d 	bl	8000cc8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e03d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x46a>
 8002068:	e035      	b.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_RCC_OscConfig+0x4cc>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe fe2a 	bl	8000cc8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe fe26 	bl	8000cc8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e026      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x498>
 8002096:	e01e      	b.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e019      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40007000 	.word	0x40007000
 80020ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x500>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0d0      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d910      	bls.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4965      	ldr	r1, [pc, #404]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b8      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800214a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002158:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	494d      	ldr	r1, [pc, #308]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d040      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d115      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07f      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e073      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06b      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4936      	ldr	r1, [pc, #216]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7fe fd78 	bl	8000cc8 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe fd74 	bl	8000cc8 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e053      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d210      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4922      	ldr	r1, [pc, #136]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e032      	b.n	800229a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4916      	ldr	r1, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	490e      	ldr	r1, [pc, #56]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002272:	f000 f821 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	490a      	ldr	r1, [pc, #40]	; (80022ac <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_RCC_ClockConfig+0x1cc>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fb98 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	0800655c 	.word	0x0800655c
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_GetSysClockFreq+0x94>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x36>
 80022e6:	e027      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ea:	613b      	str	r3, [r7, #16]
      break;
 80022ec:	e027      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	0c9b      	lsrs	r3, r3, #18
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_RCC_GetSysClockFreq+0x94>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0c5b      	lsrs	r3, r3, #17
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	fb03 f202 	mul.w	r2, r3, r2
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e004      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_RCC_GetSysClockFreq+0xa4>)
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	613b      	str	r3, [r7, #16]
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetSysClockFreq+0x98>)
 800233a:	613b      	str	r3, [r7, #16]
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	693b      	ldr	r3, [r7, #16]
}
 8002340:	4618      	mov	r0, r3
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	007a1200 	.word	0x007a1200
 8002354:	08006574 	.word	0x08006574
 8002358:	08006584 	.word	0x08006584
 800235c:	003d0900 	.word	0x003d0900

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_RCC_GetHCLKFreq+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000000 	.word	0x20000000

08002374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002378:	f7ff fff2 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	0800656c 	.word	0x0800656c

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff ffde 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0adb      	lsrs	r3, r3, #11
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	0800656c 	.word	0x0800656c

080023c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	220f      	movs	r2, #15
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_RCC_GetClockConfig+0x58>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0203 	and.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_RCC_GetClockConfig+0x58>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_GetClockConfig+0x58>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCC_GetClockConfig+0x58>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_GetClockConfig+0x5c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0207 	and.w	r2, r3, #7
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	40021000 	.word	0x40021000
 8002420:	40022000 	.word	0x40022000

08002424 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <RCC_Delay+0x34>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0a      	ldr	r2, [pc, #40]	; (800245c <RCC_Delay+0x38>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0a5b      	lsrs	r3, r3, #9
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002440:	bf00      	nop
  }
  while (Delay --);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	60fa      	str	r2, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f9      	bne.n	8002440 <RCC_Delay+0x1c>
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	20000000 	.word	0x20000000
 800245c:	10624dd3 	.word	0x10624dd3

08002460 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d07d      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002480:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10d      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	61d3      	str	r3, [r2, #28]
 8002498:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d118      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b4:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a42      	ldr	r2, [pc, #264]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c0:	f7fe fc02 	bl	8000cc8 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	e008      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7fe fbfe 	bl	8000cc8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e06d      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024e6:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d02e      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d027      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800250e:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800251a:	4a29      	ldr	r2, [pc, #164]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d014      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fbcd 	bl	8000cc8 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe fbc9 	bl	8000cc8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e036      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ee      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002554:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4917      	ldr	r1, [pc, #92]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002562:	4313      	orrs	r3, r2
 8002564:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002566:	7dfb      	ldrb	r3, [r7, #23]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002576:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	490b      	ldr	r1, [pc, #44]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4904      	ldr	r1, [pc, #16]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42420440 	.word	0x42420440

080025cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	f200 808a 	bhi.w	800270a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d045      	beq.n	8002688 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d075      	beq.n	80026ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002602:	e082      	b.n	800270a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002604:	4b46      	ldr	r3, [pc, #280]	; (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800260a:	4b45      	ldr	r3, [pc, #276]	; (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d07b      	beq.n	800270e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	0c9b      	lsrs	r3, r3, #18
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	4a41      	ldr	r2, [pc, #260]	; (8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002620:	5cd3      	ldrb	r3, [r2, r3]
 8002622:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d015      	beq.n	800265a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800262e:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	0c5b      	lsrs	r3, r3, #17
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	4a3b      	ldr	r2, [pc, #236]	; (8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800263a:	5cd3      	ldrb	r3, [r2, r3]
 800263c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002648:	4a38      	ldr	r2, [pc, #224]	; (800272c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	e004      	b.n	8002664 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4a34      	ldr	r2, [pc, #208]	; (8002730 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002664:	4b2e      	ldr	r3, [pc, #184]	; (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002670:	d102      	bne.n	8002678 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	61bb      	str	r3, [r7, #24]
      break;
 8002676:	e04a      	b.n	800270e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	61bb      	str	r3, [r7, #24]
      break;
 8002686:	e042      	b.n	800270e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002698:	d108      	bne.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80026a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e01f      	b.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b6:	d109      	bne.n	80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80026c4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	e00f      	b.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026d6:	d11c      	bne.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80026e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80026e8:	61bb      	str	r3, [r7, #24]
      break;
 80026ea:	e012      	b.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026ec:	e011      	b.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80026ee:	f7ff fe55 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	0b9b      	lsrs	r3, r3, #14
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	61bb      	str	r3, [r7, #24]
      break;
 8002708:	e004      	b.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800270a:	bf00      	nop
 800270c:	e002      	b.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002712:	bf00      	nop
    }
  }
  return (frequency);
 8002714:	69bb      	ldr	r3, [r7, #24]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	08006588 	.word	0x08006588
 8002728:	08006598 	.word	0x08006598
 800272c:	007a1200 	.word	0x007a1200
 8002730:	003d0900 	.word	0x003d0900
 8002734:	aaaaaaab 	.word	0xaaaaaaab

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e041      	b.n	80027ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe f8b4 	bl	80008cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f000 f9ac 	bl	8002ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d001      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e03a      	b.n	8002866 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a18      	ldr	r2, [pc, #96]	; (8002870 <HAL_TIM_Base_Start_IT+0x98>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00e      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x58>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281a:	d009      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x58>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <HAL_TIM_Base_Start_IT+0x9c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x58>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <HAL_TIM_Base_Start_IT+0xa0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d111      	bne.n	8002854 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b06      	cmp	r3, #6
 8002840:	d010      	beq.n	8002864 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002852:	e007      	b.n	8002864 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40000400 	.word	0x40000400
 8002878:	40000800 	.word	0x40000800

0800287c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	d122      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b02      	cmp	r3, #2
 800289e:	d11b      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0202 	mvn.w	r2, #2
 80028a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f8ed 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8e0 	bl	8002a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f8ef 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d122      	bne.n	800292c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d11b      	bne.n	800292c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0204 	mvn.w	r2, #4
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2202      	movs	r2, #2
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8c3 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8b6 	bl	8002a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f8c5 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b08      	cmp	r3, #8
 8002938:	d122      	bne.n	8002980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b08      	cmp	r3, #8
 8002946:	d11b      	bne.n	8002980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0208 	mvn.w	r2, #8
 8002950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2204      	movs	r2, #4
 8002956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f899 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f88c 	bl	8002a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f89b 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b10      	cmp	r3, #16
 800298c:	d122      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b10      	cmp	r3, #16
 800299a:	d11b      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0210 	mvn.w	r2, #16
 80029a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2208      	movs	r2, #8
 80029aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f86f 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
 80029c0:	e005      	b.n	80029ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f862 	bl	8002a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f871 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10e      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d107      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0201 	mvn.w	r2, #1
 80029f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fd fdae 	bl	800055c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b80      	cmp	r3, #128	; 0x80
 8002a0c:	d10e      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b80      	cmp	r3, #128	; 0x80
 8002a1a:	d107      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8bf 	bl	8002baa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d10e      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d107      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f835 	bl	8002ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d107      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0220 	mvn.w	r2, #32
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f88a 	bl	8002b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <TIM_Base_SetConfig+0xb8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <TIM_Base_SetConfig+0x30>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af2:	d007      	beq.n	8002b04 <TIM_Base_SetConfig+0x30>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <TIM_Base_SetConfig+0xbc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d003      	beq.n	8002b04 <TIM_Base_SetConfig+0x30>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <TIM_Base_SetConfig+0xc0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d108      	bne.n	8002b16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <TIM_Base_SetConfig+0xb8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <TIM_Base_SetConfig+0x62>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0x62>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <TIM_Base_SetConfig+0xbc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0x62>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <TIM_Base_SetConfig+0xc0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <TIM_Base_SetConfig+0xb8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d103      	bne.n	8002b7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	615a      	str	r2, [r3, #20]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40000800 	.word	0x40000800

08002b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e042      	b.n	8002c54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd fe96 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2224      	movs	r2, #36	; 0x24
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f91d 	bl	8002e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d16d      	bne.n	8002d58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_UART_Transmit+0x2c>
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e066      	b.n	8002d5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2221      	movs	r2, #33	; 0x21
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c9a:	f7fe f815 	bl	8000cc8 <HAL_GetTick>
 8002c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb4:	d108      	bne.n	8002cc8 <HAL_UART_Transmit+0x6c>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e003      	b.n	8002cd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cd0:	e02a      	b.n	8002d28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f840 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e036      	b.n	8002d5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3302      	adds	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e007      	b.n	8002d1a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1cf      	bne.n	8002cd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f810 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e006      	b.n	8002d5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b090      	sub	sp, #64	; 0x40
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d72:	e050      	b.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d04c      	beq.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d82:	f7fd ffa1 	bl	8000cc8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d241      	bcs.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002db2:	637a      	str	r2, [r7, #52]	; 0x34
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e5      	bne.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3314      	adds	r3, #20
 8002dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3314      	adds	r3, #20
 8002de4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002de6:	623a      	str	r2, [r7, #32]
 8002de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	69f9      	ldr	r1, [r7, #28]
 8002dec:	6a3a      	ldr	r2, [r7, #32]
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e5      	bne.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e00f      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d09f      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3740      	adds	r7, #64	; 0x40
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e7a:	f023 030c 	bic.w	r3, r3, #12
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <UART_SetConfig+0x114>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d103      	bne.n	8002eb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ea8:	f7ff fa78 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	e002      	b.n	8002eb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002eb0:	f7ff fa60 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 8002eb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009a      	lsls	r2, r3, #2
 8002ec0:	441a      	add	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <UART_SetConfig+0x118>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	0119      	lsls	r1, r3, #4
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <UART_SetConfig+0x118>)
 8002eee:	fba3 0302 	umull	r0, r3, r3, r2
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2064      	movs	r0, #100	; 0x64
 8002ef6:	fb00 f303 	mul.w	r3, r0, r3
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <UART_SetConfig+0x118>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0c:	4419      	add	r1, r3
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	009a      	lsls	r2, r3, #2
 8002f18:	441a      	add	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <UART_SetConfig+0x118>)
 8002f26:	fba3 0302 	umull	r0, r3, r3, r2
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2064      	movs	r0, #100	; 0x64
 8002f2e:	fb00 f303 	mul.w	r3, r0, r3
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	3332      	adds	r3, #50	; 0x32
 8002f38:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <UART_SetConfig+0x118>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	f003 020f 	and.w	r2, r3, #15
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	440a      	add	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40013800 	.word	0x40013800
 8002f58:	51eb851f 	.word	0x51eb851f

08002f5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f103 0208 	add.w	r2, r3, #8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f04f 32ff 	mov.w	r2, #4294967295
 8002f74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f103 0208 	add.w	r2, r3, #8
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f103 0208 	add.w	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d103      	bne.n	8003018 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e00c      	b.n	8003032 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3308      	adds	r3, #8
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e002      	b.n	8003026 <vListInsert+0x2e>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	d2f6      	bcs.n	8003020 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6892      	ldr	r2, [r2, #8]
 800307e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6852      	ldr	r2, [r2, #4]
 8003088:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	d103      	bne.n	800309c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	1e5a      	subs	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
	...

080030bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030e6:	f001 fd79 	bl	8004bdc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	441a      	add	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	3b01      	subs	r3, #1
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	441a      	add	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	22ff      	movs	r2, #255	; 0xff
 800312a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	22ff      	movs	r2, #255	; 0xff
 8003132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d114      	bne.n	8003166 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01a      	beq.n	800317a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3310      	adds	r3, #16
 8003148:	4618      	mov	r0, r3
 800314a:	f001 f891 	bl	8004270 <xTaskRemoveFromEventList>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d012      	beq.n	800317a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <xQueueGenericReset+0xcc>)
 8003156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	e009      	b.n	800317a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3310      	adds	r3, #16
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fef6 	bl	8002f5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3324      	adds	r3, #36	; 0x24
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fef1 	bl	8002f5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800317a:	f001 fd5f 	bl	8004c3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800317e:	2301      	movs	r3, #1
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	e000ed04 	.word	0xe000ed04

0800318c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	613b      	str	r3, [r7, #16]
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	e004      	b.n	80031cc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	3350      	adds	r3, #80	; 0x50
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 fdc5 	bl	8004d60 <pvPortMalloc>
 80031d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00f      	beq.n	80031fe <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	3350      	adds	r3, #80	; 0x50
 80031e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031ec:	79fa      	ldrb	r2, [r7, #7]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f805 	bl	8003208 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80031fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e002      	b.n	800322a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003236:	2101      	movs	r1, #1
 8003238:	69b8      	ldr	r0, [r7, #24]
 800323a:	f7ff ff3f 	bl	80030bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08e      	sub	sp, #56	; 0x38
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800325e:	2300      	movs	r3, #0
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueGenericSend+0x32>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <xQueueGenericSend+0x40>
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <xQueueGenericSend+0x44>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <xQueueGenericSend+0x46>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <xQueueGenericSend+0x60>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032ac:	bf00      	nop
 80032ae:	e7fe      	b.n	80032ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <xQueueGenericSend+0x6e>
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <xQueueGenericSend+0x72>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <xQueueGenericSend+0x74>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <xQueueGenericSend+0x8e>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	623b      	str	r3, [r7, #32]
}
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032de:	f001 f98b 	bl	80045f8 <xTaskGetSchedulerState>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <xQueueGenericSend+0x9e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <xQueueGenericSend+0xa2>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <xQueueGenericSend+0xa4>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <xQueueGenericSend+0xbe>
	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	61fb      	str	r3, [r7, #28]
}
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800330e:	f001 fc65 	bl	8004bdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <xQueueGenericSend+0xd4>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d129      	bne.n	8003378 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800332a:	f000 f98d 	bl	8003648 <prvCopyDataToQueue>
 800332e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	3324      	adds	r3, #36	; 0x24
 800333c:	4618      	mov	r0, r3
 800333e:	f000 ff97 	bl	8004270 <xTaskRemoveFromEventList>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003348:	4b3f      	ldr	r3, [pc, #252]	; (8003448 <xQueueGenericSend+0x1f8>)
 800334a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	e00a      	b.n	8003370 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003360:	4b39      	ldr	r3, [pc, #228]	; (8003448 <xQueueGenericSend+0x1f8>)
 8003362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003370:	f001 fc64 	bl	8004c3c <vPortExitCritical>
				return pdPASS;
 8003374:	2301      	movs	r3, #1
 8003376:	e063      	b.n	8003440 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800337e:	f001 fc5d 	bl	8004c3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003382:	2300      	movs	r3, #0
 8003384:	e05c      	b.n	8003440 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	4618      	mov	r0, r3
 8003392:	f000 ffcf 	bl	8004334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003396:	2301      	movs	r3, #1
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800339a:	f001 fc4f 	bl	8004c3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800339e:	f000 fd01 	bl	8003da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033a2:	f001 fc1b 	bl	8004bdc <vPortEnterCritical>
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d103      	bne.n	80033bc <xQueueGenericSend+0x16c>
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d103      	bne.n	80033d2 <xQueueGenericSend+0x182>
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d2:	f001 fc33 	bl	8004c3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033d6:	1d3a      	adds	r2, r7, #4
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 ffbe 	bl	8004360 <xTaskCheckForTimeOut>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d124      	bne.n	8003434 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ec:	f000 fa24 	bl	8003838 <prvIsQueueFull>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d018      	beq.n	8003428 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	3310      	adds	r3, #16
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 ff12 	bl	8004228 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003406:	f000 f9af 	bl	8003768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800340a:	f000 fcd9 	bl	8003dc0 <xTaskResumeAll>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f47f af7c 	bne.w	800330e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003416:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <xQueueGenericSend+0x1f8>)
 8003418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	e772      	b.n	800330e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800342a:	f000 f99d 	bl	8003768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800342e:	f000 fcc7 	bl	8003dc0 <xTaskResumeAll>
 8003432:	e76c      	b.n	800330e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003436:	f000 f997 	bl	8003768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800343a:	f000 fcc1 	bl	8003dc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800343e:	2300      	movs	r3, #0
		}
	}
}
 8003440:	4618      	mov	r0, r3
 8003442:	3738      	adds	r7, #56	; 0x38
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	; 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003458:	2300      	movs	r3, #0
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <xQueueReceive+0x30>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	623b      	str	r3, [r7, #32]
}
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <xQueueReceive+0x3e>
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <xQueueReceive+0x42>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <xQueueReceive+0x44>
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <xQueueReceive+0x5e>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	61fb      	str	r3, [r7, #28]
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034aa:	f001 f8a5 	bl	80045f8 <xTaskGetSchedulerState>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <xQueueReceive+0x6e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <xQueueReceive+0x72>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <xQueueReceive+0x74>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <xQueueReceive+0x8e>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61bb      	str	r3, [r7, #24]
}
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80034da:	f001 fb7f 	bl	8004bdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01f      	beq.n	800352a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ee:	f000 f915 	bl	800371c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	1e5a      	subs	r2, r3, #1
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00f      	beq.n	8003522 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	3310      	adds	r3, #16
 8003506:	4618      	mov	r0, r3
 8003508:	f000 feb2 	bl	8004270 <xTaskRemoveFromEventList>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003512:	4b3d      	ldr	r3, [pc, #244]	; (8003608 <xQueueReceive+0x1bc>)
 8003514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003522:	f001 fb8b 	bl	8004c3c <vPortExitCritical>
				return pdPASS;
 8003526:	2301      	movs	r3, #1
 8003528:	e069      	b.n	80035fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003530:	f001 fb84 	bl	8004c3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003534:	2300      	movs	r3, #0
 8003536:	e062      	b.n	80035fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800353e:	f107 0310 	add.w	r3, r7, #16
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fef6 	bl	8004334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003548:	2301      	movs	r3, #1
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800354c:	f001 fb76 	bl	8004c3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003550:	f000 fc28 	bl	8003da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003554:	f001 fb42 	bl	8004bdc <vPortEnterCritical>
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800355e:	b25b      	sxtb	r3, r3
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d103      	bne.n	800356e <xQueueReceive+0x122>
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003574:	b25b      	sxtb	r3, r3
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d103      	bne.n	8003584 <xQueueReceive+0x138>
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003584:	f001 fb5a 	bl	8004c3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003588:	1d3a      	adds	r2, r7, #4
 800358a:	f107 0310 	add.w	r3, r7, #16
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fee5 	bl	8004360 <xTaskCheckForTimeOut>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d123      	bne.n	80035e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800359c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800359e:	f000 f935 	bl	800380c <prvIsQueueEmpty>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d017      	beq.n	80035d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	3324      	adds	r3, #36	; 0x24
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fe39 	bl	8004228 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035b8:	f000 f8d6 	bl	8003768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035bc:	f000 fc00 	bl	8003dc0 <xTaskResumeAll>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d189      	bne.n	80034da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <xQueueReceive+0x1bc>)
 80035c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	e780      	b.n	80034da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035da:	f000 f8c5 	bl	8003768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035de:	f000 fbef 	bl	8003dc0 <xTaskResumeAll>
 80035e2:	e77a      	b.n	80034da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80035e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e6:	f000 f8bf 	bl	8003768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035ea:	f000 fbe9 	bl	8003dc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f0:	f000 f90c 	bl	800380c <prvIsQueueEmpty>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f43f af6f 	beq.w	80034da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3730      	adds	r7, #48	; 0x30
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	e000ed04 	.word	0xe000ed04

0800360c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	60bb      	str	r3, [r7, #8]
}
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003630:	f001 fad4 	bl	8004bdc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800363a:	f001 faff 	bl	8004c3c <vPortExitCritical>

	return uxReturn;
 800363e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10d      	bne.n	8003682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d14d      	bne.n	800370a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 ffde 	bl	8004634 <xTaskPriorityDisinherit>
 8003678:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	e043      	b.n	800370a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d119      	bne.n	80036bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6898      	ldr	r0, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	461a      	mov	r2, r3
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	f002 f83b 	bl	800570e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	441a      	add	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d32b      	bcc.n	800370a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	e026      	b.n	800370a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68d8      	ldr	r0, [r3, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	461a      	mov	r2, r3
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	f002 f821 	bl	800570e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	425b      	negs	r3, r3
 80036d6:	441a      	add	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d207      	bcs.n	80036f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	425b      	negs	r3, r3
 80036f2:	441a      	add	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d105      	bne.n	800370a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	3b01      	subs	r3, #1
 8003708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003712:	697b      	ldr	r3, [r7, #20]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	441a      	add	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d303      	bcc.n	8003750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68d9      	ldr	r1, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	461a      	mov	r2, r3
 800375a:	6838      	ldr	r0, [r7, #0]
 800375c:	f001 ffd7 	bl	800570e <memcpy>
	}
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003770:	f001 fa34 	bl	8004bdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800377a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800377c:	e011      	b.n	80037a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d012      	beq.n	80037ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3324      	adds	r3, #36	; 0x24
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fd70 	bl	8004270 <xTaskRemoveFromEventList>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003796:	f000 fe45 	bl	8004424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	3b01      	subs	r3, #1
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	dce9      	bgt.n	800377e <prvUnlockQueue+0x16>
 80037aa:	e000      	b.n	80037ae <prvUnlockQueue+0x46>
					break;
 80037ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037b6:	f001 fa41 	bl	8004c3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037ba:	f001 fa0f 	bl	8004bdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037c6:	e011      	b.n	80037ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d012      	beq.n	80037f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3310      	adds	r3, #16
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fd4b 	bl	8004270 <xTaskRemoveFromEventList>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037e0:	f000 fe20 	bl	8004424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dce9      	bgt.n	80037c8 <prvUnlockQueue+0x60>
 80037f4:	e000      	b.n	80037f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	22ff      	movs	r2, #255	; 0xff
 80037fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003800:	f001 fa1c 	bl	8004c3c <vPortExitCritical>
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003814:	f001 f9e2 	bl	8004bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003820:	2301      	movs	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e001      	b.n	800382a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800382a:	f001 fa07 	bl	8004c3c <vPortExitCritical>

	return xReturn;
 800382e:	68fb      	ldr	r3, [r7, #12]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003840:	f001 f9cc 	bl	8004bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384c:	429a      	cmp	r2, r3
 800384e:	d102      	bne.n	8003856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e001      	b.n	800385a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800385a:	f001 f9ef 	bl	8004c3c <vPortExitCritical>

	return xReturn;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08e      	sub	sp, #56	; 0x38
 800386c:	af04      	add	r7, sp, #16
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <xTaskCreateStatic+0x2a>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	623b      	str	r3, [r7, #32]
}
 800388e:	bf00      	nop
 8003890:	e7fe      	b.n	8003890 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xTaskCreateStatic+0x46>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	61fb      	str	r3, [r7, #28]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038ae:	23b0      	movs	r3, #176	; 0xb0
 80038b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2bb0      	cmp	r3, #176	; 0xb0
 80038b6:	d00a      	beq.n	80038ce <xTaskCreateStatic+0x66>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	61bb      	str	r3, [r7, #24]
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01e      	beq.n	8003912 <xTaskCreateStatic+0xaa>
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01b      	beq.n	8003912 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038ec:	2300      	movs	r3, #0
 80038ee:	9303      	str	r3, [sp, #12]
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	9302      	str	r3, [sp, #8]
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f851 	bl	80039ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800390a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800390c:	f000 f8f2 	bl	8003af4 <prvAddNewTaskToReadyList>
 8003910:	e001      	b.n	8003916 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003916:	697b      	ldr	r3, [r7, #20]
	}
 8003918:	4618      	mov	r0, r3
 800391a:	3728      	adds	r7, #40	; 0x28
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af04      	add	r7, sp, #16
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4618      	mov	r0, r3
 8003936:	f001 fa13 	bl	8004d60 <pvPortMalloc>
 800393a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003942:	20b0      	movs	r0, #176	; 0xb0
 8003944:	f001 fa0c 	bl	8004d60 <pvPortMalloc>
 8003948:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
 8003956:	e005      	b.n	8003964 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003958:	6978      	ldr	r0, [r7, #20]
 800395a:	f001 facb 	bl	8004ef4 <vPortFree>
 800395e:	e001      	b.n	8003964 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d017      	beq.n	800399a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	2300      	movs	r3, #0
 8003976:	9303      	str	r3, [sp, #12]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	9302      	str	r3, [sp, #8]
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f80f 	bl	80039ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800398e:	69f8      	ldr	r0, [r7, #28]
 8003990:	f000 f8b0 	bl	8003af4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003994:	2301      	movs	r3, #1
 8003996:	61bb      	str	r3, [r7, #24]
 8003998:	e002      	b.n	80039a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039a0:	69bb      	ldr	r3, [r7, #24]
	}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	461a      	mov	r2, r3
 80039c4:	21a5      	movs	r1, #165	; 0xa5
 80039c6:	f001 fdd1 	bl	800556c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039d4:	3b01      	subs	r3, #1
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f023 0307 	bic.w	r3, r3, #7
 80039e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	617b      	str	r3, [r7, #20]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	e012      	b.n	8003a30 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	7819      	ldrb	r1, [r3, #0]
 8003a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	3334      	adds	r3, #52	; 0x34
 8003a1a:	460a      	mov	r2, r1
 8003a1c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d006      	beq.n	8003a38 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	d9e9      	bls.n	8003a0a <prvInitialiseNewTask+0x5e>
 8003a36:	e000      	b.n	8003a3a <prvInitialiseNewTask+0x8e>
		{
			break;
 8003a38:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	2b06      	cmp	r3, #6
 8003a46:	d901      	bls.n	8003a4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a48:	2306      	movs	r3, #6
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	3304      	adds	r3, #4
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fa99 	bl	8002f9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fa94 	bl	8002f9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	f1c3 0207 	rsb	r2, r3, #7
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2200      	movs	r2, #0
 8003a92:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	335c      	adds	r3, #92	; 0x5c
 8003aa8:	224c      	movs	r2, #76	; 0x4c
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 fd5d 	bl	800556c <memset>
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <prvInitialiseNewTask+0x13c>)
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <prvInitialiseNewTask+0x140>)
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <prvInitialiseNewTask+0x144>)
 8003ac2:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	69b8      	ldr	r0, [r7, #24]
 8003aca:	f000 ff95 	bl	80049f8 <pxPortInitialiseStack>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <prvInitialiseNewTask+0x134>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae0:	bf00      	nop
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200011ac 	.word	0x200011ac
 8003aec:	20001214 	.word	0x20001214
 8003af0:	2000127c 	.word	0x2000127c

08003af4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003afc:	f001 f86e 	bl	8004bdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b00:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <prvAddNewTaskToReadyList+0xc0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	4a2b      	ldr	r2, [pc, #172]	; (8003bb4 <prvAddNewTaskToReadyList+0xc0>)
 8003b08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <prvAddNewTaskToReadyList+0xc4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b12:	4a29      	ldr	r2, [pc, #164]	; (8003bb8 <prvAddNewTaskToReadyList+0xc4>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <prvAddNewTaskToReadyList+0xc0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d110      	bne.n	8003b42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b20:	f000 fca4 	bl	800446c <prvInitialiseTaskLists>
 8003b24:	e00d      	b.n	8003b42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <prvAddNewTaskToReadyList+0xc8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <prvAddNewTaskToReadyList+0xc4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d802      	bhi.n	8003b42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b3c:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <prvAddNewTaskToReadyList+0xc4>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b42:	4b1f      	ldr	r3, [pc, #124]	; (8003bc0 <prvAddNewTaskToReadyList+0xcc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <prvAddNewTaskToReadyList+0xcc>)
 8003b4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <prvAddNewTaskToReadyList+0xcc>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <prvAddNewTaskToReadyList+0xd0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <prvAddNewTaskToReadyList+0xd0>)
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <prvAddNewTaskToReadyList+0xd4>)
 8003b74:	441a      	add	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7ff fa18 	bl	8002fb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b82:	f001 f85b 	bl	8004c3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <prvAddNewTaskToReadyList+0xc8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00e      	beq.n	8003bac <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <prvAddNewTaskToReadyList+0xc4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d207      	bcs.n	8003bac <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <prvAddNewTaskToReadyList+0xd8>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000558 	.word	0x20000558
 8003bb8:	20000458 	.word	0x20000458
 8003bbc:	20000564 	.word	0x20000564
 8003bc0:	20000574 	.word	0x20000574
 8003bc4:	20000560 	.word	0x20000560
 8003bc8:	2000045c 	.word	0x2000045c
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <vTaskDelayUntil+0x2a>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	617b      	str	r3, [r7, #20]
}
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <vTaskDelayUntil+0x46>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	613b      	str	r3, [r7, #16]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <vTaskDelayUntil+0xf0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <vTaskDelayUntil+0x64>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	60fb      	str	r3, [r7, #12]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003c34:	f000 f8b6 	bl	8003da4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003c38:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <vTaskDelayUntil+0xf4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	4413      	add	r3, r2
 8003c46:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a3a      	ldr	r2, [r7, #32]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d20b      	bcs.n	8003c6a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d211      	bcs.n	8003c80 <vTaskDelayUntil+0xb0>
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d90d      	bls.n	8003c80 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003c64:	2301      	movs	r3, #1
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
 8003c68:	e00a      	b.n	8003c80 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d303      	bcc.n	8003c7c <vTaskDelayUntil+0xac>
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d901      	bls.n	8003c80 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d006      	beq.n	8003c9a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fe49 	bl	800492c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003c9a:	f000 f891 	bl	8003dc0 <xTaskResumeAll>
 8003c9e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <vTaskDelayUntil+0xf8>)
 8003ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cb6:	bf00      	nop
 8003cb8:	3728      	adds	r7, #40	; 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000580 	.word	0x20000580
 8003cc4:	2000055c 	.word	0x2000055c
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cda:	463a      	mov	r2, r7
 8003cdc:	1d39      	adds	r1, r7, #4
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fa48 	bl	8000178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	9202      	str	r2, [sp, #8]
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	4922      	ldr	r1, [pc, #136]	; (8003d84 <vTaskStartScheduler+0xb8>)
 8003cfc:	4822      	ldr	r0, [pc, #136]	; (8003d88 <vTaskStartScheduler+0xbc>)
 8003cfe:	f7ff fdb3 	bl	8003868 <xTaskCreateStatic>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <vTaskStartScheduler+0xc0>)
 8003d06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <vTaskStartScheduler+0xc0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d10:	2301      	movs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e001      	b.n	8003d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d11d      	bne.n	8003d5c <vTaskStartScheduler+0x90>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	613b      	str	r3, [r7, #16]
}
 8003d32:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d34:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <vTaskStartScheduler+0xc4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	335c      	adds	r3, #92	; 0x5c
 8003d3a:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <vTaskStartScheduler+0xc8>)
 8003d3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <vTaskStartScheduler+0xcc>)
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <vTaskStartScheduler+0xd0>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <vTaskStartScheduler+0xd4>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003d52:	f7fc f9fd 	bl	8000150 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d56:	f000 fecf 	bl	8004af8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d5a:	e00e      	b.n	8003d7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d10a      	bne.n	8003d7a <vTaskStartScheduler+0xae>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	60fb      	str	r3, [r7, #12]
}
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <vTaskStartScheduler+0xac>
}
 8003d7a:	bf00      	nop
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	0800652c 	.word	0x0800652c
 8003d88:	0800443d 	.word	0x0800443d
 8003d8c:	2000057c 	.word	0x2000057c
 8003d90:	20000458 	.word	0x20000458
 8003d94:	20000068 	.word	0x20000068
 8003d98:	20000578 	.word	0x20000578
 8003d9c:	20000564 	.word	0x20000564
 8003da0:	2000055c 	.word	0x2000055c

08003da4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <vTaskSuspendAll+0x18>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <vTaskSuspendAll+0x18>)
 8003db0:	6013      	str	r3, [r2, #0]
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000580 	.word	0x20000580

08003dc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dce:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <xTaskResumeAll+0x114>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <xTaskResumeAll+0x2c>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	603b      	str	r3, [r7, #0]
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dec:	f000 fef6 	bl	8004bdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003df0:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <xTaskResumeAll+0x114>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	4a37      	ldr	r2, [pc, #220]	; (8003ed4 <xTaskResumeAll+0x114>)
 8003df8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dfa:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <xTaskResumeAll+0x114>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d161      	bne.n	8003ec6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e02:	4b35      	ldr	r3, [pc, #212]	; (8003ed8 <xTaskResumeAll+0x118>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d05d      	beq.n	8003ec6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e0a:	e02e      	b.n	8003e6a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e0c:	4b33      	ldr	r3, [pc, #204]	; (8003edc <xTaskResumeAll+0x11c>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3318      	adds	r3, #24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f925 	bl	8003068 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff f920 	bl	8003068 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <xTaskResumeAll+0x120>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	4a2a      	ldr	r2, [pc, #168]	; (8003ee0 <xTaskResumeAll+0x120>)
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <xTaskResumeAll+0x124>)
 8003e48:	441a      	add	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f7ff f8ae 	bl	8002fb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <xTaskResumeAll+0x128>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e64:	4b21      	ldr	r3, [pc, #132]	; (8003eec <xTaskResumeAll+0x12c>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <xTaskResumeAll+0x11c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1cc      	bne.n	8003e0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e78:	f000 fb9a 	bl	80045b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <xTaskResumeAll+0x130>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d010      	beq.n	8003eaa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e88:	f000 f844 	bl	8003f14 <xTaskIncrementTick>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e92:	4b16      	ldr	r3, [pc, #88]	; (8003eec <xTaskResumeAll+0x12c>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f1      	bne.n	8003e88 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <xTaskResumeAll+0x130>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eaa:	4b10      	ldr	r3, [pc, #64]	; (8003eec <xTaskResumeAll+0x12c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <xTaskResumeAll+0x134>)
 8003eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ec6:	f000 feb9 	bl	8004c3c <vPortExitCritical>

	return xAlreadyYielded;
 8003eca:	68bb      	ldr	r3, [r7, #8]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000580 	.word	0x20000580
 8003ed8:	20000558 	.word	0x20000558
 8003edc:	20000518 	.word	0x20000518
 8003ee0:	20000560 	.word	0x20000560
 8003ee4:	2000045c 	.word	0x2000045c
 8003ee8:	20000458 	.word	0x20000458
 8003eec:	2000056c 	.word	0x2000056c
 8003ef0:	20000568 	.word	0x20000568
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003efe:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <xTaskGetTickCount+0x18>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f04:	687b      	ldr	r3, [r7, #4]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr
 8003f10:	2000055c 	.word	0x2000055c

08003f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1e:	4b51      	ldr	r3, [pc, #324]	; (8004064 <xTaskIncrementTick+0x150>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 808d 	bne.w	8004042 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f28:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <xTaskIncrementTick+0x154>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f30:	4a4d      	ldr	r2, [pc, #308]	; (8004068 <xTaskIncrementTick+0x154>)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d120      	bne.n	8003f7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f3c:	4b4b      	ldr	r3, [pc, #300]	; (800406c <xTaskIncrementTick+0x158>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <xTaskIncrementTick+0x48>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	603b      	str	r3, [r7, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	e7fe      	b.n	8003f5a <xTaskIncrementTick+0x46>
 8003f5c:	4b43      	ldr	r3, [pc, #268]	; (800406c <xTaskIncrementTick+0x158>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	4b43      	ldr	r3, [pc, #268]	; (8004070 <xTaskIncrementTick+0x15c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a41      	ldr	r2, [pc, #260]	; (800406c <xTaskIncrementTick+0x158>)
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4a41      	ldr	r2, [pc, #260]	; (8004070 <xTaskIncrementTick+0x15c>)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b40      	ldr	r3, [pc, #256]	; (8004074 <xTaskIncrementTick+0x160>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	4a3f      	ldr	r2, [pc, #252]	; (8004074 <xTaskIncrementTick+0x160>)
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	f000 fb19 	bl	80045b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f7e:	4b3e      	ldr	r3, [pc, #248]	; (8004078 <xTaskIncrementTick+0x164>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d34d      	bcc.n	8004024 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f88:	4b38      	ldr	r3, [pc, #224]	; (800406c <xTaskIncrementTick+0x158>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <xTaskIncrementTick+0x82>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <xTaskIncrementTick+0x84>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9c:	4b36      	ldr	r3, [pc, #216]	; (8004078 <xTaskIncrementTick+0x164>)
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa2:	601a      	str	r2, [r3, #0]
					break;
 8003fa4:	e03e      	b.n	8004024 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fa6:	4b31      	ldr	r3, [pc, #196]	; (800406c <xTaskIncrementTick+0x158>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d203      	bcs.n	8003fc6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fbe:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <xTaskIncrementTick+0x164>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6013      	str	r3, [r2, #0]
						break;
 8003fc4:	e02e      	b.n	8004024 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff f84c 	bl	8003068 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	3318      	adds	r3, #24
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff f843 	bl	8003068 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <xTaskIncrementTick+0x168>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <xTaskIncrementTick+0x168>)
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <xTaskIncrementTick+0x16c>)
 8004002:	441a      	add	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7fe ffd1 	bl	8002fb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <xTaskIncrementTick+0x170>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	429a      	cmp	r2, r3
 800401c:	d3b4      	bcc.n	8003f88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800401e:	2301      	movs	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004022:	e7b1      	b.n	8003f88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004024:	4b17      	ldr	r3, [pc, #92]	; (8004084 <xTaskIncrementTick+0x170>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	4915      	ldr	r1, [pc, #84]	; (8004080 <xTaskIncrementTick+0x16c>)
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d907      	bls.n	800404c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e004      	b.n	800404c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004042:	4b11      	ldr	r3, [pc, #68]	; (8004088 <xTaskIncrementTick+0x174>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <xTaskIncrementTick+0x174>)
 800404a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <xTaskIncrementTick+0x178>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004058:	697b      	ldr	r3, [r7, #20]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000580 	.word	0x20000580
 8004068:	2000055c 	.word	0x2000055c
 800406c:	20000510 	.word	0x20000510
 8004070:	20000514 	.word	0x20000514
 8004074:	20000570 	.word	0x20000570
 8004078:	20000578 	.word	0x20000578
 800407c:	20000560 	.word	0x20000560
 8004080:	2000045c 	.word	0x2000045c
 8004084:	20000458 	.word	0x20000458
 8004088:	20000568 	.word	0x20000568
 800408c:	2000056c 	.word	0x2000056c

08004090 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <vTaskSetApplicationTaskTag+0x34>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e001      	b.n	80040ac <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80040ac:	f000 fd96 	bl	8004bdc <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
		taskEXIT_CRITICAL();
 80040b6:	f000 fdc1 	bl	8004c3c <vPortExitCritical>
	}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000458 	.word	0x20000458

080040c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ce:	4b4e      	ldr	r3, [pc, #312]	; (8004208 <vTaskSwitchContext+0x140>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040d6:	4b4d      	ldr	r3, [pc, #308]	; (800420c <vTaskSwitchContext+0x144>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040dc:	e090      	b.n	8004200 <vTaskSwitchContext+0x138>
		xYieldPending = pdFALSE;
 80040de:	4b4b      	ldr	r3, [pc, #300]	; (800420c <vTaskSwitchContext+0x144>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80040e4:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <vTaskSwitchContext+0x148>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc f8ce 	bl	800028c <trace_off>
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80040f0:	f7fc f834 	bl	800015c <getRunTimeCounterValue>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4a47      	ldr	r2, [pc, #284]	; (8004214 <vTaskSwitchContext+0x14c>)
 80040f8:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80040fa:	4b46      	ldr	r3, [pc, #280]	; (8004214 <vTaskSwitchContext+0x14c>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b46      	ldr	r3, [pc, #280]	; (8004218 <vTaskSwitchContext+0x150>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d909      	bls.n	800411a <vTaskSwitchContext+0x52>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004106:	4b42      	ldr	r3, [pc, #264]	; (8004210 <vTaskSwitchContext+0x148>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800410c:	4a41      	ldr	r2, [pc, #260]	; (8004214 <vTaskSwitchContext+0x14c>)
 800410e:	6810      	ldr	r0, [r2, #0]
 8004110:	4a41      	ldr	r2, [pc, #260]	; (8004218 <vTaskSwitchContext+0x150>)
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	1a82      	subs	r2, r0, r2
 8004116:	440a      	add	r2, r1
 8004118:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 800411a:	4b3e      	ldr	r3, [pc, #248]	; (8004214 <vTaskSwitchContext+0x14c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a3e      	ldr	r2, [pc, #248]	; (8004218 <vTaskSwitchContext+0x150>)
 8004120:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004122:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <vTaskSwitchContext+0x148>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	429a      	cmp	r2, r3
 8004138:	d111      	bne.n	800415e <vTaskSwitchContext+0x96>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3304      	adds	r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	429a      	cmp	r2, r3
 8004144:	d10b      	bne.n	800415e <vTaskSwitchContext+0x96>
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3308      	adds	r3, #8
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	429a      	cmp	r2, r3
 8004150:	d105      	bne.n	800415e <vTaskSwitchContext+0x96>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	330c      	adds	r3, #12
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	429a      	cmp	r2, r3
 800415c:	d008      	beq.n	8004170 <vTaskSwitchContext+0xa8>
 800415e:	4b2c      	ldr	r3, [pc, #176]	; (8004210 <vTaskSwitchContext+0x148>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <vTaskSwitchContext+0x148>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3334      	adds	r3, #52	; 0x34
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7fc f846 	bl	80001fc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <vTaskSwitchContext+0x154>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800417e:	7afb      	ldrb	r3, [r7, #11]
 8004180:	f1c3 031f 	rsb	r3, r3, #31
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	4926      	ldr	r1, [pc, #152]	; (8004220 <vTaskSwitchContext+0x158>)
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <vTaskSwitchContext+0xe8>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	607b      	str	r3, [r7, #4]
}
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <vTaskSwitchContext+0xe6>
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4a19      	ldr	r2, [pc, #100]	; (8004220 <vTaskSwitchContext+0x158>)
 80041bc:	4413      	add	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3308      	adds	r3, #8
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d104      	bne.n	80041e0 <vTaskSwitchContext+0x118>
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	605a      	str	r2, [r3, #4]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <vTaskSwitchContext+0x148>)
 80041e8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80041ea:	4b09      	ldr	r3, [pc, #36]	; (8004210 <vTaskSwitchContext+0x148>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc f80d 	bl	8000210 <trace_on>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <vTaskSwitchContext+0x148>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	335c      	adds	r3, #92	; 0x5c
 80041fc:	4a09      	ldr	r2, [pc, #36]	; (8004224 <vTaskSwitchContext+0x15c>)
 80041fe:	6013      	str	r3, [r2, #0]
}
 8004200:	bf00      	nop
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000580 	.word	0x20000580
 800420c:	2000056c 	.word	0x2000056c
 8004210:	20000458 	.word	0x20000458
 8004214:	20000588 	.word	0x20000588
 8004218:	20000584 	.word	0x20000584
 800421c:	20000560 	.word	0x20000560
 8004220:	2000045c 	.word	0x2000045c
 8004224:	20000068 	.word	0x20000068

08004228 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60fb      	str	r3, [r7, #12]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <vTaskPlaceOnEventList+0x44>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3318      	adds	r3, #24
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fe fece 	bl	8002ff8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800425c:	2101      	movs	r1, #1
 800425e:	6838      	ldr	r0, [r7, #0]
 8004260:	f000 fb64 	bl	800492c <prvAddCurrentTaskToDelayedList>
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000458 	.word	0x20000458

08004270 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60fb      	str	r3, [r7, #12]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	3318      	adds	r3, #24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fee1 	bl	8003068 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <xTaskRemoveFromEventList+0xac>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11c      	bne.n	80042e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fed8 	bl	8003068 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	2201      	movs	r2, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	4b17      	ldr	r3, [pc, #92]	; (8004320 <xTaskRemoveFromEventList+0xb0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <xTaskRemoveFromEventList+0xb0>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <xTaskRemoveFromEventList+0xb4>)
 80042d8:	441a      	add	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7fe fe66 	bl	8002fb2 <vListInsertEnd>
 80042e6:	e005      	b.n	80042f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	3318      	adds	r3, #24
 80042ec:	4619      	mov	r1, r3
 80042ee:	480e      	ldr	r0, [pc, #56]	; (8004328 <xTaskRemoveFromEventList+0xb8>)
 80042f0:	f7fe fe5f 	bl	8002fb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <xTaskRemoveFromEventList+0xbc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d905      	bls.n	800430e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004302:	2301      	movs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <xTaskRemoveFromEventList+0xc0>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e001      	b.n	8004312 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004312:	697b      	ldr	r3, [r7, #20]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000580 	.word	0x20000580
 8004320:	20000560 	.word	0x20000560
 8004324:	2000045c 	.word	0x2000045c
 8004328:	20000518 	.word	0x20000518
 800432c:	20000458 	.word	0x20000458
 8004330:	2000056c 	.word	0x2000056c

08004334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <vTaskInternalSetTimeOutState+0x24>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <vTaskInternalSetTimeOutState+0x28>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	605a      	str	r2, [r3, #4]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000570 	.word	0x20000570
 800435c:	2000055c 	.word	0x2000055c

08004360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	613b      	str	r3, [r7, #16]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80043a2:	f000 fc1b 	bl	8004bdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <xTaskCheckForTimeOut+0xbc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d102      	bne.n	80043c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	e023      	b.n	800440e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <xTaskCheckForTimeOut+0xc0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d007      	beq.n	80043e2 <xTaskCheckForTimeOut+0x82>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e015      	b.n	800440e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d20b      	bcs.n	8004404 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff9b 	bl	8004334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	e004      	b.n	800440e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800440e:	f000 fc15 	bl	8004c3c <vPortExitCritical>

	return xReturn;
 8004412:	69fb      	ldr	r3, [r7, #28]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	2000055c 	.word	0x2000055c
 8004420:	20000570 	.word	0x20000570

08004424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <vTaskMissedYield+0x14>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	2000056c 	.word	0x2000056c

0800443c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004444:	f000 f852 	bl	80044ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <prvIdleTask+0x28>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d9f9      	bls.n	8004444 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <prvIdleTask+0x2c>)
 8004452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004460:	e7f0      	b.n	8004444 <prvIdleTask+0x8>
 8004462:	bf00      	nop
 8004464:	2000045c 	.word	0x2000045c
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	e00c      	b.n	8004492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a12      	ldr	r2, [pc, #72]	; (80044cc <prvInitialiseTaskLists+0x60>)
 8004484:	4413      	add	r3, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fd68 	bl	8002f5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3301      	adds	r3, #1
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b06      	cmp	r3, #6
 8004496:	d9ef      	bls.n	8004478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004498:	480d      	ldr	r0, [pc, #52]	; (80044d0 <prvInitialiseTaskLists+0x64>)
 800449a:	f7fe fd5f 	bl	8002f5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800449e:	480d      	ldr	r0, [pc, #52]	; (80044d4 <prvInitialiseTaskLists+0x68>)
 80044a0:	f7fe fd5c 	bl	8002f5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044a4:	480c      	ldr	r0, [pc, #48]	; (80044d8 <prvInitialiseTaskLists+0x6c>)
 80044a6:	f7fe fd59 	bl	8002f5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044aa:	480c      	ldr	r0, [pc, #48]	; (80044dc <prvInitialiseTaskLists+0x70>)
 80044ac:	f7fe fd56 	bl	8002f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044b0:	480b      	ldr	r0, [pc, #44]	; (80044e0 <prvInitialiseTaskLists+0x74>)
 80044b2:	f7fe fd53 	bl	8002f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <prvInitialiseTaskLists+0x78>)
 80044b8:	4a05      	ldr	r2, [pc, #20]	; (80044d0 <prvInitialiseTaskLists+0x64>)
 80044ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <prvInitialiseTaskLists+0x7c>)
 80044be:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <prvInitialiseTaskLists+0x68>)
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	2000045c 	.word	0x2000045c
 80044d0:	200004e8 	.word	0x200004e8
 80044d4:	200004fc 	.word	0x200004fc
 80044d8:	20000518 	.word	0x20000518
 80044dc:	2000052c 	.word	0x2000052c
 80044e0:	20000544 	.word	0x20000544
 80044e4:	20000510 	.word	0x20000510
 80044e8:	20000514 	.word	0x20000514

080044ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044f2:	e019      	b.n	8004528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044f4:	f000 fb72 	bl	8004bdc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044f8:	4b10      	ldr	r3, [pc, #64]	; (800453c <prvCheckTasksWaitingTermination+0x50>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fdaf 	bl	8003068 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <prvCheckTasksWaitingTermination+0x54>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3b01      	subs	r3, #1
 8004510:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <prvCheckTasksWaitingTermination+0x54>)
 8004512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <prvCheckTasksWaitingTermination+0x58>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3b01      	subs	r3, #1
 800451a:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <prvCheckTasksWaitingTermination+0x58>)
 800451c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800451e:	f000 fb8d 	bl	8004c3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f810 	bl	8004548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <prvCheckTasksWaitingTermination+0x58>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e1      	bne.n	80044f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	2000052c 	.word	0x2000052c
 8004540:	20000558 	.word	0x20000558
 8004544:	20000540 	.word	0x20000540

08004548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	335c      	adds	r3, #92	; 0x5c
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f821 	bl	800559c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8004560:	2b00      	cmp	r3, #0
 8004562:	d108      	bne.n	8004576 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fcc3 	bl	8004ef4 <vPortFree>
				vPortFree( pxTCB );
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fcc0 	bl	8004ef4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004574:	e018      	b.n	80045a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800457c:	2b01      	cmp	r3, #1
 800457e:	d103      	bne.n	8004588 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fcb7 	bl	8004ef4 <vPortFree>
	}
 8004586:	e00f      	b.n	80045a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800458e:	2b02      	cmp	r3, #2
 8004590:	d00a      	beq.n	80045a8 <prvDeleteTCB+0x60>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60fb      	str	r3, [r7, #12]
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <prvDeleteTCB+0x5e>
	}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <prvResetNextTaskUnblockTime+0x40>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <prvResetNextTaskUnblockTime+0x14>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <prvResetNextTaskUnblockTime+0x16>
 80045c4:	2300      	movs	r3, #0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvResetNextTaskUnblockTime+0x44>)
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045d2:	e008      	b.n	80045e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <prvResetNextTaskUnblockTime+0x40>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <prvResetNextTaskUnblockTime+0x44>)
 80045e4:	6013      	str	r3, [r2, #0]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	20000510 	.word	0x20000510
 80045f4:	20000578 	.word	0x20000578

080045f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <xTaskGetSchedulerState+0x34>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004606:	2301      	movs	r3, #1
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	e008      	b.n	800461e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <xTaskGetSchedulerState+0x38>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004614:	2302      	movs	r3, #2
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	e001      	b.n	800461e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800461e:	687b      	ldr	r3, [r7, #4]
	}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20000564 	.word	0x20000564
 8004630:	20000580 	.word	0x20000580

08004634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d06e      	beq.n	8004728 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800464a:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <xTaskPriorityDisinherit+0x100>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	429a      	cmp	r2, r3
 8004652:	d00a      	beq.n	800466a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	60fb      	str	r3, [r7, #12]
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	60bb      	str	r3, [r7, #8]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	429a      	cmp	r2, r3
 800469c:	d044      	beq.n	8004728 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d140      	bne.n	8004728 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fcdc 	bl	8003068 <uxListRemove>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d115      	bne.n	80046e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ba:	491f      	ldr	r1, [pc, #124]	; (8004738 <xTaskPriorityDisinherit+0x104>)
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <xTaskPriorityDisinherit+0xae>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	2201      	movs	r2, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43da      	mvns	r2, r3
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <xTaskPriorityDisinherit+0x108>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4013      	ands	r3, r2
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <xTaskPriorityDisinherit+0x108>)
 80046e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	f1c3 0207 	rsb	r2, r3, #7
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	2201      	movs	r2, #1
 80046fc:	409a      	lsls	r2, r3
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <xTaskPriorityDisinherit+0x108>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	4a0d      	ldr	r2, [pc, #52]	; (800473c <xTaskPriorityDisinherit+0x108>)
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4a08      	ldr	r2, [pc, #32]	; (8004738 <xTaskPriorityDisinherit+0x104>)
 8004716:	441a      	add	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f7fe fc47 	bl	8002fb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004728:	697b      	ldr	r3, [r7, #20]
	}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000458 	.word	0x20000458
 8004738:	2000045c 	.word	0x2000045c
 800473c:	20000560 	.word	0x20000560

08004740 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800474a:	f000 fa47 	bl	8004bdc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <ulTaskNotifyTake+0x90>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d113      	bne.n	8004782 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <ulTaskNotifyTake+0x90>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00b      	beq.n	8004782 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800476a:	2101      	movs	r1, #1
 800476c:	6838      	ldr	r0, [r7, #0]
 800476e:	f000 f8dd 	bl	800492c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004772:	4b18      	ldr	r3, [pc, #96]	; (80047d4 <ulTaskNotifyTake+0x94>)
 8004774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004782:	f000 fa5b 	bl	8004c3c <vPortExitCritical>

		taskENTER_CRITICAL();
 8004786:	f000 fa29 	bl	8004bdc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <ulTaskNotifyTake+0x90>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004792:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00e      	beq.n	80047b8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <ulTaskNotifyTake+0x90>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80047aa:	e005      	b.n	80047b8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <ulTaskNotifyTake+0x90>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	3a01      	subs	r2, #1
 80047b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <ulTaskNotifyTake+0x90>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 80047c2:	f000 fa3b 	bl	8004c3c <vPortExitCritical>

		return ulReturn;
 80047c6:	68fb      	ldr	r3, [r7, #12]
	}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000458 	.word	0x20000458
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80047e8:	2301      	movs	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <xTaskGenericNotify+0x30>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	61bb      	str	r3, [r7, #24]
}
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800480c:	f000 f9e6 	bl	8004bdc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004826:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	2b04      	cmp	r3, #4
 8004834:	d82d      	bhi.n	8004892 <xTaskGenericNotify+0xba>
 8004836:	a201      	add	r2, pc, #4	; (adr r2, 800483c <xTaskGenericNotify+0x64>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	08004893 	.word	0x08004893
 8004840:	08004851 	.word	0x08004851
 8004844:	08004863 	.word	0x08004863
 8004848:	08004873 	.word	0x08004873
 800484c:	0800487d 	.word	0x0800487d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	431a      	orrs	r2, r3
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8004860:	e017      	b.n	8004892 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8004870:	e00f      	b.n	8004892 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800487a:	e00a      	b.n	8004892 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800487c:	7ffb      	ldrb	r3, [r7, #31]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d004      	beq.n	800488c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800488a:	e001      	b.n	8004890 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800488c:	2300      	movs	r3, #0
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004890:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004892:	7ffb      	ldrb	r3, [r7, #31]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d139      	bne.n	800490c <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	3304      	adds	r3, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe fbe3 	bl	8003068 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	2201      	movs	r2, #1
 80048a8:	409a      	lsls	r2, r3
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <xTaskGenericNotify+0x144>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	4a1a      	ldr	r2, [pc, #104]	; (800491c <xTaskGenericNotify+0x144>)
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <xTaskGenericNotify+0x148>)
 80048c2:	441a      	add	r2, r3
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f7fe fb71 	bl	8002fb2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <xTaskGenericNotify+0x116>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	617b      	str	r3, [r7, #20]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f2:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <xTaskGenericNotify+0x14c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d907      	bls.n	800490c <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <xTaskGenericNotify+0x150>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800490c:	f000 f996 	bl	8004c3c <vPortExitCritical>

		return xReturn;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004912:	4618      	mov	r0, r3
 8004914:	3728      	adds	r7, #40	; 0x28
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000560 	.word	0x20000560
 8004920:	2000045c 	.word	0x2000045c
 8004924:	20000458 	.word	0x20000458
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004936:	4b29      	ldr	r3, [pc, #164]	; (80049dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800493c:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3304      	adds	r3, #4
 8004942:	4618      	mov	r0, r3
 8004944:	f7fe fb90 	bl	8003068 <uxListRemove>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800494e:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	2201      	movs	r2, #1
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43da      	mvns	r2, r3
 800495c:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4013      	ands	r3, r2
 8004962:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004964:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d10a      	bne.n	8004984 <prvAddCurrentTaskToDelayedList+0x58>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004974:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3304      	adds	r3, #4
 800497a:	4619      	mov	r1, r3
 800497c:	481a      	ldr	r0, [pc, #104]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800497e:	f7fe fb18 	bl	8002fb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004982:	e026      	b.n	80049d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4413      	add	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800498c:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	429a      	cmp	r2, r3
 800499a:	d209      	bcs.n	80049b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800499c:	4b13      	ldr	r3, [pc, #76]	; (80049ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f7fe fb25 	bl	8002ff8 <vListInsert>
}
 80049ae:	e010      	b.n	80049d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049b0:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7fe fb1b 	bl	8002ff8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049c2:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d202      	bcs.n	80049d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049cc:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6013      	str	r3, [r2, #0]
}
 80049d2:	bf00      	nop
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	2000055c 	.word	0x2000055c
 80049e0:	20000458 	.word	0x20000458
 80049e4:	20000560 	.word	0x20000560
 80049e8:	20000544 	.word	0x20000544
 80049ec:	20000514 	.word	0x20000514
 80049f0:	20000510 	.word	0x20000510
 80049f4:	20000578 	.word	0x20000578

080049f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3b04      	subs	r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3b04      	subs	r3, #4
 8004a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3b04      	subs	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a28:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <pxPortInitialiseStack+0x54>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b14      	subs	r3, #20
 8004a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b20      	subs	r3, #32
 8004a3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a40:	68fb      	ldr	r3, [r7, #12]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	08004a51 	.word	0x08004a51

08004a50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a5a:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <prvTaskExitError+0x54>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d00a      	beq.n	8004a7a <prvTaskExitError+0x2a>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	60fb      	str	r3, [r7, #12]
}
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <prvTaskExitError+0x28>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60bb      	str	r3, [r7, #8]
}
 8004a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a8e:	bf00      	nop
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0fc      	beq.n	8004a90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c
	...

08004ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <pxCurrentTCBConst2>)
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	6808      	ldr	r0, [r1, #0]
 8004ab6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004aba:	f380 8809 	msr	PSP, r0
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f380 8811 	msr	BASEPRI, r0
 8004aca:	f04e 0e0d 	orr.w	lr, lr, #13
 8004ace:	4770      	bx	lr

08004ad0 <pxCurrentTCBConst2>:
 8004ad0:	20000458 	.word	0x20000458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ad8:	4806      	ldr	r0, [pc, #24]	; (8004af4 <prvPortStartFirstTask+0x1c>)
 8004ada:	6800      	ldr	r0, [r0, #0]
 8004adc:	6800      	ldr	r0, [r0, #0]
 8004ade:	f380 8808 	msr	MSP, r0
 8004ae2:	b662      	cpsie	i
 8004ae4:	b661      	cpsie	f
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	df00      	svc	0
 8004af0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004af2:	bf00      	nop
 8004af4:	e000ed08 	.word	0xe000ed08

08004af8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004afe:	4b32      	ldr	r3, [pc, #200]	; (8004bc8 <xPortStartScheduler+0xd0>)
 8004b00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <xPortStartScheduler+0xd4>)
 8004b24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b26:	4b2a      	ldr	r3, [pc, #168]	; (8004bd0 <xPortStartScheduler+0xd8>)
 8004b28:	2207      	movs	r2, #7
 8004b2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b2c:	e009      	b.n	8004b42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b2e:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <xPortStartScheduler+0xd8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	4a26      	ldr	r2, [pc, #152]	; (8004bd0 <xPortStartScheduler+0xd8>)
 8004b36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b80      	cmp	r3, #128	; 0x80
 8004b4c:	d0ef      	beq.n	8004b2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <xPortStartScheduler+0xd8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1c3 0307 	rsb	r3, r3, #7
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d00a      	beq.n	8004b70 <xPortStartScheduler+0x78>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60bb      	str	r3, [r7, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b70:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <xPortStartScheduler+0xd8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <xPortStartScheduler+0xd8>)
 8004b78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b7a:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <xPortStartScheduler+0xd8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <xPortStartScheduler+0xd8>)
 8004b84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <xPortStartScheduler+0xdc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a10      	ldr	r2, [pc, #64]	; (8004bd4 <xPortStartScheduler+0xdc>)
 8004b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <xPortStartScheduler+0xdc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <xPortStartScheduler+0xdc>)
 8004ba0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ba4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ba6:	f000 f8b9 	bl	8004d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <xPortStartScheduler+0xe0>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bb0:	f7ff ff92 	bl	8004ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bb4:	f7ff fa88 	bl	80040c8 <vTaskSwitchContext>
	prvTaskExitError();
 8004bb8:	f7ff ff4a 	bl	8004a50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	e000e400 	.word	0xe000e400
 8004bcc:	2000058c 	.word	0x2000058c
 8004bd0:	20000590 	.word	0x20000590
 8004bd4:	e000ed20 	.word	0xe000ed20
 8004bd8:	2000000c 	.word	0x2000000c

08004bdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	607b      	str	r3, [r7, #4]
}
 8004bf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <vPortEnterCritical+0x58>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <vPortEnterCritical+0x58>)
 8004bfe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <vPortEnterCritical+0x58>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d10f      	bne.n	8004c28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <vPortEnterCritical+0x5c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	603b      	str	r3, [r7, #0]
}
 8004c24:	bf00      	nop
 8004c26:	e7fe      	b.n	8004c26 <vPortEnterCritical+0x4a>
	}
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <vPortExitCritical+0x4c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <vPortExitCritical+0x24>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	607b      	str	r3, [r7, #4]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <vPortExitCritical+0x4c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	4a08      	ldr	r2, [pc, #32]	; (8004c88 <vPortExitCritical+0x4c>)
 8004c68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c6a:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <vPortExitCritical+0x4c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d105      	bne.n	8004c7e <vPortExitCritical+0x42>
 8004c72:	2300      	movs	r3, #0
 8004c74:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
 8004c88:	2000000c 	.word	0x2000000c
 8004c8c:	00000000 	.word	0x00000000

08004c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c90:	f3ef 8009 	mrs	r0, PSP
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <pxCurrentTCBConst>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ca0:	6010      	str	r0, [r2, #0]
 8004ca2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ca6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004caa:	f380 8811 	msr	BASEPRI, r0
 8004cae:	f7ff fa0b 	bl	80040c8 <vTaskSwitchContext>
 8004cb2:	f04f 0000 	mov.w	r0, #0
 8004cb6:	f380 8811 	msr	BASEPRI, r0
 8004cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	6808      	ldr	r0, [r1, #0]
 8004cc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cc6:	f380 8809 	msr	PSP, r0
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	4770      	bx	lr

08004cd0 <pxCurrentTCBConst>:
 8004cd0:	20000458 	.word	0x20000458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop

08004cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
}
 8004cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cf2:	f7ff f90f 	bl	8003f14 <xTaskIncrementTick>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <SysTick_Handler+0x40>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
}
 8004d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <vPortSetupTimerInterrupt+0x30>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <vPortSetupTimerInterrupt+0x34>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <vPortSetupTimerInterrupt+0x38>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <vPortSetupTimerInterrupt+0x3c>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	4a08      	ldr	r2, [pc, #32]	; (8004d5c <vPortSetupTimerInterrupt+0x40>)
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d3e:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <vPortSetupTimerInterrupt+0x30>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	e000e010 	.word	0xe000e010
 8004d50:	e000e018 	.word	0xe000e018
 8004d54:	20000000 	.word	0x20000000
 8004d58:	10624dd3 	.word	0x10624dd3
 8004d5c:	e000e014 	.word	0xe000e014

08004d60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d6c:	f7ff f81a 	bl	8003da4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d70:	4b5b      	ldr	r3, [pc, #364]	; (8004ee0 <pvPortMalloc+0x180>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d78:	f000 f916 	bl	8004fa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d7c:	4b59      	ldr	r3, [pc, #356]	; (8004ee4 <pvPortMalloc+0x184>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f040 808e 	bne.w	8004ea6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01d      	beq.n	8004dcc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d90:	2208      	movs	r2, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d014      	beq.n	8004dcc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f023 0307 	bic.w	r3, r3, #7
 8004da8:	3308      	adds	r3, #8
 8004daa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <pvPortMalloc+0x6c>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	617b      	str	r3, [r7, #20]
}
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d069      	beq.n	8004ea6 <pvPortMalloc+0x146>
 8004dd2:	4b45      	ldr	r3, [pc, #276]	; (8004ee8 <pvPortMalloc+0x188>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d864      	bhi.n	8004ea6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ddc:	4b43      	ldr	r3, [pc, #268]	; (8004eec <pvPortMalloc+0x18c>)
 8004dde:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004de0:	4b42      	ldr	r3, [pc, #264]	; (8004eec <pvPortMalloc+0x18c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004de6:	e004      	b.n	8004df2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d903      	bls.n	8004e04 <pvPortMalloc+0xa4>
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f1      	bne.n	8004de8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e04:	4b36      	ldr	r3, [pc, #216]	; (8004ee0 <pvPortMalloc+0x180>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d04b      	beq.n	8004ea6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2208      	movs	r2, #8
 8004e14:	4413      	add	r3, r2
 8004e16:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	2308      	movs	r3, #8
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d91f      	bls.n	8004e70 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4413      	add	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <pvPortMalloc+0xf8>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	613b      	str	r3, [r7, #16]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	1ad2      	subs	r2, r2, r3
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e6a:	69b8      	ldr	r0, [r7, #24]
 8004e6c:	f000 f8fe 	bl	800506c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <pvPortMalloc+0x188>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <pvPortMalloc+0x188>)
 8004e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <pvPortMalloc+0x188>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <pvPortMalloc+0x190>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d203      	bcs.n	8004e92 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <pvPortMalloc+0x188>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a18      	ldr	r2, [pc, #96]	; (8004ef0 <pvPortMalloc+0x190>)
 8004e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <pvPortMalloc+0x184>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ea6:	f7fe ff8b 	bl	8003dc0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004eb0:	f7fb f95b 	bl	800016a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <pvPortMalloc+0x174>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	60fb      	str	r3, [r7, #12]
}
 8004ed0:	bf00      	nop
 8004ed2:	e7fe      	b.n	8004ed2 <pvPortMalloc+0x172>
	return pvReturn;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3728      	adds	r7, #40	; 0x28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	2000119c 	.word	0x2000119c
 8004ee4:	200011a8 	.word	0x200011a8
 8004ee8:	200011a0 	.word	0x200011a0
 8004eec:	20001194 	.word	0x20001194
 8004ef0:	200011a4 	.word	0x200011a4

08004ef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d048      	beq.n	8004f98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f06:	2308      	movs	r3, #8
 8004f08:	425b      	negs	r3, r3
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	4b21      	ldr	r3, [pc, #132]	; (8004fa0 <vPortFree+0xac>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <vPortFree+0x44>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	60fb      	str	r3, [r7, #12]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <vPortFree+0x62>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60bb      	str	r3, [r7, #8]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <vPortFree+0xac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d019      	beq.n	8004f98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d115      	bne.n	8004f98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortFree+0xac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	401a      	ands	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f7c:	f7fe ff12 	bl	8003da4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <vPortFree+0xb0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4413      	add	r3, r2
 8004f8a:	4a06      	ldr	r2, [pc, #24]	; (8004fa4 <vPortFree+0xb0>)
 8004f8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f8e:	6938      	ldr	r0, [r7, #16]
 8004f90:	f000 f86c 	bl	800506c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f94:	f7fe ff14 	bl	8003dc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f98:	bf00      	nop
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	200011a8 	.word	0x200011a8
 8004fa4:	200011a0 	.word	0x200011a0

08004fa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004fb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fb4:	4b27      	ldr	r3, [pc, #156]	; (8005054 <prvHeapInit+0xac>)
 8004fb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <prvHeapInit+0xac>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <prvHeapInit+0xb0>)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fe6:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <prvHeapInit+0xb0>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0307 	bic.w	r3, r3, #7
 8005002:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a15      	ldr	r2, [pc, #84]	; (800505c <prvHeapInit+0xb4>)
 8005008:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800500a:	4b14      	ldr	r3, [pc, #80]	; (800505c <prvHeapInit+0xb4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <prvHeapInit+0xb4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	1ad2      	subs	r2, r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <prvHeapInit+0xb4>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <prvHeapInit+0xb8>)
 8005036:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a09      	ldr	r2, [pc, #36]	; (8005064 <prvHeapInit+0xbc>)
 800503e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <prvHeapInit+0xc0>)
 8005042:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005046:	601a      	str	r2, [r3, #0]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000594 	.word	0x20000594
 8005058:	20001194 	.word	0x20001194
 800505c:	2000119c 	.word	0x2000119c
 8005060:	200011a4 	.word	0x200011a4
 8005064:	200011a0 	.word	0x200011a0
 8005068:	200011a8 	.word	0x200011a8

0800506c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005074:	4b27      	ldr	r3, [pc, #156]	; (8005114 <prvInsertBlockIntoFreeList+0xa8>)
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e002      	b.n	8005080 <prvInsertBlockIntoFreeList+0x14>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d8f7      	bhi.n	800507a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	4413      	add	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d108      	bne.n	80050ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	441a      	add	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	441a      	add	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d118      	bne.n	80050f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <prvInsertBlockIntoFreeList+0xac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d00d      	beq.n	80050ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	441a      	add	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e008      	b.n	80050fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <prvInsertBlockIntoFreeList+0xac>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e003      	b.n	80050fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d002      	beq.n	800510a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	20001194 	.word	0x20001194
 8005118:	2000119c 	.word	0x2000119c

0800511c <std>:
 800511c:	2300      	movs	r3, #0
 800511e:	b510      	push	{r4, lr}
 8005120:	4604      	mov	r4, r0
 8005122:	e9c0 3300 	strd	r3, r3, [r0]
 8005126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800512a:	6083      	str	r3, [r0, #8]
 800512c:	8181      	strh	r1, [r0, #12]
 800512e:	6643      	str	r3, [r0, #100]	; 0x64
 8005130:	81c2      	strh	r2, [r0, #14]
 8005132:	6183      	str	r3, [r0, #24]
 8005134:	4619      	mov	r1, r3
 8005136:	2208      	movs	r2, #8
 8005138:	305c      	adds	r0, #92	; 0x5c
 800513a:	f000 fa17 	bl	800556c <memset>
 800513e:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <std+0x58>)
 8005140:	6224      	str	r4, [r4, #32]
 8005142:	6263      	str	r3, [r4, #36]	; 0x24
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <std+0x5c>)
 8005146:	62a3      	str	r3, [r4, #40]	; 0x28
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <std+0x60>)
 800514a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <std+0x64>)
 800514e:	6323      	str	r3, [r4, #48]	; 0x30
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <std+0x68>)
 8005152:	429c      	cmp	r4, r3
 8005154:	d006      	beq.n	8005164 <std+0x48>
 8005156:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800515a:	4294      	cmp	r4, r2
 800515c:	d002      	beq.n	8005164 <std+0x48>
 800515e:	33d0      	adds	r3, #208	; 0xd0
 8005160:	429c      	cmp	r4, r3
 8005162:	d105      	bne.n	8005170 <std+0x54>
 8005164:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800516c:	f000 bacc 	b.w	8005708 <__retarget_lock_init_recursive>
 8005170:	bd10      	pop	{r4, pc}
 8005172:	bf00      	nop
 8005174:	080053bd 	.word	0x080053bd
 8005178:	080053df 	.word	0x080053df
 800517c:	08005417 	.word	0x08005417
 8005180:	0800543b 	.word	0x0800543b
 8005184:	200011ac 	.word	0x200011ac

08005188 <stdio_exit_handler>:
 8005188:	4a02      	ldr	r2, [pc, #8]	; (8005194 <stdio_exit_handler+0xc>)
 800518a:	4903      	ldr	r1, [pc, #12]	; (8005198 <stdio_exit_handler+0x10>)
 800518c:	4803      	ldr	r0, [pc, #12]	; (800519c <stdio_exit_handler+0x14>)
 800518e:	f000 b869 	b.w	8005264 <_fwalk_sglue>
 8005192:	bf00      	nop
 8005194:	20000010 	.word	0x20000010
 8005198:	08006275 	.word	0x08006275
 800519c:	2000001c 	.word	0x2000001c

080051a0 <cleanup_stdio>:
 80051a0:	6841      	ldr	r1, [r0, #4]
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <cleanup_stdio+0x34>)
 80051a4:	b510      	push	{r4, lr}
 80051a6:	4299      	cmp	r1, r3
 80051a8:	4604      	mov	r4, r0
 80051aa:	d001      	beq.n	80051b0 <cleanup_stdio+0x10>
 80051ac:	f001 f862 	bl	8006274 <_fflush_r>
 80051b0:	68a1      	ldr	r1, [r4, #8]
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <cleanup_stdio+0x38>)
 80051b4:	4299      	cmp	r1, r3
 80051b6:	d002      	beq.n	80051be <cleanup_stdio+0x1e>
 80051b8:	4620      	mov	r0, r4
 80051ba:	f001 f85b 	bl	8006274 <_fflush_r>
 80051be:	68e1      	ldr	r1, [r4, #12]
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <cleanup_stdio+0x3c>)
 80051c2:	4299      	cmp	r1, r3
 80051c4:	d004      	beq.n	80051d0 <cleanup_stdio+0x30>
 80051c6:	4620      	mov	r0, r4
 80051c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051cc:	f001 b852 	b.w	8006274 <_fflush_r>
 80051d0:	bd10      	pop	{r4, pc}
 80051d2:	bf00      	nop
 80051d4:	200011ac 	.word	0x200011ac
 80051d8:	20001214 	.word	0x20001214
 80051dc:	2000127c 	.word	0x2000127c

080051e0 <global_stdio_init.part.0>:
 80051e0:	b510      	push	{r4, lr}
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <global_stdio_init.part.0+0x30>)
 80051e4:	4c0b      	ldr	r4, [pc, #44]	; (8005214 <global_stdio_init.part.0+0x34>)
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <global_stdio_init.part.0+0x38>)
 80051e8:	4620      	mov	r0, r4
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	2104      	movs	r1, #4
 80051ee:	2200      	movs	r2, #0
 80051f0:	f7ff ff94 	bl	800511c <std>
 80051f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80051f8:	2201      	movs	r2, #1
 80051fa:	2109      	movs	r1, #9
 80051fc:	f7ff ff8e 	bl	800511c <std>
 8005200:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005204:	2202      	movs	r2, #2
 8005206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520a:	2112      	movs	r1, #18
 800520c:	f7ff bf86 	b.w	800511c <std>
 8005210:	200012e4 	.word	0x200012e4
 8005214:	200011ac 	.word	0x200011ac
 8005218:	08005189 	.word	0x08005189

0800521c <__sfp_lock_acquire>:
 800521c:	4801      	ldr	r0, [pc, #4]	; (8005224 <__sfp_lock_acquire+0x8>)
 800521e:	f000 ba74 	b.w	800570a <__retarget_lock_acquire_recursive>
 8005222:	bf00      	nop
 8005224:	200012ed 	.word	0x200012ed

08005228 <__sfp_lock_release>:
 8005228:	4801      	ldr	r0, [pc, #4]	; (8005230 <__sfp_lock_release+0x8>)
 800522a:	f000 ba6f 	b.w	800570c <__retarget_lock_release_recursive>
 800522e:	bf00      	nop
 8005230:	200012ed 	.word	0x200012ed

08005234 <__sinit>:
 8005234:	b510      	push	{r4, lr}
 8005236:	4604      	mov	r4, r0
 8005238:	f7ff fff0 	bl	800521c <__sfp_lock_acquire>
 800523c:	6a23      	ldr	r3, [r4, #32]
 800523e:	b11b      	cbz	r3, 8005248 <__sinit+0x14>
 8005240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005244:	f7ff bff0 	b.w	8005228 <__sfp_lock_release>
 8005248:	4b04      	ldr	r3, [pc, #16]	; (800525c <__sinit+0x28>)
 800524a:	6223      	str	r3, [r4, #32]
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <__sinit+0x2c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f5      	bne.n	8005240 <__sinit+0xc>
 8005254:	f7ff ffc4 	bl	80051e0 <global_stdio_init.part.0>
 8005258:	e7f2      	b.n	8005240 <__sinit+0xc>
 800525a:	bf00      	nop
 800525c:	080051a1 	.word	0x080051a1
 8005260:	200012e4 	.word	0x200012e4

08005264 <_fwalk_sglue>:
 8005264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005268:	4607      	mov	r7, r0
 800526a:	4688      	mov	r8, r1
 800526c:	4614      	mov	r4, r2
 800526e:	2600      	movs	r6, #0
 8005270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005274:	f1b9 0901 	subs.w	r9, r9, #1
 8005278:	d505      	bpl.n	8005286 <_fwalk_sglue+0x22>
 800527a:	6824      	ldr	r4, [r4, #0]
 800527c:	2c00      	cmp	r4, #0
 800527e:	d1f7      	bne.n	8005270 <_fwalk_sglue+0xc>
 8005280:	4630      	mov	r0, r6
 8005282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005286:	89ab      	ldrh	r3, [r5, #12]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d907      	bls.n	800529c <_fwalk_sglue+0x38>
 800528c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005290:	3301      	adds	r3, #1
 8005292:	d003      	beq.n	800529c <_fwalk_sglue+0x38>
 8005294:	4629      	mov	r1, r5
 8005296:	4638      	mov	r0, r7
 8005298:	47c0      	blx	r8
 800529a:	4306      	orrs	r6, r0
 800529c:	3568      	adds	r5, #104	; 0x68
 800529e:	e7e9      	b.n	8005274 <_fwalk_sglue+0x10>

080052a0 <iprintf>:
 80052a0:	b40f      	push	{r0, r1, r2, r3}
 80052a2:	b507      	push	{r0, r1, r2, lr}
 80052a4:	4906      	ldr	r1, [pc, #24]	; (80052c0 <iprintf+0x20>)
 80052a6:	ab04      	add	r3, sp, #16
 80052a8:	6808      	ldr	r0, [r1, #0]
 80052aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ae:	6881      	ldr	r1, [r0, #8]
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	f000 fcaf 	bl	8005c14 <_vfiprintf_r>
 80052b6:	b003      	add	sp, #12
 80052b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052bc:	b004      	add	sp, #16
 80052be:	4770      	bx	lr
 80052c0:	20000068 	.word	0x20000068

080052c4 <_puts_r>:
 80052c4:	6a03      	ldr	r3, [r0, #32]
 80052c6:	b570      	push	{r4, r5, r6, lr}
 80052c8:	4605      	mov	r5, r0
 80052ca:	460e      	mov	r6, r1
 80052cc:	6884      	ldr	r4, [r0, #8]
 80052ce:	b90b      	cbnz	r3, 80052d4 <_puts_r+0x10>
 80052d0:	f7ff ffb0 	bl	8005234 <__sinit>
 80052d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052d6:	07db      	lsls	r3, r3, #31
 80052d8:	d405      	bmi.n	80052e6 <_puts_r+0x22>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	0598      	lsls	r0, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_puts_r+0x22>
 80052e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e2:	f000 fa12 	bl	800570a <__retarget_lock_acquire_recursive>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	0719      	lsls	r1, r3, #28
 80052ea:	d513      	bpl.n	8005314 <_puts_r+0x50>
 80052ec:	6923      	ldr	r3, [r4, #16]
 80052ee:	b18b      	cbz	r3, 8005314 <_puts_r+0x50>
 80052f0:	3e01      	subs	r6, #1
 80052f2:	68a3      	ldr	r3, [r4, #8]
 80052f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052f8:	3b01      	subs	r3, #1
 80052fa:	60a3      	str	r3, [r4, #8]
 80052fc:	b9e9      	cbnz	r1, 800533a <_puts_r+0x76>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da2e      	bge.n	8005360 <_puts_r+0x9c>
 8005302:	4622      	mov	r2, r4
 8005304:	210a      	movs	r1, #10
 8005306:	4628      	mov	r0, r5
 8005308:	f000 f89b 	bl	8005442 <__swbuf_r>
 800530c:	3001      	adds	r0, #1
 800530e:	d007      	beq.n	8005320 <_puts_r+0x5c>
 8005310:	250a      	movs	r5, #10
 8005312:	e007      	b.n	8005324 <_puts_r+0x60>
 8005314:	4621      	mov	r1, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f8d0 	bl	80054bc <__swsetup_r>
 800531c:	2800      	cmp	r0, #0
 800531e:	d0e7      	beq.n	80052f0 <_puts_r+0x2c>
 8005320:	f04f 35ff 	mov.w	r5, #4294967295
 8005324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005326:	07da      	lsls	r2, r3, #31
 8005328:	d405      	bmi.n	8005336 <_puts_r+0x72>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	059b      	lsls	r3, r3, #22
 800532e:	d402      	bmi.n	8005336 <_puts_r+0x72>
 8005330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005332:	f000 f9eb 	bl	800570c <__retarget_lock_release_recursive>
 8005336:	4628      	mov	r0, r5
 8005338:	bd70      	pop	{r4, r5, r6, pc}
 800533a:	2b00      	cmp	r3, #0
 800533c:	da04      	bge.n	8005348 <_puts_r+0x84>
 800533e:	69a2      	ldr	r2, [r4, #24]
 8005340:	429a      	cmp	r2, r3
 8005342:	dc06      	bgt.n	8005352 <_puts_r+0x8e>
 8005344:	290a      	cmp	r1, #10
 8005346:	d004      	beq.n	8005352 <_puts_r+0x8e>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	6022      	str	r2, [r4, #0]
 800534e:	7019      	strb	r1, [r3, #0]
 8005350:	e7cf      	b.n	80052f2 <_puts_r+0x2e>
 8005352:	4622      	mov	r2, r4
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f874 	bl	8005442 <__swbuf_r>
 800535a:	3001      	adds	r0, #1
 800535c:	d1c9      	bne.n	80052f2 <_puts_r+0x2e>
 800535e:	e7df      	b.n	8005320 <_puts_r+0x5c>
 8005360:	250a      	movs	r5, #10
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	6022      	str	r2, [r4, #0]
 8005368:	701d      	strb	r5, [r3, #0]
 800536a:	e7db      	b.n	8005324 <_puts_r+0x60>

0800536c <puts>:
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <puts+0xc>)
 800536e:	4601      	mov	r1, r0
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	f7ff bfa7 	b.w	80052c4 <_puts_r>
 8005376:	bf00      	nop
 8005378:	20000068 	.word	0x20000068

0800537c <siprintf>:
 800537c:	b40e      	push	{r1, r2, r3}
 800537e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005382:	b500      	push	{lr}
 8005384:	b09c      	sub	sp, #112	; 0x70
 8005386:	ab1d      	add	r3, sp, #116	; 0x74
 8005388:	9002      	str	r0, [sp, #8]
 800538a:	9006      	str	r0, [sp, #24]
 800538c:	9107      	str	r1, [sp, #28]
 800538e:	9104      	str	r1, [sp, #16]
 8005390:	4808      	ldr	r0, [pc, #32]	; (80053b4 <siprintf+0x38>)
 8005392:	4909      	ldr	r1, [pc, #36]	; (80053b8 <siprintf+0x3c>)
 8005394:	f853 2b04 	ldr.w	r2, [r3], #4
 8005398:	9105      	str	r1, [sp, #20]
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	a902      	add	r1, sp, #8
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	f000 fb12 	bl	80059c8 <_svfiprintf_r>
 80053a4:	2200      	movs	r2, #0
 80053a6:	9b02      	ldr	r3, [sp, #8]
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	b01c      	add	sp, #112	; 0x70
 80053ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b0:	b003      	add	sp, #12
 80053b2:	4770      	bx	lr
 80053b4:	20000068 	.word	0x20000068
 80053b8:	ffff0208 	.word	0xffff0208

080053bc <__sread>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	460c      	mov	r4, r1
 80053c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c4:	f000 f952 	bl	800566c <_read_r>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	bfab      	itete	ge
 80053cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053ce:	89a3      	ldrhlt	r3, [r4, #12]
 80053d0:	181b      	addge	r3, r3, r0
 80053d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053d6:	bfac      	ite	ge
 80053d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80053da:	81a3      	strhlt	r3, [r4, #12]
 80053dc:	bd10      	pop	{r4, pc}

080053de <__swrite>:
 80053de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e2:	461f      	mov	r7, r3
 80053e4:	898b      	ldrh	r3, [r1, #12]
 80053e6:	4605      	mov	r5, r0
 80053e8:	05db      	lsls	r3, r3, #23
 80053ea:	460c      	mov	r4, r1
 80053ec:	4616      	mov	r6, r2
 80053ee:	d505      	bpl.n	80053fc <__swrite+0x1e>
 80053f0:	2302      	movs	r3, #2
 80053f2:	2200      	movs	r2, #0
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	f000 f926 	bl	8005648 <_lseek_r>
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	4632      	mov	r2, r6
 8005400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	4628      	mov	r0, r5
 8005408:	463b      	mov	r3, r7
 800540a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800540e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005412:	f000 b93d 	b.w	8005690 <_write_r>

08005416 <__sseek>:
 8005416:	b510      	push	{r4, lr}
 8005418:	460c      	mov	r4, r1
 800541a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541e:	f000 f913 	bl	8005648 <_lseek_r>
 8005422:	1c43      	adds	r3, r0, #1
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	bf15      	itete	ne
 8005428:	6560      	strne	r0, [r4, #84]	; 0x54
 800542a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800542e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005432:	81a3      	strheq	r3, [r4, #12]
 8005434:	bf18      	it	ne
 8005436:	81a3      	strhne	r3, [r4, #12]
 8005438:	bd10      	pop	{r4, pc}

0800543a <__sclose>:
 800543a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543e:	f000 b89d 	b.w	800557c <_close_r>

08005442 <__swbuf_r>:
 8005442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005444:	460e      	mov	r6, r1
 8005446:	4614      	mov	r4, r2
 8005448:	4605      	mov	r5, r0
 800544a:	b118      	cbz	r0, 8005454 <__swbuf_r+0x12>
 800544c:	6a03      	ldr	r3, [r0, #32]
 800544e:	b90b      	cbnz	r3, 8005454 <__swbuf_r+0x12>
 8005450:	f7ff fef0 	bl	8005234 <__sinit>
 8005454:	69a3      	ldr	r3, [r4, #24]
 8005456:	60a3      	str	r3, [r4, #8]
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	071a      	lsls	r2, r3, #28
 800545c:	d525      	bpl.n	80054aa <__swbuf_r+0x68>
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	b31b      	cbz	r3, 80054aa <__swbuf_r+0x68>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	b2f6      	uxtb	r6, r6
 8005468:	1a98      	subs	r0, r3, r2
 800546a:	6963      	ldr	r3, [r4, #20]
 800546c:	4637      	mov	r7, r6
 800546e:	4283      	cmp	r3, r0
 8005470:	dc04      	bgt.n	800547c <__swbuf_r+0x3a>
 8005472:	4621      	mov	r1, r4
 8005474:	4628      	mov	r0, r5
 8005476:	f000 fefd 	bl	8006274 <_fflush_r>
 800547a:	b9e0      	cbnz	r0, 80054b6 <__swbuf_r+0x74>
 800547c:	68a3      	ldr	r3, [r4, #8]
 800547e:	3b01      	subs	r3, #1
 8005480:	60a3      	str	r3, [r4, #8]
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	6022      	str	r2, [r4, #0]
 8005488:	701e      	strb	r6, [r3, #0]
 800548a:	6962      	ldr	r2, [r4, #20]
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	429a      	cmp	r2, r3
 8005490:	d004      	beq.n	800549c <__swbuf_r+0x5a>
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	07db      	lsls	r3, r3, #31
 8005496:	d506      	bpl.n	80054a6 <__swbuf_r+0x64>
 8005498:	2e0a      	cmp	r6, #10
 800549a:	d104      	bne.n	80054a6 <__swbuf_r+0x64>
 800549c:	4621      	mov	r1, r4
 800549e:	4628      	mov	r0, r5
 80054a0:	f000 fee8 	bl	8006274 <_fflush_r>
 80054a4:	b938      	cbnz	r0, 80054b6 <__swbuf_r+0x74>
 80054a6:	4638      	mov	r0, r7
 80054a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054aa:	4621      	mov	r1, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	f000 f805 	bl	80054bc <__swsetup_r>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d0d5      	beq.n	8005462 <__swbuf_r+0x20>
 80054b6:	f04f 37ff 	mov.w	r7, #4294967295
 80054ba:	e7f4      	b.n	80054a6 <__swbuf_r+0x64>

080054bc <__swsetup_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4b2a      	ldr	r3, [pc, #168]	; (8005568 <__swsetup_r+0xac>)
 80054c0:	4605      	mov	r5, r0
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	460c      	mov	r4, r1
 80054c6:	b118      	cbz	r0, 80054d0 <__swsetup_r+0x14>
 80054c8:	6a03      	ldr	r3, [r0, #32]
 80054ca:	b90b      	cbnz	r3, 80054d0 <__swsetup_r+0x14>
 80054cc:	f7ff feb2 	bl	8005234 <__sinit>
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054d6:	0718      	lsls	r0, r3, #28
 80054d8:	d422      	bmi.n	8005520 <__swsetup_r+0x64>
 80054da:	06d9      	lsls	r1, r3, #27
 80054dc:	d407      	bmi.n	80054ee <__swsetup_r+0x32>
 80054de:	2309      	movs	r3, #9
 80054e0:	602b      	str	r3, [r5, #0]
 80054e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054e6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	e034      	b.n	8005558 <__swsetup_r+0x9c>
 80054ee:	0758      	lsls	r0, r3, #29
 80054f0:	d512      	bpl.n	8005518 <__swsetup_r+0x5c>
 80054f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054f4:	b141      	cbz	r1, 8005508 <__swsetup_r+0x4c>
 80054f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054fa:	4299      	cmp	r1, r3
 80054fc:	d002      	beq.n	8005504 <__swsetup_r+0x48>
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f914 	bl	800572c <_free_r>
 8005504:	2300      	movs	r3, #0
 8005506:	6363      	str	r3, [r4, #52]	; 0x34
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	2300      	movs	r3, #0
 8005512:	6063      	str	r3, [r4, #4]
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	f043 0308 	orr.w	r3, r3, #8
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	6923      	ldr	r3, [r4, #16]
 8005522:	b94b      	cbnz	r3, 8005538 <__swsetup_r+0x7c>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800552a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552e:	d003      	beq.n	8005538 <__swsetup_r+0x7c>
 8005530:	4621      	mov	r1, r4
 8005532:	4628      	mov	r0, r5
 8005534:	f000 feeb 	bl	800630e <__smakebuf_r>
 8005538:	89a0      	ldrh	r0, [r4, #12]
 800553a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800553e:	f010 0301 	ands.w	r3, r0, #1
 8005542:	d00a      	beq.n	800555a <__swsetup_r+0x9e>
 8005544:	2300      	movs	r3, #0
 8005546:	60a3      	str	r3, [r4, #8]
 8005548:	6963      	ldr	r3, [r4, #20]
 800554a:	425b      	negs	r3, r3
 800554c:	61a3      	str	r3, [r4, #24]
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	b943      	cbnz	r3, 8005564 <__swsetup_r+0xa8>
 8005552:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005556:	d1c4      	bne.n	80054e2 <__swsetup_r+0x26>
 8005558:	bd38      	pop	{r3, r4, r5, pc}
 800555a:	0781      	lsls	r1, r0, #30
 800555c:	bf58      	it	pl
 800555e:	6963      	ldrpl	r3, [r4, #20]
 8005560:	60a3      	str	r3, [r4, #8]
 8005562:	e7f4      	b.n	800554e <__swsetup_r+0x92>
 8005564:	2000      	movs	r0, #0
 8005566:	e7f7      	b.n	8005558 <__swsetup_r+0x9c>
 8005568:	20000068 	.word	0x20000068

0800556c <memset>:
 800556c:	4603      	mov	r3, r0
 800556e:	4402      	add	r2, r0
 8005570:	4293      	cmp	r3, r2
 8005572:	d100      	bne.n	8005576 <memset+0xa>
 8005574:	4770      	bx	lr
 8005576:	f803 1b01 	strb.w	r1, [r3], #1
 800557a:	e7f9      	b.n	8005570 <memset+0x4>

0800557c <_close_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	2300      	movs	r3, #0
 8005580:	4d05      	ldr	r5, [pc, #20]	; (8005598 <_close_r+0x1c>)
 8005582:	4604      	mov	r4, r0
 8005584:	4608      	mov	r0, r1
 8005586:	602b      	str	r3, [r5, #0]
 8005588:	f7fb fae3 	bl	8000b52 <_close>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d102      	bne.n	8005596 <_close_r+0x1a>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	b103      	cbz	r3, 8005596 <_close_r+0x1a>
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	bd38      	pop	{r3, r4, r5, pc}
 8005598:	200012e8 	.word	0x200012e8

0800559c <_reclaim_reent>:
 800559c:	4b29      	ldr	r3, [pc, #164]	; (8005644 <_reclaim_reent+0xa8>)
 800559e:	b570      	push	{r4, r5, r6, lr}
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4604      	mov	r4, r0
 80055a4:	4283      	cmp	r3, r0
 80055a6:	d04b      	beq.n	8005640 <_reclaim_reent+0xa4>
 80055a8:	69c3      	ldr	r3, [r0, #28]
 80055aa:	b143      	cbz	r3, 80055be <_reclaim_reent+0x22>
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d144      	bne.n	800563c <_reclaim_reent+0xa0>
 80055b2:	69e3      	ldr	r3, [r4, #28]
 80055b4:	6819      	ldr	r1, [r3, #0]
 80055b6:	b111      	cbz	r1, 80055be <_reclaim_reent+0x22>
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 f8b7 	bl	800572c <_free_r>
 80055be:	6961      	ldr	r1, [r4, #20]
 80055c0:	b111      	cbz	r1, 80055c8 <_reclaim_reent+0x2c>
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 f8b2 	bl	800572c <_free_r>
 80055c8:	69e1      	ldr	r1, [r4, #28]
 80055ca:	b111      	cbz	r1, 80055d2 <_reclaim_reent+0x36>
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 f8ad 	bl	800572c <_free_r>
 80055d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80055d4:	b111      	cbz	r1, 80055dc <_reclaim_reent+0x40>
 80055d6:	4620      	mov	r0, r4
 80055d8:	f000 f8a8 	bl	800572c <_free_r>
 80055dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055de:	b111      	cbz	r1, 80055e6 <_reclaim_reent+0x4a>
 80055e0:	4620      	mov	r0, r4
 80055e2:	f000 f8a3 	bl	800572c <_free_r>
 80055e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055e8:	b111      	cbz	r1, 80055f0 <_reclaim_reent+0x54>
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 f89e 	bl	800572c <_free_r>
 80055f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055f2:	b111      	cbz	r1, 80055fa <_reclaim_reent+0x5e>
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 f899 	bl	800572c <_free_r>
 80055fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80055fc:	b111      	cbz	r1, 8005604 <_reclaim_reent+0x68>
 80055fe:	4620      	mov	r0, r4
 8005600:	f000 f894 	bl	800572c <_free_r>
 8005604:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005606:	b111      	cbz	r1, 800560e <_reclaim_reent+0x72>
 8005608:	4620      	mov	r0, r4
 800560a:	f000 f88f 	bl	800572c <_free_r>
 800560e:	6a23      	ldr	r3, [r4, #32]
 8005610:	b1b3      	cbz	r3, 8005640 <_reclaim_reent+0xa4>
 8005612:	4620      	mov	r0, r4
 8005614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005618:	4718      	bx	r3
 800561a:	5949      	ldr	r1, [r1, r5]
 800561c:	b941      	cbnz	r1, 8005630 <_reclaim_reent+0x94>
 800561e:	3504      	adds	r5, #4
 8005620:	69e3      	ldr	r3, [r4, #28]
 8005622:	2d80      	cmp	r5, #128	; 0x80
 8005624:	68d9      	ldr	r1, [r3, #12]
 8005626:	d1f8      	bne.n	800561a <_reclaim_reent+0x7e>
 8005628:	4620      	mov	r0, r4
 800562a:	f000 f87f 	bl	800572c <_free_r>
 800562e:	e7c0      	b.n	80055b2 <_reclaim_reent+0x16>
 8005630:	680e      	ldr	r6, [r1, #0]
 8005632:	4620      	mov	r0, r4
 8005634:	f000 f87a 	bl	800572c <_free_r>
 8005638:	4631      	mov	r1, r6
 800563a:	e7ef      	b.n	800561c <_reclaim_reent+0x80>
 800563c:	2500      	movs	r5, #0
 800563e:	e7ef      	b.n	8005620 <_reclaim_reent+0x84>
 8005640:	bd70      	pop	{r4, r5, r6, pc}
 8005642:	bf00      	nop
 8005644:	20000068 	.word	0x20000068

08005648 <_lseek_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	4611      	mov	r1, r2
 8005650:	2200      	movs	r2, #0
 8005652:	4d05      	ldr	r5, [pc, #20]	; (8005668 <_lseek_r+0x20>)
 8005654:	602a      	str	r2, [r5, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	f7fb fa9f 	bl	8000b9a <_lseek>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_lseek_r+0x1e>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b103      	cbz	r3, 8005666 <_lseek_r+0x1e>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	200012e8 	.word	0x200012e8

0800566c <_read_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	2200      	movs	r2, #0
 8005676:	4d05      	ldr	r5, [pc, #20]	; (800568c <_read_r+0x20>)
 8005678:	602a      	str	r2, [r5, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	f7fb fa4c 	bl	8000b18 <_read>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d102      	bne.n	800568a <_read_r+0x1e>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	b103      	cbz	r3, 800568a <_read_r+0x1e>
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	bd38      	pop	{r3, r4, r5, pc}
 800568c:	200012e8 	.word	0x200012e8

08005690 <_write_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	2200      	movs	r2, #0
 800569a:	4d05      	ldr	r5, [pc, #20]	; (80056b0 <_write_r+0x20>)
 800569c:	602a      	str	r2, [r5, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	f7fa fd82 	bl	80001a8 <_write>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_write_r+0x1e>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_write_r+0x1e>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	200012e8 	.word	0x200012e8

080056b4 <__errno>:
 80056b4:	4b01      	ldr	r3, [pc, #4]	; (80056bc <__errno+0x8>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000068 	.word	0x20000068

080056c0 <__libc_init_array>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	2600      	movs	r6, #0
 80056c4:	4d0c      	ldr	r5, [pc, #48]	; (80056f8 <__libc_init_array+0x38>)
 80056c6:	4c0d      	ldr	r4, [pc, #52]	; (80056fc <__libc_init_array+0x3c>)
 80056c8:	1b64      	subs	r4, r4, r5
 80056ca:	10a4      	asrs	r4, r4, #2
 80056cc:	42a6      	cmp	r6, r4
 80056ce:	d109      	bne.n	80056e4 <__libc_init_array+0x24>
 80056d0:	f000 feec 	bl	80064ac <_init>
 80056d4:	2600      	movs	r6, #0
 80056d6:	4d0a      	ldr	r5, [pc, #40]	; (8005700 <__libc_init_array+0x40>)
 80056d8:	4c0a      	ldr	r4, [pc, #40]	; (8005704 <__libc_init_array+0x44>)
 80056da:	1b64      	subs	r4, r4, r5
 80056dc:	10a4      	asrs	r4, r4, #2
 80056de:	42a6      	cmp	r6, r4
 80056e0:	d105      	bne.n	80056ee <__libc_init_array+0x2e>
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e8:	4798      	blx	r3
 80056ea:	3601      	adds	r6, #1
 80056ec:	e7ee      	b.n	80056cc <__libc_init_array+0xc>
 80056ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f2:	4798      	blx	r3
 80056f4:	3601      	adds	r6, #1
 80056f6:	e7f2      	b.n	80056de <__libc_init_array+0x1e>
 80056f8:	080065d0 	.word	0x080065d0
 80056fc:	080065d0 	.word	0x080065d0
 8005700:	080065d0 	.word	0x080065d0
 8005704:	080065d4 	.word	0x080065d4

08005708 <__retarget_lock_init_recursive>:
 8005708:	4770      	bx	lr

0800570a <__retarget_lock_acquire_recursive>:
 800570a:	4770      	bx	lr

0800570c <__retarget_lock_release_recursive>:
 800570c:	4770      	bx	lr

0800570e <memcpy>:
 800570e:	440a      	add	r2, r1
 8005710:	4291      	cmp	r1, r2
 8005712:	f100 33ff 	add.w	r3, r0, #4294967295
 8005716:	d100      	bne.n	800571a <memcpy+0xc>
 8005718:	4770      	bx	lr
 800571a:	b510      	push	{r4, lr}
 800571c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005720:	4291      	cmp	r1, r2
 8005722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005726:	d1f9      	bne.n	800571c <memcpy+0xe>
 8005728:	bd10      	pop	{r4, pc}
	...

0800572c <_free_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4605      	mov	r5, r0
 8005730:	2900      	cmp	r1, #0
 8005732:	d040      	beq.n	80057b6 <_free_r+0x8a>
 8005734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005738:	1f0c      	subs	r4, r1, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	bfb8      	it	lt
 800573e:	18e4      	addlt	r4, r4, r3
 8005740:	f000 f8dc 	bl	80058fc <__malloc_lock>
 8005744:	4a1c      	ldr	r2, [pc, #112]	; (80057b8 <_free_r+0x8c>)
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	b933      	cbnz	r3, 8005758 <_free_r+0x2c>
 800574a:	6063      	str	r3, [r4, #4]
 800574c:	6014      	str	r4, [r2, #0]
 800574e:	4628      	mov	r0, r5
 8005750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005754:	f000 b8d8 	b.w	8005908 <__malloc_unlock>
 8005758:	42a3      	cmp	r3, r4
 800575a:	d908      	bls.n	800576e <_free_r+0x42>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	1821      	adds	r1, r4, r0
 8005760:	428b      	cmp	r3, r1
 8005762:	bf01      	itttt	eq
 8005764:	6819      	ldreq	r1, [r3, #0]
 8005766:	685b      	ldreq	r3, [r3, #4]
 8005768:	1809      	addeq	r1, r1, r0
 800576a:	6021      	streq	r1, [r4, #0]
 800576c:	e7ed      	b.n	800574a <_free_r+0x1e>
 800576e:	461a      	mov	r2, r3
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b10b      	cbz	r3, 8005778 <_free_r+0x4c>
 8005774:	42a3      	cmp	r3, r4
 8005776:	d9fa      	bls.n	800576e <_free_r+0x42>
 8005778:	6811      	ldr	r1, [r2, #0]
 800577a:	1850      	adds	r0, r2, r1
 800577c:	42a0      	cmp	r0, r4
 800577e:	d10b      	bne.n	8005798 <_free_r+0x6c>
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	4401      	add	r1, r0
 8005784:	1850      	adds	r0, r2, r1
 8005786:	4283      	cmp	r3, r0
 8005788:	6011      	str	r1, [r2, #0]
 800578a:	d1e0      	bne.n	800574e <_free_r+0x22>
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4408      	add	r0, r1
 8005792:	6010      	str	r0, [r2, #0]
 8005794:	6053      	str	r3, [r2, #4]
 8005796:	e7da      	b.n	800574e <_free_r+0x22>
 8005798:	d902      	bls.n	80057a0 <_free_r+0x74>
 800579a:	230c      	movs	r3, #12
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	e7d6      	b.n	800574e <_free_r+0x22>
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	1821      	adds	r1, r4, r0
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf01      	itttt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	1809      	addeq	r1, r1, r0
 80057ae:	6021      	streq	r1, [r4, #0]
 80057b0:	6063      	str	r3, [r4, #4]
 80057b2:	6054      	str	r4, [r2, #4]
 80057b4:	e7cb      	b.n	800574e <_free_r+0x22>
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	200012f0 	.word	0x200012f0

080057bc <sbrk_aligned>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4e0e      	ldr	r6, [pc, #56]	; (80057f8 <sbrk_aligned+0x3c>)
 80057c0:	460c      	mov	r4, r1
 80057c2:	6831      	ldr	r1, [r6, #0]
 80057c4:	4605      	mov	r5, r0
 80057c6:	b911      	cbnz	r1, 80057ce <sbrk_aligned+0x12>
 80057c8:	f000 fe1a 	bl	8006400 <_sbrk_r>
 80057cc:	6030      	str	r0, [r6, #0]
 80057ce:	4621      	mov	r1, r4
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 fe15 	bl	8006400 <_sbrk_r>
 80057d6:	1c43      	adds	r3, r0, #1
 80057d8:	d00a      	beq.n	80057f0 <sbrk_aligned+0x34>
 80057da:	1cc4      	adds	r4, r0, #3
 80057dc:	f024 0403 	bic.w	r4, r4, #3
 80057e0:	42a0      	cmp	r0, r4
 80057e2:	d007      	beq.n	80057f4 <sbrk_aligned+0x38>
 80057e4:	1a21      	subs	r1, r4, r0
 80057e6:	4628      	mov	r0, r5
 80057e8:	f000 fe0a 	bl	8006400 <_sbrk_r>
 80057ec:	3001      	adds	r0, #1
 80057ee:	d101      	bne.n	80057f4 <sbrk_aligned+0x38>
 80057f0:	f04f 34ff 	mov.w	r4, #4294967295
 80057f4:	4620      	mov	r0, r4
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	200012f4 	.word	0x200012f4

080057fc <_malloc_r>:
 80057fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005800:	1ccd      	adds	r5, r1, #3
 8005802:	f025 0503 	bic.w	r5, r5, #3
 8005806:	3508      	adds	r5, #8
 8005808:	2d0c      	cmp	r5, #12
 800580a:	bf38      	it	cc
 800580c:	250c      	movcc	r5, #12
 800580e:	2d00      	cmp	r5, #0
 8005810:	4607      	mov	r7, r0
 8005812:	db01      	blt.n	8005818 <_malloc_r+0x1c>
 8005814:	42a9      	cmp	r1, r5
 8005816:	d905      	bls.n	8005824 <_malloc_r+0x28>
 8005818:	230c      	movs	r3, #12
 800581a:	2600      	movs	r6, #0
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	4630      	mov	r0, r6
 8005820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005824:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80058f8 <_malloc_r+0xfc>
 8005828:	f000 f868 	bl	80058fc <__malloc_lock>
 800582c:	f8d8 3000 	ldr.w	r3, [r8]
 8005830:	461c      	mov	r4, r3
 8005832:	bb5c      	cbnz	r4, 800588c <_malloc_r+0x90>
 8005834:	4629      	mov	r1, r5
 8005836:	4638      	mov	r0, r7
 8005838:	f7ff ffc0 	bl	80057bc <sbrk_aligned>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	4604      	mov	r4, r0
 8005840:	d155      	bne.n	80058ee <_malloc_r+0xf2>
 8005842:	f8d8 4000 	ldr.w	r4, [r8]
 8005846:	4626      	mov	r6, r4
 8005848:	2e00      	cmp	r6, #0
 800584a:	d145      	bne.n	80058d8 <_malloc_r+0xdc>
 800584c:	2c00      	cmp	r4, #0
 800584e:	d048      	beq.n	80058e2 <_malloc_r+0xe6>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	4631      	mov	r1, r6
 8005854:	4638      	mov	r0, r7
 8005856:	eb04 0903 	add.w	r9, r4, r3
 800585a:	f000 fdd1 	bl	8006400 <_sbrk_r>
 800585e:	4581      	cmp	r9, r0
 8005860:	d13f      	bne.n	80058e2 <_malloc_r+0xe6>
 8005862:	6821      	ldr	r1, [r4, #0]
 8005864:	4638      	mov	r0, r7
 8005866:	1a6d      	subs	r5, r5, r1
 8005868:	4629      	mov	r1, r5
 800586a:	f7ff ffa7 	bl	80057bc <sbrk_aligned>
 800586e:	3001      	adds	r0, #1
 8005870:	d037      	beq.n	80058e2 <_malloc_r+0xe6>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	442b      	add	r3, r5
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	f8d8 3000 	ldr.w	r3, [r8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d038      	beq.n	80058f2 <_malloc_r+0xf6>
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	42a2      	cmp	r2, r4
 8005884:	d12b      	bne.n	80058de <_malloc_r+0xe2>
 8005886:	2200      	movs	r2, #0
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	e00f      	b.n	80058ac <_malloc_r+0xb0>
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	1b52      	subs	r2, r2, r5
 8005890:	d41f      	bmi.n	80058d2 <_malloc_r+0xd6>
 8005892:	2a0b      	cmp	r2, #11
 8005894:	d917      	bls.n	80058c6 <_malloc_r+0xca>
 8005896:	1961      	adds	r1, r4, r5
 8005898:	42a3      	cmp	r3, r4
 800589a:	6025      	str	r5, [r4, #0]
 800589c:	bf18      	it	ne
 800589e:	6059      	strne	r1, [r3, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	bf08      	it	eq
 80058a4:	f8c8 1000 	streq.w	r1, [r8]
 80058a8:	5162      	str	r2, [r4, r5]
 80058aa:	604b      	str	r3, [r1, #4]
 80058ac:	4638      	mov	r0, r7
 80058ae:	f104 060b 	add.w	r6, r4, #11
 80058b2:	f000 f829 	bl	8005908 <__malloc_unlock>
 80058b6:	f026 0607 	bic.w	r6, r6, #7
 80058ba:	1d23      	adds	r3, r4, #4
 80058bc:	1af2      	subs	r2, r6, r3
 80058be:	d0ae      	beq.n	800581e <_malloc_r+0x22>
 80058c0:	1b9b      	subs	r3, r3, r6
 80058c2:	50a3      	str	r3, [r4, r2]
 80058c4:	e7ab      	b.n	800581e <_malloc_r+0x22>
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	6862      	ldr	r2, [r4, #4]
 80058ca:	d1dd      	bne.n	8005888 <_malloc_r+0x8c>
 80058cc:	f8c8 2000 	str.w	r2, [r8]
 80058d0:	e7ec      	b.n	80058ac <_malloc_r+0xb0>
 80058d2:	4623      	mov	r3, r4
 80058d4:	6864      	ldr	r4, [r4, #4]
 80058d6:	e7ac      	b.n	8005832 <_malloc_r+0x36>
 80058d8:	4634      	mov	r4, r6
 80058da:	6876      	ldr	r6, [r6, #4]
 80058dc:	e7b4      	b.n	8005848 <_malloc_r+0x4c>
 80058de:	4613      	mov	r3, r2
 80058e0:	e7cc      	b.n	800587c <_malloc_r+0x80>
 80058e2:	230c      	movs	r3, #12
 80058e4:	4638      	mov	r0, r7
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	f000 f80e 	bl	8005908 <__malloc_unlock>
 80058ec:	e797      	b.n	800581e <_malloc_r+0x22>
 80058ee:	6025      	str	r5, [r4, #0]
 80058f0:	e7dc      	b.n	80058ac <_malloc_r+0xb0>
 80058f2:	605b      	str	r3, [r3, #4]
 80058f4:	deff      	udf	#255	; 0xff
 80058f6:	bf00      	nop
 80058f8:	200012f0 	.word	0x200012f0

080058fc <__malloc_lock>:
 80058fc:	4801      	ldr	r0, [pc, #4]	; (8005904 <__malloc_lock+0x8>)
 80058fe:	f7ff bf04 	b.w	800570a <__retarget_lock_acquire_recursive>
 8005902:	bf00      	nop
 8005904:	200012ec 	.word	0x200012ec

08005908 <__malloc_unlock>:
 8005908:	4801      	ldr	r0, [pc, #4]	; (8005910 <__malloc_unlock+0x8>)
 800590a:	f7ff beff 	b.w	800570c <__retarget_lock_release_recursive>
 800590e:	bf00      	nop
 8005910:	200012ec 	.word	0x200012ec

08005914 <__ssputs_r>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	461f      	mov	r7, r3
 800591a:	688e      	ldr	r6, [r1, #8]
 800591c:	4682      	mov	sl, r0
 800591e:	42be      	cmp	r6, r7
 8005920:	460c      	mov	r4, r1
 8005922:	4690      	mov	r8, r2
 8005924:	680b      	ldr	r3, [r1, #0]
 8005926:	d82c      	bhi.n	8005982 <__ssputs_r+0x6e>
 8005928:	898a      	ldrh	r2, [r1, #12]
 800592a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800592e:	d026      	beq.n	800597e <__ssputs_r+0x6a>
 8005930:	6965      	ldr	r5, [r4, #20]
 8005932:	6909      	ldr	r1, [r1, #16]
 8005934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005938:	eba3 0901 	sub.w	r9, r3, r1
 800593c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005940:	1c7b      	adds	r3, r7, #1
 8005942:	444b      	add	r3, r9
 8005944:	106d      	asrs	r5, r5, #1
 8005946:	429d      	cmp	r5, r3
 8005948:	bf38      	it	cc
 800594a:	461d      	movcc	r5, r3
 800594c:	0553      	lsls	r3, r2, #21
 800594e:	d527      	bpl.n	80059a0 <__ssputs_r+0x8c>
 8005950:	4629      	mov	r1, r5
 8005952:	f7ff ff53 	bl	80057fc <_malloc_r>
 8005956:	4606      	mov	r6, r0
 8005958:	b360      	cbz	r0, 80059b4 <__ssputs_r+0xa0>
 800595a:	464a      	mov	r2, r9
 800595c:	6921      	ldr	r1, [r4, #16]
 800595e:	f7ff fed6 	bl	800570e <memcpy>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	6126      	str	r6, [r4, #16]
 8005970:	444e      	add	r6, r9
 8005972:	6026      	str	r6, [r4, #0]
 8005974:	463e      	mov	r6, r7
 8005976:	6165      	str	r5, [r4, #20]
 8005978:	eba5 0509 	sub.w	r5, r5, r9
 800597c:	60a5      	str	r5, [r4, #8]
 800597e:	42be      	cmp	r6, r7
 8005980:	d900      	bls.n	8005984 <__ssputs_r+0x70>
 8005982:	463e      	mov	r6, r7
 8005984:	4632      	mov	r2, r6
 8005986:	4641      	mov	r1, r8
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	f000 fcfc 	bl	8006386 <memmove>
 800598e:	2000      	movs	r0, #0
 8005990:	68a3      	ldr	r3, [r4, #8]
 8005992:	1b9b      	subs	r3, r3, r6
 8005994:	60a3      	str	r3, [r4, #8]
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	4433      	add	r3, r6
 800599a:	6023      	str	r3, [r4, #0]
 800599c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a0:	462a      	mov	r2, r5
 80059a2:	f000 fd4b 	bl	800643c <_realloc_r>
 80059a6:	4606      	mov	r6, r0
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d1e0      	bne.n	800596e <__ssputs_r+0x5a>
 80059ac:	4650      	mov	r0, sl
 80059ae:	6921      	ldr	r1, [r4, #16]
 80059b0:	f7ff febc 	bl	800572c <_free_r>
 80059b4:	230c      	movs	r3, #12
 80059b6:	f8ca 3000 	str.w	r3, [sl]
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	e7e9      	b.n	800599c <__ssputs_r+0x88>

080059c8 <_svfiprintf_r>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	4698      	mov	r8, r3
 80059ce:	898b      	ldrh	r3, [r1, #12]
 80059d0:	4607      	mov	r7, r0
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	460d      	mov	r5, r1
 80059d6:	4614      	mov	r4, r2
 80059d8:	b09d      	sub	sp, #116	; 0x74
 80059da:	d50e      	bpl.n	80059fa <_svfiprintf_r+0x32>
 80059dc:	690b      	ldr	r3, [r1, #16]
 80059de:	b963      	cbnz	r3, 80059fa <_svfiprintf_r+0x32>
 80059e0:	2140      	movs	r1, #64	; 0x40
 80059e2:	f7ff ff0b 	bl	80057fc <_malloc_r>
 80059e6:	6028      	str	r0, [r5, #0]
 80059e8:	6128      	str	r0, [r5, #16]
 80059ea:	b920      	cbnz	r0, 80059f6 <_svfiprintf_r+0x2e>
 80059ec:	230c      	movs	r3, #12
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	e0d0      	b.n	8005b98 <_svfiprintf_r+0x1d0>
 80059f6:	2340      	movs	r3, #64	; 0x40
 80059f8:	616b      	str	r3, [r5, #20]
 80059fa:	2300      	movs	r3, #0
 80059fc:	9309      	str	r3, [sp, #36]	; 0x24
 80059fe:	2320      	movs	r3, #32
 8005a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a04:	2330      	movs	r3, #48	; 0x30
 8005a06:	f04f 0901 	mov.w	r9, #1
 8005a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a0e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005bb0 <_svfiprintf_r+0x1e8>
 8005a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a16:	4623      	mov	r3, r4
 8005a18:	469a      	mov	sl, r3
 8005a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a1e:	b10a      	cbz	r2, 8005a24 <_svfiprintf_r+0x5c>
 8005a20:	2a25      	cmp	r2, #37	; 0x25
 8005a22:	d1f9      	bne.n	8005a18 <_svfiprintf_r+0x50>
 8005a24:	ebba 0b04 	subs.w	fp, sl, r4
 8005a28:	d00b      	beq.n	8005a42 <_svfiprintf_r+0x7a>
 8005a2a:	465b      	mov	r3, fp
 8005a2c:	4622      	mov	r2, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7ff ff6f 	bl	8005914 <__ssputs_r>
 8005a36:	3001      	adds	r0, #1
 8005a38:	f000 80a9 	beq.w	8005b8e <_svfiprintf_r+0x1c6>
 8005a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a3e:	445a      	add	r2, fp
 8005a40:	9209      	str	r2, [sp, #36]	; 0x24
 8005a42:	f89a 3000 	ldrb.w	r3, [sl]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80a1 	beq.w	8005b8e <_svfiprintf_r+0x1c6>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a56:	f10a 0a01 	add.w	sl, sl, #1
 8005a5a:	9304      	str	r3, [sp, #16]
 8005a5c:	9307      	str	r3, [sp, #28]
 8005a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a62:	931a      	str	r3, [sp, #104]	; 0x68
 8005a64:	4654      	mov	r4, sl
 8005a66:	2205      	movs	r2, #5
 8005a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a6c:	4850      	ldr	r0, [pc, #320]	; (8005bb0 <_svfiprintf_r+0x1e8>)
 8005a6e:	f000 fcd7 	bl	8006420 <memchr>
 8005a72:	9a04      	ldr	r2, [sp, #16]
 8005a74:	b9d8      	cbnz	r0, 8005aae <_svfiprintf_r+0xe6>
 8005a76:	06d0      	lsls	r0, r2, #27
 8005a78:	bf44      	itt	mi
 8005a7a:	2320      	movmi	r3, #32
 8005a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a80:	0711      	lsls	r1, r2, #28
 8005a82:	bf44      	itt	mi
 8005a84:	232b      	movmi	r3, #43	; 0x2b
 8005a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a90:	d015      	beq.n	8005abe <_svfiprintf_r+0xf6>
 8005a92:	4654      	mov	r4, sl
 8005a94:	2000      	movs	r0, #0
 8005a96:	f04f 0c0a 	mov.w	ip, #10
 8005a9a:	9a07      	ldr	r2, [sp, #28]
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aa2:	3b30      	subs	r3, #48	; 0x30
 8005aa4:	2b09      	cmp	r3, #9
 8005aa6:	d94d      	bls.n	8005b44 <_svfiprintf_r+0x17c>
 8005aa8:	b1b0      	cbz	r0, 8005ad8 <_svfiprintf_r+0x110>
 8005aaa:	9207      	str	r2, [sp, #28]
 8005aac:	e014      	b.n	8005ad8 <_svfiprintf_r+0x110>
 8005aae:	eba0 0308 	sub.w	r3, r0, r8
 8005ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	46a2      	mov	sl, r4
 8005aba:	9304      	str	r3, [sp, #16]
 8005abc:	e7d2      	b.n	8005a64 <_svfiprintf_r+0x9c>
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	1d19      	adds	r1, r3, #4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	9103      	str	r1, [sp, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bfbb      	ittet	lt
 8005aca:	425b      	neglt	r3, r3
 8005acc:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad0:	9307      	strge	r3, [sp, #28]
 8005ad2:	9307      	strlt	r3, [sp, #28]
 8005ad4:	bfb8      	it	lt
 8005ad6:	9204      	strlt	r2, [sp, #16]
 8005ad8:	7823      	ldrb	r3, [r4, #0]
 8005ada:	2b2e      	cmp	r3, #46	; 0x2e
 8005adc:	d10c      	bne.n	8005af8 <_svfiprintf_r+0x130>
 8005ade:	7863      	ldrb	r3, [r4, #1]
 8005ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ae2:	d134      	bne.n	8005b4e <_svfiprintf_r+0x186>
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	3402      	adds	r4, #2
 8005ae8:	1d1a      	adds	r2, r3, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	9203      	str	r2, [sp, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfb8      	it	lt
 8005af2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005af6:	9305      	str	r3, [sp, #20]
 8005af8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005bb4 <_svfiprintf_r+0x1ec>
 8005afc:	2203      	movs	r2, #3
 8005afe:	4650      	mov	r0, sl
 8005b00:	7821      	ldrb	r1, [r4, #0]
 8005b02:	f000 fc8d 	bl	8006420 <memchr>
 8005b06:	b138      	cbz	r0, 8005b18 <_svfiprintf_r+0x150>
 8005b08:	2240      	movs	r2, #64	; 0x40
 8005b0a:	9b04      	ldr	r3, [sp, #16]
 8005b0c:	eba0 000a 	sub.w	r0, r0, sl
 8005b10:	4082      	lsls	r2, r0
 8005b12:	4313      	orrs	r3, r2
 8005b14:	3401      	adds	r4, #1
 8005b16:	9304      	str	r3, [sp, #16]
 8005b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1c:	2206      	movs	r2, #6
 8005b1e:	4826      	ldr	r0, [pc, #152]	; (8005bb8 <_svfiprintf_r+0x1f0>)
 8005b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b24:	f000 fc7c 	bl	8006420 <memchr>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d038      	beq.n	8005b9e <_svfiprintf_r+0x1d6>
 8005b2c:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <_svfiprintf_r+0x1f4>)
 8005b2e:	bb1b      	cbnz	r3, 8005b78 <_svfiprintf_r+0x1b0>
 8005b30:	9b03      	ldr	r3, [sp, #12]
 8005b32:	3307      	adds	r3, #7
 8005b34:	f023 0307 	bic.w	r3, r3, #7
 8005b38:	3308      	adds	r3, #8
 8005b3a:	9303      	str	r3, [sp, #12]
 8005b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3e:	4433      	add	r3, r6
 8005b40:	9309      	str	r3, [sp, #36]	; 0x24
 8005b42:	e768      	b.n	8005a16 <_svfiprintf_r+0x4e>
 8005b44:	460c      	mov	r4, r1
 8005b46:	2001      	movs	r0, #1
 8005b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b4c:	e7a6      	b.n	8005a9c <_svfiprintf_r+0xd4>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f04f 0c0a 	mov.w	ip, #10
 8005b54:	4619      	mov	r1, r3
 8005b56:	3401      	adds	r4, #1
 8005b58:	9305      	str	r3, [sp, #20]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b60:	3a30      	subs	r2, #48	; 0x30
 8005b62:	2a09      	cmp	r2, #9
 8005b64:	d903      	bls.n	8005b6e <_svfiprintf_r+0x1a6>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0c6      	beq.n	8005af8 <_svfiprintf_r+0x130>
 8005b6a:	9105      	str	r1, [sp, #20]
 8005b6c:	e7c4      	b.n	8005af8 <_svfiprintf_r+0x130>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	2301      	movs	r3, #1
 8005b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b76:	e7f0      	b.n	8005b5a <_svfiprintf_r+0x192>
 8005b78:	ab03      	add	r3, sp, #12
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	4638      	mov	r0, r7
 8005b80:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <_svfiprintf_r+0x1f8>)
 8005b82:	a904      	add	r1, sp, #16
 8005b84:	f3af 8000 	nop.w
 8005b88:	1c42      	adds	r2, r0, #1
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	d1d6      	bne.n	8005b3c <_svfiprintf_r+0x174>
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	065b      	lsls	r3, r3, #25
 8005b92:	f53f af2d 	bmi.w	80059f0 <_svfiprintf_r+0x28>
 8005b96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b98:	b01d      	add	sp, #116	; 0x74
 8005b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9e:	ab03      	add	r3, sp, #12
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <_svfiprintf_r+0x1f8>)
 8005ba8:	a904      	add	r1, sp, #16
 8005baa:	f000 f9bf 	bl	8005f2c <_printf_i>
 8005bae:	e7eb      	b.n	8005b88 <_svfiprintf_r+0x1c0>
 8005bb0:	0800659a 	.word	0x0800659a
 8005bb4:	080065a0 	.word	0x080065a0
 8005bb8:	080065a4 	.word	0x080065a4
 8005bbc:	00000000 	.word	0x00000000
 8005bc0:	08005915 	.word	0x08005915

08005bc4 <__sfputc_r>:
 8005bc4:	6893      	ldr	r3, [r2, #8]
 8005bc6:	b410      	push	{r4}
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	6093      	str	r3, [r2, #8]
 8005bce:	da07      	bge.n	8005be0 <__sfputc_r+0x1c>
 8005bd0:	6994      	ldr	r4, [r2, #24]
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	db01      	blt.n	8005bda <__sfputc_r+0x16>
 8005bd6:	290a      	cmp	r1, #10
 8005bd8:	d102      	bne.n	8005be0 <__sfputc_r+0x1c>
 8005bda:	bc10      	pop	{r4}
 8005bdc:	f7ff bc31 	b.w	8005442 <__swbuf_r>
 8005be0:	6813      	ldr	r3, [r2, #0]
 8005be2:	1c58      	adds	r0, r3, #1
 8005be4:	6010      	str	r0, [r2, #0]
 8005be6:	7019      	strb	r1, [r3, #0]
 8005be8:	4608      	mov	r0, r1
 8005bea:	bc10      	pop	{r4}
 8005bec:	4770      	bx	lr

08005bee <__sfputs_r>:
 8005bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	460f      	mov	r7, r1
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	18d5      	adds	r5, r2, r3
 8005bf8:	42ac      	cmp	r4, r5
 8005bfa:	d101      	bne.n	8005c00 <__sfputs_r+0x12>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e007      	b.n	8005c10 <__sfputs_r+0x22>
 8005c00:	463a      	mov	r2, r7
 8005c02:	4630      	mov	r0, r6
 8005c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c08:	f7ff ffdc 	bl	8005bc4 <__sfputc_r>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d1f3      	bne.n	8005bf8 <__sfputs_r+0xa>
 8005c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c14 <_vfiprintf_r>:
 8005c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	460d      	mov	r5, r1
 8005c1a:	4614      	mov	r4, r2
 8005c1c:	4698      	mov	r8, r3
 8005c1e:	4606      	mov	r6, r0
 8005c20:	b09d      	sub	sp, #116	; 0x74
 8005c22:	b118      	cbz	r0, 8005c2c <_vfiprintf_r+0x18>
 8005c24:	6a03      	ldr	r3, [r0, #32]
 8005c26:	b90b      	cbnz	r3, 8005c2c <_vfiprintf_r+0x18>
 8005c28:	f7ff fb04 	bl	8005234 <__sinit>
 8005c2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c2e:	07d9      	lsls	r1, r3, #31
 8005c30:	d405      	bmi.n	8005c3e <_vfiprintf_r+0x2a>
 8005c32:	89ab      	ldrh	r3, [r5, #12]
 8005c34:	059a      	lsls	r2, r3, #22
 8005c36:	d402      	bmi.n	8005c3e <_vfiprintf_r+0x2a>
 8005c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c3a:	f7ff fd66 	bl	800570a <__retarget_lock_acquire_recursive>
 8005c3e:	89ab      	ldrh	r3, [r5, #12]
 8005c40:	071b      	lsls	r3, r3, #28
 8005c42:	d501      	bpl.n	8005c48 <_vfiprintf_r+0x34>
 8005c44:	692b      	ldr	r3, [r5, #16]
 8005c46:	b99b      	cbnz	r3, 8005c70 <_vfiprintf_r+0x5c>
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff fc36 	bl	80054bc <__swsetup_r>
 8005c50:	b170      	cbz	r0, 8005c70 <_vfiprintf_r+0x5c>
 8005c52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c54:	07dc      	lsls	r4, r3, #31
 8005c56:	d504      	bpl.n	8005c62 <_vfiprintf_r+0x4e>
 8005c58:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5c:	b01d      	add	sp, #116	; 0x74
 8005c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c62:	89ab      	ldrh	r3, [r5, #12]
 8005c64:	0598      	lsls	r0, r3, #22
 8005c66:	d4f7      	bmi.n	8005c58 <_vfiprintf_r+0x44>
 8005c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c6a:	f7ff fd4f 	bl	800570c <__retarget_lock_release_recursive>
 8005c6e:	e7f3      	b.n	8005c58 <_vfiprintf_r+0x44>
 8005c70:	2300      	movs	r3, #0
 8005c72:	9309      	str	r3, [sp, #36]	; 0x24
 8005c74:	2320      	movs	r3, #32
 8005c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c7a:	2330      	movs	r3, #48	; 0x30
 8005c7c:	f04f 0901 	mov.w	r9, #1
 8005c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c84:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005e34 <_vfiprintf_r+0x220>
 8005c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c8c:	4623      	mov	r3, r4
 8005c8e:	469a      	mov	sl, r3
 8005c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c94:	b10a      	cbz	r2, 8005c9a <_vfiprintf_r+0x86>
 8005c96:	2a25      	cmp	r2, #37	; 0x25
 8005c98:	d1f9      	bne.n	8005c8e <_vfiprintf_r+0x7a>
 8005c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c9e:	d00b      	beq.n	8005cb8 <_vfiprintf_r+0xa4>
 8005ca0:	465b      	mov	r3, fp
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f7ff ffa1 	bl	8005bee <__sfputs_r>
 8005cac:	3001      	adds	r0, #1
 8005cae:	f000 80a9 	beq.w	8005e04 <_vfiprintf_r+0x1f0>
 8005cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cb4:	445a      	add	r2, fp
 8005cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8005cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 80a1 	beq.w	8005e04 <_vfiprintf_r+0x1f0>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ccc:	f10a 0a01 	add.w	sl, sl, #1
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	9307      	str	r3, [sp, #28]
 8005cd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cd8:	931a      	str	r3, [sp, #104]	; 0x68
 8005cda:	4654      	mov	r4, sl
 8005cdc:	2205      	movs	r2, #5
 8005cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce2:	4854      	ldr	r0, [pc, #336]	; (8005e34 <_vfiprintf_r+0x220>)
 8005ce4:	f000 fb9c 	bl	8006420 <memchr>
 8005ce8:	9a04      	ldr	r2, [sp, #16]
 8005cea:	b9d8      	cbnz	r0, 8005d24 <_vfiprintf_r+0x110>
 8005cec:	06d1      	lsls	r1, r2, #27
 8005cee:	bf44      	itt	mi
 8005cf0:	2320      	movmi	r3, #32
 8005cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cf6:	0713      	lsls	r3, r2, #28
 8005cf8:	bf44      	itt	mi
 8005cfa:	232b      	movmi	r3, #43	; 0x2b
 8005cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d00:	f89a 3000 	ldrb.w	r3, [sl]
 8005d04:	2b2a      	cmp	r3, #42	; 0x2a
 8005d06:	d015      	beq.n	8005d34 <_vfiprintf_r+0x120>
 8005d08:	4654      	mov	r4, sl
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	f04f 0c0a 	mov.w	ip, #10
 8005d10:	9a07      	ldr	r2, [sp, #28]
 8005d12:	4621      	mov	r1, r4
 8005d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d18:	3b30      	subs	r3, #48	; 0x30
 8005d1a:	2b09      	cmp	r3, #9
 8005d1c:	d94d      	bls.n	8005dba <_vfiprintf_r+0x1a6>
 8005d1e:	b1b0      	cbz	r0, 8005d4e <_vfiprintf_r+0x13a>
 8005d20:	9207      	str	r2, [sp, #28]
 8005d22:	e014      	b.n	8005d4e <_vfiprintf_r+0x13a>
 8005d24:	eba0 0308 	sub.w	r3, r0, r8
 8005d28:	fa09 f303 	lsl.w	r3, r9, r3
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	46a2      	mov	sl, r4
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	e7d2      	b.n	8005cda <_vfiprintf_r+0xc6>
 8005d34:	9b03      	ldr	r3, [sp, #12]
 8005d36:	1d19      	adds	r1, r3, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	9103      	str	r1, [sp, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bfbb      	ittet	lt
 8005d40:	425b      	neglt	r3, r3
 8005d42:	f042 0202 	orrlt.w	r2, r2, #2
 8005d46:	9307      	strge	r3, [sp, #28]
 8005d48:	9307      	strlt	r3, [sp, #28]
 8005d4a:	bfb8      	it	lt
 8005d4c:	9204      	strlt	r2, [sp, #16]
 8005d4e:	7823      	ldrb	r3, [r4, #0]
 8005d50:	2b2e      	cmp	r3, #46	; 0x2e
 8005d52:	d10c      	bne.n	8005d6e <_vfiprintf_r+0x15a>
 8005d54:	7863      	ldrb	r3, [r4, #1]
 8005d56:	2b2a      	cmp	r3, #42	; 0x2a
 8005d58:	d134      	bne.n	8005dc4 <_vfiprintf_r+0x1b0>
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	3402      	adds	r4, #2
 8005d5e:	1d1a      	adds	r2, r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	9203      	str	r2, [sp, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	bfb8      	it	lt
 8005d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d6c:	9305      	str	r3, [sp, #20]
 8005d6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e38 <_vfiprintf_r+0x224>
 8005d72:	2203      	movs	r2, #3
 8005d74:	4650      	mov	r0, sl
 8005d76:	7821      	ldrb	r1, [r4, #0]
 8005d78:	f000 fb52 	bl	8006420 <memchr>
 8005d7c:	b138      	cbz	r0, 8005d8e <_vfiprintf_r+0x17a>
 8005d7e:	2240      	movs	r2, #64	; 0x40
 8005d80:	9b04      	ldr	r3, [sp, #16]
 8005d82:	eba0 000a 	sub.w	r0, r0, sl
 8005d86:	4082      	lsls	r2, r0
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	3401      	adds	r4, #1
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d92:	2206      	movs	r2, #6
 8005d94:	4829      	ldr	r0, [pc, #164]	; (8005e3c <_vfiprintf_r+0x228>)
 8005d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d9a:	f000 fb41 	bl	8006420 <memchr>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d03f      	beq.n	8005e22 <_vfiprintf_r+0x20e>
 8005da2:	4b27      	ldr	r3, [pc, #156]	; (8005e40 <_vfiprintf_r+0x22c>)
 8005da4:	bb1b      	cbnz	r3, 8005dee <_vfiprintf_r+0x1da>
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	3307      	adds	r3, #7
 8005daa:	f023 0307 	bic.w	r3, r3, #7
 8005dae:	3308      	adds	r3, #8
 8005db0:	9303      	str	r3, [sp, #12]
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	443b      	add	r3, r7
 8005db6:	9309      	str	r3, [sp, #36]	; 0x24
 8005db8:	e768      	b.n	8005c8c <_vfiprintf_r+0x78>
 8005dba:	460c      	mov	r4, r1
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc2:	e7a6      	b.n	8005d12 <_vfiprintf_r+0xfe>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f04f 0c0a 	mov.w	ip, #10
 8005dca:	4619      	mov	r1, r3
 8005dcc:	3401      	adds	r4, #1
 8005dce:	9305      	str	r3, [sp, #20]
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dd6:	3a30      	subs	r2, #48	; 0x30
 8005dd8:	2a09      	cmp	r2, #9
 8005dda:	d903      	bls.n	8005de4 <_vfiprintf_r+0x1d0>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0c6      	beq.n	8005d6e <_vfiprintf_r+0x15a>
 8005de0:	9105      	str	r1, [sp, #20]
 8005de2:	e7c4      	b.n	8005d6e <_vfiprintf_r+0x15a>
 8005de4:	4604      	mov	r4, r0
 8005de6:	2301      	movs	r3, #1
 8005de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dec:	e7f0      	b.n	8005dd0 <_vfiprintf_r+0x1bc>
 8005dee:	ab03      	add	r3, sp, #12
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	462a      	mov	r2, r5
 8005df4:	4630      	mov	r0, r6
 8005df6:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <_vfiprintf_r+0x230>)
 8005df8:	a904      	add	r1, sp, #16
 8005dfa:	f3af 8000 	nop.w
 8005dfe:	4607      	mov	r7, r0
 8005e00:	1c78      	adds	r0, r7, #1
 8005e02:	d1d6      	bne.n	8005db2 <_vfiprintf_r+0x19e>
 8005e04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e06:	07d9      	lsls	r1, r3, #31
 8005e08:	d405      	bmi.n	8005e16 <_vfiprintf_r+0x202>
 8005e0a:	89ab      	ldrh	r3, [r5, #12]
 8005e0c:	059a      	lsls	r2, r3, #22
 8005e0e:	d402      	bmi.n	8005e16 <_vfiprintf_r+0x202>
 8005e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e12:	f7ff fc7b 	bl	800570c <__retarget_lock_release_recursive>
 8005e16:	89ab      	ldrh	r3, [r5, #12]
 8005e18:	065b      	lsls	r3, r3, #25
 8005e1a:	f53f af1d 	bmi.w	8005c58 <_vfiprintf_r+0x44>
 8005e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e20:	e71c      	b.n	8005c5c <_vfiprintf_r+0x48>
 8005e22:	ab03      	add	r3, sp, #12
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	462a      	mov	r2, r5
 8005e28:	4630      	mov	r0, r6
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <_vfiprintf_r+0x230>)
 8005e2c:	a904      	add	r1, sp, #16
 8005e2e:	f000 f87d 	bl	8005f2c <_printf_i>
 8005e32:	e7e4      	b.n	8005dfe <_vfiprintf_r+0x1ea>
 8005e34:	0800659a 	.word	0x0800659a
 8005e38:	080065a0 	.word	0x080065a0
 8005e3c:	080065a4 	.word	0x080065a4
 8005e40:	00000000 	.word	0x00000000
 8005e44:	08005bef 	.word	0x08005bef

08005e48 <_printf_common>:
 8005e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	4699      	mov	r9, r3
 8005e50:	688a      	ldr	r2, [r1, #8]
 8005e52:	690b      	ldr	r3, [r1, #16]
 8005e54:	4607      	mov	r7, r0
 8005e56:	4293      	cmp	r3, r2
 8005e58:	bfb8      	it	lt
 8005e5a:	4613      	movlt	r3, r2
 8005e5c:	6033      	str	r3, [r6, #0]
 8005e5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e62:	460c      	mov	r4, r1
 8005e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e68:	b10a      	cbz	r2, 8005e6e <_printf_common+0x26>
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	6033      	str	r3, [r6, #0]
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	0699      	lsls	r1, r3, #26
 8005e72:	bf42      	ittt	mi
 8005e74:	6833      	ldrmi	r3, [r6, #0]
 8005e76:	3302      	addmi	r3, #2
 8005e78:	6033      	strmi	r3, [r6, #0]
 8005e7a:	6825      	ldr	r5, [r4, #0]
 8005e7c:	f015 0506 	ands.w	r5, r5, #6
 8005e80:	d106      	bne.n	8005e90 <_printf_common+0x48>
 8005e82:	f104 0a19 	add.w	sl, r4, #25
 8005e86:	68e3      	ldr	r3, [r4, #12]
 8005e88:	6832      	ldr	r2, [r6, #0]
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	42ab      	cmp	r3, r5
 8005e8e:	dc2b      	bgt.n	8005ee8 <_printf_common+0xa0>
 8005e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e94:	1e13      	subs	r3, r2, #0
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	bf18      	it	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	0692      	lsls	r2, r2, #26
 8005e9e:	d430      	bmi.n	8005f02 <_printf_common+0xba>
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ea8:	47c0      	blx	r8
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d023      	beq.n	8005ef6 <_printf_common+0xae>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	6922      	ldr	r2, [r4, #16]
 8005eb2:	f003 0306 	and.w	r3, r3, #6
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	bf14      	ite	ne
 8005eba:	2500      	movne	r5, #0
 8005ebc:	6833      	ldreq	r3, [r6, #0]
 8005ebe:	f04f 0600 	mov.w	r6, #0
 8005ec2:	bf08      	it	eq
 8005ec4:	68e5      	ldreq	r5, [r4, #12]
 8005ec6:	f104 041a 	add.w	r4, r4, #26
 8005eca:	bf08      	it	eq
 8005ecc:	1aed      	subeq	r5, r5, r3
 8005ece:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ed2:	bf08      	it	eq
 8005ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	bfc4      	itt	gt
 8005edc:	1a9b      	subgt	r3, r3, r2
 8005ede:	18ed      	addgt	r5, r5, r3
 8005ee0:	42b5      	cmp	r5, r6
 8005ee2:	d11a      	bne.n	8005f1a <_printf_common+0xd2>
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	e008      	b.n	8005efa <_printf_common+0xb2>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4652      	mov	r2, sl
 8005eec:	4649      	mov	r1, r9
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d103      	bne.n	8005efe <_printf_common+0xb6>
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8005efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efe:	3501      	adds	r5, #1
 8005f00:	e7c1      	b.n	8005e86 <_printf_common+0x3e>
 8005f02:	2030      	movs	r0, #48	; 0x30
 8005f04:	18e1      	adds	r1, r4, r3
 8005f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f10:	4422      	add	r2, r4
 8005f12:	3302      	adds	r3, #2
 8005f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f18:	e7c2      	b.n	8005ea0 <_printf_common+0x58>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4649      	mov	r1, r9
 8005f20:	4638      	mov	r0, r7
 8005f22:	47c0      	blx	r8
 8005f24:	3001      	adds	r0, #1
 8005f26:	d0e6      	beq.n	8005ef6 <_printf_common+0xae>
 8005f28:	3601      	adds	r6, #1
 8005f2a:	e7d9      	b.n	8005ee0 <_printf_common+0x98>

08005f2c <_printf_i>:
 8005f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f30:	7e0f      	ldrb	r7, [r1, #24]
 8005f32:	4691      	mov	r9, r2
 8005f34:	2f78      	cmp	r7, #120	; 0x78
 8005f36:	4680      	mov	r8, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	469a      	mov	sl, r3
 8005f3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f42:	d807      	bhi.n	8005f54 <_printf_i+0x28>
 8005f44:	2f62      	cmp	r7, #98	; 0x62
 8005f46:	d80a      	bhi.n	8005f5e <_printf_i+0x32>
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	f000 80d5 	beq.w	80060f8 <_printf_i+0x1cc>
 8005f4e:	2f58      	cmp	r7, #88	; 0x58
 8005f50:	f000 80c1 	beq.w	80060d6 <_printf_i+0x1aa>
 8005f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f5c:	e03a      	b.n	8005fd4 <_printf_i+0xa8>
 8005f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f62:	2b15      	cmp	r3, #21
 8005f64:	d8f6      	bhi.n	8005f54 <_printf_i+0x28>
 8005f66:	a101      	add	r1, pc, #4	; (adr r1, 8005f6c <_printf_i+0x40>)
 8005f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f6c:	08005fc5 	.word	0x08005fc5
 8005f70:	08005fd9 	.word	0x08005fd9
 8005f74:	08005f55 	.word	0x08005f55
 8005f78:	08005f55 	.word	0x08005f55
 8005f7c:	08005f55 	.word	0x08005f55
 8005f80:	08005f55 	.word	0x08005f55
 8005f84:	08005fd9 	.word	0x08005fd9
 8005f88:	08005f55 	.word	0x08005f55
 8005f8c:	08005f55 	.word	0x08005f55
 8005f90:	08005f55 	.word	0x08005f55
 8005f94:	08005f55 	.word	0x08005f55
 8005f98:	080060df 	.word	0x080060df
 8005f9c:	08006005 	.word	0x08006005
 8005fa0:	08006099 	.word	0x08006099
 8005fa4:	08005f55 	.word	0x08005f55
 8005fa8:	08005f55 	.word	0x08005f55
 8005fac:	08006101 	.word	0x08006101
 8005fb0:	08005f55 	.word	0x08005f55
 8005fb4:	08006005 	.word	0x08006005
 8005fb8:	08005f55 	.word	0x08005f55
 8005fbc:	08005f55 	.word	0x08005f55
 8005fc0:	080060a1 	.word	0x080060a1
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	1d1a      	adds	r2, r3, #4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	602a      	str	r2, [r5, #0]
 8005fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0a0      	b.n	800611a <_printf_i+0x1ee>
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	682b      	ldr	r3, [r5, #0]
 8005fdc:	0607      	lsls	r7, r0, #24
 8005fde:	f103 0104 	add.w	r1, r3, #4
 8005fe2:	6029      	str	r1, [r5, #0]
 8005fe4:	d501      	bpl.n	8005fea <_printf_i+0xbe>
 8005fe6:	681e      	ldr	r6, [r3, #0]
 8005fe8:	e003      	b.n	8005ff2 <_printf_i+0xc6>
 8005fea:	0646      	lsls	r6, r0, #25
 8005fec:	d5fb      	bpl.n	8005fe6 <_printf_i+0xba>
 8005fee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ff2:	2e00      	cmp	r6, #0
 8005ff4:	da03      	bge.n	8005ffe <_printf_i+0xd2>
 8005ff6:	232d      	movs	r3, #45	; 0x2d
 8005ff8:	4276      	negs	r6, r6
 8005ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ffe:	230a      	movs	r3, #10
 8006000:	4859      	ldr	r0, [pc, #356]	; (8006168 <_printf_i+0x23c>)
 8006002:	e012      	b.n	800602a <_printf_i+0xfe>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	1d19      	adds	r1, r3, #4
 800600a:	6029      	str	r1, [r5, #0]
 800600c:	0605      	lsls	r5, r0, #24
 800600e:	d501      	bpl.n	8006014 <_printf_i+0xe8>
 8006010:	681e      	ldr	r6, [r3, #0]
 8006012:	e002      	b.n	800601a <_printf_i+0xee>
 8006014:	0641      	lsls	r1, r0, #25
 8006016:	d5fb      	bpl.n	8006010 <_printf_i+0xe4>
 8006018:	881e      	ldrh	r6, [r3, #0]
 800601a:	2f6f      	cmp	r7, #111	; 0x6f
 800601c:	bf0c      	ite	eq
 800601e:	2308      	moveq	r3, #8
 8006020:	230a      	movne	r3, #10
 8006022:	4851      	ldr	r0, [pc, #324]	; (8006168 <_printf_i+0x23c>)
 8006024:	2100      	movs	r1, #0
 8006026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800602a:	6865      	ldr	r5, [r4, #4]
 800602c:	2d00      	cmp	r5, #0
 800602e:	bfa8      	it	ge
 8006030:	6821      	ldrge	r1, [r4, #0]
 8006032:	60a5      	str	r5, [r4, #8]
 8006034:	bfa4      	itt	ge
 8006036:	f021 0104 	bicge.w	r1, r1, #4
 800603a:	6021      	strge	r1, [r4, #0]
 800603c:	b90e      	cbnz	r6, 8006042 <_printf_i+0x116>
 800603e:	2d00      	cmp	r5, #0
 8006040:	d04b      	beq.n	80060da <_printf_i+0x1ae>
 8006042:	4615      	mov	r5, r2
 8006044:	fbb6 f1f3 	udiv	r1, r6, r3
 8006048:	fb03 6711 	mls	r7, r3, r1, r6
 800604c:	5dc7      	ldrb	r7, [r0, r7]
 800604e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006052:	4637      	mov	r7, r6
 8006054:	42bb      	cmp	r3, r7
 8006056:	460e      	mov	r6, r1
 8006058:	d9f4      	bls.n	8006044 <_printf_i+0x118>
 800605a:	2b08      	cmp	r3, #8
 800605c:	d10b      	bne.n	8006076 <_printf_i+0x14a>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	07de      	lsls	r6, r3, #31
 8006062:	d508      	bpl.n	8006076 <_printf_i+0x14a>
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	6861      	ldr	r1, [r4, #4]
 8006068:	4299      	cmp	r1, r3
 800606a:	bfde      	ittt	le
 800606c:	2330      	movle	r3, #48	; 0x30
 800606e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006072:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006076:	1b52      	subs	r2, r2, r5
 8006078:	6122      	str	r2, [r4, #16]
 800607a:	464b      	mov	r3, r9
 800607c:	4621      	mov	r1, r4
 800607e:	4640      	mov	r0, r8
 8006080:	f8cd a000 	str.w	sl, [sp]
 8006084:	aa03      	add	r2, sp, #12
 8006086:	f7ff fedf 	bl	8005e48 <_printf_common>
 800608a:	3001      	adds	r0, #1
 800608c:	d14a      	bne.n	8006124 <_printf_i+0x1f8>
 800608e:	f04f 30ff 	mov.w	r0, #4294967295
 8006092:	b004      	add	sp, #16
 8006094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	f043 0320 	orr.w	r3, r3, #32
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	2778      	movs	r7, #120	; 0x78
 80060a2:	4832      	ldr	r0, [pc, #200]	; (800616c <_printf_i+0x240>)
 80060a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	6829      	ldr	r1, [r5, #0]
 80060ac:	061f      	lsls	r7, r3, #24
 80060ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80060b2:	d402      	bmi.n	80060ba <_printf_i+0x18e>
 80060b4:	065f      	lsls	r7, r3, #25
 80060b6:	bf48      	it	mi
 80060b8:	b2b6      	uxthmi	r6, r6
 80060ba:	07df      	lsls	r7, r3, #31
 80060bc:	bf48      	it	mi
 80060be:	f043 0320 	orrmi.w	r3, r3, #32
 80060c2:	6029      	str	r1, [r5, #0]
 80060c4:	bf48      	it	mi
 80060c6:	6023      	strmi	r3, [r4, #0]
 80060c8:	b91e      	cbnz	r6, 80060d2 <_printf_i+0x1a6>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f023 0320 	bic.w	r3, r3, #32
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	2310      	movs	r3, #16
 80060d4:	e7a6      	b.n	8006024 <_printf_i+0xf8>
 80060d6:	4824      	ldr	r0, [pc, #144]	; (8006168 <_printf_i+0x23c>)
 80060d8:	e7e4      	b.n	80060a4 <_printf_i+0x178>
 80060da:	4615      	mov	r5, r2
 80060dc:	e7bd      	b.n	800605a <_printf_i+0x12e>
 80060de:	682b      	ldr	r3, [r5, #0]
 80060e0:	6826      	ldr	r6, [r4, #0]
 80060e2:	1d18      	adds	r0, r3, #4
 80060e4:	6961      	ldr	r1, [r4, #20]
 80060e6:	6028      	str	r0, [r5, #0]
 80060e8:	0635      	lsls	r5, r6, #24
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	d501      	bpl.n	80060f2 <_printf_i+0x1c6>
 80060ee:	6019      	str	r1, [r3, #0]
 80060f0:	e002      	b.n	80060f8 <_printf_i+0x1cc>
 80060f2:	0670      	lsls	r0, r6, #25
 80060f4:	d5fb      	bpl.n	80060ee <_printf_i+0x1c2>
 80060f6:	8019      	strh	r1, [r3, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	4615      	mov	r5, r2
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	e7bc      	b.n	800607a <_printf_i+0x14e>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	2100      	movs	r1, #0
 8006104:	1d1a      	adds	r2, r3, #4
 8006106:	602a      	str	r2, [r5, #0]
 8006108:	681d      	ldr	r5, [r3, #0]
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	4628      	mov	r0, r5
 800610e:	f000 f987 	bl	8006420 <memchr>
 8006112:	b108      	cbz	r0, 8006118 <_printf_i+0x1ec>
 8006114:	1b40      	subs	r0, r0, r5
 8006116:	6060      	str	r0, [r4, #4]
 8006118:	6863      	ldr	r3, [r4, #4]
 800611a:	6123      	str	r3, [r4, #16]
 800611c:	2300      	movs	r3, #0
 800611e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006122:	e7aa      	b.n	800607a <_printf_i+0x14e>
 8006124:	462a      	mov	r2, r5
 8006126:	4649      	mov	r1, r9
 8006128:	4640      	mov	r0, r8
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	47d0      	blx	sl
 800612e:	3001      	adds	r0, #1
 8006130:	d0ad      	beq.n	800608e <_printf_i+0x162>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	079b      	lsls	r3, r3, #30
 8006136:	d413      	bmi.n	8006160 <_printf_i+0x234>
 8006138:	68e0      	ldr	r0, [r4, #12]
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	4298      	cmp	r0, r3
 800613e:	bfb8      	it	lt
 8006140:	4618      	movlt	r0, r3
 8006142:	e7a6      	b.n	8006092 <_printf_i+0x166>
 8006144:	2301      	movs	r3, #1
 8006146:	4632      	mov	r2, r6
 8006148:	4649      	mov	r1, r9
 800614a:	4640      	mov	r0, r8
 800614c:	47d0      	blx	sl
 800614e:	3001      	adds	r0, #1
 8006150:	d09d      	beq.n	800608e <_printf_i+0x162>
 8006152:	3501      	adds	r5, #1
 8006154:	68e3      	ldr	r3, [r4, #12]
 8006156:	9903      	ldr	r1, [sp, #12]
 8006158:	1a5b      	subs	r3, r3, r1
 800615a:	42ab      	cmp	r3, r5
 800615c:	dcf2      	bgt.n	8006144 <_printf_i+0x218>
 800615e:	e7eb      	b.n	8006138 <_printf_i+0x20c>
 8006160:	2500      	movs	r5, #0
 8006162:	f104 0619 	add.w	r6, r4, #25
 8006166:	e7f5      	b.n	8006154 <_printf_i+0x228>
 8006168:	080065ab 	.word	0x080065ab
 800616c:	080065bc 	.word	0x080065bc

08006170 <__sflush_r>:
 8006170:	898a      	ldrh	r2, [r1, #12]
 8006172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006174:	4605      	mov	r5, r0
 8006176:	0710      	lsls	r0, r2, #28
 8006178:	460c      	mov	r4, r1
 800617a:	d457      	bmi.n	800622c <__sflush_r+0xbc>
 800617c:	684b      	ldr	r3, [r1, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	dc04      	bgt.n	800618c <__sflush_r+0x1c>
 8006182:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	dc01      	bgt.n	800618c <__sflush_r+0x1c>
 8006188:	2000      	movs	r0, #0
 800618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800618c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800618e:	2e00      	cmp	r6, #0
 8006190:	d0fa      	beq.n	8006188 <__sflush_r+0x18>
 8006192:	2300      	movs	r3, #0
 8006194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006198:	682f      	ldr	r7, [r5, #0]
 800619a:	6a21      	ldr	r1, [r4, #32]
 800619c:	602b      	str	r3, [r5, #0]
 800619e:	d032      	beq.n	8006206 <__sflush_r+0x96>
 80061a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	075a      	lsls	r2, r3, #29
 80061a6:	d505      	bpl.n	80061b4 <__sflush_r+0x44>
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	1ac0      	subs	r0, r0, r3
 80061ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061ae:	b10b      	cbz	r3, 80061b4 <__sflush_r+0x44>
 80061b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061b2:	1ac0      	subs	r0, r0, r3
 80061b4:	2300      	movs	r3, #0
 80061b6:	4602      	mov	r2, r0
 80061b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061ba:	4628      	mov	r0, r5
 80061bc:	6a21      	ldr	r1, [r4, #32]
 80061be:	47b0      	blx	r6
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	d106      	bne.n	80061d4 <__sflush_r+0x64>
 80061c6:	6829      	ldr	r1, [r5, #0]
 80061c8:	291d      	cmp	r1, #29
 80061ca:	d82b      	bhi.n	8006224 <__sflush_r+0xb4>
 80061cc:	4a28      	ldr	r2, [pc, #160]	; (8006270 <__sflush_r+0x100>)
 80061ce:	410a      	asrs	r2, r1
 80061d0:	07d6      	lsls	r6, r2, #31
 80061d2:	d427      	bmi.n	8006224 <__sflush_r+0xb4>
 80061d4:	2200      	movs	r2, #0
 80061d6:	6062      	str	r2, [r4, #4]
 80061d8:	6922      	ldr	r2, [r4, #16]
 80061da:	04d9      	lsls	r1, r3, #19
 80061dc:	6022      	str	r2, [r4, #0]
 80061de:	d504      	bpl.n	80061ea <__sflush_r+0x7a>
 80061e0:	1c42      	adds	r2, r0, #1
 80061e2:	d101      	bne.n	80061e8 <__sflush_r+0x78>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b903      	cbnz	r3, 80061ea <__sflush_r+0x7a>
 80061e8:	6560      	str	r0, [r4, #84]	; 0x54
 80061ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061ec:	602f      	str	r7, [r5, #0]
 80061ee:	2900      	cmp	r1, #0
 80061f0:	d0ca      	beq.n	8006188 <__sflush_r+0x18>
 80061f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061f6:	4299      	cmp	r1, r3
 80061f8:	d002      	beq.n	8006200 <__sflush_r+0x90>
 80061fa:	4628      	mov	r0, r5
 80061fc:	f7ff fa96 	bl	800572c <_free_r>
 8006200:	2000      	movs	r0, #0
 8006202:	6360      	str	r0, [r4, #52]	; 0x34
 8006204:	e7c1      	b.n	800618a <__sflush_r+0x1a>
 8006206:	2301      	movs	r3, #1
 8006208:	4628      	mov	r0, r5
 800620a:	47b0      	blx	r6
 800620c:	1c41      	adds	r1, r0, #1
 800620e:	d1c8      	bne.n	80061a2 <__sflush_r+0x32>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0c5      	beq.n	80061a2 <__sflush_r+0x32>
 8006216:	2b1d      	cmp	r3, #29
 8006218:	d001      	beq.n	800621e <__sflush_r+0xae>
 800621a:	2b16      	cmp	r3, #22
 800621c:	d101      	bne.n	8006222 <__sflush_r+0xb2>
 800621e:	602f      	str	r7, [r5, #0]
 8006220:	e7b2      	b.n	8006188 <__sflush_r+0x18>
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	e7ae      	b.n	800618a <__sflush_r+0x1a>
 800622c:	690f      	ldr	r7, [r1, #16]
 800622e:	2f00      	cmp	r7, #0
 8006230:	d0aa      	beq.n	8006188 <__sflush_r+0x18>
 8006232:	0793      	lsls	r3, r2, #30
 8006234:	bf18      	it	ne
 8006236:	2300      	movne	r3, #0
 8006238:	680e      	ldr	r6, [r1, #0]
 800623a:	bf08      	it	eq
 800623c:	694b      	ldreq	r3, [r1, #20]
 800623e:	1bf6      	subs	r6, r6, r7
 8006240:	600f      	str	r7, [r1, #0]
 8006242:	608b      	str	r3, [r1, #8]
 8006244:	2e00      	cmp	r6, #0
 8006246:	dd9f      	ble.n	8006188 <__sflush_r+0x18>
 8006248:	4633      	mov	r3, r6
 800624a:	463a      	mov	r2, r7
 800624c:	4628      	mov	r0, r5
 800624e:	6a21      	ldr	r1, [r4, #32]
 8006250:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006254:	47e0      	blx	ip
 8006256:	2800      	cmp	r0, #0
 8006258:	dc06      	bgt.n	8006268 <__sflush_r+0xf8>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006264:	81a3      	strh	r3, [r4, #12]
 8006266:	e790      	b.n	800618a <__sflush_r+0x1a>
 8006268:	4407      	add	r7, r0
 800626a:	1a36      	subs	r6, r6, r0
 800626c:	e7ea      	b.n	8006244 <__sflush_r+0xd4>
 800626e:	bf00      	nop
 8006270:	dfbffffe 	.word	0xdfbffffe

08006274 <_fflush_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	690b      	ldr	r3, [r1, #16]
 8006278:	4605      	mov	r5, r0
 800627a:	460c      	mov	r4, r1
 800627c:	b913      	cbnz	r3, 8006284 <_fflush_r+0x10>
 800627e:	2500      	movs	r5, #0
 8006280:	4628      	mov	r0, r5
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	b118      	cbz	r0, 800628e <_fflush_r+0x1a>
 8006286:	6a03      	ldr	r3, [r0, #32]
 8006288:	b90b      	cbnz	r3, 800628e <_fflush_r+0x1a>
 800628a:	f7fe ffd3 	bl	8005234 <__sinit>
 800628e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f3      	beq.n	800627e <_fflush_r+0xa>
 8006296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006298:	07d0      	lsls	r0, r2, #31
 800629a:	d404      	bmi.n	80062a6 <_fflush_r+0x32>
 800629c:	0599      	lsls	r1, r3, #22
 800629e:	d402      	bmi.n	80062a6 <_fflush_r+0x32>
 80062a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a2:	f7ff fa32 	bl	800570a <__retarget_lock_acquire_recursive>
 80062a6:	4628      	mov	r0, r5
 80062a8:	4621      	mov	r1, r4
 80062aa:	f7ff ff61 	bl	8006170 <__sflush_r>
 80062ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062b0:	4605      	mov	r5, r0
 80062b2:	07da      	lsls	r2, r3, #31
 80062b4:	d4e4      	bmi.n	8006280 <_fflush_r+0xc>
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	059b      	lsls	r3, r3, #22
 80062ba:	d4e1      	bmi.n	8006280 <_fflush_r+0xc>
 80062bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062be:	f7ff fa25 	bl	800570c <__retarget_lock_release_recursive>
 80062c2:	e7dd      	b.n	8006280 <_fflush_r+0xc>

080062c4 <__swhatbuf_r>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	460c      	mov	r4, r1
 80062c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062cc:	4615      	mov	r5, r2
 80062ce:	2900      	cmp	r1, #0
 80062d0:	461e      	mov	r6, r3
 80062d2:	b096      	sub	sp, #88	; 0x58
 80062d4:	da0c      	bge.n	80062f0 <__swhatbuf_r+0x2c>
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	2100      	movs	r1, #0
 80062da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062de:	bf0c      	ite	eq
 80062e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80062e4:	2340      	movne	r3, #64	; 0x40
 80062e6:	2000      	movs	r0, #0
 80062e8:	6031      	str	r1, [r6, #0]
 80062ea:	602b      	str	r3, [r5, #0]
 80062ec:	b016      	add	sp, #88	; 0x58
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	466a      	mov	r2, sp
 80062f2:	f000 f863 	bl	80063bc <_fstat_r>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	dbed      	blt.n	80062d6 <__swhatbuf_r+0x12>
 80062fa:	9901      	ldr	r1, [sp, #4]
 80062fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006300:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006304:	4259      	negs	r1, r3
 8006306:	4159      	adcs	r1, r3
 8006308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800630c:	e7eb      	b.n	80062e6 <__swhatbuf_r+0x22>

0800630e <__smakebuf_r>:
 800630e:	898b      	ldrh	r3, [r1, #12]
 8006310:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006312:	079d      	lsls	r5, r3, #30
 8006314:	4606      	mov	r6, r0
 8006316:	460c      	mov	r4, r1
 8006318:	d507      	bpl.n	800632a <__smakebuf_r+0x1c>
 800631a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	2301      	movs	r3, #1
 8006324:	6163      	str	r3, [r4, #20]
 8006326:	b002      	add	sp, #8
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	466a      	mov	r2, sp
 800632c:	ab01      	add	r3, sp, #4
 800632e:	f7ff ffc9 	bl	80062c4 <__swhatbuf_r>
 8006332:	9900      	ldr	r1, [sp, #0]
 8006334:	4605      	mov	r5, r0
 8006336:	4630      	mov	r0, r6
 8006338:	f7ff fa60 	bl	80057fc <_malloc_r>
 800633c:	b948      	cbnz	r0, 8006352 <__smakebuf_r+0x44>
 800633e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006342:	059a      	lsls	r2, r3, #22
 8006344:	d4ef      	bmi.n	8006326 <__smakebuf_r+0x18>
 8006346:	f023 0303 	bic.w	r3, r3, #3
 800634a:	f043 0302 	orr.w	r3, r3, #2
 800634e:	81a3      	strh	r3, [r4, #12]
 8006350:	e7e3      	b.n	800631a <__smakebuf_r+0xc>
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	6020      	str	r0, [r4, #0]
 8006356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	6120      	str	r0, [r4, #16]
 8006360:	6163      	str	r3, [r4, #20]
 8006362:	9b01      	ldr	r3, [sp, #4]
 8006364:	b15b      	cbz	r3, 800637e <__smakebuf_r+0x70>
 8006366:	4630      	mov	r0, r6
 8006368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800636c:	f000 f838 	bl	80063e0 <_isatty_r>
 8006370:	b128      	cbz	r0, 800637e <__smakebuf_r+0x70>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	f023 0303 	bic.w	r3, r3, #3
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	81a3      	strh	r3, [r4, #12]
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	431d      	orrs	r5, r3
 8006382:	81a5      	strh	r5, [r4, #12]
 8006384:	e7cf      	b.n	8006326 <__smakebuf_r+0x18>

08006386 <memmove>:
 8006386:	4288      	cmp	r0, r1
 8006388:	b510      	push	{r4, lr}
 800638a:	eb01 0402 	add.w	r4, r1, r2
 800638e:	d902      	bls.n	8006396 <memmove+0x10>
 8006390:	4284      	cmp	r4, r0
 8006392:	4623      	mov	r3, r4
 8006394:	d807      	bhi.n	80063a6 <memmove+0x20>
 8006396:	1e43      	subs	r3, r0, #1
 8006398:	42a1      	cmp	r1, r4
 800639a:	d008      	beq.n	80063ae <memmove+0x28>
 800639c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063a4:	e7f8      	b.n	8006398 <memmove+0x12>
 80063a6:	4601      	mov	r1, r0
 80063a8:	4402      	add	r2, r0
 80063aa:	428a      	cmp	r2, r1
 80063ac:	d100      	bne.n	80063b0 <memmove+0x2a>
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063b8:	e7f7      	b.n	80063aa <memmove+0x24>
	...

080063bc <_fstat_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	2300      	movs	r3, #0
 80063c0:	4d06      	ldr	r5, [pc, #24]	; (80063dc <_fstat_r+0x20>)
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	4611      	mov	r1, r2
 80063c8:	602b      	str	r3, [r5, #0]
 80063ca:	f7fa fbcd 	bl	8000b68 <_fstat>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d102      	bne.n	80063d8 <_fstat_r+0x1c>
 80063d2:	682b      	ldr	r3, [r5, #0]
 80063d4:	b103      	cbz	r3, 80063d8 <_fstat_r+0x1c>
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	bf00      	nop
 80063dc:	200012e8 	.word	0x200012e8

080063e0 <_isatty_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	2300      	movs	r3, #0
 80063e4:	4d05      	ldr	r5, [pc, #20]	; (80063fc <_isatty_r+0x1c>)
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	f7fa fbcb 	bl	8000b86 <_isatty>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_isatty_r+0x1a>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_isatty_r+0x1a>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	200012e8 	.word	0x200012e8

08006400 <_sbrk_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	2300      	movs	r3, #0
 8006404:	4d05      	ldr	r5, [pc, #20]	; (800641c <_sbrk_r+0x1c>)
 8006406:	4604      	mov	r4, r0
 8006408:	4608      	mov	r0, r1
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	f7fa fbd2 	bl	8000bb4 <_sbrk>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_sbrk_r+0x1a>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_sbrk_r+0x1a>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	200012e8 	.word	0x200012e8

08006420 <memchr>:
 8006420:	4603      	mov	r3, r0
 8006422:	b510      	push	{r4, lr}
 8006424:	b2c9      	uxtb	r1, r1
 8006426:	4402      	add	r2, r0
 8006428:	4293      	cmp	r3, r2
 800642a:	4618      	mov	r0, r3
 800642c:	d101      	bne.n	8006432 <memchr+0x12>
 800642e:	2000      	movs	r0, #0
 8006430:	e003      	b.n	800643a <memchr+0x1a>
 8006432:	7804      	ldrb	r4, [r0, #0]
 8006434:	3301      	adds	r3, #1
 8006436:	428c      	cmp	r4, r1
 8006438:	d1f6      	bne.n	8006428 <memchr+0x8>
 800643a:	bd10      	pop	{r4, pc}

0800643c <_realloc_r>:
 800643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006440:	4680      	mov	r8, r0
 8006442:	4614      	mov	r4, r2
 8006444:	460e      	mov	r6, r1
 8006446:	b921      	cbnz	r1, 8006452 <_realloc_r+0x16>
 8006448:	4611      	mov	r1, r2
 800644a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800644e:	f7ff b9d5 	b.w	80057fc <_malloc_r>
 8006452:	b92a      	cbnz	r2, 8006460 <_realloc_r+0x24>
 8006454:	f7ff f96a 	bl	800572c <_free_r>
 8006458:	4625      	mov	r5, r4
 800645a:	4628      	mov	r0, r5
 800645c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006460:	f000 f81b 	bl	800649a <_malloc_usable_size_r>
 8006464:	4284      	cmp	r4, r0
 8006466:	4607      	mov	r7, r0
 8006468:	d802      	bhi.n	8006470 <_realloc_r+0x34>
 800646a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800646e:	d812      	bhi.n	8006496 <_realloc_r+0x5a>
 8006470:	4621      	mov	r1, r4
 8006472:	4640      	mov	r0, r8
 8006474:	f7ff f9c2 	bl	80057fc <_malloc_r>
 8006478:	4605      	mov	r5, r0
 800647a:	2800      	cmp	r0, #0
 800647c:	d0ed      	beq.n	800645a <_realloc_r+0x1e>
 800647e:	42bc      	cmp	r4, r7
 8006480:	4622      	mov	r2, r4
 8006482:	4631      	mov	r1, r6
 8006484:	bf28      	it	cs
 8006486:	463a      	movcs	r2, r7
 8006488:	f7ff f941 	bl	800570e <memcpy>
 800648c:	4631      	mov	r1, r6
 800648e:	4640      	mov	r0, r8
 8006490:	f7ff f94c 	bl	800572c <_free_r>
 8006494:	e7e1      	b.n	800645a <_realloc_r+0x1e>
 8006496:	4635      	mov	r5, r6
 8006498:	e7df      	b.n	800645a <_realloc_r+0x1e>

0800649a <_malloc_usable_size_r>:
 800649a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800649e:	1f18      	subs	r0, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bfbc      	itt	lt
 80064a4:	580b      	ldrlt	r3, [r1, r0]
 80064a6:	18c0      	addlt	r0, r0, r3
 80064a8:	4770      	bx	lr
	...

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
