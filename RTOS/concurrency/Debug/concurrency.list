
concurrency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008070  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f30  08008180  08008180  00018180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b0  080090b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080090b0  080090b0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090b0  080090b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090b4  080090b4  000190b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080090b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016f8  20000074  0800912c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000176c  0800912c  0002176c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018529  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a52  00000000  00000000  00038609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  0003c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d8  00000000  00000000  0003d728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf73  00000000  00000000  0003e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba05  00000000  00000000  0005a873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d068  00000000  00000000  00076278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068d4  00000000  00000000  001132e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00119bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08008168 	.word	0x08008168

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08008168 	.word	0x08008168

08000150 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
return 0;
 8000160:	2300      	movs	r3, #0
}
 8000162:	4618      	mov	r0, r3
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800016a:	b480      	push	{r7}
 800016c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
	...

08000178 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	60f8      	str	r0, [r7, #12]
 8000180:	60b9      	str	r1, [r7, #8]
 8000182:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <vApplicationGetIdleTaskMemory+0x28>)
 8000188:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	4a05      	ldr	r2, [pc, #20]	; (80001a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800018e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2280      	movs	r2, #128	; 0x80
 8000194:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000196:	bf00      	nop
 8000198:	3714      	adds	r7, #20
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	20000090 	.word	0x20000090
 80001a4:	20000140 	.word	0x20000140

080001a8 <_write>:
I2C_HandleTypeDef hi2c2;
UART_HandleTypeDef huart1;
ADC_HandleTypeDef hadc1;
TIM_HandleTypeDef htim2;

int _write(int file, char *data, int len){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
		 if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)){
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d00a      	beq.n	80001d0 <_write+0x28>
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	2b02      	cmp	r3, #2
 80001be:	d007      	beq.n	80001d0 <_write+0x28>
						errno = EBADF;
 80001c0:	f007 f8d6 	bl	8007370 <__errno>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2209      	movs	r2, #9
 80001c8:	601a      	str	r2, [r3, #0]
						return -1;
 80001ca:	f04f 33ff 	mov.w	r3, #4294967295
 80001ce:	e00f      	b.n	80001f0 <_write+0x48>
		 }
		 HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	b29a      	uxth	r2, r3
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	68b9      	ldr	r1, [r7, #8]
 80001da:	4807      	ldr	r0, [pc, #28]	; (80001f8 <_write+0x50>)
 80001dc:	f004 f88a 	bl	80042f4 <HAL_UART_Transmit>
 80001e0:	4603      	mov	r3, r0
 80001e2:	75fb      	strb	r3, [r7, #23]

		 return (status == HAL_OK ? len : 0);
 80001e4:	7dfb      	ldrb	r3, [r7, #23]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d101      	bne.n	80001ee <_write+0x46>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	e000      	b.n	80001f0 <_write+0x48>
 80001ee:	2300      	movs	r3, #0
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3718      	adds	r7, #24
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000394 	.word	0x20000394

080001fc <change_adc_channel>:

static void change_adc_channel(uint32_t channel){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000204:	f107 030c 	add.w	r3, r7, #12
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]

	sConfig.Channel = channel;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000214:	2301      	movs	r3, #1
 8000216:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800021c:	f107 030c 	add.w	r3, r7, #12
 8000220:	4619      	mov	r1, r3
 8000222:	4806      	ldr	r0, [pc, #24]	; (800023c <change_adc_channel+0x40>)
 8000224:	f001 fcf0 	bl	8001c08 <HAL_ADC_ConfigChannel>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <change_adc_channel+0x36>
			Error_Handler();
 800022e:	f000 fcf7 	bl	8000c20 <Error_Handler>
	}
}
 8000232:	bf00      	nop
 8000234:	3718      	adds	r7, #24
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	200003dc 	.word	0x200003dc

08000240 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
	printf("Stack Overflow inminent\r\n");
 800024a:	4803      	ldr	r0, [pc, #12]	; (8000258 <vApplicationStackOverflowHook+0x18>)
 800024c:	f006 feec 	bl	8007028 <puts>
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	08008180 	.word	0x08008180

0800025c <trace_toggle>:

void warn_stakoverflow(void){
	printf("Stack Overflow inminent\r\n");
}

void trace_toggle(int tag){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	if(tag == 1){
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d105      	bne.n	8000276 <trace_toggle+0x1a>
		HAL_GPIO_TogglePin(trace_1_GPIO_Port, trace_1_Pin);
 800026a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <trace_toggle+0x44>)
 8000270:	f002 f8f9 	bl	8002466 <HAL_GPIO_TogglePin>
 8000274:	e011      	b.n	800029a <trace_toggle+0x3e>
	}else if(tag == 2){
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b02      	cmp	r3, #2
 800027a:	d105      	bne.n	8000288 <trace_toggle+0x2c>
		HAL_GPIO_TogglePin(trace_2_GPIO_Port, trace_2_Pin);
 800027c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000280:	4807      	ldr	r0, [pc, #28]	; (80002a0 <trace_toggle+0x44>)
 8000282:	f002 f8f0 	bl	8002466 <HAL_GPIO_TogglePin>
 8000286:	e008      	b.n	800029a <trace_toggle+0x3e>
	}else if(tag == 3){
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b03      	cmp	r3, #3
 800028c:	d104      	bne.n	8000298 <trace_toggle+0x3c>
		HAL_GPIO_TogglePin(trace_3_GPIO_Port, trace_3_Pin);
 800028e:	2110      	movs	r1, #16
 8000290:	4804      	ldr	r0, [pc, #16]	; (80002a4 <trace_toggle+0x48>)
 8000292:	f002 f8e8 	bl	8002466 <HAL_GPIO_TogglePin>
 8000296:	e000      	b.n	800029a <trace_toggle+0x3e>
	}else{
		return;
 8000298:	bf00      	nop
	}
}
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40010c00 	.word	0x40010c00

080002a8 <main>:
} adc_t;

bool block = true;

int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af02      	add	r7, sp, #8

	HAL_Init();
 80002ae:	f001 fa17 	bl	80016e0 <HAL_Init>
	SystemClock_Config();
 80002b2:	f000 fae7 	bl	8000884 <SystemClock_Config>

	MX_GPIO_Init();
 80002b6:	f000 fc21 	bl	8000afc <MX_GPIO_Init>
	MX_I2C2_Init();
 80002ba:	f000 fb79 	bl	80009b0 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 80002be:	f000 fbf3 	bl	8000aa8 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80002c2:	f000 fba3 	bl	8000a0c <MX_TIM2_Init>
	MX_ADC1_Init();
 80002c6:	f000 fb37 	bl	8000938 <MX_ADC1_Init>

	printf("\r\n\r\nDisplay Test\r\n");
 80002ca:	4824      	ldr	r0, [pc, #144]	; (800035c <main+0xb4>)
 80002cc:	f006 feac 	bl	8007028 <puts>

	button_queue = xQueueCreate(20, sizeof(char));
 80002d0:	2200      	movs	r2, #0
 80002d2:	2101      	movs	r1, #1
 80002d4:	2014      	movs	r0, #20
 80002d6:	f004 faa5 	bl	8004824 <xQueueGenericCreate>
 80002da:	4603      	mov	r3, r0
 80002dc:	4a20      	ldr	r2, [pc, #128]	; (8000360 <main+0xb8>)
 80002de:	6013      	str	r3, [r2, #0]
	conversion_queue = xQueueCreate(20, sizeof(adc_t));
 80002e0:	2200      	movs	r2, #0
 80002e2:	2108      	movs	r1, #8
 80002e4:	2014      	movs	r0, #20
 80002e6:	f004 fa9d 	bl	8004824 <xQueueGenericCreate>
 80002ea:	4603      	mov	r3, r0
 80002ec:	4a1d      	ldr	r2, [pc, #116]	; (8000364 <main+0xbc>)
 80002ee:	6013      	str	r3, [r2, #0]

	xTaskCreate(display_task, "display_task", 230, NULL, tskIDLE_PRIORITY+2, &xDisplay_task_handle);
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <main+0xc0>)
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2302      	movs	r3, #2
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	22e6      	movs	r2, #230	; 0xe6
 80002fc:	491b      	ldr	r1, [pc, #108]	; (800036c <main+0xc4>)
 80002fe:	481c      	ldr	r0, [pc, #112]	; (8000370 <main+0xc8>)
 8000300:	f004 fe5a 	bl	8004fb8 <xTaskCreate>
	xTaskCreate(button_task, "button_task", 128, NULL, tskIDLE_PRIORITY+1, &xButton_task_handle);
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <main+0xcc>)
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	2301      	movs	r3, #1
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	2300      	movs	r3, #0
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	4919      	ldr	r1, [pc, #100]	; (8000378 <main+0xd0>)
 8000312:	481a      	ldr	r0, [pc, #104]	; (800037c <main+0xd4>)
 8000314:	f004 fe50 	bl	8004fb8 <xTaskCreate>
	xTaskCreate(conversion_task, "conversion_task", 128, NULL, tskIDLE_PRIORITY+2, &xConversion_task_handle);
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <main+0xd8>)
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	2302      	movs	r3, #2
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	2300      	movs	r3, #0
 8000322:	2280      	movs	r2, #128	; 0x80
 8000324:	4917      	ldr	r1, [pc, #92]	; (8000384 <main+0xdc>)
 8000326:	4818      	ldr	r0, [pc, #96]	; (8000388 <main+0xe0>)
 8000328:	f004 fe46 	bl	8004fb8 <xTaskCreate>

	vTaskSetApplicationTaskTag( xDisplay_task_handle, ( void * ) 1 );
 800032c:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <main+0xc0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2101      	movs	r1, #1
 8000332:	4618      	mov	r0, r3
 8000334:	f005 fada 	bl	80058ec <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xButton_task_handle, ( void * ) 2 );
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <main+0xcc>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f005 fad4 	bl	80058ec <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xConversion_task_handle, ( void * ) 4 );
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <main+0xd8>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2104      	movs	r1, #4
 800034a:	4618      	mov	r0, r3
 800034c:	f005 face 	bl	80058ec <vTaskSetApplicationTaskTag>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000350:	201c      	movs	r0, #28
 8000352:	f001 fec6 	bl	80020e2 <HAL_NVIC_EnableIRQ>

	vTaskStartScheduler();
 8000356:	f005 f8e7 	bl	8005528 <vTaskStartScheduler>

	while (1){
 800035a:	e7fe      	b.n	800035a <main+0xb2>
 800035c:	0800819c 	.word	0x0800819c
 8000360:	20000460 	.word	0x20000460
 8000364:	20000464 	.word	0x20000464
 8000368:	20000458 	.word	0x20000458
 800036c:	080081b0 	.word	0x080081b0
 8000370:	08000415 	.word	0x08000415
 8000374:	20000454 	.word	0x20000454
 8000378:	080081c0 	.word	0x080081c0
 800037c:	080005ed 	.word	0x080005ed
 8000380:	2000045c 	.word	0x2000045c
 8000384:	080081cc 	.word	0x080081cc
 8000388:	0800074d 	.word	0x0800074d

0800038c <funct>:
}

UBaseType_t task_watermark;
uint32_t counter = 0;

void funct(uint32_t n){
 800038c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000390:	b087      	sub	sp, #28
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	466b      	mov	r3, sp
 8000398:	4618      	mov	r0, r3
	uint32_t i[n];
 800039a:	6879      	ldr	r1, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	3b01      	subs	r3, #1
 80003a0:	613b      	str	r3, [r7, #16]
 80003a2:	2300      	movs	r3, #0
 80003a4:	4688      	mov	r8, r1
 80003a6:	4699      	mov	r9, r3
 80003a8:	f04f 0200 	mov.w	r2, #0
 80003ac:	f04f 0300 	mov.w	r3, #0
 80003b0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80003b4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80003b8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80003bc:	2300      	movs	r3, #0
 80003be:	460c      	mov	r4, r1
 80003c0:	461d      	mov	r5, r3
 80003c2:	f04f 0200 	mov.w	r2, #0
 80003c6:	f04f 0300 	mov.w	r3, #0
 80003ca:	016b      	lsls	r3, r5, #5
 80003cc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80003d0:	0162      	lsls	r2, r4, #5
 80003d2:	008b      	lsls	r3, r1, #2
 80003d4:	3307      	adds	r3, #7
 80003d6:	08db      	lsrs	r3, r3, #3
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	ebad 0d03 	sub.w	sp, sp, r3
 80003de:	466b      	mov	r3, sp
 80003e0:	3303      	adds	r3, #3
 80003e2:	089b      	lsrs	r3, r3, #2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	60fb      	str	r3, [r7, #12]
	for(uint32_t j = 0; j < n; j++){
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	e007      	b.n	80003fe <funct+0x72>
		i[j] = j;
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	697a      	ldr	r2, [r7, #20]
 80003f2:	6979      	ldr	r1, [r7, #20]
 80003f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t j = 0; j < n; j++){
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	3301      	adds	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	429a      	cmp	r2, r3
 8000404:	d3f3      	bcc.n	80003ee <funct+0x62>
 8000406:	4685      	mov	sp, r0
	}
}
 8000408:	bf00      	nop
 800040a:	371c      	adds	r7, #28
 800040c:	46bd      	mov	sp, r7
 800040e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000412:	4770      	bx	lr

08000414 <display_task>:

void display_task(void *pvParameters){
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]

	// printf("Display WaterMark at the beggining: %d words\r\n", (UBaseType_t)uxTaskGetStackHighWaterMark(xDisplay_task_handle));

	TickType_t xLastWakeTime = xTaskGetTickCount();
 800041c:	f005 f99a 	bl	8005754 <xTaskGetTickCount>
 8000420:	4603      	mov	r3, r0
 8000422:	623b      	str	r3, [r7, #32]

	char button_res;	
	adc_t adc_res;
	char aux[10];

	uint8_t position_x = 10;
 8000424:	230a      	movs	r3, #10
 8000426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t position_y = 10;
 800042a:	230a      	movs	r3, #10
 800042c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	while(1){
		if(connected == 0){
 8000430:	4b60      	ldr	r3, [pc, #384]	; (80005b4 <display_task+0x1a0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d133      	bne.n	80004a0 <display_task+0x8c>
			HAL_StatusTypeDef res = SSD1306_Init(0x78); 
 8000438:	2078      	movs	r0, #120	; 0x78
 800043a:	f000 fe89 	bl	8001150 <SSD1306_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if( res != HAL_OK){
 8000444:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000448:	2b00      	cmp	r3, #0
 800044a:	d006      	beq.n	800045a <display_task+0x46>
				printf("Display connection err: %d\r\n", res);
 800044c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000450:	4619      	mov	r1, r3
 8000452:	4859      	ldr	r0, [pc, #356]	; (80005b8 <display_task+0x1a4>)
 8000454:	f006 fd82 	bl	8006f5c <iprintf>
 8000458:	e092      	b.n	8000580 <display_task+0x16c>
			}else{
				HAL_GPIO_WritePin(main_led_GPIO_Port, main_led_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	4856      	ldr	r0, [pc, #344]	; (80005bc <display_task+0x1a8>)
 8000462:	f001 ffe8 	bl	8002436 <HAL_GPIO_WritePin>
				connected = 1;
 8000466:	4b53      	ldr	r3, [pc, #332]	; (80005b4 <display_task+0x1a0>)
 8000468:	2201      	movs	r2, #1
 800046a:	601a      	str	r2, [r3, #0]
				printf("Display connected.\r\n" );
 800046c:	4854      	ldr	r0, [pc, #336]	; (80005c0 <display_task+0x1ac>)
 800046e:	f006 fddb 	bl	8007028 <puts>

				SSD1306_Clear();
 8000472:	f001 f894 	bl	800159e <SSD1306_Clear>
				vTaskPrioritySet(xButton_task_handle, tskIDLE_PRIORITY+3);
 8000476:	4b53      	ldr	r3, [pc, #332]	; (80005c4 <display_task+0x1b0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2103      	movs	r1, #3
 800047c:	4618      	mov	r0, r3
 800047e:	f004 ffa5 	bl	80053cc <vTaskPrioritySet>
				xTaskNotifyGive(xButton_task_handle);
 8000482:	4b50      	ldr	r3, [pc, #320]	; (80005c4 <display_task+0x1b0>)
 8000484:	6818      	ldr	r0, [r3, #0]
 8000486:	2300      	movs	r3, #0
 8000488:	2202      	movs	r2, #2
 800048a:	2100      	movs	r1, #0
 800048c:	f005 fe5e 	bl	800614c <xTaskGenericNotify>
				xTaskNotifyGive(xConversion_task_handle);
 8000490:	4b4d      	ldr	r3, [pc, #308]	; (80005c8 <display_task+0x1b4>)
 8000492:	6818      	ldr	r0, [r3, #0]
 8000494:	2300      	movs	r3, #0
 8000496:	2202      	movs	r2, #2
 8000498:	2100      	movs	r1, #0
 800049a:	f005 fe57 	bl	800614c <xTaskGenericNotify>
 800049e:	e06f      	b.n	8000580 <display_task+0x16c>
			}
		}else{
			HAL_TIM_Base_Stop_IT(&htim2);
 80004a0:	484a      	ldr	r0, [pc, #296]	; (80005cc <display_task+0x1b8>)
 80004a2:	f003 fb5b 	bl	8003b5c <HAL_TIM_Base_Stop_IT>
			while(uxQueueMessagesWaiting(button_queue) != 0){
 80004a6:	e019      	b.n	80004dc <display_task+0xc8>
				xQueueReceive(button_queue, &button_res, 0);
 80004a8:	4b49      	ldr	r3, [pc, #292]	; (80005d0 <display_task+0x1bc>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f107 011f 	add.w	r1, r7, #31
 80004b0:	2200      	movs	r2, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f004 fb16 	bl	8004ae4 <xQueueReceive>
				SSD1306_GotoXY (position_x,position_y); 
 80004b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004bc:	b29b      	uxth	r3, r3
 80004be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80004c2:	b292      	uxth	r2, r2
 80004c4:	4611      	mov	r1, r2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 ffae 	bl	8001428 <SSD1306_GotoXY>
				SSD1306_Putc (button_res, &Font_11x18, 1); 
 80004cc:	7ffb      	ldrb	r3, [r7, #31]
 80004ce:	2201      	movs	r2, #1
 80004d0:	4940      	ldr	r1, [pc, #256]	; (80005d4 <display_task+0x1c0>)
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 ffbe 	bl	8001454 <SSD1306_Putc>
				SSD1306_UpdateScreen(); 
 80004d8:	f000 ff02 	bl	80012e0 <SSD1306_UpdateScreen>
			while(uxQueueMessagesWaiting(button_queue) != 0){
 80004dc:	4b3c      	ldr	r3, [pc, #240]	; (80005d0 <display_task+0x1bc>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f004 fbdf 	bl	8004ca4 <uxQueueMessagesWaiting>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d1dd      	bne.n	80004a8 <display_task+0x94>
			}
		
			while(uxQueueMessagesWaiting(conversion_queue) != 0){
 80004ec:	e03d      	b.n	800056a <display_task+0x156>
				xQueueReceive(conversion_queue, &adc_res, 0);
 80004ee:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <display_task+0x1c4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f107 0114 	add.w	r1, r7, #20
 80004f6:	2200      	movs	r2, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f004 faf3 	bl	8004ae4 <xQueueReceive>

				SSD1306_GotoXY (position_x,position_y+15); 
 80004fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000502:	b29a      	uxth	r2, r3
 8000504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000508:	b29b      	uxth	r3, r3
 800050a:	330f      	adds	r3, #15
 800050c:	b29b      	uxth	r3, r3
 800050e:	4619      	mov	r1, r3
 8000510:	4610      	mov	r0, r2
 8000512:	f000 ff89 	bl	8001428 <SSD1306_GotoXY>
				sprintf(aux, "%04d", adc_res.x);
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	f107 0308 	add.w	r3, r7, #8
 800051c:	492f      	ldr	r1, [pc, #188]	; (80005dc <display_task+0x1c8>)
 800051e:	4618      	mov	r0, r3
 8000520:	f006 fd8a 	bl	8007038 <siprintf>
				SSD1306_Puts (aux, &Font_11x18, 1); 
 8000524:	f107 0308 	add.w	r3, r7, #8
 8000528:	2201      	movs	r2, #1
 800052a:	492a      	ldr	r1, [pc, #168]	; (80005d4 <display_task+0x1c0>)
 800052c:	4618      	mov	r0, r3
 800052e:	f001 f811 	bl	8001554 <SSD1306_Puts>

				SSD1306_GotoXY (position_x,position_y+30); 
 8000532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000536:	b29a      	uxth	r2, r3
 8000538:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800053c:	b29b      	uxth	r3, r3
 800053e:	331e      	adds	r3, #30
 8000540:	b29b      	uxth	r3, r3
 8000542:	4619      	mov	r1, r3
 8000544:	4610      	mov	r0, r2
 8000546:	f000 ff6f 	bl	8001428 <SSD1306_GotoXY>
				sprintf(aux, "%04d", adc_res.y);
 800054a:	69ba      	ldr	r2, [r7, #24]
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	4922      	ldr	r1, [pc, #136]	; (80005dc <display_task+0x1c8>)
 8000552:	4618      	mov	r0, r3
 8000554:	f006 fd70 	bl	8007038 <siprintf>
				SSD1306_Puts (aux, &Font_11x18, 1); 
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	2201      	movs	r2, #1
 800055e:	491d      	ldr	r1, [pc, #116]	; (80005d4 <display_task+0x1c0>)
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fff7 	bl	8001554 <SSD1306_Puts>


				SSD1306_UpdateScreen(); 
 8000566:	f000 febb 	bl	80012e0 <SSD1306_UpdateScreen>
			while(uxQueueMessagesWaiting(conversion_queue) != 0){
 800056a:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <display_task+0x1c4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fb98 	bl	8004ca4 <uxQueueMessagesWaiting>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1b9      	bne.n	80004ee <display_task+0xda>
			}
			HAL_TIM_Base_Start_IT(&htim2);
 800057a:	4814      	ldr	r0, [pc, #80]	; (80005cc <display_task+0x1b8>)
 800057c:	f003 fa9c 	bl	8003ab8 <HAL_TIM_Base_Start_IT>
		}
		// ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		task_watermark = uxTaskGetStackHighWaterMark(xDisplay_task_handle);
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <display_task+0x1cc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f005 fc1d 	bl	8005dc4 <uxTaskGetStackHighWaterMark>
 800058a:	4603      	mov	r3, r0
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <display_task+0x1d0>)
 800058e:	6013      	str	r3, [r2, #0]
		counter++;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <display_task+0x1d4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <display_task+0x1d4>)
 8000598:	6013      	str	r3, [r2, #0]
		funct(counter);
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <display_task+0x1d4>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fef4 	bl	800038c <funct>
		// realloc(inter, sizeof(counter*sizeof(uint32_t)));
		// *(inter+counter) = task_watermark;
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	21c8      	movs	r1, #200	; 0xc8
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fe5c 	bl	8005268 <vTaskDelayUntil>
		if(connected == 0){
 80005b0:	e73e      	b.n	8000430 <display_task+0x1c>
 80005b2:	bf00      	nop
 80005b4:	20000470 	.word	0x20000470
 80005b8:	080081dc 	.word	0x080081dc
 80005bc:	40010c00 	.word	0x40010c00
 80005c0:	080081fc 	.word	0x080081fc
 80005c4:	20000454 	.word	0x20000454
 80005c8:	2000045c 	.word	0x2000045c
 80005cc:	2000040c 	.word	0x2000040c
 80005d0:	20000460 	.word	0x20000460
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000464 	.word	0x20000464
 80005dc:	08008210 	.word	0x08008210
 80005e0:	20000458 	.word	0x20000458
 80005e4:	20000468 	.word	0x20000468
 80005e8:	2000046c 	.word	0x2000046c

080005ec <button_task>:
	}
	printf("Destroying Display task 1 \r\n");
	vTaskDelete(xDisplay_task_handle);
}

void button_task(void *pvParameters){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

	printf("Button WaterMark at the beggining: %d words\r\n", uxTaskGetStackHighWaterMark(NULL));
 80005f4:	2000      	movs	r0, #0
 80005f6:	f005 fbe5 	bl	8005dc4 <uxTaskGetStackHighWaterMark>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4619      	mov	r1, r3
 80005fe:	484e      	ldr	r0, [pc, #312]	; (8000738 <button_task+0x14c>)
 8000600:	f006 fcac 	bl	8006f5c <iprintf>
	printf("Button task started, waiting for display ready\r\n");
 8000604:	484d      	ldr	r0, [pc, #308]	; (800073c <button_task+0x150>)
 8000606:	f006 fd0f 	bl	8007028 <puts>

	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800060a:	f04f 31ff 	mov.w	r1, #4294967295
 800060e:	2001      	movs	r0, #1
 8000610:	f005 fcf0 	bl	8005ff4 <ulTaskNotifyTake>

	uint8_t button_left_var = 0, button_right_var = 0, button_up_var = 0, button_down_var = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	2300      	movs	r3, #0
 800061a:	73bb      	strb	r3, [r7, #14]
 800061c:	2300      	movs	r3, #0
 800061e:	737b      	strb	r3, [r7, #13]
 8000620:	2300      	movs	r3, #0
 8000622:	733b      	strb	r3, [r7, #12]
	char current_button;

	while(1){

		if(button_left_var == 1){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d114      	bne.n	8000654 <button_task+0x68>
			if(HAL_GPIO_ReadPin(button_l_GPIO_Port, button_l_Pin) == GPIO_PIN_SET){
 800062a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062e:	4844      	ldr	r0, [pc, #272]	; (8000740 <button_task+0x154>)
 8000630:	f001 feea 	bl	8002408 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d116      	bne.n	8000668 <button_task+0x7c>
				button_left_var = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]
				current_button = 'L';
 800063e:	234c      	movs	r3, #76	; 0x4c
 8000640:	72fb      	strb	r3, [r7, #11]
				xQueueSend(button_queue, &current_button, 0);
 8000642:	4b40      	ldr	r3, [pc, #256]	; (8000744 <button_task+0x158>)
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	f107 010b 	add.w	r1, r7, #11
 800064a:	2300      	movs	r3, #0
 800064c:	2200      	movs	r2, #0
 800064e:	f004 f94b 	bl	80048e8 <xQueueGenericSend>
 8000652:	e009      	b.n	8000668 <button_task+0x7c>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_l_GPIO_Port, button_l_Pin) == GPIO_PIN_RESET){
 8000654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000658:	4839      	ldr	r0, [pc, #228]	; (8000740 <button_task+0x154>)
 800065a:	f001 fed5 	bl	8002408 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <button_task+0x7c>
				button_left_var = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(button_right_var == 1){
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d113      	bne.n	8000696 <button_task+0xaa>
			if(HAL_GPIO_ReadPin(button_r_GPIO_Port, button_r_Pin) == GPIO_PIN_SET){
 800066e:	2120      	movs	r1, #32
 8000670:	4835      	ldr	r0, [pc, #212]	; (8000748 <button_task+0x15c>)
 8000672:	f001 fec9 	bl	8002408 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b01      	cmp	r3, #1
 800067a:	d115      	bne.n	80006a8 <button_task+0xbc>
				button_right_var = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	73bb      	strb	r3, [r7, #14]
				current_button = 'R';
 8000680:	2352      	movs	r3, #82	; 0x52
 8000682:	72fb      	strb	r3, [r7, #11]
				xQueueSend(button_queue, &current_button, 0);
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <button_task+0x158>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f107 010b 	add.w	r1, r7, #11
 800068c:	2300      	movs	r3, #0
 800068e:	2200      	movs	r2, #0
 8000690:	f004 f92a 	bl	80048e8 <xQueueGenericSend>
 8000694:	e008      	b.n	80006a8 <button_task+0xbc>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_r_GPIO_Port, button_r_Pin) == GPIO_PIN_RESET){
 8000696:	2120      	movs	r1, #32
 8000698:	482b      	ldr	r0, [pc, #172]	; (8000748 <button_task+0x15c>)
 800069a:	f001 feb5 	bl	8002408 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <button_task+0xbc>
				button_right_var = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73bb      	strb	r3, [r7, #14]
			}
		}

		if(button_up_var == 1){
 80006a8:	7b7b      	ldrb	r3, [r7, #13]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d114      	bne.n	80006d8 <button_task+0xec>
			if(HAL_GPIO_ReadPin(button_u_GPIO_Port, button_u_Pin) == GPIO_PIN_SET){
 80006ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b2:	4823      	ldr	r0, [pc, #140]	; (8000740 <button_task+0x154>)
 80006b4:	f001 fea8 	bl	8002408 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d116      	bne.n	80006ec <button_task+0x100>
				button_up_var = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	737b      	strb	r3, [r7, #13]
				current_button = 'U';
 80006c2:	2355      	movs	r3, #85	; 0x55
 80006c4:	72fb      	strb	r3, [r7, #11]
				xQueueSend(button_queue, &current_button, 0);
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <button_task+0x158>)
 80006c8:	6818      	ldr	r0, [r3, #0]
 80006ca:	f107 010b 	add.w	r1, r7, #11
 80006ce:	2300      	movs	r3, #0
 80006d0:	2200      	movs	r2, #0
 80006d2:	f004 f909 	bl	80048e8 <xQueueGenericSend>
 80006d6:	e009      	b.n	80006ec <button_task+0x100>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_u_GPIO_Port, button_u_Pin) == GPIO_PIN_RESET){
 80006d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <button_task+0x154>)
 80006de:	f001 fe93 	bl	8002408 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <button_task+0x100>
				button_up_var = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	737b      	strb	r3, [r7, #13]
			}
		}

		if(button_down_var == 1){
 80006ec:	7b3b      	ldrb	r3, [r7, #12]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d114      	bne.n	800071c <button_task+0x130>
			if(HAL_GPIO_ReadPin(button_d_GPIO_Port, button_d_Pin) == GPIO_PIN_SET){
 80006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <button_task+0x154>)
 80006f8:	f001 fe86 	bl	8002408 <HAL_GPIO_ReadPin>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d116      	bne.n	8000730 <button_task+0x144>
				button_down_var = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	733b      	strb	r3, [r7, #12]
				current_button = 'D';
 8000706:	2344      	movs	r3, #68	; 0x44
 8000708:	72fb      	strb	r3, [r7, #11]
				xQueueSend(button_queue, &current_button, 0);
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <button_task+0x158>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	f107 010b 	add.w	r1, r7, #11
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	f004 f8e7 	bl	80048e8 <xQueueGenericSend>
 800071a:	e009      	b.n	8000730 <button_task+0x144>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_d_GPIO_Port, button_d_Pin) == GPIO_PIN_RESET){
 800071c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <button_task+0x154>)
 8000722:	f001 fe71 	bl	8002408 <HAL_GPIO_ReadPin>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <button_task+0x144>
				button_down_var = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	733b      	strb	r3, [r7, #12]
			}
		}

		vTaskDelay(100/ portTICK_PERIOD_MS);
 8000730:	2064      	movs	r0, #100	; 0x64
 8000732:	f004 fe17 	bl	8005364 <vTaskDelay>
		if(button_left_var == 1){
 8000736:	e775      	b.n	8000624 <button_task+0x38>
 8000738:	08008218 	.word	0x08008218
 800073c:	08008248 	.word	0x08008248
 8000740:	40010800 	.word	0x40010800
 8000744:	20000460 	.word	0x20000460
 8000748:	40010c00 	.word	0x40010c00

0800074c <conversion_task>:
	}
	printf("Destroying Button task \r\n");
	vTaskDelete(xButton_task_handle);
}

void conversion_task(void *pvParameters){
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

	uint16_t counter = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	83fb      	strh	r3, [r7, #30]
	adc_t adc_out;
	uint32_t adc1 = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
	uint32_t adc2 = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]

	printf("Conversion task,, waiting for display ready\r\n");
 8000760:	4822      	ldr	r0, [pc, #136]	; (80007ec <conversion_task+0xa0>)
 8000762:	f006 fc61 	bl	8007028 <puts>

	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000766:	f04f 31ff 	mov.w	r1, #4294967295
 800076a:	2001      	movs	r0, #1
 800076c:	f005 fc42 	bl	8005ff4 <ulTaskNotifyTake>

	printf("Ready, activating timer\r\n");
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <conversion_task+0xa4>)
 8000772:	f006 fc59 	bl	8007028 <puts>

	HAL_TIM_Base_Start_IT(&htim2);
 8000776:	481f      	ldr	r0, [pc, #124]	; (80007f4 <conversion_task+0xa8>)
 8000778:	f003 f99e 	bl	8003ab8 <HAL_TIM_Base_Start_IT>

	while(1){
		ulTaskNotifyTake(pdFALSE, portMAX_DELAY);
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	2000      	movs	r0, #0
 8000782:	f005 fc37 	bl	8005ff4 <ulTaskNotifyTake>
		
		HAL_ADC_Start_IT(&hadc1);
 8000786:	481c      	ldr	r0, [pc, #112]	; (80007f8 <conversion_task+0xac>)
 8000788:	f001 f8b4 	bl	80018f4 <HAL_ADC_Start_IT>
		xTaskNotifyWait(0, 0, &adc1, portMAX_DELAY);
 800078c:	f107 0210 	add.w	r2, r7, #16
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f005 fc78 	bl	800608c <xTaskNotifyWait>

		change_adc_channel(ADC_CHANNEL_7);
 800079c:	2007      	movs	r0, #7
 800079e:	f7ff fd2d 	bl	80001fc <change_adc_channel>
		HAL_ADC_Start_IT(&hadc1);
 80007a2:	4815      	ldr	r0, [pc, #84]	; (80007f8 <conversion_task+0xac>)
 80007a4:	f001 f8a6 	bl	80018f4 <HAL_ADC_Start_IT>
		xTaskNotifyWait(0, 0, &adc2, portMAX_DELAY);
 80007a8:	f107 020c 	add.w	r2, r7, #12
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	2100      	movs	r1, #0
 80007b2:	2000      	movs	r0, #0
 80007b4:	f005 fc6a 	bl	800608c <xTaskNotifyWait>

		change_adc_channel(ADC_CHANNEL_6);
 80007b8:	2006      	movs	r0, #6
 80007ba:	f7ff fd1f 	bl	80001fc <change_adc_channel>

		if( counter++ == 3000){
 80007be:	8bfb      	ldrh	r3, [r7, #30]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	83fa      	strh	r2, [r7, #30]
 80007c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d1d7      	bne.n	800077c <conversion_task+0x30>
			adc_out.x = adc1;
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	617b      	str	r3, [r7, #20]
			adc_out.y = adc2;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	61bb      	str	r3, [r7, #24]
			counter = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	83fb      	strh	r3, [r7, #30]
			xQueueSend(conversion_queue, &adc_out, 0);
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <conversion_task+0xb0>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	f107 0114 	add.w	r1, r7, #20
 80007e0:	2300      	movs	r3, #0
 80007e2:	2200      	movs	r2, #0
 80007e4:	f004 f880 	bl	80048e8 <xQueueGenericSend>
		ulTaskNotifyTake(pdFALSE, portMAX_DELAY);
 80007e8:	e7c8      	b.n	800077c <conversion_task+0x30>
 80007ea:	bf00      	nop
 80007ec:	08008278 	.word	0x08008278
 80007f0:	080082a8 	.word	0x080082a8
 80007f4:	2000040c 	.word	0x2000040c
 80007f8:	200003dc 	.word	0x200003dc
 80007fc:	20000464 	.word	0x20000464

08000800 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
 8000808:	2301      	movs	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
	if (htim->Instance == TIM1) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d102      	bne.n	800081c <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_IncTick();
 8000816:	f000 ff79 	bl	800170c <HAL_IncTick>
	}else if (htim->Instance == TIM2) {
		trace_toggle(3);
		vTaskNotifyGiveFromISR(xConversion_task_handle, &xHigherPriorityTaskWoken);
	}
}
 800081a:	e00f      	b.n	800083c <HAL_TIM_PeriodElapsedCallback+0x3c>
	}else if (htim->Instance == TIM2) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000824:	d10a      	bne.n	800083c <HAL_TIM_PeriodElapsedCallback+0x3c>
		trace_toggle(3);
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff fd18 	bl	800025c <trace_toggle>
		vTaskNotifyGiveFromISR(xConversion_task_handle, &xHigherPriorityTaskWoken);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f107 020c 	add.w	r2, r7, #12
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f005 fe02 	bl	8006440 <vTaskNotifyGiveFromISR>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40012c00 	.word	0x40012c00
 8000848:	2000045c 	.word	0x2000045c

0800084c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b087      	sub	sp, #28
 8000850:	af02      	add	r7, sp, #8
 8000852:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
 8000854:	2301      	movs	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(xConversion_task_handle,(uint32_t)HAL_ADC_GetValue(&hadc1), eSetValueWithOverwrite, &xHigherPriorityTaskWoken); 
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_ADC_ConvCpltCallback+0x30>)
 800085a:	681c      	ldr	r4, [r3, #0]
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <HAL_ADC_ConvCpltCallback+0x34>)
 800085e:	f001 f8ff 	bl	8001a60 <HAL_ADC_GetValue>
 8000862:	4601      	mov	r1, r0
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2300      	movs	r3, #0
 800086c:	2203      	movs	r2, #3
 800086e:	4620      	mov	r0, r4
 8000870:	f005 fd16 	bl	80062a0 <xTaskGenericNotifyFromISR>
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	2000045c 	.word	0x2000045c
 8000880:	200003dc 	.word	0x200003dc

08000884 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088e:	2228      	movs	r2, #40	; 0x28
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f006 fcc8 	bl	8007228 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fba6 	bl	800302c <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x66>
	{
		Error_Handler();
 80008e6:	f000 f99b 	bl	8000c20 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	617b      	str	r3, [r7, #20]
								|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2102      	movs	r1, #2
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fe12 	bl	8003530 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000912:	f000 f985 	bl	8000c20 <Error_Handler>
	}
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000916:	2302      	movs	r3, #2
 8000918:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4618      	mov	r0, r3
 8000922:	f002 ffc3 	bl	80038ac <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xac>
  {
	Error_Handler();
 800092c:	f000 f978 	bl	8000c20 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3750      	adds	r7, #80	; 0x50
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]

	hadc1.Instance = ADC1;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_ADC1_Init+0x70>)
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MX_ADC1_Init+0x74>)
 800094c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_ADC1_Init+0x70>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_ADC1_Init+0x70>)
 8000956:	2200      	movs	r2, #0
 8000958:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_ADC1_Init+0x70>)
 800095c:	2200      	movs	r2, #0
 800095e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_ADC1_Init+0x70>)
 8000962:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000966:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_ADC1_Init+0x70>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1; 
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_ADC1_Init+0x70>)
 8000970:	2201      	movs	r2, #1
 8000972:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_ADC1_Init+0x70>)
 8000976:	f000 fee5 	bl	8001744 <HAL_ADC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8000980:	f000 f94e 	bl	8000c20 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_6;
 8000984:	2306      	movs	r3, #6
 8000986:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000988:	2301      	movs	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
	// sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_ADC1_Init+0x70>)
 8000992:	f001 f939 	bl	8001c08 <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x68>
	{
		Error_Handler();
 800099c:	f000 f940 	bl	8000c20 <Error_Handler>
	}

}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200003dc 	.word	0x200003dc
 80009ac:	40012400 	.word	0x40012400

080009b0 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009b6:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <MX_I2C2_Init+0x54>)
 80009b8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_I2C2_Init+0x58>)
 80009be:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d2:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_I2C2_Init+0x50>)
 80009ee:	f001 fd53 	bl	8002498 <HAL_I2C_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 80009f8:	f000 f912 	bl	8000c20 <Error_Handler>
	}
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000340 	.word	0x20000340
 8000a04:	40005800 	.word	0x40005800
 8000a08:	00061a80 	.word	0x00061a80

08000a0c <MX_TIM2_Init>:


static void MX_TIM2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_TIM2_Init+0x98>)
 8000a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_TIM2_Init+0x98>)
 8000a34:	2247      	movs	r2, #71	; 0x47
 8000a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_TIM2_Init+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_TIM2_Init+0x98>)
 8000a40:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_TIM2_Init+0x98>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_TIM2_Init+0x98>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a52:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <MX_TIM2_Init+0x98>)
 8000a54:	f002 ffe0 	bl	8003a18 <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x56>
  {
	Error_Handler();
 8000a5e:	f000 f8df 	bl	8000c20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000a66:	2310      	movs	r3, #16
 8000a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_TIM2_Init+0x98>)
 8000a72:	f003 f9a9 	bl	8003dc8 <HAL_TIM_SlaveConfigSynchro>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM2_Init+0x74>
  {
	Error_Handler();
 8000a7c:	f000 f8d0 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_TIM2_Init+0x98>)
 8000a8e:	f003 fb71 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x90>
  {
	Error_Handler();
 8000a98:	f000 f8c2 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000040c 	.word	0x2000040c

08000aa8 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_USART1_UART_Init+0x50>)
 8000ab0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ab8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART1_UART_Init+0x4c>)
 8000ae0:	f003 fbb8 	bl	8004254 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000aea:	f000 f899 	bl	8000c20 <Error_Handler>
	}

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000394 	.word	0x20000394
 8000af8:	40013800 	.word	0x40013800

08000afc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b10:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b3d      	ldr	r3, [pc, #244]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a39      	ldr	r2, [pc, #228]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a33      	ldr	r2, [pc, #204]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <MX_GPIO_Init+0x118>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, main_led_Pin|sec_led_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b5e:	482e      	ldr	r0, [pc, #184]	; (8000c18 <MX_GPIO_Init+0x11c>)
 8000b60:	f001 fc69 	bl	8002436 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = main_led_Pin|sec_led_Pin;
 8000b64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b68:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4826      	ldr	r0, [pc, #152]	; (8000c18 <MX_GPIO_Init+0x11c>)
 8000b7e:	f001 fabf 	bl	8002100 <HAL_GPIO_Init>
//   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
// //   GPIO_InitStruct.Pull = GPIO_PULLUP;
//   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  HAL_GPIO_WritePin(GPIOB, trace_3_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2110      	movs	r1, #16
 8000b86:	4824      	ldr	r0, [pc, #144]	; (8000c18 <MX_GPIO_Init+0x11c>)
 8000b88:	f001 fc55 	bl	8002436 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = trace_3_Pin;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b90:	2311      	movs	r3, #17
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481d      	ldr	r0, [pc, #116]	; (8000c18 <MX_GPIO_Init+0x11c>)
 8000ba4:	f001 faac 	bl	8002100 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, trace_1_Pin|trace_2_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000bae:	481b      	ldr	r0, [pc, #108]	; (8000c1c <MX_GPIO_Init+0x120>)
 8000bb0:	f001 fc41 	bl	8002436 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = trace_1_Pin|trace_2_Pin;
 8000bb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bba:	2311      	movs	r3, #17
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_GPIO_Init+0x120>)
 8000bce:	f001 fa97 	bl	8002100 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = button_l_Pin|button_r_Pin|button_u_Pin|button_d_Pin;
 8000bd2:	f648 1320 	movw	r3, #35104	; 0x8920
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	480c      	ldr	r0, [pc, #48]	; (8000c1c <MX_GPIO_Init+0x120>)
 8000bec:	f001 fa88 	bl	8002100 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = button_r_Pin;
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_GPIO_Init+0x11c>)
 8000c08:	f001 fa7a 	bl	8002100 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	40010800 	.word	0x40010800

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_MspInit+0x68>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_MspInit+0x68>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_MspInit+0x68>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_MspInit+0x68>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <HAL_MspInit+0x68>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x68>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	210f      	movs	r1, #15
 8000c66:	f06f 0001 	mvn.w	r0, #1
 8000c6a:	f001 fa1e 	bl	80020aa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_MspInit+0x6c>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_MspInit+0x6c>)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010000 	.word	0x40010000

08000c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <HAL_ADC_MspInit+0x7c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d129      	bne.n	8000d10 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_ADC_MspInit+0x80>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cec:	2301      	movs	r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4809      	ldr	r0, [pc, #36]	; (8000d20 <HAL_ADC_MspInit+0x84>)
 8000cfc:	f001 fa00 	bl	8002100 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 6, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2106      	movs	r1, #6
 8000d04:	2012      	movs	r0, #18
 8000d06:	f001 f9d0 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d0a:	2012      	movs	r0, #18
 8000d0c:	f001 f9e9 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40012400 	.word	0x40012400
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010800 	.word	0x40010800

08000d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <HAL_I2C_MspInit+0x74>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d124      	bne.n	8000d8e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_I2C_MspInit+0x78>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <HAL_I2C_MspInit+0x78>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_I2C_MspInit+0x78>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d62:	2312      	movs	r3, #18
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <HAL_I2C_MspInit+0x7c>)
 8000d72:	f001 f9c5 	bl	8002100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_I2C_MspInit+0x78>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_I2C_MspInit+0x78>)
 8000d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d80:	61d3      	str	r3, [r2, #28]
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_I2C_MspInit+0x78>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40005800 	.word	0x40005800
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010c00 	.word	0x40010c00

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db4:	d113      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	201c      	movs	r0, #28
 8000dd4:	f001 f969 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dd8:	201c      	movs	r0, #28
 8000dda:	f001 f982 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <HAL_UART_MspInit+0xa4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d13d      	bne.n	8000e88 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_UART_MspInit+0xa8>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <HAL_UART_MspInit+0xa8>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_UART_MspInit+0xa8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_UART_MspInit+0xa8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_UART_MspInit+0xa8>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_UART_MspInit+0xa8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <HAL_UART_MspInit+0xac>)
 8000e50:	f001 f956 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <HAL_UART_MspInit+0xac>)
 8000e68:	f001 f94a 	bl	8002100 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_UART_MspInit+0xb0>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_UART_MspInit+0xb0>)
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40013800 	.word	0x40013800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <HAL_InitTick+0xd4>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a2e      	ldr	r2, [pc, #184]	; (8000f74 <HAL_InitTick+0xd4>)
 8000ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <HAL_InitTick+0xd4>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fc99 	bl	8003810 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ede:	f002 fc83 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <HAL_InitTick+0xd8>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	0c9b      	lsrs	r3, r3, #18
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_InitTick+0xdc>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <HAL_InitTick+0xe0>)
 8000efa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_InitTick+0xdc>)
 8000efe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f02:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_InitTick+0xdc>)
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_InitTick+0xdc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_InitTick+0xdc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_InitTick+0xdc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <HAL_InitTick+0xdc>)
 8000f1e:	f002 fd7b 	bl	8003a18 <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d11b      	bne.n	8000f68 <HAL_InitTick+0xc8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <HAL_InitTick+0xdc>)
 8000f32:	f002 fdc1 	bl	8003ab8 <HAL_TIM_Base_Start_IT>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d111      	bne.n	8000f68 <HAL_InitTick+0xc8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f44:	2019      	movs	r0, #25
 8000f46:	f001 f8cc 	bl	80020e2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d808      	bhi.n	8000f62 <HAL_InitTick+0xc2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	2019      	movs	r0, #25
 8000f56:	f001 f8a8 	bl	80020aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_InitTick+0xe4>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e002      	b.n	8000f68 <HAL_InitTick+0xc8>
      }
      else
      {
        status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	20000474 	.word	0x20000474
 8000f80:	40012c00 	.word	0x40012c00
 8000f84:	2000000c 	.word	0x2000000c

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
	...

08000fb4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <ADC1_2_IRQHandler+0x10>)
 8000fba:	f000 fd5d 	bl	8001a78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200003dc 	.word	0x200003dc

08000fc8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM1_UP_IRQHandler+0x10>)
 8000fce:	f002 fdf3 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000474 	.word	0x20000474

08000fdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM2_IRQHandler+0x10>)
 8000fe2:	f002 fde9 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000040c 	.word	0x2000040c

08000ff0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00a      	b.n	8001018 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001002:	f3af 8000 	nop.w
 8001006:	4601      	mov	r1, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf0      	blt.n	8001002 <_read+0x12>
  }

  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_close>:
  }
  return len;
}

int _close(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001050:	605a      	str	r2, [r3, #4]
  return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <_isatty>:

int _isatty(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
	...

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f006 f958 	bl	8007370 <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20005000 	.word	0x20005000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	200004bc 	.word	0x200004bc
 80010f4:	20001770 	.word	0x20001770

080010f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8001104:	f7ff fff8 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800110a:	490c      	ldr	r1, [pc, #48]	; (800113c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <LoopFillZerobss+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001120:	4c09      	ldr	r4, [pc, #36]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f006 f925 	bl	800737c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001132:	f7ff f8b9 	bl	80002a8 <main>
  bx lr
 8001136:	4770      	bx	lr
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001140:	080090b8 	.word	0x080090b8
  ldr r2, =_sbss
 8001144:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001148:	2000176c 	.word	0x2000176c

0800114c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800114c:	e7fe      	b.n	800114c <CAN1_RX1_IRQHandler>
	...

08001150 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

HAL_StatusTypeDef SSD1306_Init(int addr) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

	/* Init I2C */
	ssd1306_I2C_Init();
 8001158:	f000 fa2a 	bl	80015b0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	HAL_StatusTypeDef res = HAL_I2C_IsDeviceReady(&hi2c2, addr, 1, 2000);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b299      	uxth	r1, r3
 8001160:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001164:	2201      	movs	r2, #1
 8001166:	485c      	ldr	r0, [pc, #368]	; (80012d8 <SSD1306_Init+0x188>)
 8001168:	f001 fbd8 	bl	800291c <HAL_I2C_IsDeviceReady>
 800116c:	4603      	mov	r3, r0
 800116e:	72fb      	strb	r3, [r7, #11]
	if ( res != HAL_OK) {
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SSD1306_Init+0x2a>
		/* Return false */
		return res;
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	e0a9      	b.n	80012ce <SSD1306_Init+0x17e>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800117a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800117e:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8001180:	e002      	b.n	8001188 <SSD1306_Init+0x38>
		p--;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3b01      	subs	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <SSD1306_Init+0x32>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800118e:	22ae      	movs	r2, #174	; 0xae
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	; 0x78
 8001194:	f000 fa86 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001198:	2220      	movs	r2, #32
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	; 0x78
 800119e:	f000 fa81 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011a2:	2210      	movs	r2, #16
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	; 0x78
 80011a8:	f000 fa7c 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011ac:	22b0      	movs	r2, #176	; 0xb0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	; 0x78
 80011b2:	f000 fa77 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80011b6:	22c8      	movs	r2, #200	; 0xc8
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	; 0x78
 80011bc:	f000 fa72 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2078      	movs	r0, #120	; 0x78
 80011c6:	f000 fa6d 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80011ca:	2210      	movs	r2, #16
 80011cc:	2100      	movs	r1, #0
 80011ce:	2078      	movs	r0, #120	; 0x78
 80011d0:	f000 fa68 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80011d4:	2240      	movs	r2, #64	; 0x40
 80011d6:	2100      	movs	r1, #0
 80011d8:	2078      	movs	r0, #120	; 0x78
 80011da:	f000 fa63 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80011de:	2281      	movs	r2, #129	; 0x81
 80011e0:	2100      	movs	r1, #0
 80011e2:	2078      	movs	r0, #120	; 0x78
 80011e4:	f000 fa5e 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80011e8:	22ff      	movs	r2, #255	; 0xff
 80011ea:	2100      	movs	r1, #0
 80011ec:	2078      	movs	r0, #120	; 0x78
 80011ee:	f000 fa59 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80011f2:	22a1      	movs	r2, #161	; 0xa1
 80011f4:	2100      	movs	r1, #0
 80011f6:	2078      	movs	r0, #120	; 0x78
 80011f8:	f000 fa54 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80011fc:	22a6      	movs	r2, #166	; 0xa6
 80011fe:	2100      	movs	r1, #0
 8001200:	2078      	movs	r0, #120	; 0x78
 8001202:	f000 fa4f 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001206:	22a8      	movs	r2, #168	; 0xa8
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	; 0x78
 800120c:	f000 fa4a 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001210:	223f      	movs	r2, #63	; 0x3f
 8001212:	2100      	movs	r1, #0
 8001214:	2078      	movs	r0, #120	; 0x78
 8001216:	f000 fa45 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800121a:	22a4      	movs	r2, #164	; 0xa4
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	; 0x78
 8001220:	f000 fa40 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001224:	22d3      	movs	r2, #211	; 0xd3
 8001226:	2100      	movs	r1, #0
 8001228:	2078      	movs	r0, #120	; 0x78
 800122a:	f000 fa3b 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2078      	movs	r0, #120	; 0x78
 8001234:	f000 fa36 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001238:	22d5      	movs	r2, #213	; 0xd5
 800123a:	2100      	movs	r1, #0
 800123c:	2078      	movs	r0, #120	; 0x78
 800123e:	f000 fa31 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001242:	22f0      	movs	r2, #240	; 0xf0
 8001244:	2100      	movs	r1, #0
 8001246:	2078      	movs	r0, #120	; 0x78
 8001248:	f000 fa2c 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800124c:	22d9      	movs	r2, #217	; 0xd9
 800124e:	2100      	movs	r1, #0
 8001250:	2078      	movs	r0, #120	; 0x78
 8001252:	f000 fa27 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001256:	2222      	movs	r2, #34	; 0x22
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	; 0x78
 800125c:	f000 fa22 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001260:	22da      	movs	r2, #218	; 0xda
 8001262:	2100      	movs	r1, #0
 8001264:	2078      	movs	r0, #120	; 0x78
 8001266:	f000 fa1d 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800126a:	2212      	movs	r2, #18
 800126c:	2100      	movs	r1, #0
 800126e:	2078      	movs	r0, #120	; 0x78
 8001270:	f000 fa18 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001274:	22db      	movs	r2, #219	; 0xdb
 8001276:	2100      	movs	r1, #0
 8001278:	2078      	movs	r0, #120	; 0x78
 800127a:	f000 fa13 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800127e:	2220      	movs	r2, #32
 8001280:	2100      	movs	r1, #0
 8001282:	2078      	movs	r0, #120	; 0x78
 8001284:	f000 fa0e 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001288:	228d      	movs	r2, #141	; 0x8d
 800128a:	2100      	movs	r1, #0
 800128c:	2078      	movs	r0, #120	; 0x78
 800128e:	f000 fa09 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001292:	2214      	movs	r2, #20
 8001294:	2100      	movs	r1, #0
 8001296:	2078      	movs	r0, #120	; 0x78
 8001298:	f000 fa04 	bl	80016a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800129c:	22af      	movs	r2, #175	; 0xaf
 800129e:	2100      	movs	r1, #0
 80012a0:	2078      	movs	r0, #120	; 0x78
 80012a2:	f000 f9ff 	bl	80016a4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80012a6:	222e      	movs	r2, #46	; 0x2e
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	; 0x78
 80012ac:	f000 f9fa 	bl	80016a4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f000 f843 	bl	800133c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80012b6:	f000 f813 	bl	80012e0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <SSD1306_Init+0x18c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <SSD1306_Init+0x18c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SSD1306_Init+0x18c>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000340 	.word	0x20000340
 80012dc:	200008c0 	.word	0x200008c0

080012e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	e01d      	b.n	8001328 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	3b50      	subs	r3, #80	; 0x50
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	2100      	movs	r1, #0
 80012f6:	2078      	movs	r0, #120	; 0x78
 80012f8:	f000 f9d4 	bl	80016a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2078      	movs	r0, #120	; 0x78
 8001302:	f000 f9cf 	bl	80016a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001306:	2210      	movs	r2, #16
 8001308:	2100      	movs	r1, #0
 800130a:	2078      	movs	r0, #120	; 0x78
 800130c:	f000 f9ca 	bl	80016a4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <SSD1306_UpdateScreen+0x58>)
 8001316:	441a      	add	r2, r3
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	2078      	movs	r0, #120	; 0x78
 800131e:	f000 f95b 	bl	80015d8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	3301      	adds	r3, #1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b07      	cmp	r3, #7
 800132c:	d9de      	bls.n	80012ec <SSD1306_UpdateScreen+0xc>
	}
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200004c0 	.word	0x200004c0

0800133c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <SSD1306_Fill+0x14>
 800134c:	2300      	movs	r3, #0
 800134e:	e000      	b.n	8001352 <SSD1306_Fill+0x16>
 8001350:	23ff      	movs	r3, #255	; 0xff
 8001352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001356:	4619      	mov	r1, r3
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <SSD1306_Fill+0x2c>)
 800135a:	f005 ff65 	bl	8007228 <memset>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200004c0 	.word	0x200004c0

0800136c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	460b      	mov	r3, r1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	70fb      	strb	r3, [r7, #3]
	if (
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b7f      	cmp	r3, #127	; 0x7f
 8001382:	d848      	bhi.n	8001416 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	2b3f      	cmp	r3, #63	; 0x3f
 8001388:	d845      	bhi.n	8001416 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <SSD1306_DrawPixel+0xb4>)
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d11a      	bne.n	80013dc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	b298      	uxth	r0, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	4413      	add	r3, r2
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <SSD1306_DrawPixel+0xb8>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b259      	sxtb	r1, r3
 80013cc:	88fa      	ldrh	r2, [r7, #6]
 80013ce:	4603      	mov	r3, r0
 80013d0:	01db      	lsls	r3, r3, #7
 80013d2:	4413      	add	r3, r2
 80013d4:	b2c9      	uxtb	r1, r1
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <SSD1306_DrawPixel+0xb8>)
 80013d8:	54d1      	strb	r1, [r2, r3]
 80013da:	e01d      	b.n	8001418 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013dc:	88fa      	ldrh	r2, [r7, #6]
 80013de:	88bb      	ldrh	r3, [r7, #4]
 80013e0:	08db      	lsrs	r3, r3, #3
 80013e2:	b298      	uxth	r0, r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	01db      	lsls	r3, r3, #7
 80013e8:	4413      	add	r3, r2
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <SSD1306_DrawPixel+0xb8>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	b25a      	sxtb	r2, r3
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	b25b      	sxtb	r3, r3
 8001402:	4013      	ands	r3, r2
 8001404:	b259      	sxtb	r1, r3
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	4603      	mov	r3, r0
 800140a:	01db      	lsls	r3, r3, #7
 800140c:	4413      	add	r3, r2
 800140e:	b2c9      	uxtb	r1, r1
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <SSD1306_DrawPixel+0xb8>)
 8001412:	54d1      	strb	r1, [r2, r3]
 8001414:	e000      	b.n	8001418 <SSD1306_DrawPixel+0xac>
		return;
 8001416:	bf00      	nop
	}
}
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	200008c0 	.word	0x200008c0
 8001424:	200004c0 	.word	0x200004c0

08001428 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	460a      	mov	r2, r1
 8001432:	80fb      	strh	r3, [r7, #6]
 8001434:	4613      	mov	r3, r2
 8001436:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <SSD1306_GotoXY+0x28>)
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <SSD1306_GotoXY+0x28>)
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	8053      	strh	r3, [r2, #2]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200008c0 	.word	0x200008c0

08001454 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001464:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <SSD1306_Putc+0xfc>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
	if (
 8001470:	2b7f      	cmp	r3, #127	; 0x7f
 8001472:	dc07      	bgt.n	8001484 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <SSD1306_Putc+0xfc>)
 8001476:	885b      	ldrh	r3, [r3, #2]
 8001478:	461a      	mov	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001480:	2b3f      	cmp	r3, #63	; 0x3f
 8001482:	dd01      	ble.n	8001488 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001484:	2300      	movs	r3, #0
 8001486:	e05e      	b.n	8001546 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	e04b      	b.n	8001526 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	3b20      	subs	r3, #32
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	7849      	ldrb	r1, [r1, #1]
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	440b      	add	r3, r1
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	e030      	b.n	8001514 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d010      	beq.n	80014e4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <SSD1306_Putc+0xfc>)
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b298      	uxth	r0, r3
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <SSD1306_Putc+0xfc>)
 80014d0:	885a      	ldrh	r2, [r3, #2]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b29b      	uxth	r3, r3
 80014da:	79ba      	ldrb	r2, [r7, #6]
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff ff45 	bl	800136c <SSD1306_DrawPixel>
 80014e2:	e014      	b.n	800150e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <SSD1306_Putc+0xfc>)
 80014e6:	881a      	ldrh	r2, [r3, #0]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	b298      	uxth	r0, r3
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <SSD1306_Putc+0xfc>)
 80014f2:	885a      	ldrh	r2, [r3, #2]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	b299      	uxth	r1, r3
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	f7ff ff2f 	bl	800136c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	3301      	adds	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4293      	cmp	r3, r2
 800151e:	d3c8      	bcc.n	80014b2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	785b      	ldrb	r3, [r3, #1]
 800152a:	461a      	mov	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	4293      	cmp	r3, r2
 8001530:	d3ad      	bcc.n	800148e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <SSD1306_Putc+0xfc>)
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <SSD1306_Putc+0xfc>)
 8001542:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001544:	79fb      	ldrb	r3, [r7, #7]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200008c0 	.word	0x200008c0

08001554 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4613      	mov	r3, r2
 8001560:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001562:	e012      	b.n	800158a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	79fa      	ldrb	r2, [r7, #7]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff71 	bl	8001454 <SSD1306_Putc>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d002      	beq.n	8001584 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	e008      	b.n	8001596 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3301      	adds	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1e8      	bne.n	8001564 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	781b      	ldrb	r3, [r3, #0]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff feca 	bl	800133c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80015a8:	f7ff fe9a 	bl	80012e0 <SSD1306_UpdateScreen>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <ssd1306_I2C_Init+0x24>)
 80015b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015ba:	e002      	b.n	80015c2 <ssd1306_I2C_Init+0x12>
		p--;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f9      	bne.n	80015bc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	0003d090 	.word	0x0003d090

080015d8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b0c7      	sub	sp, #284	; 0x11c
 80015dc:	af02      	add	r7, sp, #8
 80015de:	4604      	mov	r4, r0
 80015e0:	4608      	mov	r0, r1
 80015e2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80015e6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80015ea:	600a      	str	r2, [r1, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015f6:	4622      	mov	r2, r4
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015fe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001602:	4602      	mov	r2, r0
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800160a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800160e:	460a      	mov	r2, r1
 8001610:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001612:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800161a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800161e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001622:	7812      	ldrb	r2, [r2, #0]
 8001624:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001626:	2300      	movs	r3, #0
 8001628:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800162c:	e015      	b.n	800165a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800162e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001632:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001636:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	441a      	add	r2, r3
 800163e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001642:	3301      	adds	r3, #1
 8001644:	7811      	ldrb	r1, [r2, #0]
 8001646:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800164a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800164e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001650:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001654:	3301      	adds	r3, #1
 8001656:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800165a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800165e:	b29b      	uxth	r3, r3
 8001660:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001664:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001668:	8812      	ldrh	r2, [r2, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d8df      	bhi.n	800162e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 800166e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001672:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b299      	uxth	r1, r3
 800167a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800167e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	b29b      	uxth	r3, r3
 8001688:	f107 020c 	add.w	r2, r7, #12
 800168c:	200a      	movs	r0, #10
 800168e:	9000      	str	r0, [sp, #0]
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001692:	f001 f845 	bl	8002720 <HAL_I2C_Master_Transmit>
}
 8001696:	bf00      	nop
 8001698:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	20000340 	.word	0x20000340

080016a4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	460b      	mov	r3, r1
 80016b0:	71bb      	strb	r3, [r7, #6]
 80016b2:	4613      	mov	r3, r2
 80016b4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016b6:	79bb      	ldrb	r3, [r7, #6]
 80016b8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016ba:	797b      	ldrb	r3, [r7, #5]
 80016bc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	b299      	uxth	r1, r3
 80016c2:	f107 020c 	add.w	r2, r7, #12
 80016c6:	230a      	movs	r3, #10
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2302      	movs	r3, #2
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <ssd1306_I2C_Write+0x38>)
 80016ce:	f001 f827 	bl	8002720 <HAL_I2C_Master_Transmit>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000340 	.word	0x20000340

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_Init+0x28>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_Init+0x28>)
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 fccf 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f6:	200f      	movs	r0, #15
 80016f8:	f7ff fbd2 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff fa96 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_IncTick+0x1c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_IncTick+0x20>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a03      	ldr	r2, [pc, #12]	; (800172c <HAL_IncTick+0x20>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000010 	.word	0x20000010
 800172c:	200008c8 	.word	0x200008c8

08001730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <HAL_GetTick+0x10>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	200008c8 	.word	0x200008c8

08001744 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0be      	b.n	80018e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	2b00      	cmp	r3, #0
 8001772:	d109      	bne.n	8001788 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fa8a 	bl	8000c9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fb8f 	bl	8001eac <ADC_ConversionStop_Disable>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 8099 	bne.w	80018d2 <HAL_ADC_Init+0x18e>
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f040 8095 	bne.w	80018d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017b0:	f023 0302 	bic.w	r3, r3, #2
 80017b4:	f043 0202 	orr.w	r2, r3, #2
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7b1b      	ldrb	r3, [r3, #12]
 80017ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017dc:	d003      	beq.n	80017e6 <HAL_ADC_Init+0xa2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_ADC_Init+0xa8>
 80017e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ea:	e000      	b.n	80017ee <HAL_ADC_Init+0xaa>
 80017ec:	2300      	movs	r3, #0
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7d1b      	ldrb	r3, [r3, #20]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d119      	bne.n	8001830 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7b1b      	ldrb	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	3b01      	subs	r3, #1
 800180a:	035a      	lsls	r2, r3, #13
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	e00b      	b.n	8001830 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f043 0220 	orr.w	r2, r3, #32
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	430a      	orrs	r2, r1
 8001842:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_ADC_Init+0x1a8>)
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	430b      	orrs	r3, r1
 8001856:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001860:	d003      	beq.n	800186a <HAL_ADC_Init+0x126>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d104      	bne.n	8001874 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	3b01      	subs	r3, #1
 8001870:	051b      	lsls	r3, r3, #20
 8001872:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	430a      	orrs	r2, r1
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_ADC_Init+0x1ac>)
 8001890:	4013      	ands	r3, r2
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	429a      	cmp	r2, r3
 8001896:	d10b      	bne.n	80018b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	f023 0303 	bic.w	r3, r3, #3
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018ae:	e018      	b.n	80018e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	f023 0312 	bic.w	r3, r3, #18
 80018b8:	f043 0210 	orr.w	r2, r3, #16
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	f043 0201 	orr.w	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018d0:	e007      	b.n	80018e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	f043 0210 	orr.w	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	ffe1f7fd 	.word	0xffe1f7fd
 80018f0:	ff1f0efe 	.word	0xff1f0efe

080018f4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_ADC_Start_IT+0x1a>
 800190a:	2302      	movs	r3, #2
 800190c:	e0a0      	b.n	8001a50 <HAL_ADC_Start_IT+0x15c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fa6e 	bl	8001df8 <ADC_Enable>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 808f 	bne.w	8001a46 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <HAL_ADC_Start_IT+0x164>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d105      	bne.n	8001952 <HAL_ADC_Start_IT+0x5e>
 8001946:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_ADC_Start_IT+0x168>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d115      	bne.n	800197e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	2b00      	cmp	r3, #0
 800196a:	d026      	beq.n	80019ba <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001974:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800197c:	e01d      	b.n	80019ba <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a33      	ldr	r2, [pc, #204]	; (8001a5c <HAL_ADC_Start_IT+0x168>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d004      	beq.n	800199e <HAL_ADC_Start_IT+0xaa>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <HAL_ADC_Start_IT+0x164>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10d      	bne.n	80019ba <HAL_ADC_Start_IT+0xc6>
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_ADC_Start_IT+0x168>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	f023 0206 	bic.w	r2, r3, #6
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d2:	e002      	b.n	80019da <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f06f 0202 	mvn.w	r2, #2
 80019ea:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0220 	orr.w	r2, r2, #32
 80019fa:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a0a:	d113      	bne.n	8001a34 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_ADC_Start_IT+0x164>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d105      	bne.n	8001a22 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_ADC_Start_IT+0x168>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	e00c      	b.n	8001a4e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	e003      	b.n	8001a4e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40012800 	.word	0x40012800
 8001a5c:	40012400 	.word	0x40012400

08001a60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d03e      	beq.n	8001b18 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d039      	beq.n	8001b18 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ac6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aca:	d11d      	bne.n	8001b08 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d119      	bne.n	8001b08 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0220 	bic.w	r2, r2, #32
 8001ae2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fe9f 	bl	800084c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f06f 0212 	mvn.w	r2, #18
 8001b16:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d04d      	beq.n	8001bbe <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d048      	beq.n	8001bbe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001b4e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001b52:	d012      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d125      	bne.n	8001bae <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b6c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b70:	d11d      	bne.n	8001bae <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d119      	bne.n	8001bae <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b88:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f9bd 	bl	8001f2e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 020c 	mvn.w	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d012      	beq.n	8001bee <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f809 	bl	8001bf6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0201 	mvn.w	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x20>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0dc      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1da>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d81c      	bhi.n	8001c72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b05      	subs	r3, #5
 8001c4a:	221f      	movs	r2, #31
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	3b05      	subs	r3, #5
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c70:	e03c      	b.n	8001cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d81c      	bhi.n	8001cb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b23      	subs	r3, #35	; 0x23
 8001c8c:	221f      	movs	r2, #31
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	4019      	ands	r1, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b23      	subs	r3, #35	; 0x23
 8001ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb2:	e01b      	b.n	8001cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b41      	subs	r3, #65	; 0x41
 8001cc6:	221f      	movs	r2, #31
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4019      	ands	r1, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b41      	subs	r3, #65	; 0x41
 8001ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d91c      	bls.n	8001d2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68d9      	ldr	r1, [r3, #12]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	3b1e      	subs	r3, #30
 8001d06:	2207      	movs	r2, #7
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4019      	ands	r1, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6898      	ldr	r0, [r3, #8]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b1e      	subs	r3, #30
 8001d20:	fa00 f203 	lsl.w	r2, r0, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	e019      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6919      	ldr	r1, [r3, #16]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	2207      	movs	r2, #7
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4019      	ands	r1, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6898      	ldr	r0, [r3, #8]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d003      	beq.n	8001d72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d6e:	2b11      	cmp	r3, #17
 8001d70:	d132      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_ADC_ConfigChannel+0x1e4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d125      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d126      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d11a      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	0c9a      	lsrs	r2, r3, #18
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x1b2>
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	f043 0220 	orr.w	r2, r3, #32
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40012400 	.word	0x40012400
 8001df0:	20000000 	.word	0x20000000
 8001df4:	431bde83 	.word	0x431bde83

08001df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d040      	beq.n	8001e98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <ADC_Enable+0xac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <ADC_Enable+0xb0>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e34:	e002      	b.n	8001e3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e42:	f7ff fc75 	bl	8001730 <HAL_GetTick>
 8001e46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e48:	e01f      	b.n	8001e8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e4a:	f7ff fc71 	bl	8001730 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d918      	bls.n	8001e8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d011      	beq.n	8001e8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	f043 0210 	orr.w	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e007      	b.n	8001e9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d1d8      	bne.n	8001e4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	431bde83 	.word	0x431bde83

08001eac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d12e      	bne.n	8001f24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ed6:	f7ff fc2b 	bl	8001730 <HAL_GetTick>
 8001eda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001edc:	e01b      	b.n	8001f16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ede:	f7ff fc27 	bl	8001730 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d914      	bls.n	8001f16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10d      	bne.n	8001f16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	f043 0210 	orr.w	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e007      	b.n	8001f26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d0dc      	beq.n	8001ede <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 0307 	and.w	r3, r3, #7
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db0b      	blt.n	8001fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	4906      	ldr	r1, [pc, #24]	; (8001fd8 <__NVIC_EnableIRQ+0x34>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff4f 	bl	8001f40 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff64 	bl	8001f88 <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ffb2 	bl	8002030 <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff81 	bl	8001fdc <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff57 	bl	8001fa4 <__NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b08b      	sub	sp, #44	; 0x2c
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002112:	e169      	b.n	80023e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002114:	2201      	movs	r2, #1
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	429a      	cmp	r2, r3
 800212e:	f040 8158 	bne.w	80023e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a9a      	ldr	r2, [pc, #616]	; (80023a0 <HAL_GPIO_Init+0x2a0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d05e      	beq.n	80021fa <HAL_GPIO_Init+0xfa>
 800213c:	4a98      	ldr	r2, [pc, #608]	; (80023a0 <HAL_GPIO_Init+0x2a0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d875      	bhi.n	800222e <HAL_GPIO_Init+0x12e>
 8002142:	4a98      	ldr	r2, [pc, #608]	; (80023a4 <HAL_GPIO_Init+0x2a4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d058      	beq.n	80021fa <HAL_GPIO_Init+0xfa>
 8002148:	4a96      	ldr	r2, [pc, #600]	; (80023a4 <HAL_GPIO_Init+0x2a4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d86f      	bhi.n	800222e <HAL_GPIO_Init+0x12e>
 800214e:	4a96      	ldr	r2, [pc, #600]	; (80023a8 <HAL_GPIO_Init+0x2a8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d052      	beq.n	80021fa <HAL_GPIO_Init+0xfa>
 8002154:	4a94      	ldr	r2, [pc, #592]	; (80023a8 <HAL_GPIO_Init+0x2a8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d869      	bhi.n	800222e <HAL_GPIO_Init+0x12e>
 800215a:	4a94      	ldr	r2, [pc, #592]	; (80023ac <HAL_GPIO_Init+0x2ac>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d04c      	beq.n	80021fa <HAL_GPIO_Init+0xfa>
 8002160:	4a92      	ldr	r2, [pc, #584]	; (80023ac <HAL_GPIO_Init+0x2ac>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d863      	bhi.n	800222e <HAL_GPIO_Init+0x12e>
 8002166:	4a92      	ldr	r2, [pc, #584]	; (80023b0 <HAL_GPIO_Init+0x2b0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d046      	beq.n	80021fa <HAL_GPIO_Init+0xfa>
 800216c:	4a90      	ldr	r2, [pc, #576]	; (80023b0 <HAL_GPIO_Init+0x2b0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d85d      	bhi.n	800222e <HAL_GPIO_Init+0x12e>
 8002172:	2b12      	cmp	r3, #18
 8002174:	d82a      	bhi.n	80021cc <HAL_GPIO_Init+0xcc>
 8002176:	2b12      	cmp	r3, #18
 8002178:	d859      	bhi.n	800222e <HAL_GPIO_Init+0x12e>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <HAL_GPIO_Init+0x80>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	080021fb 	.word	0x080021fb
 8002184:	080021d5 	.word	0x080021d5
 8002188:	080021e7 	.word	0x080021e7
 800218c:	08002229 	.word	0x08002229
 8002190:	0800222f 	.word	0x0800222f
 8002194:	0800222f 	.word	0x0800222f
 8002198:	0800222f 	.word	0x0800222f
 800219c:	0800222f 	.word	0x0800222f
 80021a0:	0800222f 	.word	0x0800222f
 80021a4:	0800222f 	.word	0x0800222f
 80021a8:	0800222f 	.word	0x0800222f
 80021ac:	0800222f 	.word	0x0800222f
 80021b0:	0800222f 	.word	0x0800222f
 80021b4:	0800222f 	.word	0x0800222f
 80021b8:	0800222f 	.word	0x0800222f
 80021bc:	0800222f 	.word	0x0800222f
 80021c0:	0800222f 	.word	0x0800222f
 80021c4:	080021dd 	.word	0x080021dd
 80021c8:	080021f1 	.word	0x080021f1
 80021cc:	4a79      	ldr	r2, [pc, #484]	; (80023b4 <HAL_GPIO_Init+0x2b4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021d2:	e02c      	b.n	800222e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	623b      	str	r3, [r7, #32]
          break;
 80021da:	e029      	b.n	8002230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	3304      	adds	r3, #4
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e024      	b.n	8002230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	3308      	adds	r3, #8
 80021ec:	623b      	str	r3, [r7, #32]
          break;
 80021ee:	e01f      	b.n	8002230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	330c      	adds	r3, #12
 80021f6:	623b      	str	r3, [r7, #32]
          break;
 80021f8:	e01a      	b.n	8002230 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002202:	2304      	movs	r3, #4
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e013      	b.n	8002230 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002210:	2308      	movs	r3, #8
 8002212:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	611a      	str	r2, [r3, #16]
          break;
 800221a:	e009      	b.n	8002230 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800221c:	2308      	movs	r3, #8
 800221e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	615a      	str	r2, [r3, #20]
          break;
 8002226:	e003      	b.n	8002230 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	e000      	b.n	8002230 <HAL_GPIO_Init+0x130>
          break;
 800222e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2bff      	cmp	r3, #255	; 0xff
 8002234:	d801      	bhi.n	800223a <HAL_GPIO_Init+0x13a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	e001      	b.n	800223e <HAL_GPIO_Init+0x13e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2bff      	cmp	r3, #255	; 0xff
 8002244:	d802      	bhi.n	800224c <HAL_GPIO_Init+0x14c>
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	e002      	b.n	8002252 <HAL_GPIO_Init+0x152>
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	3b08      	subs	r3, #8
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	210f      	movs	r1, #15
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	401a      	ands	r2, r3
 8002264:	6a39      	ldr	r1, [r7, #32]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	431a      	orrs	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80b1 	beq.w	80023e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002280:	4b4d      	ldr	r3, [pc, #308]	; (80023b8 <HAL_GPIO_Init+0x2b8>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a4c      	ldr	r2, [pc, #304]	; (80023b8 <HAL_GPIO_Init+0x2b8>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <HAL_GPIO_Init+0x2b8>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002298:	4a48      	ldr	r2, [pc, #288]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a40      	ldr	r2, [pc, #256]	; (80023c0 <HAL_GPIO_Init+0x2c0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d013      	beq.n	80022ec <HAL_GPIO_Init+0x1ec>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3f      	ldr	r2, [pc, #252]	; (80023c4 <HAL_GPIO_Init+0x2c4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00d      	beq.n	80022e8 <HAL_GPIO_Init+0x1e8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3e      	ldr	r2, [pc, #248]	; (80023c8 <HAL_GPIO_Init+0x2c8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d007      	beq.n	80022e4 <HAL_GPIO_Init+0x1e4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3d      	ldr	r2, [pc, #244]	; (80023cc <HAL_GPIO_Init+0x2cc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d101      	bne.n	80022e0 <HAL_GPIO_Init+0x1e0>
 80022dc:	2303      	movs	r3, #3
 80022de:	e006      	b.n	80022ee <HAL_GPIO_Init+0x1ee>
 80022e0:	2304      	movs	r3, #4
 80022e2:	e004      	b.n	80022ee <HAL_GPIO_Init+0x1ee>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e002      	b.n	80022ee <HAL_GPIO_Init+0x1ee>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_GPIO_Init+0x1ee>
 80022ec:	2300      	movs	r3, #0
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	f002 0203 	and.w	r2, r2, #3
 80022f4:	0092      	lsls	r2, r2, #2
 80022f6:	4093      	lsls	r3, r2
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022fe:	492f      	ldr	r1, [pc, #188]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002318:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	492c      	ldr	r1, [pc, #176]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	43db      	mvns	r3, r3
 800232e:	4928      	ldr	r1, [pc, #160]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002330:	4013      	ands	r3, r2
 8002332:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	4922      	ldr	r1, [pc, #136]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	60cb      	str	r3, [r1, #12]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	491e      	ldr	r1, [pc, #120]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4918      	ldr	r1, [pc, #96]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	43db      	mvns	r3, r3
 800237e:	4914      	ldr	r1, [pc, #80]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002380:	4013      	ands	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d021      	beq.n	80023d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	490e      	ldr	r1, [pc, #56]	; (80023d0 <HAL_GPIO_Init+0x2d0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
 800239c:	e021      	b.n	80023e2 <HAL_GPIO_Init+0x2e2>
 800239e:	bf00      	nop
 80023a0:	10320000 	.word	0x10320000
 80023a4:	10310000 	.word	0x10310000
 80023a8:	10220000 	.word	0x10220000
 80023ac:	10210000 	.word	0x10210000
 80023b0:	10120000 	.word	0x10120000
 80023b4:	10110000 	.word	0x10110000
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010000 	.word	0x40010000
 80023c0:	40010800 	.word	0x40010800
 80023c4:	40010c00 	.word	0x40010c00
 80023c8:	40011000 	.word	0x40011000
 80023cc:	40011400 	.word	0x40011400
 80023d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_GPIO_Init+0x304>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	43db      	mvns	r3, r3
 80023dc:	4909      	ldr	r1, [pc, #36]	; (8002404 <HAL_GPIO_Init+0x304>)
 80023de:	4013      	ands	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	3301      	adds	r3, #1
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f47f ae8e 	bne.w	8002114 <HAL_GPIO_Init+0x14>
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	372c      	adds	r7, #44	; 0x2c
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	40010400 	.word	0x40010400

08002408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e001      	b.n	800242a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]
 8002442:	4613      	mov	r3, r2
 8002444:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002446:	787b      	ldrb	r3, [r7, #1]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002452:	e003      	b.n	800245c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	041a      	lsls	r2, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	611a      	str	r2, [r3, #16]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002478:	887a      	ldrh	r2, [r7, #2]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	041a      	lsls	r2, r3, #16
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	43d9      	mvns	r1, r3
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	400b      	ands	r3, r1
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	611a      	str	r2, [r3, #16]
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e12b      	b.n	8002702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fc30 	bl	8000d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024fc:	f001 f960 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8002500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a81      	ldr	r2, [pc, #516]	; (800270c <HAL_I2C_Init+0x274>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d807      	bhi.n	800251c <HAL_I2C_Init+0x84>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a80      	ldr	r2, [pc, #512]	; (8002710 <HAL_I2C_Init+0x278>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e006      	b.n	800252a <HAL_I2C_Init+0x92>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a7d      	ldr	r2, [pc, #500]	; (8002714 <HAL_I2C_Init+0x27c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0e7      	b.n	8002702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a78      	ldr	r2, [pc, #480]	; (8002718 <HAL_I2C_Init+0x280>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9b      	lsrs	r3, r3, #18
 800253c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a6a      	ldr	r2, [pc, #424]	; (800270c <HAL_I2C_Init+0x274>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d802      	bhi.n	800256c <HAL_I2C_Init+0xd4>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3301      	adds	r3, #1
 800256a:	e009      	b.n	8002580 <HAL_I2C_Init+0xe8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	4a69      	ldr	r2, [pc, #420]	; (800271c <HAL_I2C_Init+0x284>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	3301      	adds	r3, #1
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	495c      	ldr	r1, [pc, #368]	; (800270c <HAL_I2C_Init+0x274>)
 800259c:	428b      	cmp	r3, r1
 800259e:	d819      	bhi.n	80025d4 <HAL_I2C_Init+0x13c>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e59      	subs	r1, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ae:	1c59      	adds	r1, r3, #1
 80025b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025b4:	400b      	ands	r3, r1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_I2C_Init+0x138>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e59      	subs	r1, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ce:	e051      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 80025d0:	2304      	movs	r3, #4
 80025d2:	e04f      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <HAL_I2C_Init+0x168>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e012      	b.n	8002626 <HAL_I2C_Init+0x18e>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Init+0x196>
 800262a:	2301      	movs	r3, #1
 800262c:	e022      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10e      	bne.n	8002654 <HAL_I2C_Init+0x1bc>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1e58      	subs	r0, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	440b      	add	r3, r1
 8002644:	fbb0 f3f3 	udiv	r3, r0, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e58      	subs	r0, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	0099      	lsls	r1, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	6809      	ldr	r1, [r1, #0]
 8002678:	4313      	orrs	r3, r2
 800267a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6911      	ldr	r1, [r2, #16]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68d2      	ldr	r2, [r2, #12]
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	000186a0 	.word	0x000186a0
 8002710:	001e847f 	.word	0x001e847f
 8002714:	003d08ff 	.word	0x003d08ff
 8002718:	431bde83 	.word	0x431bde83
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
 8002730:	4613      	mov	r3, r2
 8002732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7fe fffc 	bl	8001730 <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b20      	cmp	r3, #32
 8002744:	f040 80e0 	bne.w	8002908 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2319      	movs	r3, #25
 800274e:	2201      	movs	r2, #1
 8002750:	4970      	ldr	r1, [pc, #448]	; (8002914 <HAL_I2C_Master_Transmit+0x1f4>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa92 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
 8002760:	e0d3      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_I2C_Master_Transmit+0x50>
 800276c:	2302      	movs	r3, #2
 800276e:	e0cc      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d007      	beq.n	8002796 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2221      	movs	r2, #33	; 0x21
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2210      	movs	r2, #16
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	893a      	ldrh	r2, [r7, #8]
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a50      	ldr	r2, [pc, #320]	; (8002918 <HAL_I2C_Master_Transmit+0x1f8>)
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f9ca 	bl	8002b78 <I2C_MasterRequestWrite>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e08d      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002804:	e066      	b.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6a39      	ldr	r1, [r7, #32]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fb50 	bl	8002eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b04      	cmp	r3, #4
 800281c:	d107      	bne.n	800282e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06b      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d11b      	bne.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	6a39      	ldr	r1, [r7, #32]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fb47 	bl	8002f40 <I2C_WaitOnBTFFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d107      	bne.n	80028d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e01a      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d194      	bne.n	8002806 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	00100002 	.word	0x00100002
 8002918:	ffff0000 	.word	0xffff0000

0800291c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	460b      	mov	r3, r1
 800292a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7fe ff00 	bl	8001730 <HAL_GetTick>
 8002930:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b20      	cmp	r3, #32
 8002940:	f040 8111 	bne.w	8002b66 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2319      	movs	r3, #25
 800294a:	2201      	movs	r2, #1
 800294c:	4988      	ldr	r1, [pc, #544]	; (8002b70 <HAL_I2C_IsDeviceReady+0x254>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f994 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800295a:	2302      	movs	r3, #2
 800295c:	e104      	b.n	8002b68 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_I2C_IsDeviceReady+0x50>
 8002968:	2302      	movs	r3, #2
 800296a:	e0fd      	b.n	8002b68 <HAL_I2C_IsDeviceReady+0x24c>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b01      	cmp	r3, #1
 8002980:	d007      	beq.n	8002992 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0201 	orr.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2224      	movs	r2, #36	; 0x24
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a70      	ldr	r2, [pc, #448]	; (8002b74 <HAL_I2C_IsDeviceReady+0x258>)
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f952 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ec:	d103      	bne.n	80029f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0b6      	b.n	8002b68 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a08:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fe91 	bl	8001730 <HAL_GetTick>
 8002a0e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	bf0c      	ite	eq
 8002a1e:	2301      	moveq	r3, #1
 8002a20:	2300      	movne	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a3e:	e025      	b.n	8002a8c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a40:	f7fe fe76 	bl	8001730 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d302      	bcc.n	8002a56 <HAL_I2C_IsDeviceReady+0x13a>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	22a0      	movs	r2, #160	; 0xa0
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2ba0      	cmp	r3, #160	; 0xa0
 8002a96:	d005      	beq.n	8002aa4 <HAL_I2C_IsDeviceReady+0x188>
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <HAL_I2C_IsDeviceReady+0x188>
 8002a9e:	7dbb      	ldrb	r3, [r7, #22]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0cd      	beq.n	8002a40 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d129      	bne.n	8002b0e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2319      	movs	r3, #25
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4921      	ldr	r1, [pc, #132]	; (8002b70 <HAL_I2C_IsDeviceReady+0x254>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f8c6 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e036      	b.n	8002b68 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e02c      	b.n	8002b68 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b26:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2319      	movs	r3, #25
 8002b2e:	2201      	movs	r2, #1
 8002b30:	490f      	ldr	r1, [pc, #60]	; (8002b70 <HAL_I2C_IsDeviceReady+0x254>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f8a2 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e012      	b.n	8002b68 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	3301      	adds	r3, #1
 8002b46:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f4ff af32 	bcc.w	80029b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
  }
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	00100002 	.word	0x00100002
 8002b74:	ffff0000 	.word	0xffff0000

08002b78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	460b      	mov	r3, r1
 8002b86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d006      	beq.n	8002ba2 <I2C_MasterRequestWrite+0x2a>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d003      	beq.n	8002ba2 <I2C_MasterRequestWrite+0x2a>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ba0:	d108      	bne.n	8002bb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e00b      	b.n	8002bcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	2b12      	cmp	r3, #18
 8002bba:	d107      	bne.n	8002bcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f84f 	bl	8002c7c <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf2:	d103      	bne.n	8002bfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e035      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c08:	d108      	bne.n	8002c1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	e01b      	b.n	8002c54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c1c:	897b      	ldrh	r3, [r7, #10]
 8002c1e:	11db      	asrs	r3, r3, #7
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f003 0306 	and.w	r3, r3, #6
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f063 030f 	orn	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	490e      	ldr	r1, [pc, #56]	; (8002c74 <I2C_MasterRequestWrite+0xfc>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f898 	bl	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e010      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c4a:	897b      	ldrh	r3, [r7, #10]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <I2C_MasterRequestWrite+0x100>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f888 	bl	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	00010008 	.word	0x00010008
 8002c78:	00010002 	.word	0x00010002

08002c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c8c:	e048      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d044      	beq.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c96:	f7fe fd4b 	bl	8001730 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d139      	bne.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	0c1b      	lsrs	r3, r3, #16
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10d      	bne.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	e00c      	b.n	8002cec <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	43da      	mvns	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d116      	bne.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e023      	b.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d10d      	bne.n	8002d46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	e00c      	b.n	8002d60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d093      	beq.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d7e:	e071      	b.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d123      	bne.n	8002dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002da8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0204 	orr.w	r2, r3, #4
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e067      	b.n	8002ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d041      	beq.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7fe fca6 	bl	8001730 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d136      	bne.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d10c      	bne.n	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e00b      	b.n	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	43da      	mvns	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4013      	ands	r3, r2
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e021      	b.n	8002ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10c      	bne.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e00b      	b.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f47f af6d 	bne.w	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ebc:	e034      	b.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f886 	bl	8002fd0 <I2C_IsAcknowledgeFailed>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e034      	b.n	8002f38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d028      	beq.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7fe fc2b 	bl	8001730 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d11d      	bne.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	2b80      	cmp	r3, #128	; 0x80
 8002ef8:	d016      	beq.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e007      	b.n	8002f38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	d1c3      	bne.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f4c:	e034      	b.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f83e 	bl	8002fd0 <I2C_IsAcknowledgeFailed>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e034      	b.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d028      	beq.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fe fbe3 	bl	8001730 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11d      	bne.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d016      	beq.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e007      	b.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d1c3      	bne.n	8002f4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe6:	d11b      	bne.n	8003020 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ff0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f043 0204 	orr.w	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e272      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8087 	beq.w	800315a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800304c:	4b92      	ldr	r3, [pc, #584]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b04      	cmp	r3, #4
 8003056:	d00c      	beq.n	8003072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003058:	4b8f      	ldr	r3, [pc, #572]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b08      	cmp	r3, #8
 8003062:	d112      	bne.n	800308a <HAL_RCC_OscConfig+0x5e>
 8003064:	4b8c      	ldr	r3, [pc, #560]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d10b      	bne.n	800308a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003072:	4b89      	ldr	r3, [pc, #548]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d06c      	beq.n	8003158 <HAL_RCC_OscConfig+0x12c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d168      	bne.n	8003158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e24c      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x76>
 8003094:	4b80      	ldr	r3, [pc, #512]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7f      	ldr	r2, [pc, #508]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e02e      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x98>
 80030aa:	4b7b      	ldr	r3, [pc, #492]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7a      	ldr	r2, [pc, #488]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b78      	ldr	r3, [pc, #480]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a77      	ldr	r2, [pc, #476]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0xbc>
 80030ce:	4b72      	ldr	r3, [pc, #456]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a71      	ldr	r2, [pc, #452]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030e8:	4b6b      	ldr	r3, [pc, #428]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6a      	ldr	r2, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a67      	ldr	r2, [pc, #412]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fb12 	bl	8001730 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe fb0e 	bl	8001730 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e200      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b5d      	ldr	r3, [pc, #372]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xe4>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fafe 	bl	8001730 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fafa 	bl	8001730 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1ec      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x10c>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003166:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x18c>
 800317e:	4b46      	ldr	r3, [pc, #280]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x176>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c0      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4939      	ldr	r1, [pc, #228]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b36      	ldr	r3, [pc, #216]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fab3 	bl	8001730 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe faaf 	bl	8001730 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1a1      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4927      	ldr	r1, [pc, #156]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe fa92 	bl	8001730 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe fa8e 	bl	8001730 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e180      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03a      	beq.n	80032b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d019      	beq.n	8003276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7fe fa72 	bl	8001730 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe fa6e 	bl	8001730 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e160      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800326e:	2001      	movs	r0, #1
 8003270:	f000 fafe 	bl	8003870 <RCC_Delay>
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7fe fa58 	bl	8001730 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003282:	e00f      	b.n	80032a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe fa54 	bl	8001730 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d908      	bls.n	80032a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e146      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	42420000 	.word	0x42420000
 80032a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a4:	4b92      	ldr	r3, [pc, #584]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e9      	bne.n	8003284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a6 	beq.w	800340a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c2:	4b8b      	ldr	r3, [pc, #556]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b88      	ldr	r3, [pc, #544]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a87      	ldr	r2, [pc, #540]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]
 80032da:	4b85      	ldr	r3, [pc, #532]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b82      	ldr	r3, [pc, #520]	; (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d118      	bne.n	8003328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f6:	4b7f      	ldr	r3, [pc, #508]	; (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7e      	ldr	r2, [pc, #504]	; (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003302:	f7fe fa15 	bl	8001730 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330a:	f7fe fa11 	bl	8001730 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	; 0x64
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e103      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	4b75      	ldr	r3, [pc, #468]	; (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x312>
 8003330:	4b6f      	ldr	r3, [pc, #444]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4a6e      	ldr	r2, [pc, #440]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6213      	str	r3, [r2, #32]
 800333c:	e02d      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x334>
 8003346:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4a69      	ldr	r2, [pc, #420]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6213      	str	r3, [r2, #32]
 8003352:	4b67      	ldr	r3, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a66      	ldr	r2, [pc, #408]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	e01c      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b05      	cmp	r3, #5
 8003366:	d10c      	bne.n	8003382 <HAL_RCC_OscConfig+0x356>
 8003368:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4a60      	ldr	r2, [pc, #384]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	f043 0304 	orr.w	r3, r3, #4
 8003372:	6213      	str	r3, [r2, #32]
 8003374:	4b5e      	ldr	r3, [pc, #376]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a5d      	ldr	r2, [pc, #372]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6213      	str	r3, [r2, #32]
 8003380:	e00b      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 8003382:	4b5b      	ldr	r3, [pc, #364]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a5a      	ldr	r2, [pc, #360]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	6213      	str	r3, [r2, #32]
 800338e:	4b58      	ldr	r3, [pc, #352]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a57      	ldr	r2, [pc, #348]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f023 0304 	bic.w	r3, r3, #4
 8003398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d015      	beq.n	80033ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fe f9c5 	bl	8001730 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fe f9c1 	bl	8001730 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0b1      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ee      	beq.n	80033aa <HAL_RCC_OscConfig+0x37e>
 80033cc:	e014      	b.n	80033f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fe f9af 	bl	8001730 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fe f9ab 	bl	8001730 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e09b      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ec:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ee      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fe:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8087 	beq.w	8003522 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003414:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d061      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d146      	bne.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <HAL_RCC_OscConfig+0x4cc>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fe f97f 	bl	8001730 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fe f97b 	bl	8001730 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e06d      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f0      	bne.n	8003436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d108      	bne.n	8003470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4921      	ldr	r1, [pc, #132]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003470:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a19      	ldr	r1, [r3, #32]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	430b      	orrs	r3, r1
 8003482:	491b      	ldr	r1, [pc, #108]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x4cc>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fe f94f 	bl	8001730 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7fe f94b 	bl	8001730 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e03d      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x46a>
 80034b4:	e035      	b.n	8003522 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_RCC_OscConfig+0x4cc>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe f938 	bl	8001730 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fe f934 	bl	8001730 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e026      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x498>
 80034e2:	e01e      	b.n	8003522 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e019      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
 80034f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_OscConfig+0x500>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	429a      	cmp	r2, r3
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0d0      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d910      	bls.n	8003574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b67      	ldr	r3, [pc, #412]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0207 	bic.w	r2, r3, #7
 800355a:	4965      	ldr	r1, [pc, #404]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b63      	ldr	r3, [pc, #396]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0b8      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a58      	ldr	r2, [pc, #352]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a4:	4b53      	ldr	r3, [pc, #332]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a52      	ldr	r2, [pc, #328]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b50      	ldr	r3, [pc, #320]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	494d      	ldr	r1, [pc, #308]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d040      	beq.n	8003650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b47      	ldr	r3, [pc, #284]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d115      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e073      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	4b3d      	ldr	r3, [pc, #244]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06b      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4936      	ldr	r1, [pc, #216]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fe f886 	bl	8001730 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fe f882 	bl	8001730 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e053      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d210      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 0207 	bic.w	r2, r3, #7
 8003666:	4922      	ldr	r1, [pc, #136]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e032      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4916      	ldr	r1, [pc, #88]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	490e      	ldr	r1, [pc, #56]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036be:	f000 f821 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036c2:	4602      	mov	r2, r0
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	490a      	ldr	r1, [pc, #40]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	5ccb      	ldrb	r3, [r1, r3]
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <HAL_RCC_ClockConfig+0x1cc>)
 80036d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1d0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fbde 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40021000 	.word	0x40021000
 80036f8:	080082f4 	.word	0x080082f4
 80036fc:	20000000 	.word	0x20000000
 8003700:	2000000c 	.word	0x2000000c

08003704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800371e:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_RCC_GetSysClockFreq+0x94>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d002      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x30>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d003      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0x36>
 8003732:	e027      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <HAL_RCC_GetSysClockFreq+0x98>)
 8003736:	613b      	str	r3, [r7, #16]
      break;
 8003738:	e027      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	0c9b      	lsrs	r3, r3, #18
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	4a17      	ldr	r2, [pc, #92]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003744:	5cd3      	ldrb	r3, [r2, r3]
 8003746:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_RCC_GetSysClockFreq+0x94>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0c5b      	lsrs	r3, r3, #17
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a0d      	ldr	r2, [pc, #52]	; (800379c <HAL_RCC_GetSysClockFreq+0x98>)
 8003766:	fb03 f202 	mul.w	r2, r3, r2
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e004      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	613b      	str	r3, [r7, #16]
      break;
 8003782:	e002      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetSysClockFreq+0x98>)
 8003786:	613b      	str	r3, [r7, #16]
      break;
 8003788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378a:	693b      	ldr	r3, [r7, #16]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	007a1200 	.word	0x007a1200
 80037a0:	08009068 	.word	0x08009068
 80037a4:	08009078 	.word	0x08009078
 80037a8:	003d0900 	.word	0x003d0900

080037ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b0:	4b02      	ldr	r3, [pc, #8]	; (80037bc <HAL_RCC_GetHCLKFreq+0x10>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	20000000 	.word	0x20000000

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c4:	f7ff fff2 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08008304 	.word	0x08008304

080037e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037ec:	f7ff ffde 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	0adb      	lsrs	r3, r3, #11
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4903      	ldr	r1, [pc, #12]	; (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	08008304 	.word	0x08008304

08003810 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	220f      	movs	r2, #15
 800381e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <HAL_RCC_GetClockConfig+0x58>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0203 	and.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <HAL_RCC_GetClockConfig+0x58>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_GetClockConfig+0x58>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_RCC_GetClockConfig+0x58>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_GetClockConfig+0x5c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0207 	and.w	r2, r3, #7
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40021000 	.word	0x40021000
 800386c:	40022000 	.word	0x40022000

08003870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <RCC_Delay+0x34>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <RCC_Delay+0x38>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0a5b      	lsrs	r3, r3, #9
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800388c:	bf00      	nop
  }
  while (Delay --);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1e5a      	subs	r2, r3, #1
 8003892:	60fa      	str	r2, [r7, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f9      	bne.n	800388c <RCC_Delay+0x1c>
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	20000000 	.word	0x20000000
 80038a8:	10624dd3 	.word	0x10624dd3

080038ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d07d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038c8:	2300      	movs	r3, #0
 80038ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038cc:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	4a4b      	ldr	r2, [pc, #300]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	61d3      	str	r3, [r2, #28]
 80038e4:	4b49      	ldr	r3, [pc, #292]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f0:	2301      	movs	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	4b46      	ldr	r3, [pc, #280]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d118      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003900:	4b43      	ldr	r3, [pc, #268]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a42      	ldr	r2, [pc, #264]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390c:	f7fd ff10 	bl	8001730 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	e008      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fd ff0c 	bl	8001730 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e06d      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	4b3a      	ldr	r3, [pc, #232]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003932:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d02e      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	429a      	cmp	r2, r3
 800394e:	d027      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003950:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003958:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800395a:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003960:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003966:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d014      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003976:	f7fd fedb 	bl	8001730 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fd fed7 	bl	8001730 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e036      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4917      	ldr	r1, [pc, #92]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d105      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	490b      	ldr	r1, [pc, #44]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40007000 	.word	0x40007000
 8003a14:	42420440 	.word	0x42420440

08003a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e041      	b.n	8003aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd f9b0 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f000 fa1c 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e03a      	b.n	8003b46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_TIM_Base_Start_IT+0x98>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x58>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d009      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x58>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x58>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d111      	bne.n	8003b34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d010      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	e007      	b.n	8003b44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40000800 	.word	0x40000800

08003b5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10f      	bne.n	8003ba4 <HAL_TIM_Base_Stop_IT+0x48>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a1a      	ldr	r2, [r3, #32]
 8003b8a:	f240 4344 	movw	r3, #1092	; 0x444
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <HAL_TIM_Base_Stop_IT+0x48>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0202 	mvn.w	r2, #2
 8003be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f92f 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f922 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f931 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0204 	mvn.w	r2, #4
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f905 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8f8 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f907 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0208 	mvn.w	r2, #8
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2204      	movs	r2, #4
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8db 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8ce 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f8dd 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0210 	mvn.w	r2, #16
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8b1 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8a4 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8b3 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10e      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0201 	mvn.w	r2, #1
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fc fd62 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b80      	cmp	r3, #128	; 0x80
 8003d48:	d10e      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d107      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa6d 	bl	8004242 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d107      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f877 	bl	8003e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0220 	mvn.w	r2, #32
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa38 	bl	8004230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e031      	b.n	8003e44 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8b0 	bl	8003f58 <TIM_SlaveTimer_SetConfig>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e018      	b.n	8003e44 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e20:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e30:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <TIM_Base_SetConfig+0xb8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0x30>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0x30>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <TIM_Base_SetConfig+0xbc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0x30>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a25      	ldr	r2, [pc, #148]	; (8003f54 <TIM_Base_SetConfig+0xc0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d108      	bne.n	8003ed6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <TIM_Base_SetConfig+0xb8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_Base_SetConfig+0x62>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d007      	beq.n	8003ef6 <TIM_Base_SetConfig+0x62>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <TIM_Base_SetConfig+0xbc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_Base_SetConfig+0x62>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <TIM_Base_SetConfig+0xc0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <TIM_Base_SetConfig+0xb8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d103      	bne.n	8003f3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	615a      	str	r2, [r3, #20]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40000400 	.word	0x40000400
 8003f54:	40000800 	.word	0x40000800

08003f58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f023 0307 	bic.w	r3, r3, #7
 8003f86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b70      	cmp	r3, #112	; 0x70
 8003fa0:	d01a      	beq.n	8003fd8 <TIM_SlaveTimer_SetConfig+0x80>
 8003fa2:	2b70      	cmp	r3, #112	; 0x70
 8003fa4:	d860      	bhi.n	8004068 <TIM_SlaveTimer_SetConfig+0x110>
 8003fa6:	2b60      	cmp	r3, #96	; 0x60
 8003fa8:	d054      	beq.n	8004054 <TIM_SlaveTimer_SetConfig+0xfc>
 8003faa:	2b60      	cmp	r3, #96	; 0x60
 8003fac:	d85c      	bhi.n	8004068 <TIM_SlaveTimer_SetConfig+0x110>
 8003fae:	2b50      	cmp	r3, #80	; 0x50
 8003fb0:	d046      	beq.n	8004040 <TIM_SlaveTimer_SetConfig+0xe8>
 8003fb2:	2b50      	cmp	r3, #80	; 0x50
 8003fb4:	d858      	bhi.n	8004068 <TIM_SlaveTimer_SetConfig+0x110>
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d019      	beq.n	8003fee <TIM_SlaveTimer_SetConfig+0x96>
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d854      	bhi.n	8004068 <TIM_SlaveTimer_SetConfig+0x110>
 8003fbe:	2b30      	cmp	r3, #48	; 0x30
 8003fc0:	d055      	beq.n	800406e <TIM_SlaveTimer_SetConfig+0x116>
 8003fc2:	2b30      	cmp	r3, #48	; 0x30
 8003fc4:	d850      	bhi.n	8004068 <TIM_SlaveTimer_SetConfig+0x110>
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d051      	beq.n	800406e <TIM_SlaveTimer_SetConfig+0x116>
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d84c      	bhi.n	8004068 <TIM_SlaveTimer_SetConfig+0x110>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d04d      	beq.n	800406e <TIM_SlaveTimer_SetConfig+0x116>
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	d04b      	beq.n	800406e <TIM_SlaveTimer_SetConfig+0x116>
 8003fd6:	e047      	b.n	8004068 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003fe8:	f000 f8a4 	bl	8004134 <TIM_ETR_SetConfig>
      break;
 8003fec:	e040      	b.n	8004070 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d101      	bne.n	8003ffa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e03b      	b.n	8004072 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004020:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	621a      	str	r2, [r3, #32]
      break;
 800403e:	e017      	b.n	8004070 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800404c:	461a      	mov	r2, r3
 800404e:	f000 f814 	bl	800407a <TIM_TI1_ConfigInputStage>
      break;
 8004052:	e00d      	b.n	8004070 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004060:	461a      	mov	r2, r3
 8004062:	f000 f838 	bl	80040d6 <TIM_TI2_ConfigInputStage>
      break;
 8004066:	e003      	b.n	8004070 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	75fb      	strb	r3, [r7, #23]
      break;
 800406c:	e000      	b.n	8004070 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800406e:	bf00      	nop
  }

  return status;
 8004070:	7dfb      	ldrb	r3, [r7, #23]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b087      	sub	sp, #28
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f023 0201 	bic.w	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 030a 	bic.w	r3, r3, #10
 80040b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b087      	sub	sp, #28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f023 0210 	bic.w	r2, r3, #16
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	031b      	lsls	r3, r3, #12
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004112:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	621a      	str	r2, [r3, #32]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800414e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	021a      	lsls	r2, r3, #8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	431a      	orrs	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
	...

08004174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004188:	2302      	movs	r3, #2
 800418a:	e046      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800

08004230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e042      	b.n	80042ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc fdb6 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f91d 	bl	80044d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b20      	cmp	r3, #32
 8004312:	d16d      	bne.n	80043f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_UART_Transmit+0x2c>
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e066      	b.n	80043f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2221      	movs	r2, #33	; 0x21
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004332:	f7fd f9fd 	bl	8001730 <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	88fa      	ldrh	r2, [r7, #6]
 8004342:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434c:	d108      	bne.n	8004360 <HAL_UART_Transmit+0x6c>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	e003      	b.n	8004368 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004368:	e02a      	b.n	80043c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2200      	movs	r2, #0
 8004372:	2180      	movs	r1, #128	; 0x80
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f840 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e036      	b.n	80043f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	3302      	adds	r3, #2
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e007      	b.n	80043b2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	3301      	adds	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1cf      	bne.n	800436a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2140      	movs	r1, #64	; 0x40
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f810 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e006      	b.n	80043f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043f0:	2302      	movs	r3, #2
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b090      	sub	sp, #64	; 0x40
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440a:	e050      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d04c      	beq.n	80044ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0x30>
 800441a:	f7fd f989 	bl	8001730 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004426:	429a      	cmp	r2, r3
 8004428:	d241      	bcs.n	80044ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800444a:	637a      	str	r2, [r7, #52]	; 0x34
 800444c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e5      	bne.n	800442a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3314      	adds	r3, #20
 8004464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	613b      	str	r3, [r7, #16]
   return(result);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800447e:	623a      	str	r2, [r7, #32]
 8004480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	69f9      	ldr	r1, [r7, #28]
 8004484:	6a3a      	ldr	r2, [r7, #32]
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	61bb      	str	r3, [r7, #24]
   return(result);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e5      	bne.n	800445e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e00f      	b.n	80044ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4013      	ands	r3, r2
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	bf0c      	ite	eq
 80044be:	2301      	moveq	r3, #1
 80044c0:	2300      	movne	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d09f      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3740      	adds	r7, #64	; 0x40
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004512:	f023 030c 	bic.w	r3, r3, #12
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	430b      	orrs	r3, r1
 800451e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <UART_SetConfig+0x114>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d103      	bne.n	8004548 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004540:	f7ff f952 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	e002      	b.n	800454e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004548:	f7ff f93a 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 800454c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009a      	lsls	r2, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	4a22      	ldr	r2, [pc, #136]	; (80045f0 <UART_SetConfig+0x118>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	0119      	lsls	r1, r3, #4
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009a      	lsls	r2, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	fbb2 f2f3 	udiv	r2, r2, r3
 8004584:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <UART_SetConfig+0x118>)
 8004586:	fba3 0302 	umull	r0, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2064      	movs	r0, #100	; 0x64
 800458e:	fb00 f303 	mul.w	r3, r0, r3
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	3332      	adds	r3, #50	; 0x32
 8004598:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <UART_SetConfig+0x118>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a4:	4419      	add	r1, r3
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009a      	lsls	r2, r3, #2
 80045b0:	441a      	add	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <UART_SetConfig+0x118>)
 80045be:	fba3 0302 	umull	r0, r3, r3, r2
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2064      	movs	r0, #100	; 0x64
 80045c6:	fb00 f303 	mul.w	r3, r0, r3
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	3332      	adds	r3, #50	; 0x32
 80045d0:	4a07      	ldr	r2, [pc, #28]	; (80045f0 <UART_SetConfig+0x118>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	f003 020f 	and.w	r2, r3, #15
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	440a      	add	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40013800 	.word	0x40013800
 80045f0:	51eb851f 	.word	0x51eb851f

080045f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f103 0208 	add.w	r2, r3, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f04f 32ff 	mov.w	r2, #4294967295
 800460c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f103 0208 	add.w	r2, r3, #8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f103 0208 	add.w	r2, r3, #8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d103      	bne.n	80046b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e00c      	b.n	80046ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3308      	adds	r3, #8
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e002      	b.n	80046be <vListInsert+0x2e>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d2f6      	bcs.n	80046b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6892      	ldr	r2, [r2, #8]
 8004716:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6852      	ldr	r2, [r2, #4]
 8004720:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	d103      	bne.n	8004734 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	1e5a      	subs	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr
	...

08004754 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800477e:	f002 f84d 	bl	800681c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	441a      	add	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	3b01      	subs	r3, #1
 80047b0:	68f9      	ldr	r1, [r7, #12]
 80047b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	441a      	add	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	22ff      	movs	r2, #255	; 0xff
 80047c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	22ff      	movs	r2, #255	; 0xff
 80047ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d114      	bne.n	80047fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01a      	beq.n	8004812 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3310      	adds	r3, #16
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 f967 	bl	8005ab4 <xTaskRemoveFromEventList>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d012      	beq.n	8004812 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <xQueueGenericReset+0xcc>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	e009      	b.n	8004812 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3310      	adds	r3, #16
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fef6 	bl	80045f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3324      	adds	r3, #36	; 0x24
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fef1 	bl	80045f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004812:	f002 f833 	bl	800687c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004816:	2301      	movs	r3, #1
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	; 0x28
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	613b      	str	r3, [r7, #16]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	e004      	b.n	8004864 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	3350      	adds	r3, #80	; 0x50
 8004868:	4618      	mov	r0, r3
 800486a:	f002 f8d7 	bl	8006a1c <pvPortMalloc>
 800486e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00f      	beq.n	8004896 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	3350      	adds	r3, #80	; 0x50
 800487a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004884:	79fa      	ldrb	r2, [r7, #7]
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f805 	bl	80048a0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004896:	69bb      	ldr	r3, [r7, #24]
	}
 8004898:	4618      	mov	r0, r3
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e002      	b.n	80048c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048ce:	2101      	movs	r1, #1
 80048d0:	69b8      	ldr	r0, [r7, #24]
 80048d2:	f7ff ff3f 	bl	8004754 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	; 0x38
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048f6:	2300      	movs	r3, #0
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <xQueueGenericSend+0x32>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <xQueueGenericSend+0x40>
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <xQueueGenericSend+0x44>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <xQueueGenericSend+0x46>
 800492c:	2300      	movs	r3, #0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <xQueueGenericSend+0x60>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d103      	bne.n	8004956 <xQueueGenericSend+0x6e>
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <xQueueGenericSend+0x72>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <xQueueGenericSend+0x74>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueGenericSend+0x8e>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	623b      	str	r3, [r7, #32]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004976:	f001 fa99 	bl	8005eac <xTaskGetSchedulerState>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <xQueueGenericSend+0x9e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <xQueueGenericSend+0xa2>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <xQueueGenericSend+0xa4>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	61fb      	str	r3, [r7, #28]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049a6:	f001 ff39 	bl	800681c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d302      	bcc.n	80049bc <xQueueGenericSend+0xd4>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d129      	bne.n	8004a10 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049c2:	f000 f98d 	bl	8004ce0 <prvCopyDataToQueue>
 80049c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d010      	beq.n	80049f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	3324      	adds	r3, #36	; 0x24
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 f86d 	bl	8005ab4 <xTaskRemoveFromEventList>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049e0:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <xQueueGenericSend+0x1f8>)
 80049e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	e00a      	b.n	8004a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049f8:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <xQueueGenericSend+0x1f8>)
 80049fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a08:	f001 ff38 	bl	800687c <vPortExitCritical>
				return pdPASS;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e063      	b.n	8004ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a16:	f001 ff31 	bl	800687c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e05c      	b.n	8004ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 f8a5 	bl	8005b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a32:	f001 ff23 	bl	800687c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a36:	f000 fde3 	bl	8005600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a3a:	f001 feef 	bl	800681c <vPortEnterCritical>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d103      	bne.n	8004a54 <xQueueGenericSend+0x16c>
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a5a:	b25b      	sxtb	r3, r3
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d103      	bne.n	8004a6a <xQueueGenericSend+0x182>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a6a:	f001 ff07 	bl	800687c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a6e:	1d3a      	adds	r2, r7, #4
 8004a70:	f107 0314 	add.w	r3, r7, #20
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f894 	bl	8005ba4 <xTaskCheckForTimeOut>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d124      	bne.n	8004acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a84:	f000 fa24 	bl	8004ed0 <prvIsQueueFull>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d018      	beq.n	8004ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	3310      	adds	r3, #16
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 ffe8 	bl	8005a6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a9e:	f000 f9af 	bl	8004e00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004aa2:	f000 fdbb 	bl	800561c <xTaskResumeAll>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f af7c 	bne.w	80049a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004aae:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <xQueueGenericSend+0x1f8>)
 8004ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	e772      	b.n	80049a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ac2:	f000 f99d 	bl	8004e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ac6:	f000 fda9 	bl	800561c <xTaskResumeAll>
 8004aca:	e76c      	b.n	80049a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ace:	f000 f997 	bl	8004e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ad2:	f000 fda3 	bl	800561c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ad6:	2300      	movs	r3, #0
		}
	}
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3738      	adds	r7, #56	; 0x38
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	; 0x30
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <xQueueReceive+0x30>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	623b      	str	r3, [r7, #32]
}
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <xQueueReceive+0x3e>
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <xQueueReceive+0x42>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <xQueueReceive+0x44>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <xQueueReceive+0x5e>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	61fb      	str	r3, [r7, #28]
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b42:	f001 f9b3 	bl	8005eac <xTaskGetSchedulerState>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <xQueueReceive+0x6e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <xQueueReceive+0x72>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <xQueueReceive+0x74>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xQueueReceive+0x8e>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	61bb      	str	r3, [r7, #24]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b72:	f001 fe53 	bl	800681c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01f      	beq.n	8004bc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b86:	f000 f915 	bl	8004db4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	1e5a      	subs	r2, r3, #1
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00f      	beq.n	8004bba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	3310      	adds	r3, #16
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 ff88 	bl	8005ab4 <xTaskRemoveFromEventList>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004baa:	4b3d      	ldr	r3, [pc, #244]	; (8004ca0 <xQueueReceive+0x1bc>)
 8004bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bba:	f001 fe5f 	bl	800687c <vPortExitCritical>
				return pdPASS;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e069      	b.n	8004c96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d103      	bne.n	8004bd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bc8:	f001 fe58 	bl	800687c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e062      	b.n	8004c96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bd6:	f107 0310 	add.w	r3, r7, #16
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 ffcc 	bl	8005b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004be4:	f001 fe4a 	bl	800687c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004be8:	f000 fd0a 	bl	8005600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bec:	f001 fe16 	bl	800681c <vPortEnterCritical>
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d103      	bne.n	8004c06 <xQueueReceive+0x122>
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d103      	bne.n	8004c1c <xQueueReceive+0x138>
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c1c:	f001 fe2e 	bl	800687c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c20:	1d3a      	adds	r2, r7, #4
 8004c22:	f107 0310 	add.w	r3, r7, #16
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 ffbb 	bl	8005ba4 <xTaskCheckForTimeOut>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d123      	bne.n	8004c7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c36:	f000 f935 	bl	8004ea4 <prvIsQueueEmpty>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d017      	beq.n	8004c70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	3324      	adds	r3, #36	; 0x24
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 ff0f 	bl	8005a6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c50:	f000 f8d6 	bl	8004e00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c54:	f000 fce2 	bl	800561c <xTaskResumeAll>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d189      	bne.n	8004b72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <xQueueReceive+0x1bc>)
 8004c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	e780      	b.n	8004b72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c72:	f000 f8c5 	bl	8004e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c76:	f000 fcd1 	bl	800561c <xTaskResumeAll>
 8004c7a:	e77a      	b.n	8004b72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c7e:	f000 f8bf 	bl	8004e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c82:	f000 fccb 	bl	800561c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c88:	f000 f90c 	bl	8004ea4 <prvIsQueueEmpty>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f43f af6f 	beq.w	8004b72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3730      	adds	r7, #48	; 0x30
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	60bb      	str	r3, [r7, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004cc8:	f001 fda8 	bl	800681c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004cd2:	f001 fdd3 	bl	800687c <vPortExitCritical>

	return uxReturn;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d14d      	bne.n	8004da2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f001 f8ec 	bl	8005ee8 <xTaskPriorityDisinherit>
 8004d10:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	e043      	b.n	8004da2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d119      	bne.n	8004d54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6898      	ldr	r0, [r3, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	f002 fb4d 	bl	80073ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	441a      	add	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d32b      	bcc.n	8004da2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	609a      	str	r2, [r3, #8]
 8004d52:	e026      	b.n	8004da2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68d8      	ldr	r0, [r3, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	f002 fb33 	bl	80073ca <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	425b      	negs	r3, r3
 8004d6e:	441a      	add	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d207      	bcs.n	8004d90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	425b      	negs	r3, r3
 8004d8a:	441a      	add	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d105      	bne.n	8004da2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004daa:	697b      	ldr	r3, [r7, #20]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	441a      	add	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d303      	bcc.n	8004de8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68d9      	ldr	r1, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	461a      	mov	r2, r3
 8004df2:	6838      	ldr	r0, [r7, #0]
 8004df4:	f002 fae9 	bl	80073ca <memcpy>
	}
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e08:	f001 fd08 	bl	800681c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e14:	e011      	b.n	8004e3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d012      	beq.n	8004e44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3324      	adds	r3, #36	; 0x24
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fe46 	bl	8005ab4 <xTaskRemoveFromEventList>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e2e:	f000 ff1b 	bl	8005c68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dce9      	bgt.n	8004e16 <prvUnlockQueue+0x16>
 8004e42:	e000      	b.n	8004e46 <prvUnlockQueue+0x46>
					break;
 8004e44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	22ff      	movs	r2, #255	; 0xff
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e4e:	f001 fd15 	bl	800687c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e52:	f001 fce3 	bl	800681c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e5e:	e011      	b.n	8004e84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3310      	adds	r3, #16
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fe21 	bl	8005ab4 <xTaskRemoveFromEventList>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e78:	f000 fef6 	bl	8005c68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	dce9      	bgt.n	8004e60 <prvUnlockQueue+0x60>
 8004e8c:	e000      	b.n	8004e90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	22ff      	movs	r2, #255	; 0xff
 8004e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e98:	f001 fcf0 	bl	800687c <vPortExitCritical>
}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eac:	f001 fcb6 	bl	800681c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e001      	b.n	8004ec2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ec2:	f001 fcdb 	bl	800687c <vPortExitCritical>

	return xReturn;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ed8:	f001 fca0 	bl	800681c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d102      	bne.n	8004eee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e001      	b.n	8004ef2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ef2:	f001 fcc3 	bl	800687c <vPortExitCritical>

	return xReturn;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08e      	sub	sp, #56	; 0x38
 8004f04:	af04      	add	r7, sp, #16
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	623b      	str	r3, [r7, #32]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10a      	bne.n	8004f46 <xTaskCreateStatic+0x46>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	61fb      	str	r3, [r7, #28]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f46:	23b0      	movs	r3, #176	; 0xb0
 8004f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2bb0      	cmp	r3, #176	; 0xb0
 8004f4e:	d00a      	beq.n	8004f66 <xTaskCreateStatic+0x66>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	61bb      	str	r3, [r7, #24]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01e      	beq.n	8004faa <xTaskCreateStatic+0xaa>
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01b      	beq.n	8004faa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f84:	2300      	movs	r3, #0
 8004f86:	9303      	str	r3, [sp, #12]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	9302      	str	r3, [sp, #8]
 8004f8c:	f107 0314 	add.w	r3, r7, #20
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f851 	bl	8005044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fa4:	f000 f8f2 	bl	800518c <prvAddNewTaskToReadyList>
 8004fa8:	e001      	b.n	8004fae <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fae:	697b      	ldr	r3, [r7, #20]
	}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3728      	adds	r7, #40	; 0x28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08c      	sub	sp, #48	; 0x30
 8004fbc:	af04      	add	r7, sp, #16
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 fd25 	bl	8006a1c <pvPortMalloc>
 8004fd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00e      	beq.n	8004ff8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004fda:	20b0      	movs	r0, #176	; 0xb0
 8004fdc:	f001 fd1e 	bl	8006a1c <pvPortMalloc>
 8004fe0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
 8004fee:	e005      	b.n	8004ffc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ff0:	6978      	ldr	r0, [r7, #20]
 8004ff2:	f001 fddd 	bl	8006bb0 <vPortFree>
 8004ff6:	e001      	b.n	8004ffc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d017      	beq.n	8005032 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	2300      	movs	r3, #0
 800500e:	9303      	str	r3, [sp, #12]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	9302      	str	r3, [sp, #8]
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f80f 	bl	8005044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005026:	69f8      	ldr	r0, [r7, #28]
 8005028:	f000 f8b0 	bl	800518c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800502c:	2301      	movs	r3, #1
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e002      	b.n	8005038 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005032:	f04f 33ff 	mov.w	r3, #4294967295
 8005036:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005038:	69bb      	ldr	r3, [r7, #24]
	}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	461a      	mov	r2, r3
 800505c:	21a5      	movs	r1, #165	; 0xa5
 800505e:	f002 f8e3 	bl	8007228 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800506c:	3b01      	subs	r3, #1
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	617b      	str	r3, [r7, #20]
}
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800509c:	2300      	movs	r3, #0
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	e012      	b.n	80050c8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	7819      	ldrb	r1, [r3, #0]
 80050aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	4413      	add	r3, r2
 80050b0:	3334      	adds	r3, #52	; 0x34
 80050b2:	460a      	mov	r2, r1
 80050b4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d9e9      	bls.n	80050a2 <prvInitialiseNewTask+0x5e>
 80050ce:	e000      	b.n	80050d2 <prvInitialiseNewTask+0x8e>
		{
			break;
 80050d0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	2b06      	cmp	r3, #6
 80050de:	d901      	bls.n	80050e4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050e0:	2306      	movs	r3, #6
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	2200      	movs	r2, #0
 80050f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	3304      	adds	r3, #4
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fa99 	bl	8004632 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	3318      	adds	r3, #24
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fa94 	bl	8004632 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	f1c3 0207 	rsb	r2, r3, #7
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	2200      	movs	r2, #0
 8005124:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	2200      	movs	r2, #0
 800512a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	335c      	adds	r3, #92	; 0x5c
 8005140:	224c      	movs	r2, #76	; 0x4c
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f002 f86f 	bl	8007228 <memset>
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <prvInitialiseNewTask+0x13c>)
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	4a0c      	ldr	r2, [pc, #48]	; (8005184 <prvInitialiseNewTask+0x140>)
 8005154:	665a      	str	r2, [r3, #100]	; 0x64
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	4a0b      	ldr	r2, [pc, #44]	; (8005188 <prvInitialiseNewTask+0x144>)
 800515a:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	69b8      	ldr	r0, [r7, #24]
 8005162:	f001 fa67 	bl	8006634 <pxPortInitialiseStack>
 8005166:	4602      	mov	r2, r0
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <prvInitialiseNewTask+0x134>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005176:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005178:	bf00      	nop
 800517a:	3720      	adds	r7, #32
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20001620 	.word	0x20001620
 8005184:	20001688 	.word	0x20001688
 8005188:	200016f0 	.word	0x200016f0

0800518c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005194:	f001 fb42 	bl	800681c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005198:	4b2c      	ldr	r3, [pc, #176]	; (800524c <prvAddNewTaskToReadyList+0xc0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a2b      	ldr	r2, [pc, #172]	; (800524c <prvAddNewTaskToReadyList+0xc0>)
 80051a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051a2:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051aa:	4a29      	ldr	r2, [pc, #164]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051b0:	4b26      	ldr	r3, [pc, #152]	; (800524c <prvAddNewTaskToReadyList+0xc0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d110      	bne.n	80051da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051b8:	f000 fd7a 	bl	8005cb0 <prvInitialiseTaskLists>
 80051bc:	e00d      	b.n	80051da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051be:	4b25      	ldr	r3, [pc, #148]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d802      	bhi.n	80051da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051d4:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051da:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <prvAddNewTaskToReadyList+0xcc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3301      	adds	r3, #1
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <prvAddNewTaskToReadyList+0xcc>)
 80051e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051e4:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <prvAddNewTaskToReadyList+0xcc>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	2201      	movs	r2, #1
 80051f2:	409a      	lsls	r2, r3
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <prvAddNewTaskToReadyList+0xd0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	4a18      	ldr	r2, [pc, #96]	; (800525c <prvAddNewTaskToReadyList+0xd0>)
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4a15      	ldr	r2, [pc, #84]	; (8005260 <prvAddNewTaskToReadyList+0xd4>)
 800520c:	441a      	add	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3304      	adds	r3, #4
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f7ff fa18 	bl	800464a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800521a:	f001 fb2f 	bl	800687c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <prvAddNewTaskToReadyList+0xc8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00e      	beq.n	8005244 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005226:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <prvAddNewTaskToReadyList+0xc4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	429a      	cmp	r2, r3
 8005232:	d207      	bcs.n	8005244 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <prvAddNewTaskToReadyList+0xd8>)
 8005236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	200009cc 	.word	0x200009cc
 8005250:	200008cc 	.word	0x200008cc
 8005254:	200009d8 	.word	0x200009d8
 8005258:	200009e8 	.word	0x200009e8
 800525c:	200009d4 	.word	0x200009d4
 8005260:	200008d0 	.word	0x200008d0
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <vTaskDelayUntil+0x2a>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	617b      	str	r3, [r7, #20]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <vTaskDelayUntil+0x46>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	613b      	str	r3, [r7, #16]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80052ae:	4b2a      	ldr	r3, [pc, #168]	; (8005358 <vTaskDelayUntil+0xf0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <vTaskDelayUntil+0x64>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60fb      	str	r3, [r7, #12]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80052cc:	f000 f998 	bl	8005600 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80052d0:	4b22      	ldr	r3, [pc, #136]	; (800535c <vTaskDelayUntil+0xf4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d20b      	bcs.n	8005302 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d211      	bcs.n	8005318 <vTaskDelayUntil+0xb0>
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d90d      	bls.n	8005318 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005300:	e00a      	b.n	8005318 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	429a      	cmp	r2, r3
 800530a:	d303      	bcc.n	8005314 <vTaskDelayUntil+0xac>
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	429a      	cmp	r2, r3
 8005312:	d901      	bls.n	8005318 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	d006      	beq.n	8005332 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f001 f91b 	bl	8006568 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005332:	f000 f973 	bl	800561c <xTaskResumeAll>
 8005336:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d107      	bne.n	800534e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <vTaskDelayUntil+0xf8>)
 8005340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800534e:	bf00      	nop
 8005350:	3728      	adds	r7, #40	; 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	200009f4 	.word	0x200009f4
 800535c:	200009d0 	.word	0x200009d0
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d017      	beq.n	80053a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005376:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <vTaskDelay+0x60>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <vTaskDelay+0x30>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	60bb      	str	r3, [r7, #8]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005394:	f000 f934 	bl	8005600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005398:	2100      	movs	r1, #0
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 f8e4 	bl	8006568 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053a0:	f000 f93c 	bl	800561c <xTaskResumeAll>
 80053a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <vTaskDelay+0x64>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	200009f4 	.word	0x200009f4
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d90a      	bls.n	80053f6 <vTaskPrioritySet+0x2a>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	60fb      	str	r3, [r7, #12]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d901      	bls.n	8005400 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053fc:	2306      	movs	r3, #6
 80053fe:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005400:	f001 fa0c 	bl	800681c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <vTaskPrioritySet+0x44>
 800540a:	4b43      	ldr	r3, [pc, #268]	; (8005518 <vTaskPrioritySet+0x14c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	e000      	b.n	8005412 <vTaskPrioritySet+0x46>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005418:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d074      	beq.n	800550c <vTaskPrioritySet+0x140>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	429a      	cmp	r2, r3
 8005428:	d90d      	bls.n	8005446 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800542a:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <vTaskPrioritySet+0x14c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	429a      	cmp	r2, r3
 8005432:	d00f      	beq.n	8005454 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005434:	4b38      	ldr	r3, [pc, #224]	; (8005518 <vTaskPrioritySet+0x14c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d309      	bcc.n	8005454 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	e006      	b.n	8005454 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005446:	4b34      	ldr	r3, [pc, #208]	; (8005518 <vTaskPrioritySet+0x14c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	429a      	cmp	r2, r3
 800544e:	d101      	bne.n	8005454 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005450:	2301      	movs	r3, #1
 8005452:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	429a      	cmp	r2, r3
 8005464:	d102      	bne.n	800546c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	db04      	blt.n	8005484 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f1c3 0207 	rsb	r2, r3, #7
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	6959      	ldr	r1, [r3, #20]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4a22      	ldr	r2, [pc, #136]	; (800551c <vTaskPrioritySet+0x150>)
 8005494:	4413      	add	r3, r2
 8005496:	4299      	cmp	r1, r3
 8005498:	d101      	bne.n	800549e <vTaskPrioritySet+0xd2>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <vTaskPrioritySet+0xd4>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d028      	beq.n	80054f6 <vTaskPrioritySet+0x12a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff f929 	bl	8004700 <uxListRemove>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d109      	bne.n	80054c8 <vTaskPrioritySet+0xfc>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80054b4:	2201      	movs	r2, #1
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	43da      	mvns	r2, r3
 80054be:	4b18      	ldr	r3, [pc, #96]	; (8005520 <vTaskPrioritySet+0x154>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4013      	ands	r3, r2
 80054c4:	4a16      	ldr	r2, [pc, #88]	; (8005520 <vTaskPrioritySet+0x154>)
 80054c6:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	2201      	movs	r2, #1
 80054ce:	409a      	lsls	r2, r3
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <vTaskPrioritySet+0x154>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	4a12      	ldr	r2, [pc, #72]	; (8005520 <vTaskPrioritySet+0x154>)
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4a0d      	ldr	r2, [pc, #52]	; (800551c <vTaskPrioritySet+0x150>)
 80054e8:	441a      	add	r2, r3
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7ff f8aa 	bl	800464a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <vTaskPrioritySet+0x140>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <vTaskPrioritySet+0x158>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800550c:	f001 f9b6 	bl	800687c <vPortExitCritical>
	}
 8005510:	bf00      	nop
 8005512:	3720      	adds	r7, #32
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	200008cc 	.word	0x200008cc
 800551c:	200008d0 	.word	0x200008d0
 8005520:	200009d4 	.word	0x200009d4
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005536:	463a      	mov	r2, r7
 8005538:	1d39      	adds	r1, r7, #4
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	4618      	mov	r0, r3
 8005540:	f7fa fe1a 	bl	8000178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	9202      	str	r2, [sp, #8]
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	2300      	movs	r3, #0
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	2300      	movs	r3, #0
 8005554:	460a      	mov	r2, r1
 8005556:	4922      	ldr	r1, [pc, #136]	; (80055e0 <vTaskStartScheduler+0xb8>)
 8005558:	4822      	ldr	r0, [pc, #136]	; (80055e4 <vTaskStartScheduler+0xbc>)
 800555a:	f7ff fcd1 	bl	8004f00 <xTaskCreateStatic>
 800555e:	4603      	mov	r3, r0
 8005560:	4a21      	ldr	r2, [pc, #132]	; (80055e8 <vTaskStartScheduler+0xc0>)
 8005562:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005564:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <vTaskStartScheduler+0xc0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e001      	b.n	8005576 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d11d      	bne.n	80055b8 <vTaskStartScheduler+0x90>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	613b      	str	r3, [r7, #16]
}
 800558e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005590:	4b16      	ldr	r3, [pc, #88]	; (80055ec <vTaskStartScheduler+0xc4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	335c      	adds	r3, #92	; 0x5c
 8005596:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <vTaskStartScheduler+0xc8>)
 8005598:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800559a:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <vTaskStartScheduler+0xcc>)
 800559c:	f04f 32ff 	mov.w	r2, #4294967295
 80055a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <vTaskStartScheduler+0xd0>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80055a8:	4b14      	ldr	r3, [pc, #80]	; (80055fc <vTaskStartScheduler+0xd4>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80055ae:	f7fa fdcf 	bl	8000150 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055b2:	f001 f8c1 	bl	8006738 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055b6:	e00e      	b.n	80055d6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d10a      	bne.n	80055d6 <vTaskStartScheduler+0xae>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60fb      	str	r3, [r7, #12]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <vTaskStartScheduler+0xac>
}
 80055d6:	bf00      	nop
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	080082c4 	.word	0x080082c4
 80055e4:	08005c81 	.word	0x08005c81
 80055e8:	200009f0 	.word	0x200009f0
 80055ec:	200008cc 	.word	0x200008cc
 80055f0:	20000070 	.word	0x20000070
 80055f4:	200009ec 	.word	0x200009ec
 80055f8:	200009d8 	.word	0x200009d8
 80055fc:	200009d0 	.word	0x200009d0

08005600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <vTaskSuspendAll+0x18>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3301      	adds	r3, #1
 800560a:	4a03      	ldr	r2, [pc, #12]	; (8005618 <vTaskSuspendAll+0x18>)
 800560c:	6013      	str	r3, [r2, #0]
}
 800560e:	bf00      	nop
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	200009f4 	.word	0x200009f4

0800561c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800562a:	4b41      	ldr	r3, [pc, #260]	; (8005730 <xTaskResumeAll+0x114>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <xTaskResumeAll+0x2c>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	603b      	str	r3, [r7, #0]
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005648:	f001 f8e8 	bl	800681c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800564c:	4b38      	ldr	r3, [pc, #224]	; (8005730 <xTaskResumeAll+0x114>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3b01      	subs	r3, #1
 8005652:	4a37      	ldr	r2, [pc, #220]	; (8005730 <xTaskResumeAll+0x114>)
 8005654:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005656:	4b36      	ldr	r3, [pc, #216]	; (8005730 <xTaskResumeAll+0x114>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d161      	bne.n	8005722 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800565e:	4b35      	ldr	r3, [pc, #212]	; (8005734 <xTaskResumeAll+0x118>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d05d      	beq.n	8005722 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005666:	e02e      	b.n	80056c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005668:	4b33      	ldr	r3, [pc, #204]	; (8005738 <xTaskResumeAll+0x11c>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3318      	adds	r3, #24
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff f843 	bl	8004700 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3304      	adds	r3, #4
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff f83e 	bl	8004700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	2201      	movs	r2, #1
 800568a:	409a      	lsls	r2, r3
 800568c:	4b2b      	ldr	r3, [pc, #172]	; (800573c <xTaskResumeAll+0x120>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4313      	orrs	r3, r2
 8005692:	4a2a      	ldr	r2, [pc, #168]	; (800573c <xTaskResumeAll+0x120>)
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4a27      	ldr	r2, [pc, #156]	; (8005740 <xTaskResumeAll+0x124>)
 80056a4:	441a      	add	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f7fe ffcc 	bl	800464a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b6:	4b23      	ldr	r3, [pc, #140]	; (8005744 <xTaskResumeAll+0x128>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	429a      	cmp	r2, r3
 80056be:	d302      	bcc.n	80056c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056c0:	4b21      	ldr	r3, [pc, #132]	; (8005748 <xTaskResumeAll+0x12c>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056c6:	4b1c      	ldr	r3, [pc, #112]	; (8005738 <xTaskResumeAll+0x11c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1cc      	bne.n	8005668 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056d4:	f000 fbc6 	bl	8005e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056d8:	4b1c      	ldr	r3, [pc, #112]	; (800574c <xTaskResumeAll+0x130>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d010      	beq.n	8005706 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056e4:	f000 f844 	bl	8005770 <xTaskIncrementTick>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056ee:	4b16      	ldr	r3, [pc, #88]	; (8005748 <xTaskResumeAll+0x12c>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f1      	bne.n	80056e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <xTaskResumeAll+0x130>)
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005706:	4b10      	ldr	r3, [pc, #64]	; (8005748 <xTaskResumeAll+0x12c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800570e:	2301      	movs	r3, #1
 8005710:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005712:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <xTaskResumeAll+0x134>)
 8005714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005722:	f001 f8ab 	bl	800687c <vPortExitCritical>

	return xAlreadyYielded;
 8005726:	68bb      	ldr	r3, [r7, #8]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	200009f4 	.word	0x200009f4
 8005734:	200009cc 	.word	0x200009cc
 8005738:	2000098c 	.word	0x2000098c
 800573c:	200009d4 	.word	0x200009d4
 8005740:	200008d0 	.word	0x200008d0
 8005744:	200008cc 	.word	0x200008cc
 8005748:	200009e0 	.word	0x200009e0
 800574c:	200009dc 	.word	0x200009dc
 8005750:	e000ed04 	.word	0xe000ed04

08005754 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800575a:	4b04      	ldr	r3, [pc, #16]	; (800576c <xTaskGetTickCount+0x18>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005760:	687b      	ldr	r3, [r7, #4]
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr
 800576c:	200009d0 	.word	0x200009d0

08005770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800577a:	4b51      	ldr	r3, [pc, #324]	; (80058c0 <xTaskIncrementTick+0x150>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f040 808d 	bne.w	800589e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005784:	4b4f      	ldr	r3, [pc, #316]	; (80058c4 <xTaskIncrementTick+0x154>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800578c:	4a4d      	ldr	r2, [pc, #308]	; (80058c4 <xTaskIncrementTick+0x154>)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d120      	bne.n	80057da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005798:	4b4b      	ldr	r3, [pc, #300]	; (80058c8 <xTaskIncrementTick+0x158>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	603b      	str	r3, [r7, #0]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <xTaskIncrementTick+0x46>
 80057b8:	4b43      	ldr	r3, [pc, #268]	; (80058c8 <xTaskIncrementTick+0x158>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4b43      	ldr	r3, [pc, #268]	; (80058cc <xTaskIncrementTick+0x15c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a41      	ldr	r2, [pc, #260]	; (80058c8 <xTaskIncrementTick+0x158>)
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4a41      	ldr	r2, [pc, #260]	; (80058cc <xTaskIncrementTick+0x15c>)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4b40      	ldr	r3, [pc, #256]	; (80058d0 <xTaskIncrementTick+0x160>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	4a3f      	ldr	r2, [pc, #252]	; (80058d0 <xTaskIncrementTick+0x160>)
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	f000 fb45 	bl	8005e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057da:	4b3e      	ldr	r3, [pc, #248]	; (80058d4 <xTaskIncrementTick+0x164>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d34d      	bcc.n	8005880 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057e4:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <xTaskIncrementTick+0x158>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <xTaskIncrementTick+0x82>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <xTaskIncrementTick+0x84>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f8:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <xTaskIncrementTick+0x164>)
 80057fa:	f04f 32ff 	mov.w	r2, #4294967295
 80057fe:	601a      	str	r2, [r3, #0]
					break;
 8005800:	e03e      	b.n	8005880 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005802:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <xTaskIncrementTick+0x158>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d203      	bcs.n	8005822 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800581a:	4a2e      	ldr	r2, [pc, #184]	; (80058d4 <xTaskIncrementTick+0x164>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6013      	str	r3, [r2, #0]
						break;
 8005820:	e02e      	b.n	8005880 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	3304      	adds	r3, #4
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe ff6a 	bl	8004700 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3318      	adds	r3, #24
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe ff61 	bl	8004700 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	2201      	movs	r2, #1
 8005844:	409a      	lsls	r2, r3
 8005846:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <xTaskIncrementTick+0x168>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <xTaskIncrementTick+0x168>)
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <xTaskIncrementTick+0x16c>)
 800585e:	441a      	add	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f7fe feef 	bl	800464a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4b1b      	ldr	r3, [pc, #108]	; (80058e0 <xTaskIncrementTick+0x170>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	429a      	cmp	r2, r3
 8005878:	d3b4      	bcc.n	80057e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587e:	e7b1      	b.n	80057e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005880:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <xTaskIncrementTick+0x170>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005886:	4915      	ldr	r1, [pc, #84]	; (80058dc <xTaskIncrementTick+0x16c>)
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d907      	bls.n	80058a8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005898:	2301      	movs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e004      	b.n	80058a8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800589e:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <xTaskIncrementTick+0x174>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3301      	adds	r3, #1
 80058a4:	4a0f      	ldr	r2, [pc, #60]	; (80058e4 <xTaskIncrementTick+0x174>)
 80058a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058a8:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <xTaskIncrementTick+0x178>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80058b0:	2301      	movs	r3, #1
 80058b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058b4:	697b      	ldr	r3, [r7, #20]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200009f4 	.word	0x200009f4
 80058c4:	200009d0 	.word	0x200009d0
 80058c8:	20000984 	.word	0x20000984
 80058cc:	20000988 	.word	0x20000988
 80058d0:	200009e4 	.word	0x200009e4
 80058d4:	200009ec 	.word	0x200009ec
 80058d8:	200009d4 	.word	0x200009d4
 80058dc:	200008d0 	.word	0x200008d0
 80058e0:	200008cc 	.word	0x200008cc
 80058e4:	200009dc 	.word	0x200009dc
 80058e8:	200009e0 	.word	0x200009e0

080058ec <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80058fc:	4b08      	ldr	r3, [pc, #32]	; (8005920 <vTaskSetApplicationTaskTag+0x34>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e001      	b.n	8005908 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8005908:	f000 ff88 	bl	800681c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
		taskEXIT_CRITICAL();
 8005912:	f000 ffb3 	bl	800687c <vPortExitCritical>
	}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200008cc 	.word	0x200008cc

08005924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800592a:	4b48      	ldr	r3, [pc, #288]	; (8005a4c <vTaskSwitchContext+0x128>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005932:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <vTaskSwitchContext+0x12c>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005938:	e084      	b.n	8005a44 <vTaskSwitchContext+0x120>
		xYieldPending = pdFALSE;
 800593a:	4b45      	ldr	r3, [pc, #276]	; (8005a50 <vTaskSwitchContext+0x12c>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005940:	f7fa fc0c 	bl	800015c <getRunTimeCounterValue>
 8005944:	4603      	mov	r3, r0
 8005946:	4a43      	ldr	r2, [pc, #268]	; (8005a54 <vTaskSwitchContext+0x130>)
 8005948:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800594a:	4b42      	ldr	r3, [pc, #264]	; (8005a54 <vTaskSwitchContext+0x130>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <vTaskSwitchContext+0x134>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d909      	bls.n	800596a <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005956:	4b41      	ldr	r3, [pc, #260]	; (8005a5c <vTaskSwitchContext+0x138>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800595c:	4a3d      	ldr	r2, [pc, #244]	; (8005a54 <vTaskSwitchContext+0x130>)
 800595e:	6810      	ldr	r0, [r2, #0]
 8005960:	4a3d      	ldr	r2, [pc, #244]	; (8005a58 <vTaskSwitchContext+0x134>)
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	1a82      	subs	r2, r0, r2
 8005966:	440a      	add	r2, r1
 8005968:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 800596a:	4b3a      	ldr	r3, [pc, #232]	; (8005a54 <vTaskSwitchContext+0x130>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a3a      	ldr	r2, [pc, #232]	; (8005a58 <vTaskSwitchContext+0x134>)
 8005970:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005972:	4b3a      	ldr	r3, [pc, #232]	; (8005a5c <vTaskSwitchContext+0x138>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	429a      	cmp	r2, r3
 8005988:	d111      	bne.n	80059ae <vTaskSwitchContext+0x8a>
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3304      	adds	r3, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	429a      	cmp	r2, r3
 8005994:	d10b      	bne.n	80059ae <vTaskSwitchContext+0x8a>
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	3308      	adds	r3, #8
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d105      	bne.n	80059ae <vTaskSwitchContext+0x8a>
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	330c      	adds	r3, #12
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d008      	beq.n	80059c0 <vTaskSwitchContext+0x9c>
 80059ae:	4b2b      	ldr	r3, [pc, #172]	; (8005a5c <vTaskSwitchContext+0x138>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <vTaskSwitchContext+0x138>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3334      	adds	r3, #52	; 0x34
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f7fa fc40 	bl	8000240 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80059c0:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <vTaskSwitchContext+0x13c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	fab3 f383 	clz	r3, r3
 80059cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80059ce:	7afb      	ldrb	r3, [r7, #11]
 80059d0:	f1c3 031f 	rsb	r3, r3, #31
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	4923      	ldr	r1, [pc, #140]	; (8005a64 <vTaskSwitchContext+0x140>)
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <vTaskSwitchContext+0xdc>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	607b      	str	r3, [r7, #4]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <vTaskSwitchContext+0xda>
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <vTaskSwitchContext+0x140>)
 8005a0c:	4413      	add	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	3308      	adds	r3, #8
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d104      	bne.n	8005a30 <vTaskSwitchContext+0x10c>
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	605a      	str	r2, [r3, #4]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	4a09      	ldr	r2, [pc, #36]	; (8005a5c <vTaskSwitchContext+0x138>)
 8005a38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a3a:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <vTaskSwitchContext+0x138>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	335c      	adds	r3, #92	; 0x5c
 8005a40:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <vTaskSwitchContext+0x144>)
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200009f4 	.word	0x200009f4
 8005a50:	200009e0 	.word	0x200009e0
 8005a54:	200009fc 	.word	0x200009fc
 8005a58:	200009f8 	.word	0x200009f8
 8005a5c:	200008cc 	.word	0x200008cc
 8005a60:	200009d4 	.word	0x200009d4
 8005a64:	200008d0 	.word	0x200008d0
 8005a68:	20000070 	.word	0x20000070

08005a6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60fb      	str	r3, [r7, #12]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a92:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <vTaskPlaceOnEventList+0x44>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3318      	adds	r3, #24
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fe fdf8 	bl	8004690 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	6838      	ldr	r0, [r7, #0]
 8005aa4:	f000 fd60 	bl	8006568 <prvAddCurrentTaskToDelayedList>
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	200008cc 	.word	0x200008cc

08005ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10a      	bne.n	8005ae0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	60fb      	str	r3, [r7, #12]
}
 8005adc:	bf00      	nop
 8005ade:	e7fe      	b.n	8005ade <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	3318      	adds	r3, #24
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe fe0b 	bl	8004700 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aea:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <xTaskRemoveFromEventList+0xac>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d11c      	bne.n	8005b2c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe fe02 	bl	8004700 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	2201      	movs	r2, #1
 8005b02:	409a      	lsls	r2, r3
 8005b04:	4b17      	ldr	r3, [pc, #92]	; (8005b64 <xTaskRemoveFromEventList+0xb0>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <xTaskRemoveFromEventList+0xb0>)
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4a13      	ldr	r2, [pc, #76]	; (8005b68 <xTaskRemoveFromEventList+0xb4>)
 8005b1c:	441a      	add	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f7fe fd90 	bl	800464a <vListInsertEnd>
 8005b2a:	e005      	b.n	8005b38 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	3318      	adds	r3, #24
 8005b30:	4619      	mov	r1, r3
 8005b32:	480e      	ldr	r0, [pc, #56]	; (8005b6c <xTaskRemoveFromEventList+0xb8>)
 8005b34:	f7fe fd89 	bl	800464a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <xTaskRemoveFromEventList+0xbc>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d905      	bls.n	8005b52 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b46:	2301      	movs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b4a:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <xTaskRemoveFromEventList+0xc0>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e001      	b.n	8005b56 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005b56:	697b      	ldr	r3, [r7, #20]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	200009f4 	.word	0x200009f4
 8005b64:	200009d4 	.word	0x200009d4
 8005b68:	200008d0 	.word	0x200008d0
 8005b6c:	2000098c 	.word	0x2000098c
 8005b70:	200008cc 	.word	0x200008cc
 8005b74:	200009e0 	.word	0x200009e0

08005b78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b80:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <vTaskInternalSetTimeOutState+0x24>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <vTaskInternalSetTimeOutState+0x28>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	605a      	str	r2, [r3, #4]
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	200009e4 	.word	0x200009e4
 8005ba0:	200009d0 	.word	0x200009d0

08005ba4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	613b      	str	r3, [r7, #16]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	60fb      	str	r3, [r7, #12]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005be6:	f000 fe19 	bl	800681c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bea:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <xTaskCheckForTimeOut+0xbc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c02:	d102      	bne.n	8005c0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	e023      	b.n	8005c52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <xTaskCheckForTimeOut+0xc0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d007      	beq.n	8005c26 <xTaskCheckForTimeOut+0x82>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d302      	bcc.n	8005c26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c20:	2301      	movs	r3, #1
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	e015      	b.n	8005c52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d20b      	bcs.n	8005c48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	1ad2      	subs	r2, r2, r3
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ff9b 	bl	8005b78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	e004      	b.n	8005c52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c52:	f000 fe13 	bl	800687c <vPortExitCritical>

	return xReturn;
 8005c56:	69fb      	ldr	r3, [r7, #28]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	200009d0 	.word	0x200009d0
 8005c64:	200009e4 	.word	0x200009e4

08005c68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c6c:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <vTaskMissedYield+0x14>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
}
 8005c72:	bf00      	nop
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	200009e0 	.word	0x200009e0

08005c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c88:	f000 f852 	bl	8005d30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <prvIdleTask+0x28>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d9f9      	bls.n	8005c88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <prvIdleTask+0x2c>)
 8005c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ca4:	e7f0      	b.n	8005c88 <prvIdleTask+0x8>
 8005ca6:	bf00      	nop
 8005ca8:	200008d0 	.word	0x200008d0
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	e00c      	b.n	8005cd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4a12      	ldr	r2, [pc, #72]	; (8005d10 <prvInitialiseTaskLists+0x60>)
 8005cc8:	4413      	add	r3, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fc92 	bl	80045f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	607b      	str	r3, [r7, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b06      	cmp	r3, #6
 8005cda:	d9ef      	bls.n	8005cbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cdc:	480d      	ldr	r0, [pc, #52]	; (8005d14 <prvInitialiseTaskLists+0x64>)
 8005cde:	f7fe fc89 	bl	80045f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ce2:	480d      	ldr	r0, [pc, #52]	; (8005d18 <prvInitialiseTaskLists+0x68>)
 8005ce4:	f7fe fc86 	bl	80045f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ce8:	480c      	ldr	r0, [pc, #48]	; (8005d1c <prvInitialiseTaskLists+0x6c>)
 8005cea:	f7fe fc83 	bl	80045f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cee:	480c      	ldr	r0, [pc, #48]	; (8005d20 <prvInitialiseTaskLists+0x70>)
 8005cf0:	f7fe fc80 	bl	80045f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cf4:	480b      	ldr	r0, [pc, #44]	; (8005d24 <prvInitialiseTaskLists+0x74>)
 8005cf6:	f7fe fc7d 	bl	80045f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <prvInitialiseTaskLists+0x78>)
 8005cfc:	4a05      	ldr	r2, [pc, #20]	; (8005d14 <prvInitialiseTaskLists+0x64>)
 8005cfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <prvInitialiseTaskLists+0x7c>)
 8005d02:	4a05      	ldr	r2, [pc, #20]	; (8005d18 <prvInitialiseTaskLists+0x68>)
 8005d04:	601a      	str	r2, [r3, #0]
}
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	200008d0 	.word	0x200008d0
 8005d14:	2000095c 	.word	0x2000095c
 8005d18:	20000970 	.word	0x20000970
 8005d1c:	2000098c 	.word	0x2000098c
 8005d20:	200009a0 	.word	0x200009a0
 8005d24:	200009b8 	.word	0x200009b8
 8005d28:	20000984 	.word	0x20000984
 8005d2c:	20000988 	.word	0x20000988

08005d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d36:	e019      	b.n	8005d6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d38:	f000 fd70 	bl	800681c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005d3c:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <prvCheckTasksWaitingTermination+0x50>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fe fcd9 	bl	8004700 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <prvCheckTasksWaitingTermination+0x54>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	4a0b      	ldr	r2, [pc, #44]	; (8005d84 <prvCheckTasksWaitingTermination+0x54>)
 8005d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <prvCheckTasksWaitingTermination+0x58>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <prvCheckTasksWaitingTermination+0x58>)
 8005d60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d62:	f000 fd8b 	bl	800687c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f848 	bl	8005dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d6c:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <prvCheckTasksWaitingTermination+0x58>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e1      	bne.n	8005d38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	200009a0 	.word	0x200009a0
 8005d84:	200009cc 	.word	0x200009cc
 8005d88:	200009b4 	.word	0x200009b4

08005d8c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005d98:	e005      	b.n	8005da6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2ba5      	cmp	r3, #165	; 0xa5
 8005dac:	d0f5      	beq.n	8005d9a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	089b      	lsrs	r3, r3, #2
 8005db2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	b29b      	uxth	r3, r3
	}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bc80      	pop	{r7}
 8005dc0:	4770      	bx	lr
	...

08005dc4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d102      	bne.n	8005dd8 <uxTaskGetStackHighWaterMark+0x14>
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <uxTaskGetStackHighWaterMark+0x34>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	e000      	b.n	8005dda <uxTaskGetStackHighWaterMark+0x16>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005de2:	6938      	ldr	r0, [r7, #16]
 8005de4:	f7ff ffd2 	bl	8005d8c <prvTaskCheckFreeStackSpace>
 8005de8:	4603      	mov	r3, r0
 8005dea:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005dec:	68fb      	ldr	r3, [r7, #12]
	}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200008cc 	.word	0x200008cc

08005dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	335c      	adds	r3, #92	; 0x5c
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fa25 	bl	8007258 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d108      	bne.n	8005e2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fec7 	bl	8006bb0 <vPortFree>
				vPortFree( pxTCB );
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fec4 	bl	8006bb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e28:	e018      	b.n	8005e5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d103      	bne.n	8005e3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 febb 	bl	8006bb0 <vPortFree>
	}
 8005e3a:	e00f      	b.n	8005e5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d00a      	beq.n	8005e5c <prvDeleteTCB+0x60>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60fb      	str	r3, [r7, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <prvDeleteTCB+0x5e>
	}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <prvResetNextTaskUnblockTime+0x40>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <prvResetNextTaskUnblockTime+0x14>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <prvResetNextTaskUnblockTime+0x16>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <prvResetNextTaskUnblockTime+0x44>)
 8005e80:	f04f 32ff 	mov.w	r2, #4294967295
 8005e84:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e86:	e008      	b.n	8005e9a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e88:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <prvResetNextTaskUnblockTime+0x40>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <prvResetNextTaskUnblockTime+0x44>)
 8005e98:	6013      	str	r3, [r2, #0]
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr
 8005ea4:	20000984 	.word	0x20000984
 8005ea8:	200009ec 	.word	0x200009ec

08005eac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <xTaskGetSchedulerState+0x34>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	607b      	str	r3, [r7, #4]
 8005ebe:	e008      	b.n	8005ed2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ec0:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <xTaskGetSchedulerState+0x38>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	607b      	str	r3, [r7, #4]
 8005ecc:	e001      	b.n	8005ed2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ed2:	687b      	ldr	r3, [r7, #4]
	}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	200009d8 	.word	0x200009d8
 8005ee4:	200009f4 	.word	0x200009f4

08005ee8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d06e      	beq.n	8005fdc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005efe:	4b3a      	ldr	r3, [pc, #232]	; (8005fe8 <xTaskPriorityDisinherit+0x100>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d00a      	beq.n	8005f1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	60fb      	str	r3, [r7, #12]
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60bb      	str	r3, [r7, #8]
}
 8005f38:	bf00      	nop
 8005f3a:	e7fe      	b.n	8005f3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f40:	1e5a      	subs	r2, r3, #1
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d044      	beq.n	8005fdc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d140      	bne.n	8005fdc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe fbce 	bl	8004700 <uxListRemove>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d115      	bne.n	8005f96 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	491f      	ldr	r1, [pc, #124]	; (8005fec <xTaskPriorityDisinherit+0x104>)
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <xTaskPriorityDisinherit+0xae>
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	2201      	movs	r2, #1
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43da      	mvns	r2, r3
 8005f8c:	4b18      	ldr	r3, [pc, #96]	; (8005ff0 <xTaskPriorityDisinherit+0x108>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4013      	ands	r3, r2
 8005f92:	4a17      	ldr	r2, [pc, #92]	; (8005ff0 <xTaskPriorityDisinherit+0x108>)
 8005f94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	f1c3 0207 	rsb	r2, r3, #7
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	2201      	movs	r2, #1
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <xTaskPriorityDisinherit+0x108>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	4a0d      	ldr	r2, [pc, #52]	; (8005ff0 <xTaskPriorityDisinherit+0x108>)
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4a08      	ldr	r2, [pc, #32]	; (8005fec <xTaskPriorityDisinherit+0x104>)
 8005fca:	441a      	add	r2, r3
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f7fe fb39 	bl	800464a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fdc:	697b      	ldr	r3, [r7, #20]
	}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200008cc 	.word	0x200008cc
 8005fec:	200008d0 	.word	0x200008d0
 8005ff0:	200009d4 	.word	0x200009d4

08005ff4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005ffe:	f000 fc0d 	bl	800681c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006002:	4b20      	ldr	r3, [pc, #128]	; (8006084 <ulTaskNotifyTake+0x90>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d113      	bne.n	8006036 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800600e:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <ulTaskNotifyTake+0x90>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800601e:	2101      	movs	r1, #1
 8006020:	6838      	ldr	r0, [r7, #0]
 8006022:	f000 faa1 	bl	8006568 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006026:	4b18      	ldr	r3, [pc, #96]	; (8006088 <ulTaskNotifyTake+0x94>)
 8006028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006036:	f000 fc21 	bl	800687c <vPortExitCritical>

		taskENTER_CRITICAL();
 800603a:	f000 fbef 	bl	800681c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800603e:	4b11      	ldr	r3, [pc, #68]	; (8006084 <ulTaskNotifyTake+0x90>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006046:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00e      	beq.n	800606c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <ulTaskNotifyTake+0x90>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800605e:	e005      	b.n	800606c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006060:	4b08      	ldr	r3, [pc, #32]	; (8006084 <ulTaskNotifyTake+0x90>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	3a01      	subs	r2, #1
 8006068:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <ulTaskNotifyTake+0x90>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 8006076:	f000 fc01 	bl	800687c <vPortExitCritical>

		return ulReturn;
 800607a:	68fb      	ldr	r3, [r7, #12]
	}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200008cc 	.word	0x200008cc
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800609a:	f000 fbbf 	bl	800681c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800609e:	4b29      	ldr	r3, [pc, #164]	; (8006144 <xTaskNotifyWait+0xb8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d01c      	beq.n	80060e6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80060ac:	4b25      	ldr	r3, [pc, #148]	; (8006144 <xTaskNotifyWait+0xb8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	43d2      	mvns	r2, r2
 80060b8:	400a      	ands	r2, r1
 80060ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80060be:	4b21      	ldr	r3, [pc, #132]	; (8006144 <xTaskNotifyWait+0xb8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060ce:	2101      	movs	r1, #1
 80060d0:	6838      	ldr	r0, [r7, #0]
 80060d2:	f000 fa49 	bl	8006568 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80060d6:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <xTaskNotifyWait+0xbc>)
 80060d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80060e6:	f000 fbc9 	bl	800687c <vPortExitCritical>

		taskENTER_CRITICAL();
 80060ea:	f000 fb97 	bl	800681c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80060f4:	4b13      	ldr	r3, [pc, #76]	; (8006144 <xTaskNotifyWait+0xb8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006100:	4b10      	ldr	r3, [pc, #64]	; (8006144 <xTaskNotifyWait+0xb8>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d002      	beq.n	8006114 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	e00a      	b.n	800612a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <xTaskNotifyWait+0xb8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	43d2      	mvns	r2, r2
 8006120:	400a      	ands	r2, r1
 8006122:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				xReturn = pdTRUE;
 8006126:	2301      	movs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800612a:	4b06      	ldr	r3, [pc, #24]	; (8006144 <xTaskNotifyWait+0xb8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 8006134:	f000 fba2 	bl	800687c <vPortExitCritical>

		return xReturn;
 8006138:	697b      	ldr	r3, [r7, #20]
	}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	200008cc 	.word	0x200008cc
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800615c:	2301      	movs	r3, #1
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <xTaskGenericNotify+0x30>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	61bb      	str	r3, [r7, #24]
}
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006180:	f000 fb4c 	bl	800681c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d004      	beq.n	8006194 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800619a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d82d      	bhi.n	8006206 <xTaskGenericNotify+0xba>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <xTaskGenericNotify+0x64>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	08006207 	.word	0x08006207
 80061b4:	080061c5 	.word	0x080061c5
 80061b8:	080061d7 	.word	0x080061d7
 80061bc:	080061e7 	.word	0x080061e7
 80061c0:	080061f1 	.word	0x080061f1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 80061d4:	e017      	b.n	8006206 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 80061e4:	e00f      	b.n	8006206 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 80061ee:	e00a      	b.n	8006206 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80061f0:	7ffb      	ldrb	r3, [r7, #31]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d004      	beq.n	8006200 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80061fe:	e001      	b.n	8006204 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8006200:	2300      	movs	r3, #0
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006204:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006206:	7ffb      	ldrb	r3, [r7, #31]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d139      	bne.n	8006280 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	3304      	adds	r3, #4
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe fa75 	bl	8004700 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	2201      	movs	r2, #1
 800621c:	409a      	lsls	r2, r3
 800621e:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <xTaskGenericNotify+0x144>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4313      	orrs	r3, r2
 8006224:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <xTaskGenericNotify+0x144>)
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4a17      	ldr	r2, [pc, #92]	; (8006294 <xTaskGenericNotify+0x148>)
 8006236:	441a      	add	r2, r3
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	3304      	adds	r3, #4
 800623c:	4619      	mov	r1, r3
 800623e:	4610      	mov	r0, r2
 8006240:	f7fe fa03 	bl	800464a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <xTaskGenericNotify+0x116>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	617b      	str	r3, [r7, #20]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <xTaskGenericNotify+0x14c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	429a      	cmp	r2, r3
 800626e:	d907      	bls.n	8006280 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006270:	4b0a      	ldr	r3, [pc, #40]	; (800629c <xTaskGenericNotify+0x150>)
 8006272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006280:	f000 fafc 	bl	800687c <vPortExitCritical>

		return xReturn;
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006286:	4618      	mov	r0, r3
 8006288:	3728      	adds	r7, #40	; 0x28
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200009d4 	.word	0x200009d4
 8006294:	200008d0 	.word	0x200008d0
 8006298:	200008cc 	.word	0x200008cc
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08e      	sub	sp, #56	; 0x38
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	4613      	mov	r3, r2
 80062ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80062b0:	2301      	movs	r3, #1
 80062b2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062d0:	f000 fb66 	bl	80069a0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062d8:	f3ef 8211 	mrs	r2, BASEPRI
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	623a      	str	r2, [r7, #32]
 80062ee:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062f0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d004      	beq.n	8006304 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	2202      	movs	r2, #2
 8006312:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	2b04      	cmp	r3, #4
 800631a:	d82f      	bhi.n	800637c <xTaskGenericNotifyFromISR+0xdc>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <xTaskGenericNotifyFromISR+0x84>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	0800637d 	.word	0x0800637d
 8006328:	08006339 	.word	0x08006339
 800632c:	0800634b 	.word	0x0800634b
 8006330:	0800635b 	.word	0x0800635b
 8006334:	08006365 	.word	0x08006365
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	431a      	orrs	r2, r3
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006348:	e018      	b.n	800637c <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006358:	e010      	b.n	800637c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006362:	e00b      	b.n	800637c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006364:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006368:	2b02      	cmp	r3, #2
 800636a:	d004      	beq.n	8006376 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006374:	e001      	b.n	800637a <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8006376:	2300      	movs	r3, #0
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800637a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800637c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006380:	2b01      	cmp	r3, #1
 8006382:	d146      	bne.n	8006412 <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	61bb      	str	r3, [r7, #24]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a2:	4b21      	ldr	r3, [pc, #132]	; (8006428 <xTaskGenericNotifyFromISR+0x188>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11c      	bne.n	80063e4 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	3304      	adds	r3, #4
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe f9a6 	bl	8004700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	2201      	movs	r2, #1
 80063ba:	409a      	lsls	r2, r3
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <xTaskGenericNotifyFromISR+0x18c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	4a1a      	ldr	r2, [pc, #104]	; (800642c <xTaskGenericNotifyFromISR+0x18c>)
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4a17      	ldr	r2, [pc, #92]	; (8006430 <xTaskGenericNotifyFromISR+0x190>)
 80063d4:	441a      	add	r2, r3
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	3304      	adds	r3, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7fe f934 	bl	800464a <vListInsertEnd>
 80063e2:	e005      	b.n	80063f0 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	3318      	adds	r3, #24
 80063e8:	4619      	mov	r1, r3
 80063ea:	4812      	ldr	r0, [pc, #72]	; (8006434 <xTaskGenericNotifyFromISR+0x194>)
 80063ec:	f7fe f92d 	bl	800464a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	4b10      	ldr	r3, [pc, #64]	; (8006438 <xTaskGenericNotifyFromISR+0x198>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d909      	bls.n	8006412 <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80063fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006406:	2201      	movs	r2, #1
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e002      	b.n	8006412 <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <xTaskGenericNotifyFromISR+0x19c>)
 800640e:	2201      	movs	r2, #1
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800641c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006420:	4618      	mov	r0, r3
 8006422:	3738      	adds	r7, #56	; 0x38
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200009f4 	.word	0x200009f4
 800642c:	200009d4 	.word	0x200009d4
 8006430:	200008d0 	.word	0x200008d0
 8006434:	2000098c 	.word	0x2000098c
 8006438:	200008cc 	.word	0x200008cc
 800643c:	200009e0 	.word	0x200009e0

08006440 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	61bb      	str	r3, [r7, #24]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006466:	f000 fa9b 	bl	80069a0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800646e:	f3ef 8211 	mrs	r2, BASEPRI
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	617a      	str	r2, [r7, #20]
 8006484:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006486:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006488:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006490:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	2202      	movs	r2, #2
 8006496:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80064a8:	7ffb      	ldrb	r3, [r7, #31]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d146      	bne.n	800653c <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60fb      	str	r3, [r7, #12]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064cc:	4b20      	ldr	r3, [pc, #128]	; (8006550 <vTaskNotifyGiveFromISR+0x110>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11c      	bne.n	800650e <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	3304      	adds	r3, #4
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe f911 	bl	8004700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	2201      	movs	r2, #1
 80064e4:	409a      	lsls	r2, r3
 80064e6:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <vTaskNotifyGiveFromISR+0x114>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	4a19      	ldr	r2, [pc, #100]	; (8006554 <vTaskNotifyGiveFromISR+0x114>)
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4a16      	ldr	r2, [pc, #88]	; (8006558 <vTaskNotifyGiveFromISR+0x118>)
 80064fe:	441a      	add	r2, r3
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4610      	mov	r0, r2
 8006508:	f7fe f89f 	bl	800464a <vListInsertEnd>
 800650c:	e005      	b.n	800651a <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	3318      	adds	r3, #24
 8006512:	4619      	mov	r1, r3
 8006514:	4811      	ldr	r0, [pc, #68]	; (800655c <vTaskNotifyGiveFromISR+0x11c>)
 8006516:	f7fe f898 	bl	800464a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <vTaskNotifyGiveFromISR+0x120>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	429a      	cmp	r2, r3
 8006526:	d909      	bls.n	800653c <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	e002      	b.n	800653c <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <vTaskNotifyGiveFromISR+0x124>)
 8006538:	2201      	movs	r2, #1
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f383 8811 	msr	BASEPRI, r3
}
 8006546:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006548:	bf00      	nop
 800654a:	3728      	adds	r7, #40	; 0x28
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200009f4 	.word	0x200009f4
 8006554:	200009d4 	.word	0x200009d4
 8006558:	200008d0 	.word	0x200008d0
 800655c:	2000098c 	.word	0x2000098c
 8006560:	200008cc 	.word	0x200008cc
 8006564:	200009e0 	.word	0x200009e0

08006568 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006572:	4b29      	ldr	r3, [pc, #164]	; (8006618 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006578:	4b28      	ldr	r3, [pc, #160]	; (800661c <prvAddCurrentTaskToDelayedList+0xb4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3304      	adds	r3, #4
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe f8be 	bl	8004700 <uxListRemove>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800658a:	4b24      	ldr	r3, [pc, #144]	; (800661c <prvAddCurrentTaskToDelayedList+0xb4>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	2201      	movs	r2, #1
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43da      	mvns	r2, r3
 8006598:	4b21      	ldr	r3, [pc, #132]	; (8006620 <prvAddCurrentTaskToDelayedList+0xb8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4013      	ands	r3, r2
 800659e:	4a20      	ldr	r2, [pc, #128]	; (8006620 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d10a      	bne.n	80065c0 <prvAddCurrentTaskToDelayedList+0x58>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065b0:	4b1a      	ldr	r3, [pc, #104]	; (800661c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	481a      	ldr	r0, [pc, #104]	; (8006624 <prvAddCurrentTaskToDelayedList+0xbc>)
 80065ba:	f7fe f846 	bl	800464a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065be:	e026      	b.n	800660e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4413      	add	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065c8:	4b14      	ldr	r3, [pc, #80]	; (800661c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d209      	bcs.n	80065ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065d8:	4b13      	ldr	r3, [pc, #76]	; (8006628 <prvAddCurrentTaskToDelayedList+0xc0>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f7fe f853 	bl	8004690 <vListInsert>
}
 80065ea:	e010      	b.n	800660e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <prvAddCurrentTaskToDelayedList+0xc4>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3304      	adds	r3, #4
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f7fe f849 	bl	8004690 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065fe:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	429a      	cmp	r2, r3
 8006606:	d202      	bcs.n	800660e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006608:	4a09      	ldr	r2, [pc, #36]	; (8006630 <prvAddCurrentTaskToDelayedList+0xc8>)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6013      	str	r3, [r2, #0]
}
 800660e:	bf00      	nop
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	200009d0 	.word	0x200009d0
 800661c:	200008cc 	.word	0x200008cc
 8006620:	200009d4 	.word	0x200009d4
 8006624:	200009b8 	.word	0x200009b8
 8006628:	20000988 	.word	0x20000988
 800662c:	20000984 	.word	0x20000984
 8006630:	200009ec 	.word	0x200009ec

08006634 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3b04      	subs	r3, #4
 8006644:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800664c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3b04      	subs	r3, #4
 8006652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f023 0201 	bic.w	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3b04      	subs	r3, #4
 8006662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006664:	4a08      	ldr	r2, [pc, #32]	; (8006688 <pxPortInitialiseStack+0x54>)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3b14      	subs	r3, #20
 800666e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3b20      	subs	r3, #32
 800667a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr
 8006688:	0800668d 	.word	0x0800668d

0800668c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006696:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <prvTaskExitError+0x54>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d00a      	beq.n	80066b6 <prvTaskExitError+0x2a>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <prvTaskExitError+0x28>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	60bb      	str	r3, [r7, #8]
}
 80066c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066ca:	bf00      	nop
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0fc      	beq.n	80066cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000014 	.word	0x20000014
	...

080066f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066f0:	4b07      	ldr	r3, [pc, #28]	; (8006710 <pxCurrentTCBConst2>)
 80066f2:	6819      	ldr	r1, [r3, #0]
 80066f4:	6808      	ldr	r0, [r1, #0]
 80066f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066fa:	f380 8809 	msr	PSP, r0
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8811 	msr	BASEPRI, r0
 800670a:	f04e 0e0d 	orr.w	lr, lr, #13
 800670e:	4770      	bx	lr

08006710 <pxCurrentTCBConst2>:
 8006710:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006718:	4806      	ldr	r0, [pc, #24]	; (8006734 <prvPortStartFirstTask+0x1c>)
 800671a:	6800      	ldr	r0, [r0, #0]
 800671c:	6800      	ldr	r0, [r0, #0]
 800671e:	f380 8808 	msr	MSP, r0
 8006722:	b662      	cpsie	i
 8006724:	b661      	cpsie	f
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	df00      	svc	0
 8006730:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006732:	bf00      	nop
 8006734:	e000ed08 	.word	0xe000ed08

08006738 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800673e:	4b32      	ldr	r3, [pc, #200]	; (8006808 <xPortStartScheduler+0xd0>)
 8006740:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	22ff      	movs	r2, #255	; 0xff
 800674e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006760:	b2da      	uxtb	r2, r3
 8006762:	4b2a      	ldr	r3, [pc, #168]	; (800680c <xPortStartScheduler+0xd4>)
 8006764:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006766:	4b2a      	ldr	r3, [pc, #168]	; (8006810 <xPortStartScheduler+0xd8>)
 8006768:	2207      	movs	r2, #7
 800676a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800676c:	e009      	b.n	8006782 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800676e:	4b28      	ldr	r3, [pc, #160]	; (8006810 <xPortStartScheduler+0xd8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3b01      	subs	r3, #1
 8006774:	4a26      	ldr	r2, [pc, #152]	; (8006810 <xPortStartScheduler+0xd8>)
 8006776:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	b2db      	uxtb	r3, r3
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	b2db      	uxtb	r3, r3
 8006780:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b80      	cmp	r3, #128	; 0x80
 800678c:	d0ef      	beq.n	800676e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800678e:	4b20      	ldr	r3, [pc, #128]	; (8006810 <xPortStartScheduler+0xd8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f1c3 0307 	rsb	r3, r3, #7
 8006796:	2b04      	cmp	r3, #4
 8006798:	d00a      	beq.n	80067b0 <xPortStartScheduler+0x78>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	60bb      	str	r3, [r7, #8]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067b0:	4b17      	ldr	r3, [pc, #92]	; (8006810 <xPortStartScheduler+0xd8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	4a16      	ldr	r2, [pc, #88]	; (8006810 <xPortStartScheduler+0xd8>)
 80067b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067ba:	4b15      	ldr	r3, [pc, #84]	; (8006810 <xPortStartScheduler+0xd8>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067c2:	4a13      	ldr	r2, [pc, #76]	; (8006810 <xPortStartScheduler+0xd8>)
 80067c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067ce:	4b11      	ldr	r3, [pc, #68]	; (8006814 <xPortStartScheduler+0xdc>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a10      	ldr	r2, [pc, #64]	; (8006814 <xPortStartScheduler+0xdc>)
 80067d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067da:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <xPortStartScheduler+0xdc>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a0d      	ldr	r2, [pc, #52]	; (8006814 <xPortStartScheduler+0xdc>)
 80067e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067e6:	f000 f8b9 	bl	800695c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <xPortStartScheduler+0xe0>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067f0:	f7ff ff92 	bl	8006718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067f4:	f7ff f896 	bl	8005924 <vTaskSwitchContext>
	prvTaskExitError();
 80067f8:	f7ff ff48 	bl	800668c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	e000e400 	.word	0xe000e400
 800680c:	20000a00 	.word	0x20000a00
 8006810:	20000a04 	.word	0x20000a04
 8006814:	e000ed20 	.word	0xe000ed20
 8006818:	20000014 	.word	0x20000014

0800681c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	607b      	str	r3, [r7, #4]
}
 8006834:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <vPortEnterCritical+0x58>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3301      	adds	r3, #1
 800683c:	4a0d      	ldr	r2, [pc, #52]	; (8006874 <vPortEnterCritical+0x58>)
 800683e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006840:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <vPortEnterCritical+0x58>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d10f      	bne.n	8006868 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006848:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <vPortEnterCritical+0x5c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <vPortEnterCritical+0x4c>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	603b      	str	r3, [r7, #0]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <vPortEnterCritical+0x4a>
	}
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20000014 	.word	0x20000014
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006882:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <vPortExitCritical+0x4c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <vPortExitCritical+0x24>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	607b      	str	r3, [r7, #4]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <vPortExitCritical+0x4c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	4a08      	ldr	r2, [pc, #32]	; (80068c8 <vPortExitCritical+0x4c>)
 80068a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068aa:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <vPortExitCritical+0x4c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d105      	bne.n	80068be <vPortExitCritical+0x42>
 80068b2:	2300      	movs	r3, #0
 80068b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	f383 8811 	msr	BASEPRI, r3
}
 80068bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr
 80068c8:	20000014 	.word	0x20000014
 80068cc:	00000000 	.word	0x00000000

080068d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068d0:	f3ef 8009 	mrs	r0, PSP
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <pxCurrentTCBConst>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068e0:	6010      	str	r0, [r2, #0]
 80068e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80068e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068ea:	f380 8811 	msr	BASEPRI, r0
 80068ee:	f7ff f819 	bl	8005924 <vTaskSwitchContext>
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8811 	msr	BASEPRI, r0
 80068fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	6808      	ldr	r0, [r1, #0]
 8006902:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006906:	f380 8809 	msr	PSP, r0
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	4770      	bx	lr

08006910 <pxCurrentTCBConst>:
 8006910:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	607b      	str	r3, [r7, #4]
}
 8006930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006932:	f7fe ff1d 	bl	8005770 <xTaskIncrementTick>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <SysTick_Handler+0x40>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f383 8811 	msr	BASEPRI, r3
}
 800694e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <vPortSetupTimerInterrupt+0x30>)
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <vPortSetupTimerInterrupt+0x34>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800696c:	4b09      	ldr	r3, [pc, #36]	; (8006994 <vPortSetupTimerInterrupt+0x38>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a09      	ldr	r2, [pc, #36]	; (8006998 <vPortSetupTimerInterrupt+0x3c>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	099b      	lsrs	r3, r3, #6
 8006978:	4a08      	ldr	r2, [pc, #32]	; (800699c <vPortSetupTimerInterrupt+0x40>)
 800697a:	3b01      	subs	r3, #1
 800697c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800697e:	4b03      	ldr	r3, [pc, #12]	; (800698c <vPortSetupTimerInterrupt+0x30>)
 8006980:	2207      	movs	r2, #7
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr
 800698c:	e000e010 	.word	0xe000e010
 8006990:	e000e018 	.word	0xe000e018
 8006994:	20000000 	.word	0x20000000
 8006998:	10624dd3 	.word	0x10624dd3
 800699c:	e000e014 	.word	0xe000e014

080069a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069a6:	f3ef 8305 	mrs	r3, IPSR
 80069aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b0f      	cmp	r3, #15
 80069b0:	d914      	bls.n	80069dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069b2:	4a16      	ldr	r2, [pc, #88]	; (8006a0c <vPortValidateInterruptPriority+0x6c>)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069bc:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <vPortValidateInterruptPriority+0x70>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	7afa      	ldrb	r2, [r7, #11]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d20a      	bcs.n	80069dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	607b      	str	r3, [r7, #4]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069dc:	4b0d      	ldr	r3, [pc, #52]	; (8006a14 <vPortValidateInterruptPriority+0x74>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <vPortValidateInterruptPriority+0x78>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d90a      	bls.n	8006a02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	603b      	str	r3, [r7, #0]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <vPortValidateInterruptPriority+0x60>
	}
 8006a02:	bf00      	nop
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	e000e3f0 	.word	0xe000e3f0
 8006a10:	20000a00 	.word	0x20000a00
 8006a14:	e000ed0c 	.word	0xe000ed0c
 8006a18:	20000a04 	.word	0x20000a04

08006a1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a28:	f7fe fdea 	bl	8005600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a2c:	4b5b      	ldr	r3, [pc, #364]	; (8006b9c <pvPortMalloc+0x180>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a34:	f000 f916 	bl	8006c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a38:	4b59      	ldr	r3, [pc, #356]	; (8006ba0 <pvPortMalloc+0x184>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f040 808e 	bne.w	8006b62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01d      	beq.n	8006a88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4413      	add	r3, r2
 8006a52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d014      	beq.n	8006a88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f023 0307 	bic.w	r3, r3, #7
 8006a64:	3308      	adds	r3, #8
 8006a66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <pvPortMalloc+0x6c>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	617b      	str	r3, [r7, #20]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d069      	beq.n	8006b62 <pvPortMalloc+0x146>
 8006a8e:	4b45      	ldr	r3, [pc, #276]	; (8006ba4 <pvPortMalloc+0x188>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d864      	bhi.n	8006b62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a98:	4b43      	ldr	r3, [pc, #268]	; (8006ba8 <pvPortMalloc+0x18c>)
 8006a9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a9c:	4b42      	ldr	r3, [pc, #264]	; (8006ba8 <pvPortMalloc+0x18c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aa2:	e004      	b.n	8006aae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d903      	bls.n	8006ac0 <pvPortMalloc+0xa4>
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f1      	bne.n	8006aa4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ac0:	4b36      	ldr	r3, [pc, #216]	; (8006b9c <pvPortMalloc+0x180>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d04b      	beq.n	8006b62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2208      	movs	r2, #8
 8006ad0:	4413      	add	r3, r2
 8006ad2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	1ad2      	subs	r2, r2, r3
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d91f      	bls.n	8006b2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <pvPortMalloc+0xf8>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	613b      	str	r3, [r7, #16]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b26:	69b8      	ldr	r0, [r7, #24]
 8006b28:	f000 f8fe 	bl	8006d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <pvPortMalloc+0x188>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <pvPortMalloc+0x188>)
 8006b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ba4 <pvPortMalloc+0x188>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b1b      	ldr	r3, [pc, #108]	; (8006bac <pvPortMalloc+0x190>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d203      	bcs.n	8006b4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b46:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <pvPortMalloc+0x188>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a18      	ldr	r2, [pc, #96]	; (8006bac <pvPortMalloc+0x190>)
 8006b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <pvPortMalloc+0x184>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b62:	f7fe fd5b 	bl	800561c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8006b6c:	f7f9 fafd 	bl	800016a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <pvPortMalloc+0x174>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	60fb      	str	r3, [r7, #12]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <pvPortMalloc+0x172>
	return pvReturn;
 8006b90:	69fb      	ldr	r3, [r7, #28]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3728      	adds	r7, #40	; 0x28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20001610 	.word	0x20001610
 8006ba0:	2000161c 	.word	0x2000161c
 8006ba4:	20001614 	.word	0x20001614
 8006ba8:	20001608 	.word	0x20001608
 8006bac:	20001618 	.word	0x20001618

08006bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d048      	beq.n	8006c54 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	425b      	negs	r3, r3
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4413      	add	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	4b21      	ldr	r3, [pc, #132]	; (8006c5c <vPortFree+0xac>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <vPortFree+0x44>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	60fb      	str	r3, [r7, #12]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <vPortFree+0x62>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	60bb      	str	r3, [r7, #8]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <vPortFree+0xac>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d019      	beq.n	8006c54 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d115      	bne.n	8006c54 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <vPortFree+0xac>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	43db      	mvns	r3, r3
 8006c32:	401a      	ands	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c38:	f7fe fce2 	bl	8005600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <vPortFree+0xb0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4413      	add	r3, r2
 8006c46:	4a06      	ldr	r2, [pc, #24]	; (8006c60 <vPortFree+0xb0>)
 8006c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c4a:	6938      	ldr	r0, [r7, #16]
 8006c4c:	f000 f86c 	bl	8006d28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c50:	f7fe fce4 	bl	800561c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c54:	bf00      	nop
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	2000161c 	.word	0x2000161c
 8006c60:	20001614 	.word	0x20001614

08006c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c70:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <prvHeapInit+0xac>)
 8006c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00c      	beq.n	8006c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3307      	adds	r3, #7
 8006c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0307 	bic.w	r3, r3, #7
 8006c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	4a1f      	ldr	r2, [pc, #124]	; (8006d10 <prvHeapInit+0xac>)
 8006c94:	4413      	add	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <prvHeapInit+0xb0>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ca2:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <prvHeapInit+0xb0>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	4413      	add	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1a9b      	subs	r3, r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0307 	bic.w	r3, r3, #7
 8006cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <prvHeapInit+0xb4>)
 8006cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <prvHeapInit+0xb4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <prvHeapInit+0xb4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <prvHeapInit+0xb4>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4a0a      	ldr	r2, [pc, #40]	; (8006d1c <prvHeapInit+0xb8>)
 8006cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <prvHeapInit+0xbc>)
 8006cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cfc:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <prvHeapInit+0xc0>)
 8006cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000a08 	.word	0x20000a08
 8006d14:	20001608 	.word	0x20001608
 8006d18:	20001610 	.word	0x20001610
 8006d1c:	20001618 	.word	0x20001618
 8006d20:	20001614 	.word	0x20001614
 8006d24:	2000161c 	.word	0x2000161c

08006d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d30:	4b27      	ldr	r3, [pc, #156]	; (8006dd0 <prvInsertBlockIntoFreeList+0xa8>)
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e002      	b.n	8006d3c <prvInsertBlockIntoFreeList+0x14>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d8f7      	bhi.n	8006d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	4413      	add	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d108      	bne.n	8006d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	441a      	add	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	441a      	add	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d118      	bne.n	8006db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b14      	ldr	r3, [pc, #80]	; (8006dd4 <prvInsertBlockIntoFreeList+0xac>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d00d      	beq.n	8006da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	441a      	add	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e008      	b.n	8006db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <prvInsertBlockIntoFreeList+0xac>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	e003      	b.n	8006db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d002      	beq.n	8006dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr
 8006dd0:	20001608 	.word	0x20001608
 8006dd4:	20001610 	.word	0x20001610

08006dd8 <std>:
 8006dd8:	2300      	movs	r3, #0
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	4604      	mov	r4, r0
 8006dde:	e9c0 3300 	strd	r3, r3, [r0]
 8006de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006de6:	6083      	str	r3, [r0, #8]
 8006de8:	8181      	strh	r1, [r0, #12]
 8006dea:	6643      	str	r3, [r0, #100]	; 0x64
 8006dec:	81c2      	strh	r2, [r0, #14]
 8006dee:	6183      	str	r3, [r0, #24]
 8006df0:	4619      	mov	r1, r3
 8006df2:	2208      	movs	r2, #8
 8006df4:	305c      	adds	r0, #92	; 0x5c
 8006df6:	f000 fa17 	bl	8007228 <memset>
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <std+0x58>)
 8006dfc:	6224      	str	r4, [r4, #32]
 8006dfe:	6263      	str	r3, [r4, #36]	; 0x24
 8006e00:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <std+0x5c>)
 8006e02:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e04:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <std+0x60>)
 8006e06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <std+0x64>)
 8006e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e0c:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <std+0x68>)
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	d006      	beq.n	8006e20 <std+0x48>
 8006e12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e16:	4294      	cmp	r4, r2
 8006e18:	d002      	beq.n	8006e20 <std+0x48>
 8006e1a:	33d0      	adds	r3, #208	; 0xd0
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	d105      	bne.n	8006e2c <std+0x54>
 8006e20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e28:	f000 bacc 	b.w	80073c4 <__retarget_lock_init_recursive>
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	bf00      	nop
 8006e30:	08007079 	.word	0x08007079
 8006e34:	0800709b 	.word	0x0800709b
 8006e38:	080070d3 	.word	0x080070d3
 8006e3c:	080070f7 	.word	0x080070f7
 8006e40:	20001620 	.word	0x20001620

08006e44 <stdio_exit_handler>:
 8006e44:	4a02      	ldr	r2, [pc, #8]	; (8006e50 <stdio_exit_handler+0xc>)
 8006e46:	4903      	ldr	r1, [pc, #12]	; (8006e54 <stdio_exit_handler+0x10>)
 8006e48:	4803      	ldr	r0, [pc, #12]	; (8006e58 <stdio_exit_handler+0x14>)
 8006e4a:	f000 b869 	b.w	8006f20 <_fwalk_sglue>
 8006e4e:	bf00      	nop
 8006e50:	20000018 	.word	0x20000018
 8006e54:	08007f31 	.word	0x08007f31
 8006e58:	20000024 	.word	0x20000024

08006e5c <cleanup_stdio>:
 8006e5c:	6841      	ldr	r1, [r0, #4]
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <cleanup_stdio+0x34>)
 8006e60:	b510      	push	{r4, lr}
 8006e62:	4299      	cmp	r1, r3
 8006e64:	4604      	mov	r4, r0
 8006e66:	d001      	beq.n	8006e6c <cleanup_stdio+0x10>
 8006e68:	f001 f862 	bl	8007f30 <_fflush_r>
 8006e6c:	68a1      	ldr	r1, [r4, #8]
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <cleanup_stdio+0x38>)
 8006e70:	4299      	cmp	r1, r3
 8006e72:	d002      	beq.n	8006e7a <cleanup_stdio+0x1e>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f001 f85b 	bl	8007f30 <_fflush_r>
 8006e7a:	68e1      	ldr	r1, [r4, #12]
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <cleanup_stdio+0x3c>)
 8006e7e:	4299      	cmp	r1, r3
 8006e80:	d004      	beq.n	8006e8c <cleanup_stdio+0x30>
 8006e82:	4620      	mov	r0, r4
 8006e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e88:	f001 b852 	b.w	8007f30 <_fflush_r>
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	bf00      	nop
 8006e90:	20001620 	.word	0x20001620
 8006e94:	20001688 	.word	0x20001688
 8006e98:	200016f0 	.word	0x200016f0

08006e9c <global_stdio_init.part.0>:
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <global_stdio_init.part.0+0x30>)
 8006ea0:	4c0b      	ldr	r4, [pc, #44]	; (8006ed0 <global_stdio_init.part.0+0x34>)
 8006ea2:	4a0c      	ldr	r2, [pc, #48]	; (8006ed4 <global_stdio_init.part.0+0x38>)
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	2104      	movs	r1, #4
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f7ff ff94 	bl	8006dd8 <std>
 8006eb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	2109      	movs	r1, #9
 8006eb8:	f7ff ff8e 	bl	8006dd8 <std>
 8006ebc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec6:	2112      	movs	r1, #18
 8006ec8:	f7ff bf86 	b.w	8006dd8 <std>
 8006ecc:	20001758 	.word	0x20001758
 8006ed0:	20001620 	.word	0x20001620
 8006ed4:	08006e45 	.word	0x08006e45

08006ed8 <__sfp_lock_acquire>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__sfp_lock_acquire+0x8>)
 8006eda:	f000 ba74 	b.w	80073c6 <__retarget_lock_acquire_recursive>
 8006ede:	bf00      	nop
 8006ee0:	20001761 	.word	0x20001761

08006ee4 <__sfp_lock_release>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__sfp_lock_release+0x8>)
 8006ee6:	f000 ba6f 	b.w	80073c8 <__retarget_lock_release_recursive>
 8006eea:	bf00      	nop
 8006eec:	20001761 	.word	0x20001761

08006ef0 <__sinit>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	f7ff fff0 	bl	8006ed8 <__sfp_lock_acquire>
 8006ef8:	6a23      	ldr	r3, [r4, #32]
 8006efa:	b11b      	cbz	r3, 8006f04 <__sinit+0x14>
 8006efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f00:	f7ff bff0 	b.w	8006ee4 <__sfp_lock_release>
 8006f04:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <__sinit+0x28>)
 8006f06:	6223      	str	r3, [r4, #32]
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <__sinit+0x2c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f5      	bne.n	8006efc <__sinit+0xc>
 8006f10:	f7ff ffc4 	bl	8006e9c <global_stdio_init.part.0>
 8006f14:	e7f2      	b.n	8006efc <__sinit+0xc>
 8006f16:	bf00      	nop
 8006f18:	08006e5d 	.word	0x08006e5d
 8006f1c:	20001758 	.word	0x20001758

08006f20 <_fwalk_sglue>:
 8006f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f24:	4607      	mov	r7, r0
 8006f26:	4688      	mov	r8, r1
 8006f28:	4614      	mov	r4, r2
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f30:	f1b9 0901 	subs.w	r9, r9, #1
 8006f34:	d505      	bpl.n	8006f42 <_fwalk_sglue+0x22>
 8006f36:	6824      	ldr	r4, [r4, #0]
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	d1f7      	bne.n	8006f2c <_fwalk_sglue+0xc>
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d907      	bls.n	8006f58 <_fwalk_sglue+0x38>
 8006f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	d003      	beq.n	8006f58 <_fwalk_sglue+0x38>
 8006f50:	4629      	mov	r1, r5
 8006f52:	4638      	mov	r0, r7
 8006f54:	47c0      	blx	r8
 8006f56:	4306      	orrs	r6, r0
 8006f58:	3568      	adds	r5, #104	; 0x68
 8006f5a:	e7e9      	b.n	8006f30 <_fwalk_sglue+0x10>

08006f5c <iprintf>:
 8006f5c:	b40f      	push	{r0, r1, r2, r3}
 8006f5e:	b507      	push	{r0, r1, r2, lr}
 8006f60:	4906      	ldr	r1, [pc, #24]	; (8006f7c <iprintf+0x20>)
 8006f62:	ab04      	add	r3, sp, #16
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f6a:	6881      	ldr	r1, [r0, #8]
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	f000 fcaf 	bl	80078d0 <_vfiprintf_r>
 8006f72:	b003      	add	sp, #12
 8006f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f78:	b004      	add	sp, #16
 8006f7a:	4770      	bx	lr
 8006f7c:	20000070 	.word	0x20000070

08006f80 <_puts_r>:
 8006f80:	6a03      	ldr	r3, [r0, #32]
 8006f82:	b570      	push	{r4, r5, r6, lr}
 8006f84:	4605      	mov	r5, r0
 8006f86:	460e      	mov	r6, r1
 8006f88:	6884      	ldr	r4, [r0, #8]
 8006f8a:	b90b      	cbnz	r3, 8006f90 <_puts_r+0x10>
 8006f8c:	f7ff ffb0 	bl	8006ef0 <__sinit>
 8006f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f92:	07db      	lsls	r3, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_puts_r+0x22>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	0598      	lsls	r0, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_puts_r+0x22>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9e:	f000 fa12 	bl	80073c6 <__retarget_lock_acquire_recursive>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	0719      	lsls	r1, r3, #28
 8006fa6:	d513      	bpl.n	8006fd0 <_puts_r+0x50>
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	b18b      	cbz	r3, 8006fd0 <_puts_r+0x50>
 8006fac:	3e01      	subs	r6, #1
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	60a3      	str	r3, [r4, #8]
 8006fb8:	b9e9      	cbnz	r1, 8006ff6 <_puts_r+0x76>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da2e      	bge.n	800701c <_puts_r+0x9c>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	210a      	movs	r1, #10
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 f89b 	bl	80070fe <__swbuf_r>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d007      	beq.n	8006fdc <_puts_r+0x5c>
 8006fcc:	250a      	movs	r5, #10
 8006fce:	e007      	b.n	8006fe0 <_puts_r+0x60>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 f8d0 	bl	8007178 <__swsetup_r>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d0e7      	beq.n	8006fac <_puts_r+0x2c>
 8006fdc:	f04f 35ff 	mov.w	r5, #4294967295
 8006fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fe2:	07da      	lsls	r2, r3, #31
 8006fe4:	d405      	bmi.n	8006ff2 <_puts_r+0x72>
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	059b      	lsls	r3, r3, #22
 8006fea:	d402      	bmi.n	8006ff2 <_puts_r+0x72>
 8006fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fee:	f000 f9eb 	bl	80073c8 <__retarget_lock_release_recursive>
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da04      	bge.n	8007004 <_puts_r+0x84>
 8006ffa:	69a2      	ldr	r2, [r4, #24]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	dc06      	bgt.n	800700e <_puts_r+0x8e>
 8007000:	290a      	cmp	r1, #10
 8007002:	d004      	beq.n	800700e <_puts_r+0x8e>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	6022      	str	r2, [r4, #0]
 800700a:	7019      	strb	r1, [r3, #0]
 800700c:	e7cf      	b.n	8006fae <_puts_r+0x2e>
 800700e:	4622      	mov	r2, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f000 f874 	bl	80070fe <__swbuf_r>
 8007016:	3001      	adds	r0, #1
 8007018:	d1c9      	bne.n	8006fae <_puts_r+0x2e>
 800701a:	e7df      	b.n	8006fdc <_puts_r+0x5c>
 800701c:	250a      	movs	r5, #10
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	6022      	str	r2, [r4, #0]
 8007024:	701d      	strb	r5, [r3, #0]
 8007026:	e7db      	b.n	8006fe0 <_puts_r+0x60>

08007028 <puts>:
 8007028:	4b02      	ldr	r3, [pc, #8]	; (8007034 <puts+0xc>)
 800702a:	4601      	mov	r1, r0
 800702c:	6818      	ldr	r0, [r3, #0]
 800702e:	f7ff bfa7 	b.w	8006f80 <_puts_r>
 8007032:	bf00      	nop
 8007034:	20000070 	.word	0x20000070

08007038 <siprintf>:
 8007038:	b40e      	push	{r1, r2, r3}
 800703a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800703e:	b500      	push	{lr}
 8007040:	b09c      	sub	sp, #112	; 0x70
 8007042:	ab1d      	add	r3, sp, #116	; 0x74
 8007044:	9002      	str	r0, [sp, #8]
 8007046:	9006      	str	r0, [sp, #24]
 8007048:	9107      	str	r1, [sp, #28]
 800704a:	9104      	str	r1, [sp, #16]
 800704c:	4808      	ldr	r0, [pc, #32]	; (8007070 <siprintf+0x38>)
 800704e:	4909      	ldr	r1, [pc, #36]	; (8007074 <siprintf+0x3c>)
 8007050:	f853 2b04 	ldr.w	r2, [r3], #4
 8007054:	9105      	str	r1, [sp, #20]
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	a902      	add	r1, sp, #8
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	f000 fb12 	bl	8007684 <_svfiprintf_r>
 8007060:	2200      	movs	r2, #0
 8007062:	9b02      	ldr	r3, [sp, #8]
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	b01c      	add	sp, #112	; 0x70
 8007068:	f85d eb04 	ldr.w	lr, [sp], #4
 800706c:	b003      	add	sp, #12
 800706e:	4770      	bx	lr
 8007070:	20000070 	.word	0x20000070
 8007074:	ffff0208 	.word	0xffff0208

08007078 <__sread>:
 8007078:	b510      	push	{r4, lr}
 800707a:	460c      	mov	r4, r1
 800707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007080:	f000 f952 	bl	8007328 <_read_r>
 8007084:	2800      	cmp	r0, #0
 8007086:	bfab      	itete	ge
 8007088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800708a:	89a3      	ldrhlt	r3, [r4, #12]
 800708c:	181b      	addge	r3, r3, r0
 800708e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007092:	bfac      	ite	ge
 8007094:	6563      	strge	r3, [r4, #84]	; 0x54
 8007096:	81a3      	strhlt	r3, [r4, #12]
 8007098:	bd10      	pop	{r4, pc}

0800709a <__swrite>:
 800709a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800709e:	461f      	mov	r7, r3
 80070a0:	898b      	ldrh	r3, [r1, #12]
 80070a2:	4605      	mov	r5, r0
 80070a4:	05db      	lsls	r3, r3, #23
 80070a6:	460c      	mov	r4, r1
 80070a8:	4616      	mov	r6, r2
 80070aa:	d505      	bpl.n	80070b8 <__swrite+0x1e>
 80070ac:	2302      	movs	r3, #2
 80070ae:	2200      	movs	r2, #0
 80070b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b4:	f000 f926 	bl	8007304 <_lseek_r>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	4632      	mov	r2, r6
 80070bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	4628      	mov	r0, r5
 80070c4:	463b      	mov	r3, r7
 80070c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ce:	f000 b93d 	b.w	800734c <_write_r>

080070d2 <__sseek>:
 80070d2:	b510      	push	{r4, lr}
 80070d4:	460c      	mov	r4, r1
 80070d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070da:	f000 f913 	bl	8007304 <_lseek_r>
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	bf15      	itete	ne
 80070e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80070e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070ee:	81a3      	strheq	r3, [r4, #12]
 80070f0:	bf18      	it	ne
 80070f2:	81a3      	strhne	r3, [r4, #12]
 80070f4:	bd10      	pop	{r4, pc}

080070f6 <__sclose>:
 80070f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070fa:	f000 b89d 	b.w	8007238 <_close_r>

080070fe <__swbuf_r>:
 80070fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007100:	460e      	mov	r6, r1
 8007102:	4614      	mov	r4, r2
 8007104:	4605      	mov	r5, r0
 8007106:	b118      	cbz	r0, 8007110 <__swbuf_r+0x12>
 8007108:	6a03      	ldr	r3, [r0, #32]
 800710a:	b90b      	cbnz	r3, 8007110 <__swbuf_r+0x12>
 800710c:	f7ff fef0 	bl	8006ef0 <__sinit>
 8007110:	69a3      	ldr	r3, [r4, #24]
 8007112:	60a3      	str	r3, [r4, #8]
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	071a      	lsls	r2, r3, #28
 8007118:	d525      	bpl.n	8007166 <__swbuf_r+0x68>
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	b31b      	cbz	r3, 8007166 <__swbuf_r+0x68>
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	6922      	ldr	r2, [r4, #16]
 8007122:	b2f6      	uxtb	r6, r6
 8007124:	1a98      	subs	r0, r3, r2
 8007126:	6963      	ldr	r3, [r4, #20]
 8007128:	4637      	mov	r7, r6
 800712a:	4283      	cmp	r3, r0
 800712c:	dc04      	bgt.n	8007138 <__swbuf_r+0x3a>
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f000 fefd 	bl	8007f30 <_fflush_r>
 8007136:	b9e0      	cbnz	r0, 8007172 <__swbuf_r+0x74>
 8007138:	68a3      	ldr	r3, [r4, #8]
 800713a:	3b01      	subs	r3, #1
 800713c:	60a3      	str	r3, [r4, #8]
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	6022      	str	r2, [r4, #0]
 8007144:	701e      	strb	r6, [r3, #0]
 8007146:	6962      	ldr	r2, [r4, #20]
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	429a      	cmp	r2, r3
 800714c:	d004      	beq.n	8007158 <__swbuf_r+0x5a>
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	07db      	lsls	r3, r3, #31
 8007152:	d506      	bpl.n	8007162 <__swbuf_r+0x64>
 8007154:	2e0a      	cmp	r6, #10
 8007156:	d104      	bne.n	8007162 <__swbuf_r+0x64>
 8007158:	4621      	mov	r1, r4
 800715a:	4628      	mov	r0, r5
 800715c:	f000 fee8 	bl	8007f30 <_fflush_r>
 8007160:	b938      	cbnz	r0, 8007172 <__swbuf_r+0x74>
 8007162:	4638      	mov	r0, r7
 8007164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007166:	4621      	mov	r1, r4
 8007168:	4628      	mov	r0, r5
 800716a:	f000 f805 	bl	8007178 <__swsetup_r>
 800716e:	2800      	cmp	r0, #0
 8007170:	d0d5      	beq.n	800711e <__swbuf_r+0x20>
 8007172:	f04f 37ff 	mov.w	r7, #4294967295
 8007176:	e7f4      	b.n	8007162 <__swbuf_r+0x64>

08007178 <__swsetup_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4b2a      	ldr	r3, [pc, #168]	; (8007224 <__swsetup_r+0xac>)
 800717c:	4605      	mov	r5, r0
 800717e:	6818      	ldr	r0, [r3, #0]
 8007180:	460c      	mov	r4, r1
 8007182:	b118      	cbz	r0, 800718c <__swsetup_r+0x14>
 8007184:	6a03      	ldr	r3, [r0, #32]
 8007186:	b90b      	cbnz	r3, 800718c <__swsetup_r+0x14>
 8007188:	f7ff feb2 	bl	8006ef0 <__sinit>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007192:	0718      	lsls	r0, r3, #28
 8007194:	d422      	bmi.n	80071dc <__swsetup_r+0x64>
 8007196:	06d9      	lsls	r1, r3, #27
 8007198:	d407      	bmi.n	80071aa <__swsetup_r+0x32>
 800719a:	2309      	movs	r3, #9
 800719c:	602b      	str	r3, [r5, #0]
 800719e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	e034      	b.n	8007214 <__swsetup_r+0x9c>
 80071aa:	0758      	lsls	r0, r3, #29
 80071ac:	d512      	bpl.n	80071d4 <__swsetup_r+0x5c>
 80071ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071b0:	b141      	cbz	r1, 80071c4 <__swsetup_r+0x4c>
 80071b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071b6:	4299      	cmp	r1, r3
 80071b8:	d002      	beq.n	80071c0 <__swsetup_r+0x48>
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 f914 	bl	80073e8 <_free_r>
 80071c0:	2300      	movs	r3, #0
 80071c2:	6363      	str	r3, [r4, #52]	; 0x34
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	2300      	movs	r3, #0
 80071ce:	6063      	str	r3, [r4, #4]
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	6023      	str	r3, [r4, #0]
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	f043 0308 	orr.w	r3, r3, #8
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	b94b      	cbnz	r3, 80071f4 <__swsetup_r+0x7c>
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ea:	d003      	beq.n	80071f4 <__swsetup_r+0x7c>
 80071ec:	4621      	mov	r1, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 feeb 	bl	8007fca <__smakebuf_r>
 80071f4:	89a0      	ldrh	r0, [r4, #12]
 80071f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071fa:	f010 0301 	ands.w	r3, r0, #1
 80071fe:	d00a      	beq.n	8007216 <__swsetup_r+0x9e>
 8007200:	2300      	movs	r3, #0
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	6963      	ldr	r3, [r4, #20]
 8007206:	425b      	negs	r3, r3
 8007208:	61a3      	str	r3, [r4, #24]
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	b943      	cbnz	r3, 8007220 <__swsetup_r+0xa8>
 800720e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007212:	d1c4      	bne.n	800719e <__swsetup_r+0x26>
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	0781      	lsls	r1, r0, #30
 8007218:	bf58      	it	pl
 800721a:	6963      	ldrpl	r3, [r4, #20]
 800721c:	60a3      	str	r3, [r4, #8]
 800721e:	e7f4      	b.n	800720a <__swsetup_r+0x92>
 8007220:	2000      	movs	r0, #0
 8007222:	e7f7      	b.n	8007214 <__swsetup_r+0x9c>
 8007224:	20000070 	.word	0x20000070

08007228 <memset>:
 8007228:	4603      	mov	r3, r0
 800722a:	4402      	add	r2, r0
 800722c:	4293      	cmp	r3, r2
 800722e:	d100      	bne.n	8007232 <memset+0xa>
 8007230:	4770      	bx	lr
 8007232:	f803 1b01 	strb.w	r1, [r3], #1
 8007236:	e7f9      	b.n	800722c <memset+0x4>

08007238 <_close_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	2300      	movs	r3, #0
 800723c:	4d05      	ldr	r5, [pc, #20]	; (8007254 <_close_r+0x1c>)
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	f7f9 fef1 	bl	800102a <_close>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_close_r+0x1a>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_close_r+0x1a>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	2000175c 	.word	0x2000175c

08007258 <_reclaim_reent>:
 8007258:	4b29      	ldr	r3, [pc, #164]	; (8007300 <_reclaim_reent+0xa8>)
 800725a:	b570      	push	{r4, r5, r6, lr}
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4604      	mov	r4, r0
 8007260:	4283      	cmp	r3, r0
 8007262:	d04b      	beq.n	80072fc <_reclaim_reent+0xa4>
 8007264:	69c3      	ldr	r3, [r0, #28]
 8007266:	b143      	cbz	r3, 800727a <_reclaim_reent+0x22>
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d144      	bne.n	80072f8 <_reclaim_reent+0xa0>
 800726e:	69e3      	ldr	r3, [r4, #28]
 8007270:	6819      	ldr	r1, [r3, #0]
 8007272:	b111      	cbz	r1, 800727a <_reclaim_reent+0x22>
 8007274:	4620      	mov	r0, r4
 8007276:	f000 f8b7 	bl	80073e8 <_free_r>
 800727a:	6961      	ldr	r1, [r4, #20]
 800727c:	b111      	cbz	r1, 8007284 <_reclaim_reent+0x2c>
 800727e:	4620      	mov	r0, r4
 8007280:	f000 f8b2 	bl	80073e8 <_free_r>
 8007284:	69e1      	ldr	r1, [r4, #28]
 8007286:	b111      	cbz	r1, 800728e <_reclaim_reent+0x36>
 8007288:	4620      	mov	r0, r4
 800728a:	f000 f8ad 	bl	80073e8 <_free_r>
 800728e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007290:	b111      	cbz	r1, 8007298 <_reclaim_reent+0x40>
 8007292:	4620      	mov	r0, r4
 8007294:	f000 f8a8 	bl	80073e8 <_free_r>
 8007298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800729a:	b111      	cbz	r1, 80072a2 <_reclaim_reent+0x4a>
 800729c:	4620      	mov	r0, r4
 800729e:	f000 f8a3 	bl	80073e8 <_free_r>
 80072a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072a4:	b111      	cbz	r1, 80072ac <_reclaim_reent+0x54>
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 f89e 	bl	80073e8 <_free_r>
 80072ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80072ae:	b111      	cbz	r1, 80072b6 <_reclaim_reent+0x5e>
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 f899 	bl	80073e8 <_free_r>
 80072b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80072b8:	b111      	cbz	r1, 80072c0 <_reclaim_reent+0x68>
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 f894 	bl	80073e8 <_free_r>
 80072c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80072c2:	b111      	cbz	r1, 80072ca <_reclaim_reent+0x72>
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 f88f 	bl	80073e8 <_free_r>
 80072ca:	6a23      	ldr	r3, [r4, #32]
 80072cc:	b1b3      	cbz	r3, 80072fc <_reclaim_reent+0xa4>
 80072ce:	4620      	mov	r0, r4
 80072d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072d4:	4718      	bx	r3
 80072d6:	5949      	ldr	r1, [r1, r5]
 80072d8:	b941      	cbnz	r1, 80072ec <_reclaim_reent+0x94>
 80072da:	3504      	adds	r5, #4
 80072dc:	69e3      	ldr	r3, [r4, #28]
 80072de:	2d80      	cmp	r5, #128	; 0x80
 80072e0:	68d9      	ldr	r1, [r3, #12]
 80072e2:	d1f8      	bne.n	80072d6 <_reclaim_reent+0x7e>
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 f87f 	bl	80073e8 <_free_r>
 80072ea:	e7c0      	b.n	800726e <_reclaim_reent+0x16>
 80072ec:	680e      	ldr	r6, [r1, #0]
 80072ee:	4620      	mov	r0, r4
 80072f0:	f000 f87a 	bl	80073e8 <_free_r>
 80072f4:	4631      	mov	r1, r6
 80072f6:	e7ef      	b.n	80072d8 <_reclaim_reent+0x80>
 80072f8:	2500      	movs	r5, #0
 80072fa:	e7ef      	b.n	80072dc <_reclaim_reent+0x84>
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	bf00      	nop
 8007300:	20000070 	.word	0x20000070

08007304 <_lseek_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4604      	mov	r4, r0
 8007308:	4608      	mov	r0, r1
 800730a:	4611      	mov	r1, r2
 800730c:	2200      	movs	r2, #0
 800730e:	4d05      	ldr	r5, [pc, #20]	; (8007324 <_lseek_r+0x20>)
 8007310:	602a      	str	r2, [r5, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	f7f9 fead 	bl	8001072 <_lseek>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d102      	bne.n	8007322 <_lseek_r+0x1e>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	b103      	cbz	r3, 8007322 <_lseek_r+0x1e>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	2000175c 	.word	0x2000175c

08007328 <_read_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4604      	mov	r4, r0
 800732c:	4608      	mov	r0, r1
 800732e:	4611      	mov	r1, r2
 8007330:	2200      	movs	r2, #0
 8007332:	4d05      	ldr	r5, [pc, #20]	; (8007348 <_read_r+0x20>)
 8007334:	602a      	str	r2, [r5, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	f7f9 fe5a 	bl	8000ff0 <_read>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_read_r+0x1e>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_read_r+0x1e>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	2000175c 	.word	0x2000175c

0800734c <_write_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4604      	mov	r4, r0
 8007350:	4608      	mov	r0, r1
 8007352:	4611      	mov	r1, r2
 8007354:	2200      	movs	r2, #0
 8007356:	4d05      	ldr	r5, [pc, #20]	; (800736c <_write_r+0x20>)
 8007358:	602a      	str	r2, [r5, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	f7f8 ff24 	bl	80001a8 <_write>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_write_r+0x1e>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_write_r+0x1e>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	2000175c 	.word	0x2000175c

08007370 <__errno>:
 8007370:	4b01      	ldr	r3, [pc, #4]	; (8007378 <__errno+0x8>)
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	20000070 	.word	0x20000070

0800737c <__libc_init_array>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	2600      	movs	r6, #0
 8007380:	4d0c      	ldr	r5, [pc, #48]	; (80073b4 <__libc_init_array+0x38>)
 8007382:	4c0d      	ldr	r4, [pc, #52]	; (80073b8 <__libc_init_array+0x3c>)
 8007384:	1b64      	subs	r4, r4, r5
 8007386:	10a4      	asrs	r4, r4, #2
 8007388:	42a6      	cmp	r6, r4
 800738a:	d109      	bne.n	80073a0 <__libc_init_array+0x24>
 800738c:	f000 feec 	bl	8008168 <_init>
 8007390:	2600      	movs	r6, #0
 8007392:	4d0a      	ldr	r5, [pc, #40]	; (80073bc <__libc_init_array+0x40>)
 8007394:	4c0a      	ldr	r4, [pc, #40]	; (80073c0 <__libc_init_array+0x44>)
 8007396:	1b64      	subs	r4, r4, r5
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	42a6      	cmp	r6, r4
 800739c:	d105      	bne.n	80073aa <__libc_init_array+0x2e>
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a4:	4798      	blx	r3
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7ee      	b.n	8007388 <__libc_init_array+0xc>
 80073aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ae:	4798      	blx	r3
 80073b0:	3601      	adds	r6, #1
 80073b2:	e7f2      	b.n	800739a <__libc_init_array+0x1e>
 80073b4:	080090b0 	.word	0x080090b0
 80073b8:	080090b0 	.word	0x080090b0
 80073bc:	080090b0 	.word	0x080090b0
 80073c0:	080090b4 	.word	0x080090b4

080073c4 <__retarget_lock_init_recursive>:
 80073c4:	4770      	bx	lr

080073c6 <__retarget_lock_acquire_recursive>:
 80073c6:	4770      	bx	lr

080073c8 <__retarget_lock_release_recursive>:
 80073c8:	4770      	bx	lr

080073ca <memcpy>:
 80073ca:	440a      	add	r2, r1
 80073cc:	4291      	cmp	r1, r2
 80073ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80073d2:	d100      	bne.n	80073d6 <memcpy+0xc>
 80073d4:	4770      	bx	lr
 80073d6:	b510      	push	{r4, lr}
 80073d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073dc:	4291      	cmp	r1, r2
 80073de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073e2:	d1f9      	bne.n	80073d8 <memcpy+0xe>
 80073e4:	bd10      	pop	{r4, pc}
	...

080073e8 <_free_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4605      	mov	r5, r0
 80073ec:	2900      	cmp	r1, #0
 80073ee:	d040      	beq.n	8007472 <_free_r+0x8a>
 80073f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f4:	1f0c      	subs	r4, r1, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	bfb8      	it	lt
 80073fa:	18e4      	addlt	r4, r4, r3
 80073fc:	f000 f8dc 	bl	80075b8 <__malloc_lock>
 8007400:	4a1c      	ldr	r2, [pc, #112]	; (8007474 <_free_r+0x8c>)
 8007402:	6813      	ldr	r3, [r2, #0]
 8007404:	b933      	cbnz	r3, 8007414 <_free_r+0x2c>
 8007406:	6063      	str	r3, [r4, #4]
 8007408:	6014      	str	r4, [r2, #0]
 800740a:	4628      	mov	r0, r5
 800740c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007410:	f000 b8d8 	b.w	80075c4 <__malloc_unlock>
 8007414:	42a3      	cmp	r3, r4
 8007416:	d908      	bls.n	800742a <_free_r+0x42>
 8007418:	6820      	ldr	r0, [r4, #0]
 800741a:	1821      	adds	r1, r4, r0
 800741c:	428b      	cmp	r3, r1
 800741e:	bf01      	itttt	eq
 8007420:	6819      	ldreq	r1, [r3, #0]
 8007422:	685b      	ldreq	r3, [r3, #4]
 8007424:	1809      	addeq	r1, r1, r0
 8007426:	6021      	streq	r1, [r4, #0]
 8007428:	e7ed      	b.n	8007406 <_free_r+0x1e>
 800742a:	461a      	mov	r2, r3
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	b10b      	cbz	r3, 8007434 <_free_r+0x4c>
 8007430:	42a3      	cmp	r3, r4
 8007432:	d9fa      	bls.n	800742a <_free_r+0x42>
 8007434:	6811      	ldr	r1, [r2, #0]
 8007436:	1850      	adds	r0, r2, r1
 8007438:	42a0      	cmp	r0, r4
 800743a:	d10b      	bne.n	8007454 <_free_r+0x6c>
 800743c:	6820      	ldr	r0, [r4, #0]
 800743e:	4401      	add	r1, r0
 8007440:	1850      	adds	r0, r2, r1
 8007442:	4283      	cmp	r3, r0
 8007444:	6011      	str	r1, [r2, #0]
 8007446:	d1e0      	bne.n	800740a <_free_r+0x22>
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	4408      	add	r0, r1
 800744e:	6010      	str	r0, [r2, #0]
 8007450:	6053      	str	r3, [r2, #4]
 8007452:	e7da      	b.n	800740a <_free_r+0x22>
 8007454:	d902      	bls.n	800745c <_free_r+0x74>
 8007456:	230c      	movs	r3, #12
 8007458:	602b      	str	r3, [r5, #0]
 800745a:	e7d6      	b.n	800740a <_free_r+0x22>
 800745c:	6820      	ldr	r0, [r4, #0]
 800745e:	1821      	adds	r1, r4, r0
 8007460:	428b      	cmp	r3, r1
 8007462:	bf01      	itttt	eq
 8007464:	6819      	ldreq	r1, [r3, #0]
 8007466:	685b      	ldreq	r3, [r3, #4]
 8007468:	1809      	addeq	r1, r1, r0
 800746a:	6021      	streq	r1, [r4, #0]
 800746c:	6063      	str	r3, [r4, #4]
 800746e:	6054      	str	r4, [r2, #4]
 8007470:	e7cb      	b.n	800740a <_free_r+0x22>
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20001764 	.word	0x20001764

08007478 <sbrk_aligned>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	4e0e      	ldr	r6, [pc, #56]	; (80074b4 <sbrk_aligned+0x3c>)
 800747c:	460c      	mov	r4, r1
 800747e:	6831      	ldr	r1, [r6, #0]
 8007480:	4605      	mov	r5, r0
 8007482:	b911      	cbnz	r1, 800748a <sbrk_aligned+0x12>
 8007484:	f000 fe1a 	bl	80080bc <_sbrk_r>
 8007488:	6030      	str	r0, [r6, #0]
 800748a:	4621      	mov	r1, r4
 800748c:	4628      	mov	r0, r5
 800748e:	f000 fe15 	bl	80080bc <_sbrk_r>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	d00a      	beq.n	80074ac <sbrk_aligned+0x34>
 8007496:	1cc4      	adds	r4, r0, #3
 8007498:	f024 0403 	bic.w	r4, r4, #3
 800749c:	42a0      	cmp	r0, r4
 800749e:	d007      	beq.n	80074b0 <sbrk_aligned+0x38>
 80074a0:	1a21      	subs	r1, r4, r0
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 fe0a 	bl	80080bc <_sbrk_r>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d101      	bne.n	80074b0 <sbrk_aligned+0x38>
 80074ac:	f04f 34ff 	mov.w	r4, #4294967295
 80074b0:	4620      	mov	r0, r4
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	20001768 	.word	0x20001768

080074b8 <_malloc_r>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	1ccd      	adds	r5, r1, #3
 80074be:	f025 0503 	bic.w	r5, r5, #3
 80074c2:	3508      	adds	r5, #8
 80074c4:	2d0c      	cmp	r5, #12
 80074c6:	bf38      	it	cc
 80074c8:	250c      	movcc	r5, #12
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	4607      	mov	r7, r0
 80074ce:	db01      	blt.n	80074d4 <_malloc_r+0x1c>
 80074d0:	42a9      	cmp	r1, r5
 80074d2:	d905      	bls.n	80074e0 <_malloc_r+0x28>
 80074d4:	230c      	movs	r3, #12
 80074d6:	2600      	movs	r6, #0
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	4630      	mov	r0, r6
 80074dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075b4 <_malloc_r+0xfc>
 80074e4:	f000 f868 	bl	80075b8 <__malloc_lock>
 80074e8:	f8d8 3000 	ldr.w	r3, [r8]
 80074ec:	461c      	mov	r4, r3
 80074ee:	bb5c      	cbnz	r4, 8007548 <_malloc_r+0x90>
 80074f0:	4629      	mov	r1, r5
 80074f2:	4638      	mov	r0, r7
 80074f4:	f7ff ffc0 	bl	8007478 <sbrk_aligned>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	4604      	mov	r4, r0
 80074fc:	d155      	bne.n	80075aa <_malloc_r+0xf2>
 80074fe:	f8d8 4000 	ldr.w	r4, [r8]
 8007502:	4626      	mov	r6, r4
 8007504:	2e00      	cmp	r6, #0
 8007506:	d145      	bne.n	8007594 <_malloc_r+0xdc>
 8007508:	2c00      	cmp	r4, #0
 800750a:	d048      	beq.n	800759e <_malloc_r+0xe6>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	4631      	mov	r1, r6
 8007510:	4638      	mov	r0, r7
 8007512:	eb04 0903 	add.w	r9, r4, r3
 8007516:	f000 fdd1 	bl	80080bc <_sbrk_r>
 800751a:	4581      	cmp	r9, r0
 800751c:	d13f      	bne.n	800759e <_malloc_r+0xe6>
 800751e:	6821      	ldr	r1, [r4, #0]
 8007520:	4638      	mov	r0, r7
 8007522:	1a6d      	subs	r5, r5, r1
 8007524:	4629      	mov	r1, r5
 8007526:	f7ff ffa7 	bl	8007478 <sbrk_aligned>
 800752a:	3001      	adds	r0, #1
 800752c:	d037      	beq.n	800759e <_malloc_r+0xe6>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	442b      	add	r3, r5
 8007532:	6023      	str	r3, [r4, #0]
 8007534:	f8d8 3000 	ldr.w	r3, [r8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d038      	beq.n	80075ae <_malloc_r+0xf6>
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	42a2      	cmp	r2, r4
 8007540:	d12b      	bne.n	800759a <_malloc_r+0xe2>
 8007542:	2200      	movs	r2, #0
 8007544:	605a      	str	r2, [r3, #4]
 8007546:	e00f      	b.n	8007568 <_malloc_r+0xb0>
 8007548:	6822      	ldr	r2, [r4, #0]
 800754a:	1b52      	subs	r2, r2, r5
 800754c:	d41f      	bmi.n	800758e <_malloc_r+0xd6>
 800754e:	2a0b      	cmp	r2, #11
 8007550:	d917      	bls.n	8007582 <_malloc_r+0xca>
 8007552:	1961      	adds	r1, r4, r5
 8007554:	42a3      	cmp	r3, r4
 8007556:	6025      	str	r5, [r4, #0]
 8007558:	bf18      	it	ne
 800755a:	6059      	strne	r1, [r3, #4]
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	bf08      	it	eq
 8007560:	f8c8 1000 	streq.w	r1, [r8]
 8007564:	5162      	str	r2, [r4, r5]
 8007566:	604b      	str	r3, [r1, #4]
 8007568:	4638      	mov	r0, r7
 800756a:	f104 060b 	add.w	r6, r4, #11
 800756e:	f000 f829 	bl	80075c4 <__malloc_unlock>
 8007572:	f026 0607 	bic.w	r6, r6, #7
 8007576:	1d23      	adds	r3, r4, #4
 8007578:	1af2      	subs	r2, r6, r3
 800757a:	d0ae      	beq.n	80074da <_malloc_r+0x22>
 800757c:	1b9b      	subs	r3, r3, r6
 800757e:	50a3      	str	r3, [r4, r2]
 8007580:	e7ab      	b.n	80074da <_malloc_r+0x22>
 8007582:	42a3      	cmp	r3, r4
 8007584:	6862      	ldr	r2, [r4, #4]
 8007586:	d1dd      	bne.n	8007544 <_malloc_r+0x8c>
 8007588:	f8c8 2000 	str.w	r2, [r8]
 800758c:	e7ec      	b.n	8007568 <_malloc_r+0xb0>
 800758e:	4623      	mov	r3, r4
 8007590:	6864      	ldr	r4, [r4, #4]
 8007592:	e7ac      	b.n	80074ee <_malloc_r+0x36>
 8007594:	4634      	mov	r4, r6
 8007596:	6876      	ldr	r6, [r6, #4]
 8007598:	e7b4      	b.n	8007504 <_malloc_r+0x4c>
 800759a:	4613      	mov	r3, r2
 800759c:	e7cc      	b.n	8007538 <_malloc_r+0x80>
 800759e:	230c      	movs	r3, #12
 80075a0:	4638      	mov	r0, r7
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	f000 f80e 	bl	80075c4 <__malloc_unlock>
 80075a8:	e797      	b.n	80074da <_malloc_r+0x22>
 80075aa:	6025      	str	r5, [r4, #0]
 80075ac:	e7dc      	b.n	8007568 <_malloc_r+0xb0>
 80075ae:	605b      	str	r3, [r3, #4]
 80075b0:	deff      	udf	#255	; 0xff
 80075b2:	bf00      	nop
 80075b4:	20001764 	.word	0x20001764

080075b8 <__malloc_lock>:
 80075b8:	4801      	ldr	r0, [pc, #4]	; (80075c0 <__malloc_lock+0x8>)
 80075ba:	f7ff bf04 	b.w	80073c6 <__retarget_lock_acquire_recursive>
 80075be:	bf00      	nop
 80075c0:	20001760 	.word	0x20001760

080075c4 <__malloc_unlock>:
 80075c4:	4801      	ldr	r0, [pc, #4]	; (80075cc <__malloc_unlock+0x8>)
 80075c6:	f7ff beff 	b.w	80073c8 <__retarget_lock_release_recursive>
 80075ca:	bf00      	nop
 80075cc:	20001760 	.word	0x20001760

080075d0 <__ssputs_r>:
 80075d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	461f      	mov	r7, r3
 80075d6:	688e      	ldr	r6, [r1, #8]
 80075d8:	4682      	mov	sl, r0
 80075da:	42be      	cmp	r6, r7
 80075dc:	460c      	mov	r4, r1
 80075de:	4690      	mov	r8, r2
 80075e0:	680b      	ldr	r3, [r1, #0]
 80075e2:	d82c      	bhi.n	800763e <__ssputs_r+0x6e>
 80075e4:	898a      	ldrh	r2, [r1, #12]
 80075e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075ea:	d026      	beq.n	800763a <__ssputs_r+0x6a>
 80075ec:	6965      	ldr	r5, [r4, #20]
 80075ee:	6909      	ldr	r1, [r1, #16]
 80075f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075f4:	eba3 0901 	sub.w	r9, r3, r1
 80075f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075fc:	1c7b      	adds	r3, r7, #1
 80075fe:	444b      	add	r3, r9
 8007600:	106d      	asrs	r5, r5, #1
 8007602:	429d      	cmp	r5, r3
 8007604:	bf38      	it	cc
 8007606:	461d      	movcc	r5, r3
 8007608:	0553      	lsls	r3, r2, #21
 800760a:	d527      	bpl.n	800765c <__ssputs_r+0x8c>
 800760c:	4629      	mov	r1, r5
 800760e:	f7ff ff53 	bl	80074b8 <_malloc_r>
 8007612:	4606      	mov	r6, r0
 8007614:	b360      	cbz	r0, 8007670 <__ssputs_r+0xa0>
 8007616:	464a      	mov	r2, r9
 8007618:	6921      	ldr	r1, [r4, #16]
 800761a:	f7ff fed6 	bl	80073ca <memcpy>
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007628:	81a3      	strh	r3, [r4, #12]
 800762a:	6126      	str	r6, [r4, #16]
 800762c:	444e      	add	r6, r9
 800762e:	6026      	str	r6, [r4, #0]
 8007630:	463e      	mov	r6, r7
 8007632:	6165      	str	r5, [r4, #20]
 8007634:	eba5 0509 	sub.w	r5, r5, r9
 8007638:	60a5      	str	r5, [r4, #8]
 800763a:	42be      	cmp	r6, r7
 800763c:	d900      	bls.n	8007640 <__ssputs_r+0x70>
 800763e:	463e      	mov	r6, r7
 8007640:	4632      	mov	r2, r6
 8007642:	4641      	mov	r1, r8
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	f000 fcfc 	bl	8008042 <memmove>
 800764a:	2000      	movs	r0, #0
 800764c:	68a3      	ldr	r3, [r4, #8]
 800764e:	1b9b      	subs	r3, r3, r6
 8007650:	60a3      	str	r3, [r4, #8]
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	4433      	add	r3, r6
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765c:	462a      	mov	r2, r5
 800765e:	f000 fd4b 	bl	80080f8 <_realloc_r>
 8007662:	4606      	mov	r6, r0
 8007664:	2800      	cmp	r0, #0
 8007666:	d1e0      	bne.n	800762a <__ssputs_r+0x5a>
 8007668:	4650      	mov	r0, sl
 800766a:	6921      	ldr	r1, [r4, #16]
 800766c:	f7ff febc 	bl	80073e8 <_free_r>
 8007670:	230c      	movs	r3, #12
 8007672:	f8ca 3000 	str.w	r3, [sl]
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	e7e9      	b.n	8007658 <__ssputs_r+0x88>

08007684 <_svfiprintf_r>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	4698      	mov	r8, r3
 800768a:	898b      	ldrh	r3, [r1, #12]
 800768c:	4607      	mov	r7, r0
 800768e:	061b      	lsls	r3, r3, #24
 8007690:	460d      	mov	r5, r1
 8007692:	4614      	mov	r4, r2
 8007694:	b09d      	sub	sp, #116	; 0x74
 8007696:	d50e      	bpl.n	80076b6 <_svfiprintf_r+0x32>
 8007698:	690b      	ldr	r3, [r1, #16]
 800769a:	b963      	cbnz	r3, 80076b6 <_svfiprintf_r+0x32>
 800769c:	2140      	movs	r1, #64	; 0x40
 800769e:	f7ff ff0b 	bl	80074b8 <_malloc_r>
 80076a2:	6028      	str	r0, [r5, #0]
 80076a4:	6128      	str	r0, [r5, #16]
 80076a6:	b920      	cbnz	r0, 80076b2 <_svfiprintf_r+0x2e>
 80076a8:	230c      	movs	r3, #12
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	e0d0      	b.n	8007854 <_svfiprintf_r+0x1d0>
 80076b2:	2340      	movs	r3, #64	; 0x40
 80076b4:	616b      	str	r3, [r5, #20]
 80076b6:	2300      	movs	r3, #0
 80076b8:	9309      	str	r3, [sp, #36]	; 0x24
 80076ba:	2320      	movs	r3, #32
 80076bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076c0:	2330      	movs	r3, #48	; 0x30
 80076c2:	f04f 0901 	mov.w	r9, #1
 80076c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800786c <_svfiprintf_r+0x1e8>
 80076ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076d2:	4623      	mov	r3, r4
 80076d4:	469a      	mov	sl, r3
 80076d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076da:	b10a      	cbz	r2, 80076e0 <_svfiprintf_r+0x5c>
 80076dc:	2a25      	cmp	r2, #37	; 0x25
 80076de:	d1f9      	bne.n	80076d4 <_svfiprintf_r+0x50>
 80076e0:	ebba 0b04 	subs.w	fp, sl, r4
 80076e4:	d00b      	beq.n	80076fe <_svfiprintf_r+0x7a>
 80076e6:	465b      	mov	r3, fp
 80076e8:	4622      	mov	r2, r4
 80076ea:	4629      	mov	r1, r5
 80076ec:	4638      	mov	r0, r7
 80076ee:	f7ff ff6f 	bl	80075d0 <__ssputs_r>
 80076f2:	3001      	adds	r0, #1
 80076f4:	f000 80a9 	beq.w	800784a <_svfiprintf_r+0x1c6>
 80076f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076fa:	445a      	add	r2, fp
 80076fc:	9209      	str	r2, [sp, #36]	; 0x24
 80076fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80a1 	beq.w	800784a <_svfiprintf_r+0x1c6>
 8007708:	2300      	movs	r3, #0
 800770a:	f04f 32ff 	mov.w	r2, #4294967295
 800770e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007712:	f10a 0a01 	add.w	sl, sl, #1
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	9307      	str	r3, [sp, #28]
 800771a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800771e:	931a      	str	r3, [sp, #104]	; 0x68
 8007720:	4654      	mov	r4, sl
 8007722:	2205      	movs	r2, #5
 8007724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007728:	4850      	ldr	r0, [pc, #320]	; (800786c <_svfiprintf_r+0x1e8>)
 800772a:	f000 fcd7 	bl	80080dc <memchr>
 800772e:	9a04      	ldr	r2, [sp, #16]
 8007730:	b9d8      	cbnz	r0, 800776a <_svfiprintf_r+0xe6>
 8007732:	06d0      	lsls	r0, r2, #27
 8007734:	bf44      	itt	mi
 8007736:	2320      	movmi	r3, #32
 8007738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800773c:	0711      	lsls	r1, r2, #28
 800773e:	bf44      	itt	mi
 8007740:	232b      	movmi	r3, #43	; 0x2b
 8007742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007746:	f89a 3000 	ldrb.w	r3, [sl]
 800774a:	2b2a      	cmp	r3, #42	; 0x2a
 800774c:	d015      	beq.n	800777a <_svfiprintf_r+0xf6>
 800774e:	4654      	mov	r4, sl
 8007750:	2000      	movs	r0, #0
 8007752:	f04f 0c0a 	mov.w	ip, #10
 8007756:	9a07      	ldr	r2, [sp, #28]
 8007758:	4621      	mov	r1, r4
 800775a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800775e:	3b30      	subs	r3, #48	; 0x30
 8007760:	2b09      	cmp	r3, #9
 8007762:	d94d      	bls.n	8007800 <_svfiprintf_r+0x17c>
 8007764:	b1b0      	cbz	r0, 8007794 <_svfiprintf_r+0x110>
 8007766:	9207      	str	r2, [sp, #28]
 8007768:	e014      	b.n	8007794 <_svfiprintf_r+0x110>
 800776a:	eba0 0308 	sub.w	r3, r0, r8
 800776e:	fa09 f303 	lsl.w	r3, r9, r3
 8007772:	4313      	orrs	r3, r2
 8007774:	46a2      	mov	sl, r4
 8007776:	9304      	str	r3, [sp, #16]
 8007778:	e7d2      	b.n	8007720 <_svfiprintf_r+0x9c>
 800777a:	9b03      	ldr	r3, [sp, #12]
 800777c:	1d19      	adds	r1, r3, #4
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	9103      	str	r1, [sp, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	bfbb      	ittet	lt
 8007786:	425b      	neglt	r3, r3
 8007788:	f042 0202 	orrlt.w	r2, r2, #2
 800778c:	9307      	strge	r3, [sp, #28]
 800778e:	9307      	strlt	r3, [sp, #28]
 8007790:	bfb8      	it	lt
 8007792:	9204      	strlt	r2, [sp, #16]
 8007794:	7823      	ldrb	r3, [r4, #0]
 8007796:	2b2e      	cmp	r3, #46	; 0x2e
 8007798:	d10c      	bne.n	80077b4 <_svfiprintf_r+0x130>
 800779a:	7863      	ldrb	r3, [r4, #1]
 800779c:	2b2a      	cmp	r3, #42	; 0x2a
 800779e:	d134      	bne.n	800780a <_svfiprintf_r+0x186>
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	3402      	adds	r4, #2
 80077a4:	1d1a      	adds	r2, r3, #4
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	9203      	str	r2, [sp, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bfb8      	it	lt
 80077ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007870 <_svfiprintf_r+0x1ec>
 80077b8:	2203      	movs	r2, #3
 80077ba:	4650      	mov	r0, sl
 80077bc:	7821      	ldrb	r1, [r4, #0]
 80077be:	f000 fc8d 	bl	80080dc <memchr>
 80077c2:	b138      	cbz	r0, 80077d4 <_svfiprintf_r+0x150>
 80077c4:	2240      	movs	r2, #64	; 0x40
 80077c6:	9b04      	ldr	r3, [sp, #16]
 80077c8:	eba0 000a 	sub.w	r0, r0, sl
 80077cc:	4082      	lsls	r2, r0
 80077ce:	4313      	orrs	r3, r2
 80077d0:	3401      	adds	r4, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d8:	2206      	movs	r2, #6
 80077da:	4826      	ldr	r0, [pc, #152]	; (8007874 <_svfiprintf_r+0x1f0>)
 80077dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077e0:	f000 fc7c 	bl	80080dc <memchr>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d038      	beq.n	800785a <_svfiprintf_r+0x1d6>
 80077e8:	4b23      	ldr	r3, [pc, #140]	; (8007878 <_svfiprintf_r+0x1f4>)
 80077ea:	bb1b      	cbnz	r3, 8007834 <_svfiprintf_r+0x1b0>
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	3307      	adds	r3, #7
 80077f0:	f023 0307 	bic.w	r3, r3, #7
 80077f4:	3308      	adds	r3, #8
 80077f6:	9303      	str	r3, [sp, #12]
 80077f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077fa:	4433      	add	r3, r6
 80077fc:	9309      	str	r3, [sp, #36]	; 0x24
 80077fe:	e768      	b.n	80076d2 <_svfiprintf_r+0x4e>
 8007800:	460c      	mov	r4, r1
 8007802:	2001      	movs	r0, #1
 8007804:	fb0c 3202 	mla	r2, ip, r2, r3
 8007808:	e7a6      	b.n	8007758 <_svfiprintf_r+0xd4>
 800780a:	2300      	movs	r3, #0
 800780c:	f04f 0c0a 	mov.w	ip, #10
 8007810:	4619      	mov	r1, r3
 8007812:	3401      	adds	r4, #1
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	4620      	mov	r0, r4
 8007818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800781c:	3a30      	subs	r2, #48	; 0x30
 800781e:	2a09      	cmp	r2, #9
 8007820:	d903      	bls.n	800782a <_svfiprintf_r+0x1a6>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0c6      	beq.n	80077b4 <_svfiprintf_r+0x130>
 8007826:	9105      	str	r1, [sp, #20]
 8007828:	e7c4      	b.n	80077b4 <_svfiprintf_r+0x130>
 800782a:	4604      	mov	r4, r0
 800782c:	2301      	movs	r3, #1
 800782e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007832:	e7f0      	b.n	8007816 <_svfiprintf_r+0x192>
 8007834:	ab03      	add	r3, sp, #12
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	462a      	mov	r2, r5
 800783a:	4638      	mov	r0, r7
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <_svfiprintf_r+0x1f8>)
 800783e:	a904      	add	r1, sp, #16
 8007840:	f3af 8000 	nop.w
 8007844:	1c42      	adds	r2, r0, #1
 8007846:	4606      	mov	r6, r0
 8007848:	d1d6      	bne.n	80077f8 <_svfiprintf_r+0x174>
 800784a:	89ab      	ldrh	r3, [r5, #12]
 800784c:	065b      	lsls	r3, r3, #25
 800784e:	f53f af2d 	bmi.w	80076ac <_svfiprintf_r+0x28>
 8007852:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007854:	b01d      	add	sp, #116	; 0x74
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785a:	ab03      	add	r3, sp, #12
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	462a      	mov	r2, r5
 8007860:	4638      	mov	r0, r7
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <_svfiprintf_r+0x1f8>)
 8007864:	a904      	add	r1, sp, #16
 8007866:	f000 f9bf 	bl	8007be8 <_printf_i>
 800786a:	e7eb      	b.n	8007844 <_svfiprintf_r+0x1c0>
 800786c:	0800907a 	.word	0x0800907a
 8007870:	08009080 	.word	0x08009080
 8007874:	08009084 	.word	0x08009084
 8007878:	00000000 	.word	0x00000000
 800787c:	080075d1 	.word	0x080075d1

08007880 <__sfputc_r>:
 8007880:	6893      	ldr	r3, [r2, #8]
 8007882:	b410      	push	{r4}
 8007884:	3b01      	subs	r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	6093      	str	r3, [r2, #8]
 800788a:	da07      	bge.n	800789c <__sfputc_r+0x1c>
 800788c:	6994      	ldr	r4, [r2, #24]
 800788e:	42a3      	cmp	r3, r4
 8007890:	db01      	blt.n	8007896 <__sfputc_r+0x16>
 8007892:	290a      	cmp	r1, #10
 8007894:	d102      	bne.n	800789c <__sfputc_r+0x1c>
 8007896:	bc10      	pop	{r4}
 8007898:	f7ff bc31 	b.w	80070fe <__swbuf_r>
 800789c:	6813      	ldr	r3, [r2, #0]
 800789e:	1c58      	adds	r0, r3, #1
 80078a0:	6010      	str	r0, [r2, #0]
 80078a2:	7019      	strb	r1, [r3, #0]
 80078a4:	4608      	mov	r0, r1
 80078a6:	bc10      	pop	{r4}
 80078a8:	4770      	bx	lr

080078aa <__sfputs_r>:
 80078aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ac:	4606      	mov	r6, r0
 80078ae:	460f      	mov	r7, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	18d5      	adds	r5, r2, r3
 80078b4:	42ac      	cmp	r4, r5
 80078b6:	d101      	bne.n	80078bc <__sfputs_r+0x12>
 80078b8:	2000      	movs	r0, #0
 80078ba:	e007      	b.n	80078cc <__sfputs_r+0x22>
 80078bc:	463a      	mov	r2, r7
 80078be:	4630      	mov	r0, r6
 80078c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c4:	f7ff ffdc 	bl	8007880 <__sfputc_r>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d1f3      	bne.n	80078b4 <__sfputs_r+0xa>
 80078cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078d0 <_vfiprintf_r>:
 80078d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	460d      	mov	r5, r1
 80078d6:	4614      	mov	r4, r2
 80078d8:	4698      	mov	r8, r3
 80078da:	4606      	mov	r6, r0
 80078dc:	b09d      	sub	sp, #116	; 0x74
 80078de:	b118      	cbz	r0, 80078e8 <_vfiprintf_r+0x18>
 80078e0:	6a03      	ldr	r3, [r0, #32]
 80078e2:	b90b      	cbnz	r3, 80078e8 <_vfiprintf_r+0x18>
 80078e4:	f7ff fb04 	bl	8006ef0 <__sinit>
 80078e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078ea:	07d9      	lsls	r1, r3, #31
 80078ec:	d405      	bmi.n	80078fa <_vfiprintf_r+0x2a>
 80078ee:	89ab      	ldrh	r3, [r5, #12]
 80078f0:	059a      	lsls	r2, r3, #22
 80078f2:	d402      	bmi.n	80078fa <_vfiprintf_r+0x2a>
 80078f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078f6:	f7ff fd66 	bl	80073c6 <__retarget_lock_acquire_recursive>
 80078fa:	89ab      	ldrh	r3, [r5, #12]
 80078fc:	071b      	lsls	r3, r3, #28
 80078fe:	d501      	bpl.n	8007904 <_vfiprintf_r+0x34>
 8007900:	692b      	ldr	r3, [r5, #16]
 8007902:	b99b      	cbnz	r3, 800792c <_vfiprintf_r+0x5c>
 8007904:	4629      	mov	r1, r5
 8007906:	4630      	mov	r0, r6
 8007908:	f7ff fc36 	bl	8007178 <__swsetup_r>
 800790c:	b170      	cbz	r0, 800792c <_vfiprintf_r+0x5c>
 800790e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007910:	07dc      	lsls	r4, r3, #31
 8007912:	d504      	bpl.n	800791e <_vfiprintf_r+0x4e>
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	b01d      	add	sp, #116	; 0x74
 800791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791e:	89ab      	ldrh	r3, [r5, #12]
 8007920:	0598      	lsls	r0, r3, #22
 8007922:	d4f7      	bmi.n	8007914 <_vfiprintf_r+0x44>
 8007924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007926:	f7ff fd4f 	bl	80073c8 <__retarget_lock_release_recursive>
 800792a:	e7f3      	b.n	8007914 <_vfiprintf_r+0x44>
 800792c:	2300      	movs	r3, #0
 800792e:	9309      	str	r3, [sp, #36]	; 0x24
 8007930:	2320      	movs	r3, #32
 8007932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007936:	2330      	movs	r3, #48	; 0x30
 8007938:	f04f 0901 	mov.w	r9, #1
 800793c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007940:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007af0 <_vfiprintf_r+0x220>
 8007944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007948:	4623      	mov	r3, r4
 800794a:	469a      	mov	sl, r3
 800794c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007950:	b10a      	cbz	r2, 8007956 <_vfiprintf_r+0x86>
 8007952:	2a25      	cmp	r2, #37	; 0x25
 8007954:	d1f9      	bne.n	800794a <_vfiprintf_r+0x7a>
 8007956:	ebba 0b04 	subs.w	fp, sl, r4
 800795a:	d00b      	beq.n	8007974 <_vfiprintf_r+0xa4>
 800795c:	465b      	mov	r3, fp
 800795e:	4622      	mov	r2, r4
 8007960:	4629      	mov	r1, r5
 8007962:	4630      	mov	r0, r6
 8007964:	f7ff ffa1 	bl	80078aa <__sfputs_r>
 8007968:	3001      	adds	r0, #1
 800796a:	f000 80a9 	beq.w	8007ac0 <_vfiprintf_r+0x1f0>
 800796e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007970:	445a      	add	r2, fp
 8007972:	9209      	str	r2, [sp, #36]	; 0x24
 8007974:	f89a 3000 	ldrb.w	r3, [sl]
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80a1 	beq.w	8007ac0 <_vfiprintf_r+0x1f0>
 800797e:	2300      	movs	r3, #0
 8007980:	f04f 32ff 	mov.w	r2, #4294967295
 8007984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007988:	f10a 0a01 	add.w	sl, sl, #1
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	9307      	str	r3, [sp, #28]
 8007990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007994:	931a      	str	r3, [sp, #104]	; 0x68
 8007996:	4654      	mov	r4, sl
 8007998:	2205      	movs	r2, #5
 800799a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800799e:	4854      	ldr	r0, [pc, #336]	; (8007af0 <_vfiprintf_r+0x220>)
 80079a0:	f000 fb9c 	bl	80080dc <memchr>
 80079a4:	9a04      	ldr	r2, [sp, #16]
 80079a6:	b9d8      	cbnz	r0, 80079e0 <_vfiprintf_r+0x110>
 80079a8:	06d1      	lsls	r1, r2, #27
 80079aa:	bf44      	itt	mi
 80079ac:	2320      	movmi	r3, #32
 80079ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b2:	0713      	lsls	r3, r2, #28
 80079b4:	bf44      	itt	mi
 80079b6:	232b      	movmi	r3, #43	; 0x2b
 80079b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079bc:	f89a 3000 	ldrb.w	r3, [sl]
 80079c0:	2b2a      	cmp	r3, #42	; 0x2a
 80079c2:	d015      	beq.n	80079f0 <_vfiprintf_r+0x120>
 80079c4:	4654      	mov	r4, sl
 80079c6:	2000      	movs	r0, #0
 80079c8:	f04f 0c0a 	mov.w	ip, #10
 80079cc:	9a07      	ldr	r2, [sp, #28]
 80079ce:	4621      	mov	r1, r4
 80079d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079d4:	3b30      	subs	r3, #48	; 0x30
 80079d6:	2b09      	cmp	r3, #9
 80079d8:	d94d      	bls.n	8007a76 <_vfiprintf_r+0x1a6>
 80079da:	b1b0      	cbz	r0, 8007a0a <_vfiprintf_r+0x13a>
 80079dc:	9207      	str	r2, [sp, #28]
 80079de:	e014      	b.n	8007a0a <_vfiprintf_r+0x13a>
 80079e0:	eba0 0308 	sub.w	r3, r0, r8
 80079e4:	fa09 f303 	lsl.w	r3, r9, r3
 80079e8:	4313      	orrs	r3, r2
 80079ea:	46a2      	mov	sl, r4
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	e7d2      	b.n	8007996 <_vfiprintf_r+0xc6>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	1d19      	adds	r1, r3, #4
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	9103      	str	r1, [sp, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bfbb      	ittet	lt
 80079fc:	425b      	neglt	r3, r3
 80079fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007a02:	9307      	strge	r3, [sp, #28]
 8007a04:	9307      	strlt	r3, [sp, #28]
 8007a06:	bfb8      	it	lt
 8007a08:	9204      	strlt	r2, [sp, #16]
 8007a0a:	7823      	ldrb	r3, [r4, #0]
 8007a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a0e:	d10c      	bne.n	8007a2a <_vfiprintf_r+0x15a>
 8007a10:	7863      	ldrb	r3, [r4, #1]
 8007a12:	2b2a      	cmp	r3, #42	; 0x2a
 8007a14:	d134      	bne.n	8007a80 <_vfiprintf_r+0x1b0>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	3402      	adds	r4, #2
 8007a1a:	1d1a      	adds	r2, r3, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	9203      	str	r2, [sp, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bfb8      	it	lt
 8007a24:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a28:	9305      	str	r3, [sp, #20]
 8007a2a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007af4 <_vfiprintf_r+0x224>
 8007a2e:	2203      	movs	r2, #3
 8007a30:	4650      	mov	r0, sl
 8007a32:	7821      	ldrb	r1, [r4, #0]
 8007a34:	f000 fb52 	bl	80080dc <memchr>
 8007a38:	b138      	cbz	r0, 8007a4a <_vfiprintf_r+0x17a>
 8007a3a:	2240      	movs	r2, #64	; 0x40
 8007a3c:	9b04      	ldr	r3, [sp, #16]
 8007a3e:	eba0 000a 	sub.w	r0, r0, sl
 8007a42:	4082      	lsls	r2, r0
 8007a44:	4313      	orrs	r3, r2
 8007a46:	3401      	adds	r4, #1
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a4e:	2206      	movs	r2, #6
 8007a50:	4829      	ldr	r0, [pc, #164]	; (8007af8 <_vfiprintf_r+0x228>)
 8007a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a56:	f000 fb41 	bl	80080dc <memchr>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d03f      	beq.n	8007ade <_vfiprintf_r+0x20e>
 8007a5e:	4b27      	ldr	r3, [pc, #156]	; (8007afc <_vfiprintf_r+0x22c>)
 8007a60:	bb1b      	cbnz	r3, 8007aaa <_vfiprintf_r+0x1da>
 8007a62:	9b03      	ldr	r3, [sp, #12]
 8007a64:	3307      	adds	r3, #7
 8007a66:	f023 0307 	bic.w	r3, r3, #7
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	9303      	str	r3, [sp, #12]
 8007a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a70:	443b      	add	r3, r7
 8007a72:	9309      	str	r3, [sp, #36]	; 0x24
 8007a74:	e768      	b.n	8007948 <_vfiprintf_r+0x78>
 8007a76:	460c      	mov	r4, r1
 8007a78:	2001      	movs	r0, #1
 8007a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a7e:	e7a6      	b.n	80079ce <_vfiprintf_r+0xfe>
 8007a80:	2300      	movs	r3, #0
 8007a82:	f04f 0c0a 	mov.w	ip, #10
 8007a86:	4619      	mov	r1, r3
 8007a88:	3401      	adds	r4, #1
 8007a8a:	9305      	str	r3, [sp, #20]
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a92:	3a30      	subs	r2, #48	; 0x30
 8007a94:	2a09      	cmp	r2, #9
 8007a96:	d903      	bls.n	8007aa0 <_vfiprintf_r+0x1d0>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0c6      	beq.n	8007a2a <_vfiprintf_r+0x15a>
 8007a9c:	9105      	str	r1, [sp, #20]
 8007a9e:	e7c4      	b.n	8007a2a <_vfiprintf_r+0x15a>
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aa8:	e7f0      	b.n	8007a8c <_vfiprintf_r+0x1bc>
 8007aaa:	ab03      	add	r3, sp, #12
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	462a      	mov	r2, r5
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	4b13      	ldr	r3, [pc, #76]	; (8007b00 <_vfiprintf_r+0x230>)
 8007ab4:	a904      	add	r1, sp, #16
 8007ab6:	f3af 8000 	nop.w
 8007aba:	4607      	mov	r7, r0
 8007abc:	1c78      	adds	r0, r7, #1
 8007abe:	d1d6      	bne.n	8007a6e <_vfiprintf_r+0x19e>
 8007ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ac2:	07d9      	lsls	r1, r3, #31
 8007ac4:	d405      	bmi.n	8007ad2 <_vfiprintf_r+0x202>
 8007ac6:	89ab      	ldrh	r3, [r5, #12]
 8007ac8:	059a      	lsls	r2, r3, #22
 8007aca:	d402      	bmi.n	8007ad2 <_vfiprintf_r+0x202>
 8007acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ace:	f7ff fc7b 	bl	80073c8 <__retarget_lock_release_recursive>
 8007ad2:	89ab      	ldrh	r3, [r5, #12]
 8007ad4:	065b      	lsls	r3, r3, #25
 8007ad6:	f53f af1d 	bmi.w	8007914 <_vfiprintf_r+0x44>
 8007ada:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007adc:	e71c      	b.n	8007918 <_vfiprintf_r+0x48>
 8007ade:	ab03      	add	r3, sp, #12
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <_vfiprintf_r+0x230>)
 8007ae8:	a904      	add	r1, sp, #16
 8007aea:	f000 f87d 	bl	8007be8 <_printf_i>
 8007aee:	e7e4      	b.n	8007aba <_vfiprintf_r+0x1ea>
 8007af0:	0800907a 	.word	0x0800907a
 8007af4:	08009080 	.word	0x08009080
 8007af8:	08009084 	.word	0x08009084
 8007afc:	00000000 	.word	0x00000000
 8007b00:	080078ab 	.word	0x080078ab

08007b04 <_printf_common>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	4616      	mov	r6, r2
 8007b0a:	4699      	mov	r9, r3
 8007b0c:	688a      	ldr	r2, [r1, #8]
 8007b0e:	690b      	ldr	r3, [r1, #16]
 8007b10:	4607      	mov	r7, r0
 8007b12:	4293      	cmp	r3, r2
 8007b14:	bfb8      	it	lt
 8007b16:	4613      	movlt	r3, r2
 8007b18:	6033      	str	r3, [r6, #0]
 8007b1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b1e:	460c      	mov	r4, r1
 8007b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b24:	b10a      	cbz	r2, 8007b2a <_printf_common+0x26>
 8007b26:	3301      	adds	r3, #1
 8007b28:	6033      	str	r3, [r6, #0]
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	0699      	lsls	r1, r3, #26
 8007b2e:	bf42      	ittt	mi
 8007b30:	6833      	ldrmi	r3, [r6, #0]
 8007b32:	3302      	addmi	r3, #2
 8007b34:	6033      	strmi	r3, [r6, #0]
 8007b36:	6825      	ldr	r5, [r4, #0]
 8007b38:	f015 0506 	ands.w	r5, r5, #6
 8007b3c:	d106      	bne.n	8007b4c <_printf_common+0x48>
 8007b3e:	f104 0a19 	add.w	sl, r4, #25
 8007b42:	68e3      	ldr	r3, [r4, #12]
 8007b44:	6832      	ldr	r2, [r6, #0]
 8007b46:	1a9b      	subs	r3, r3, r2
 8007b48:	42ab      	cmp	r3, r5
 8007b4a:	dc2b      	bgt.n	8007ba4 <_printf_common+0xa0>
 8007b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b50:	1e13      	subs	r3, r2, #0
 8007b52:	6822      	ldr	r2, [r4, #0]
 8007b54:	bf18      	it	ne
 8007b56:	2301      	movne	r3, #1
 8007b58:	0692      	lsls	r2, r2, #26
 8007b5a:	d430      	bmi.n	8007bbe <_printf_common+0xba>
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b64:	47c0      	blx	r8
 8007b66:	3001      	adds	r0, #1
 8007b68:	d023      	beq.n	8007bb2 <_printf_common+0xae>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	6922      	ldr	r2, [r4, #16]
 8007b6e:	f003 0306 	and.w	r3, r3, #6
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	bf14      	ite	ne
 8007b76:	2500      	movne	r5, #0
 8007b78:	6833      	ldreq	r3, [r6, #0]
 8007b7a:	f04f 0600 	mov.w	r6, #0
 8007b7e:	bf08      	it	eq
 8007b80:	68e5      	ldreq	r5, [r4, #12]
 8007b82:	f104 041a 	add.w	r4, r4, #26
 8007b86:	bf08      	it	eq
 8007b88:	1aed      	subeq	r5, r5, r3
 8007b8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b8e:	bf08      	it	eq
 8007b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bfc4      	itt	gt
 8007b98:	1a9b      	subgt	r3, r3, r2
 8007b9a:	18ed      	addgt	r5, r5, r3
 8007b9c:	42b5      	cmp	r5, r6
 8007b9e:	d11a      	bne.n	8007bd6 <_printf_common+0xd2>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	e008      	b.n	8007bb6 <_printf_common+0xb2>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	4649      	mov	r1, r9
 8007baa:	4638      	mov	r0, r7
 8007bac:	47c0      	blx	r8
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d103      	bne.n	8007bba <_printf_common+0xb6>
 8007bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bba:	3501      	adds	r5, #1
 8007bbc:	e7c1      	b.n	8007b42 <_printf_common+0x3e>
 8007bbe:	2030      	movs	r0, #48	; 0x30
 8007bc0:	18e1      	adds	r1, r4, r3
 8007bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bcc:	4422      	add	r2, r4
 8007bce:	3302      	adds	r3, #2
 8007bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bd4:	e7c2      	b.n	8007b5c <_printf_common+0x58>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4622      	mov	r2, r4
 8007bda:	4649      	mov	r1, r9
 8007bdc:	4638      	mov	r0, r7
 8007bde:	47c0      	blx	r8
 8007be0:	3001      	adds	r0, #1
 8007be2:	d0e6      	beq.n	8007bb2 <_printf_common+0xae>
 8007be4:	3601      	adds	r6, #1
 8007be6:	e7d9      	b.n	8007b9c <_printf_common+0x98>

08007be8 <_printf_i>:
 8007be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	7e0f      	ldrb	r7, [r1, #24]
 8007bee:	4691      	mov	r9, r2
 8007bf0:	2f78      	cmp	r7, #120	; 0x78
 8007bf2:	4680      	mov	r8, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	469a      	mov	sl, r3
 8007bf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bfe:	d807      	bhi.n	8007c10 <_printf_i+0x28>
 8007c00:	2f62      	cmp	r7, #98	; 0x62
 8007c02:	d80a      	bhi.n	8007c1a <_printf_i+0x32>
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	f000 80d5 	beq.w	8007db4 <_printf_i+0x1cc>
 8007c0a:	2f58      	cmp	r7, #88	; 0x58
 8007c0c:	f000 80c1 	beq.w	8007d92 <_printf_i+0x1aa>
 8007c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c18:	e03a      	b.n	8007c90 <_printf_i+0xa8>
 8007c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c1e:	2b15      	cmp	r3, #21
 8007c20:	d8f6      	bhi.n	8007c10 <_printf_i+0x28>
 8007c22:	a101      	add	r1, pc, #4	; (adr r1, 8007c28 <_printf_i+0x40>)
 8007c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c28:	08007c81 	.word	0x08007c81
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007c11 	.word	0x08007c11
 8007c34:	08007c11 	.word	0x08007c11
 8007c38:	08007c11 	.word	0x08007c11
 8007c3c:	08007c11 	.word	0x08007c11
 8007c40:	08007c95 	.word	0x08007c95
 8007c44:	08007c11 	.word	0x08007c11
 8007c48:	08007c11 	.word	0x08007c11
 8007c4c:	08007c11 	.word	0x08007c11
 8007c50:	08007c11 	.word	0x08007c11
 8007c54:	08007d9b 	.word	0x08007d9b
 8007c58:	08007cc1 	.word	0x08007cc1
 8007c5c:	08007d55 	.word	0x08007d55
 8007c60:	08007c11 	.word	0x08007c11
 8007c64:	08007c11 	.word	0x08007c11
 8007c68:	08007dbd 	.word	0x08007dbd
 8007c6c:	08007c11 	.word	0x08007c11
 8007c70:	08007cc1 	.word	0x08007cc1
 8007c74:	08007c11 	.word	0x08007c11
 8007c78:	08007c11 	.word	0x08007c11
 8007c7c:	08007d5d 	.word	0x08007d5d
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	1d1a      	adds	r2, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	602a      	str	r2, [r5, #0]
 8007c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0a0      	b.n	8007dd6 <_printf_i+0x1ee>
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	0607      	lsls	r7, r0, #24
 8007c9a:	f103 0104 	add.w	r1, r3, #4
 8007c9e:	6029      	str	r1, [r5, #0]
 8007ca0:	d501      	bpl.n	8007ca6 <_printf_i+0xbe>
 8007ca2:	681e      	ldr	r6, [r3, #0]
 8007ca4:	e003      	b.n	8007cae <_printf_i+0xc6>
 8007ca6:	0646      	lsls	r6, r0, #25
 8007ca8:	d5fb      	bpl.n	8007ca2 <_printf_i+0xba>
 8007caa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	da03      	bge.n	8007cba <_printf_i+0xd2>
 8007cb2:	232d      	movs	r3, #45	; 0x2d
 8007cb4:	4276      	negs	r6, r6
 8007cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cba:	230a      	movs	r3, #10
 8007cbc:	4859      	ldr	r0, [pc, #356]	; (8007e24 <_printf_i+0x23c>)
 8007cbe:	e012      	b.n	8007ce6 <_printf_i+0xfe>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	6820      	ldr	r0, [r4, #0]
 8007cc4:	1d19      	adds	r1, r3, #4
 8007cc6:	6029      	str	r1, [r5, #0]
 8007cc8:	0605      	lsls	r5, r0, #24
 8007cca:	d501      	bpl.n	8007cd0 <_printf_i+0xe8>
 8007ccc:	681e      	ldr	r6, [r3, #0]
 8007cce:	e002      	b.n	8007cd6 <_printf_i+0xee>
 8007cd0:	0641      	lsls	r1, r0, #25
 8007cd2:	d5fb      	bpl.n	8007ccc <_printf_i+0xe4>
 8007cd4:	881e      	ldrh	r6, [r3, #0]
 8007cd6:	2f6f      	cmp	r7, #111	; 0x6f
 8007cd8:	bf0c      	ite	eq
 8007cda:	2308      	moveq	r3, #8
 8007cdc:	230a      	movne	r3, #10
 8007cde:	4851      	ldr	r0, [pc, #324]	; (8007e24 <_printf_i+0x23c>)
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ce6:	6865      	ldr	r5, [r4, #4]
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	bfa8      	it	ge
 8007cec:	6821      	ldrge	r1, [r4, #0]
 8007cee:	60a5      	str	r5, [r4, #8]
 8007cf0:	bfa4      	itt	ge
 8007cf2:	f021 0104 	bicge.w	r1, r1, #4
 8007cf6:	6021      	strge	r1, [r4, #0]
 8007cf8:	b90e      	cbnz	r6, 8007cfe <_printf_i+0x116>
 8007cfa:	2d00      	cmp	r5, #0
 8007cfc:	d04b      	beq.n	8007d96 <_printf_i+0x1ae>
 8007cfe:	4615      	mov	r5, r2
 8007d00:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d04:	fb03 6711 	mls	r7, r3, r1, r6
 8007d08:	5dc7      	ldrb	r7, [r0, r7]
 8007d0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d0e:	4637      	mov	r7, r6
 8007d10:	42bb      	cmp	r3, r7
 8007d12:	460e      	mov	r6, r1
 8007d14:	d9f4      	bls.n	8007d00 <_printf_i+0x118>
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d10b      	bne.n	8007d32 <_printf_i+0x14a>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	07de      	lsls	r6, r3, #31
 8007d1e:	d508      	bpl.n	8007d32 <_printf_i+0x14a>
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	6861      	ldr	r1, [r4, #4]
 8007d24:	4299      	cmp	r1, r3
 8007d26:	bfde      	ittt	le
 8007d28:	2330      	movle	r3, #48	; 0x30
 8007d2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d32:	1b52      	subs	r2, r2, r5
 8007d34:	6122      	str	r2, [r4, #16]
 8007d36:	464b      	mov	r3, r9
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	f8cd a000 	str.w	sl, [sp]
 8007d40:	aa03      	add	r2, sp, #12
 8007d42:	f7ff fedf 	bl	8007b04 <_printf_common>
 8007d46:	3001      	adds	r0, #1
 8007d48:	d14a      	bne.n	8007de0 <_printf_i+0x1f8>
 8007d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4e:	b004      	add	sp, #16
 8007d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	f043 0320 	orr.w	r3, r3, #32
 8007d5a:	6023      	str	r3, [r4, #0]
 8007d5c:	2778      	movs	r7, #120	; 0x78
 8007d5e:	4832      	ldr	r0, [pc, #200]	; (8007e28 <_printf_i+0x240>)
 8007d60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	6829      	ldr	r1, [r5, #0]
 8007d68:	061f      	lsls	r7, r3, #24
 8007d6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d6e:	d402      	bmi.n	8007d76 <_printf_i+0x18e>
 8007d70:	065f      	lsls	r7, r3, #25
 8007d72:	bf48      	it	mi
 8007d74:	b2b6      	uxthmi	r6, r6
 8007d76:	07df      	lsls	r7, r3, #31
 8007d78:	bf48      	it	mi
 8007d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d7e:	6029      	str	r1, [r5, #0]
 8007d80:	bf48      	it	mi
 8007d82:	6023      	strmi	r3, [r4, #0]
 8007d84:	b91e      	cbnz	r6, 8007d8e <_printf_i+0x1a6>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	f023 0320 	bic.w	r3, r3, #32
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	2310      	movs	r3, #16
 8007d90:	e7a6      	b.n	8007ce0 <_printf_i+0xf8>
 8007d92:	4824      	ldr	r0, [pc, #144]	; (8007e24 <_printf_i+0x23c>)
 8007d94:	e7e4      	b.n	8007d60 <_printf_i+0x178>
 8007d96:	4615      	mov	r5, r2
 8007d98:	e7bd      	b.n	8007d16 <_printf_i+0x12e>
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	6826      	ldr	r6, [r4, #0]
 8007d9e:	1d18      	adds	r0, r3, #4
 8007da0:	6961      	ldr	r1, [r4, #20]
 8007da2:	6028      	str	r0, [r5, #0]
 8007da4:	0635      	lsls	r5, r6, #24
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	d501      	bpl.n	8007dae <_printf_i+0x1c6>
 8007daa:	6019      	str	r1, [r3, #0]
 8007dac:	e002      	b.n	8007db4 <_printf_i+0x1cc>
 8007dae:	0670      	lsls	r0, r6, #25
 8007db0:	d5fb      	bpl.n	8007daa <_printf_i+0x1c2>
 8007db2:	8019      	strh	r1, [r3, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	4615      	mov	r5, r2
 8007db8:	6123      	str	r3, [r4, #16]
 8007dba:	e7bc      	b.n	8007d36 <_printf_i+0x14e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	1d1a      	adds	r2, r3, #4
 8007dc2:	602a      	str	r2, [r5, #0]
 8007dc4:	681d      	ldr	r5, [r3, #0]
 8007dc6:	6862      	ldr	r2, [r4, #4]
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f000 f987 	bl	80080dc <memchr>
 8007dce:	b108      	cbz	r0, 8007dd4 <_printf_i+0x1ec>
 8007dd0:	1b40      	subs	r0, r0, r5
 8007dd2:	6060      	str	r0, [r4, #4]
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dde:	e7aa      	b.n	8007d36 <_printf_i+0x14e>
 8007de0:	462a      	mov	r2, r5
 8007de2:	4649      	mov	r1, r9
 8007de4:	4640      	mov	r0, r8
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	47d0      	blx	sl
 8007dea:	3001      	adds	r0, #1
 8007dec:	d0ad      	beq.n	8007d4a <_printf_i+0x162>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	079b      	lsls	r3, r3, #30
 8007df2:	d413      	bmi.n	8007e1c <_printf_i+0x234>
 8007df4:	68e0      	ldr	r0, [r4, #12]
 8007df6:	9b03      	ldr	r3, [sp, #12]
 8007df8:	4298      	cmp	r0, r3
 8007dfa:	bfb8      	it	lt
 8007dfc:	4618      	movlt	r0, r3
 8007dfe:	e7a6      	b.n	8007d4e <_printf_i+0x166>
 8007e00:	2301      	movs	r3, #1
 8007e02:	4632      	mov	r2, r6
 8007e04:	4649      	mov	r1, r9
 8007e06:	4640      	mov	r0, r8
 8007e08:	47d0      	blx	sl
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d09d      	beq.n	8007d4a <_printf_i+0x162>
 8007e0e:	3501      	adds	r5, #1
 8007e10:	68e3      	ldr	r3, [r4, #12]
 8007e12:	9903      	ldr	r1, [sp, #12]
 8007e14:	1a5b      	subs	r3, r3, r1
 8007e16:	42ab      	cmp	r3, r5
 8007e18:	dcf2      	bgt.n	8007e00 <_printf_i+0x218>
 8007e1a:	e7eb      	b.n	8007df4 <_printf_i+0x20c>
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	f104 0619 	add.w	r6, r4, #25
 8007e22:	e7f5      	b.n	8007e10 <_printf_i+0x228>
 8007e24:	0800908b 	.word	0x0800908b
 8007e28:	0800909c 	.word	0x0800909c

08007e2c <__sflush_r>:
 8007e2c:	898a      	ldrh	r2, [r1, #12]
 8007e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e30:	4605      	mov	r5, r0
 8007e32:	0710      	lsls	r0, r2, #28
 8007e34:	460c      	mov	r4, r1
 8007e36:	d457      	bmi.n	8007ee8 <__sflush_r+0xbc>
 8007e38:	684b      	ldr	r3, [r1, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dc04      	bgt.n	8007e48 <__sflush_r+0x1c>
 8007e3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dc01      	bgt.n	8007e48 <__sflush_r+0x1c>
 8007e44:	2000      	movs	r0, #0
 8007e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	d0fa      	beq.n	8007e44 <__sflush_r+0x18>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e54:	682f      	ldr	r7, [r5, #0]
 8007e56:	6a21      	ldr	r1, [r4, #32]
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	d032      	beq.n	8007ec2 <__sflush_r+0x96>
 8007e5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	075a      	lsls	r2, r3, #29
 8007e62:	d505      	bpl.n	8007e70 <__sflush_r+0x44>
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	1ac0      	subs	r0, r0, r3
 8007e68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e6a:	b10b      	cbz	r3, 8007e70 <__sflush_r+0x44>
 8007e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e6e:	1ac0      	subs	r0, r0, r3
 8007e70:	2300      	movs	r3, #0
 8007e72:	4602      	mov	r2, r0
 8007e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e76:	4628      	mov	r0, r5
 8007e78:	6a21      	ldr	r1, [r4, #32]
 8007e7a:	47b0      	blx	r6
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	d106      	bne.n	8007e90 <__sflush_r+0x64>
 8007e82:	6829      	ldr	r1, [r5, #0]
 8007e84:	291d      	cmp	r1, #29
 8007e86:	d82b      	bhi.n	8007ee0 <__sflush_r+0xb4>
 8007e88:	4a28      	ldr	r2, [pc, #160]	; (8007f2c <__sflush_r+0x100>)
 8007e8a:	410a      	asrs	r2, r1
 8007e8c:	07d6      	lsls	r6, r2, #31
 8007e8e:	d427      	bmi.n	8007ee0 <__sflush_r+0xb4>
 8007e90:	2200      	movs	r2, #0
 8007e92:	6062      	str	r2, [r4, #4]
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	04d9      	lsls	r1, r3, #19
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	d504      	bpl.n	8007ea6 <__sflush_r+0x7a>
 8007e9c:	1c42      	adds	r2, r0, #1
 8007e9e:	d101      	bne.n	8007ea4 <__sflush_r+0x78>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b903      	cbnz	r3, 8007ea6 <__sflush_r+0x7a>
 8007ea4:	6560      	str	r0, [r4, #84]	; 0x54
 8007ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea8:	602f      	str	r7, [r5, #0]
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	d0ca      	beq.n	8007e44 <__sflush_r+0x18>
 8007eae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	d002      	beq.n	8007ebc <__sflush_r+0x90>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7ff fa96 	bl	80073e8 <_free_r>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec0:	e7c1      	b.n	8007e46 <__sflush_r+0x1a>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b0      	blx	r6
 8007ec8:	1c41      	adds	r1, r0, #1
 8007eca:	d1c8      	bne.n	8007e5e <__sflush_r+0x32>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0c5      	beq.n	8007e5e <__sflush_r+0x32>
 8007ed2:	2b1d      	cmp	r3, #29
 8007ed4:	d001      	beq.n	8007eda <__sflush_r+0xae>
 8007ed6:	2b16      	cmp	r3, #22
 8007ed8:	d101      	bne.n	8007ede <__sflush_r+0xb2>
 8007eda:	602f      	str	r7, [r5, #0]
 8007edc:	e7b2      	b.n	8007e44 <__sflush_r+0x18>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	e7ae      	b.n	8007e46 <__sflush_r+0x1a>
 8007ee8:	690f      	ldr	r7, [r1, #16]
 8007eea:	2f00      	cmp	r7, #0
 8007eec:	d0aa      	beq.n	8007e44 <__sflush_r+0x18>
 8007eee:	0793      	lsls	r3, r2, #30
 8007ef0:	bf18      	it	ne
 8007ef2:	2300      	movne	r3, #0
 8007ef4:	680e      	ldr	r6, [r1, #0]
 8007ef6:	bf08      	it	eq
 8007ef8:	694b      	ldreq	r3, [r1, #20]
 8007efa:	1bf6      	subs	r6, r6, r7
 8007efc:	600f      	str	r7, [r1, #0]
 8007efe:	608b      	str	r3, [r1, #8]
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	dd9f      	ble.n	8007e44 <__sflush_r+0x18>
 8007f04:	4633      	mov	r3, r6
 8007f06:	463a      	mov	r2, r7
 8007f08:	4628      	mov	r0, r5
 8007f0a:	6a21      	ldr	r1, [r4, #32]
 8007f0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007f10:	47e0      	blx	ip
 8007f12:	2800      	cmp	r0, #0
 8007f14:	dc06      	bgt.n	8007f24 <__sflush_r+0xf8>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	e790      	b.n	8007e46 <__sflush_r+0x1a>
 8007f24:	4407      	add	r7, r0
 8007f26:	1a36      	subs	r6, r6, r0
 8007f28:	e7ea      	b.n	8007f00 <__sflush_r+0xd4>
 8007f2a:	bf00      	nop
 8007f2c:	dfbffffe 	.word	0xdfbffffe

08007f30 <_fflush_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	690b      	ldr	r3, [r1, #16]
 8007f34:	4605      	mov	r5, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	b913      	cbnz	r3, 8007f40 <_fflush_r+0x10>
 8007f3a:	2500      	movs	r5, #0
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	b118      	cbz	r0, 8007f4a <_fflush_r+0x1a>
 8007f42:	6a03      	ldr	r3, [r0, #32]
 8007f44:	b90b      	cbnz	r3, 8007f4a <_fflush_r+0x1a>
 8007f46:	f7fe ffd3 	bl	8006ef0 <__sinit>
 8007f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f3      	beq.n	8007f3a <_fflush_r+0xa>
 8007f52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f54:	07d0      	lsls	r0, r2, #31
 8007f56:	d404      	bmi.n	8007f62 <_fflush_r+0x32>
 8007f58:	0599      	lsls	r1, r3, #22
 8007f5a:	d402      	bmi.n	8007f62 <_fflush_r+0x32>
 8007f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f5e:	f7ff fa32 	bl	80073c6 <__retarget_lock_acquire_recursive>
 8007f62:	4628      	mov	r0, r5
 8007f64:	4621      	mov	r1, r4
 8007f66:	f7ff ff61 	bl	8007e2c <__sflush_r>
 8007f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	07da      	lsls	r2, r3, #31
 8007f70:	d4e4      	bmi.n	8007f3c <_fflush_r+0xc>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	059b      	lsls	r3, r3, #22
 8007f76:	d4e1      	bmi.n	8007f3c <_fflush_r+0xc>
 8007f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7a:	f7ff fa25 	bl	80073c8 <__retarget_lock_release_recursive>
 8007f7e:	e7dd      	b.n	8007f3c <_fflush_r+0xc>

08007f80 <__swhatbuf_r>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	460c      	mov	r4, r1
 8007f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f88:	4615      	mov	r5, r2
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	461e      	mov	r6, r3
 8007f8e:	b096      	sub	sp, #88	; 0x58
 8007f90:	da0c      	bge.n	8007fac <__swhatbuf_r+0x2c>
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	2100      	movs	r1, #0
 8007f96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f9a:	bf0c      	ite	eq
 8007f9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007fa0:	2340      	movne	r3, #64	; 0x40
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	6031      	str	r1, [r6, #0]
 8007fa6:	602b      	str	r3, [r5, #0]
 8007fa8:	b016      	add	sp, #88	; 0x58
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	466a      	mov	r2, sp
 8007fae:	f000 f863 	bl	8008078 <_fstat_r>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	dbed      	blt.n	8007f92 <__swhatbuf_r+0x12>
 8007fb6:	9901      	ldr	r1, [sp, #4]
 8007fb8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fbc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fc0:	4259      	negs	r1, r3
 8007fc2:	4159      	adcs	r1, r3
 8007fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc8:	e7eb      	b.n	8007fa2 <__swhatbuf_r+0x22>

08007fca <__smakebuf_r>:
 8007fca:	898b      	ldrh	r3, [r1, #12]
 8007fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fce:	079d      	lsls	r5, r3, #30
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	d507      	bpl.n	8007fe6 <__smakebuf_r+0x1c>
 8007fd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fda:	6023      	str	r3, [r4, #0]
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	6163      	str	r3, [r4, #20]
 8007fe2:	b002      	add	sp, #8
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
 8007fe6:	466a      	mov	r2, sp
 8007fe8:	ab01      	add	r3, sp, #4
 8007fea:	f7ff ffc9 	bl	8007f80 <__swhatbuf_r>
 8007fee:	9900      	ldr	r1, [sp, #0]
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff fa60 	bl	80074b8 <_malloc_r>
 8007ff8:	b948      	cbnz	r0, 800800e <__smakebuf_r+0x44>
 8007ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffe:	059a      	lsls	r2, r3, #22
 8008000:	d4ef      	bmi.n	8007fe2 <__smakebuf_r+0x18>
 8008002:	f023 0303 	bic.w	r3, r3, #3
 8008006:	f043 0302 	orr.w	r3, r3, #2
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	e7e3      	b.n	8007fd6 <__smakebuf_r+0xc>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	6020      	str	r0, [r4, #0]
 8008012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	9b00      	ldr	r3, [sp, #0]
 800801a:	6120      	str	r0, [r4, #16]
 800801c:	6163      	str	r3, [r4, #20]
 800801e:	9b01      	ldr	r3, [sp, #4]
 8008020:	b15b      	cbz	r3, 800803a <__smakebuf_r+0x70>
 8008022:	4630      	mov	r0, r6
 8008024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008028:	f000 f838 	bl	800809c <_isatty_r>
 800802c:	b128      	cbz	r0, 800803a <__smakebuf_r+0x70>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f023 0303 	bic.w	r3, r3, #3
 8008034:	f043 0301 	orr.w	r3, r3, #1
 8008038:	81a3      	strh	r3, [r4, #12]
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	431d      	orrs	r5, r3
 800803e:	81a5      	strh	r5, [r4, #12]
 8008040:	e7cf      	b.n	8007fe2 <__smakebuf_r+0x18>

08008042 <memmove>:
 8008042:	4288      	cmp	r0, r1
 8008044:	b510      	push	{r4, lr}
 8008046:	eb01 0402 	add.w	r4, r1, r2
 800804a:	d902      	bls.n	8008052 <memmove+0x10>
 800804c:	4284      	cmp	r4, r0
 800804e:	4623      	mov	r3, r4
 8008050:	d807      	bhi.n	8008062 <memmove+0x20>
 8008052:	1e43      	subs	r3, r0, #1
 8008054:	42a1      	cmp	r1, r4
 8008056:	d008      	beq.n	800806a <memmove+0x28>
 8008058:	f811 2b01 	ldrb.w	r2, [r1], #1
 800805c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008060:	e7f8      	b.n	8008054 <memmove+0x12>
 8008062:	4601      	mov	r1, r0
 8008064:	4402      	add	r2, r0
 8008066:	428a      	cmp	r2, r1
 8008068:	d100      	bne.n	800806c <memmove+0x2a>
 800806a:	bd10      	pop	{r4, pc}
 800806c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008070:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008074:	e7f7      	b.n	8008066 <memmove+0x24>
	...

08008078 <_fstat_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	2300      	movs	r3, #0
 800807c:	4d06      	ldr	r5, [pc, #24]	; (8008098 <_fstat_r+0x20>)
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	4611      	mov	r1, r2
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	f7f8 ffdb 	bl	8001040 <_fstat>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	d102      	bne.n	8008094 <_fstat_r+0x1c>
 800808e:	682b      	ldr	r3, [r5, #0]
 8008090:	b103      	cbz	r3, 8008094 <_fstat_r+0x1c>
 8008092:	6023      	str	r3, [r4, #0]
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	bf00      	nop
 8008098:	2000175c 	.word	0x2000175c

0800809c <_isatty_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	2300      	movs	r3, #0
 80080a0:	4d05      	ldr	r5, [pc, #20]	; (80080b8 <_isatty_r+0x1c>)
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	f7f8 ffd9 	bl	800105e <_isatty>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_isatty_r+0x1a>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_isatty_r+0x1a>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	2000175c 	.word	0x2000175c

080080bc <_sbrk_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	2300      	movs	r3, #0
 80080c0:	4d05      	ldr	r5, [pc, #20]	; (80080d8 <_sbrk_r+0x1c>)
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7f8 ffe0 	bl	800108c <_sbrk>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_sbrk_r+0x1a>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_sbrk_r+0x1a>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	2000175c 	.word	0x2000175c

080080dc <memchr>:
 80080dc:	4603      	mov	r3, r0
 80080de:	b510      	push	{r4, lr}
 80080e0:	b2c9      	uxtb	r1, r1
 80080e2:	4402      	add	r2, r0
 80080e4:	4293      	cmp	r3, r2
 80080e6:	4618      	mov	r0, r3
 80080e8:	d101      	bne.n	80080ee <memchr+0x12>
 80080ea:	2000      	movs	r0, #0
 80080ec:	e003      	b.n	80080f6 <memchr+0x1a>
 80080ee:	7804      	ldrb	r4, [r0, #0]
 80080f0:	3301      	adds	r3, #1
 80080f2:	428c      	cmp	r4, r1
 80080f4:	d1f6      	bne.n	80080e4 <memchr+0x8>
 80080f6:	bd10      	pop	{r4, pc}

080080f8 <_realloc_r>:
 80080f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fc:	4680      	mov	r8, r0
 80080fe:	4614      	mov	r4, r2
 8008100:	460e      	mov	r6, r1
 8008102:	b921      	cbnz	r1, 800810e <_realloc_r+0x16>
 8008104:	4611      	mov	r1, r2
 8008106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	f7ff b9d5 	b.w	80074b8 <_malloc_r>
 800810e:	b92a      	cbnz	r2, 800811c <_realloc_r+0x24>
 8008110:	f7ff f96a 	bl	80073e8 <_free_r>
 8008114:	4625      	mov	r5, r4
 8008116:	4628      	mov	r0, r5
 8008118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800811c:	f000 f81b 	bl	8008156 <_malloc_usable_size_r>
 8008120:	4284      	cmp	r4, r0
 8008122:	4607      	mov	r7, r0
 8008124:	d802      	bhi.n	800812c <_realloc_r+0x34>
 8008126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800812a:	d812      	bhi.n	8008152 <_realloc_r+0x5a>
 800812c:	4621      	mov	r1, r4
 800812e:	4640      	mov	r0, r8
 8008130:	f7ff f9c2 	bl	80074b8 <_malloc_r>
 8008134:	4605      	mov	r5, r0
 8008136:	2800      	cmp	r0, #0
 8008138:	d0ed      	beq.n	8008116 <_realloc_r+0x1e>
 800813a:	42bc      	cmp	r4, r7
 800813c:	4622      	mov	r2, r4
 800813e:	4631      	mov	r1, r6
 8008140:	bf28      	it	cs
 8008142:	463a      	movcs	r2, r7
 8008144:	f7ff f941 	bl	80073ca <memcpy>
 8008148:	4631      	mov	r1, r6
 800814a:	4640      	mov	r0, r8
 800814c:	f7ff f94c 	bl	80073e8 <_free_r>
 8008150:	e7e1      	b.n	8008116 <_realloc_r+0x1e>
 8008152:	4635      	mov	r5, r6
 8008154:	e7df      	b.n	8008116 <_realloc_r+0x1e>

08008156 <_malloc_usable_size_r>:
 8008156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800815a:	1f18      	subs	r0, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	bfbc      	itt	lt
 8008160:	580b      	ldrlt	r3, [r1, r0]
 8008162:	18c0      	addlt	r0, r0, r3
 8008164:	4770      	bx	lr
	...

08008168 <_init>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr

08008174 <_fini>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr
