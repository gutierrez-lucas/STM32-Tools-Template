
concurrency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f14  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa4  08008fa4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008fa4  08008fa4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fa4  08008fa4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fa4  08008fa4  00018fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fa8  08008fa8  00018fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016f0  20000074  08009020  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001764  08009020  00021764  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001844c  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a15  00000000  00000000  0003852c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003bf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c5  00000000  00000000  0003d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf73  00000000  00000000  0003e7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b98a  00000000  00000000  0005a730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cf5f  00000000  00000000  000760ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006860  00000000  00000000  0011301c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011987c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08008078 	.word	0x08008078

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08008078 	.word	0x08008078

08000150 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
return 0;
 8000160:	2300      	movs	r3, #0
}
 8000162:	4618      	mov	r0, r3
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800016a:	b480      	push	{r7}
 800016c:	b083      	sub	sp, #12
 800016e:	af00      	add	r7, sp, #0
 8000170:	6078      	str	r0, [r7, #4]
 8000172:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000174:	bf00      	nop
 8000176:	370c      	adds	r7, #12
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr

0800017e <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800017e:	b480      	push	{r7}
 8000180:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000182:	bf00      	nop
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
	...

0800018c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <vApplicationGetIdleTaskMemory+0x28>)
 800019c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	4a05      	ldr	r2, [pc, #20]	; (80001b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2280      	movs	r2, #128	; 0x80
 80001a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001aa:	bf00      	nop
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000090 	.word	0x20000090
 80001b8:	20000140 	.word	0x20000140

080001bc <_write>:
I2C_HandleTypeDef hi2c2;
UART_HandleTypeDef huart1;
ADC_HandleTypeDef hadc1;
TIM_HandleTypeDef htim2;

int _write(int file, char *data, int len){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
		 if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)){
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d00a      	beq.n	80001e4 <_write+0x28>
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d007      	beq.n	80001e4 <_write+0x28>
						errno = EBADF;
 80001d4:	f007 f854 	bl	8007280 <__errno>
 80001d8:	4603      	mov	r3, r0
 80001da:	2209      	movs	r2, #9
 80001dc:	601a      	str	r2, [r3, #0]
						return -1;
 80001de:	f04f 33ff 	mov.w	r3, #4294967295
 80001e2:	e00f      	b.n	8000204 <_write+0x48>
		 }
		 HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ec:	68b9      	ldr	r1, [r7, #8]
 80001ee:	4807      	ldr	r0, [pc, #28]	; (800020c <_write+0x50>)
 80001f0:	f004 f822 	bl	8004238 <HAL_UART_Transmit>
 80001f4:	4603      	mov	r3, r0
 80001f6:	75fb      	strb	r3, [r7, #23]

		 return (status == HAL_OK ? len : 0);
 80001f8:	7dfb      	ldrb	r3, [r7, #23]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d101      	bne.n	8000202 <_write+0x46>
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	e000      	b.n	8000204 <_write+0x48>
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	3718      	adds	r7, #24
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	20000394 	.word	0x20000394

08000210 <change_adc_channel>:

static void change_adc_channel(uint32_t channel){
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000218:	f107 030c 	add.w	r3, r7, #12
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]

	sConfig.Channel = channel;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000228:	2301      	movs	r3, #1
 800022a:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800022c:	2300      	movs	r3, #0
 800022e:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000230:	f107 030c 	add.w	r3, r7, #12
 8000234:	4619      	mov	r1, r3
 8000236:	4806      	ldr	r0, [pc, #24]	; (8000250 <change_adc_channel+0x40>)
 8000238:	f001 fc88 	bl	8001b4c <HAL_ADC_ConfigChannel>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <change_adc_channel+0x36>
			Error_Handler();
 8000242:	f000 fc8f 	bl	8000b64 <Error_Handler>
	}
}
 8000246:	bf00      	nop
 8000248:	3718      	adds	r7, #24
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200003dc 	.word	0x200003dc

08000254 <trace_toggle>:

void trace_toggle(int tag){
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	if(tag == 1){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d105      	bne.n	800026e <trace_toggle+0x1a>
		HAL_GPIO_TogglePin(trace_1_GPIO_Port, trace_1_Pin);
 8000262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000266:	480c      	ldr	r0, [pc, #48]	; (8000298 <trace_toggle+0x44>)
 8000268:	f002 f89f 	bl	80023aa <HAL_GPIO_TogglePin>
 800026c:	e011      	b.n	8000292 <trace_toggle+0x3e>
	}else if(tag == 2){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b02      	cmp	r3, #2
 8000272:	d105      	bne.n	8000280 <trace_toggle+0x2c>
		HAL_GPIO_TogglePin(trace_2_GPIO_Port, trace_2_Pin);
 8000274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000278:	4807      	ldr	r0, [pc, #28]	; (8000298 <trace_toggle+0x44>)
 800027a:	f002 f896 	bl	80023aa <HAL_GPIO_TogglePin>
 800027e:	e008      	b.n	8000292 <trace_toggle+0x3e>
	}else if(tag == 3){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b03      	cmp	r3, #3
 8000284:	d104      	bne.n	8000290 <trace_toggle+0x3c>
		HAL_GPIO_TogglePin(trace_3_GPIO_Port, trace_3_Pin);
 8000286:	2110      	movs	r1, #16
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <trace_toggle+0x48>)
 800028a:	f002 f88e 	bl	80023aa <HAL_GPIO_TogglePin>
 800028e:	e000      	b.n	8000292 <trace_toggle+0x3e>
	}else{
		return;
 8000290:	bf00      	nop
	}
}
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40010800 	.word	0x40010800
 800029c:	40010c00 	.word	0x40010c00

080002a0 <main>:
} adc_t;

bool block = true;

int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af02      	add	r7, sp, #8

	HAL_Init();
 80002a6:	f001 f9bd 	bl	8001624 <HAL_Init>
	SystemClock_Config();
 80002aa:	f000 fa8d 	bl	80007c8 <SystemClock_Config>

	MX_GPIO_Init();
 80002ae:	f000 fbc7 	bl	8000a40 <MX_GPIO_Init>
	MX_I2C2_Init();
 80002b2:	f000 fb1f 	bl	80008f4 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 80002b6:	f000 fb99 	bl	80009ec <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80002ba:	f000 fb49 	bl	8000950 <MX_TIM2_Init>
	MX_ADC1_Init();
 80002be:	f000 fadd 	bl	800087c <MX_ADC1_Init>

	printf("\r\n\r\nDisplay Test\r\n");
 80002c2:	4824      	ldr	r0, [pc, #144]	; (8000354 <main+0xb4>)
 80002c4:	f006 fe38 	bl	8006f38 <puts>

	button_queue = xQueueCreate(20, sizeof(char));
 80002c8:	2200      	movs	r2, #0
 80002ca:	2101      	movs	r1, #1
 80002cc:	2014      	movs	r0, #20
 80002ce:	f004 fa4b 	bl	8004768 <xQueueGenericCreate>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a20      	ldr	r2, [pc, #128]	; (8000358 <main+0xb8>)
 80002d6:	6013      	str	r3, [r2, #0]
	conversion_queue = xQueueCreate(20, sizeof(adc_t));
 80002d8:	2200      	movs	r2, #0
 80002da:	2108      	movs	r1, #8
 80002dc:	2014      	movs	r0, #20
 80002de:	f004 fa43 	bl	8004768 <xQueueGenericCreate>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <main+0xbc>)
 80002e6:	6013      	str	r3, [r2, #0]

	xTaskCreate(display_task, "display_task", 128, NULL, tskIDLE_PRIORITY+2, &xDisplay_task_handle);
 80002e8:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <main+0xc0>)
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2302      	movs	r3, #2
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2300      	movs	r3, #0
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	491b      	ldr	r1, [pc, #108]	; (8000364 <main+0xc4>)
 80002f6:	481c      	ldr	r0, [pc, #112]	; (8000368 <main+0xc8>)
 80002f8:	f004 fe00 	bl	8004efc <xTaskCreate>
	xTaskCreate(button_task, "button_task", 128, NULL, tskIDLE_PRIORITY+1, &xButton_task_handle);
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <main+0xcc>)
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	2301      	movs	r3, #1
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2300      	movs	r3, #0
 8000306:	2280      	movs	r2, #128	; 0x80
 8000308:	4919      	ldr	r1, [pc, #100]	; (8000370 <main+0xd0>)
 800030a:	481a      	ldr	r0, [pc, #104]	; (8000374 <main+0xd4>)
 800030c:	f004 fdf6 	bl	8004efc <xTaskCreate>
	xTaskCreate(conversion_task, "conversion_task", 128, NULL, tskIDLE_PRIORITY+2, &xConversion_task_handle);
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <main+0xd8>)
 8000312:	9301      	str	r3, [sp, #4]
 8000314:	2302      	movs	r3, #2
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2300      	movs	r3, #0
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	4917      	ldr	r1, [pc, #92]	; (800037c <main+0xdc>)
 800031e:	4818      	ldr	r0, [pc, #96]	; (8000380 <main+0xe0>)
 8000320:	f004 fdec 	bl	8004efc <xTaskCreate>

	vTaskSetApplicationTaskTag( xDisplay_task_handle, ( void * ) 1 );
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <main+0xc0>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2101      	movs	r1, #1
 800032a:	4618      	mov	r0, r3
 800032c:	f005 fa80 	bl	8005830 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xButton_task_handle, ( void * ) 2 );
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <main+0xcc>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2102      	movs	r1, #2
 8000336:	4618      	mov	r0, r3
 8000338:	f005 fa7a 	bl	8005830 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xConversion_task_handle, ( void * ) 4 );
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <main+0xd8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f005 fa74 	bl	8005830 <vTaskSetApplicationTaskTag>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000348:	201c      	movs	r0, #28
 800034a:	f001 fe6c 	bl	8002026 <HAL_NVIC_EnableIRQ>

	vTaskStartScheduler();
 800034e:	f005 f88d 	bl	800546c <vTaskStartScheduler>

	while (1){
 8000352:	e7fe      	b.n	8000352 <main+0xb2>
 8000354:	08008090 	.word	0x08008090
 8000358:	20000460 	.word	0x20000460
 800035c:	20000464 	.word	0x20000464
 8000360:	20000458 	.word	0x20000458
 8000364:	080080a4 	.word	0x080080a4
 8000368:	08000385 	.word	0x08000385
 800036c:	20000454 	.word	0x20000454
 8000370:	080080b4 	.word	0x080080b4
 8000374:	08000541 	.word	0x08000541
 8000378:	2000045c 	.word	0x2000045c
 800037c:	080080c0 	.word	0x080080c0
 8000380:	08000691 	.word	0x08000691

08000384 <display_task>:
	}
}


void display_task(void *pvParameters){
 8000384:	b580      	push	{r7, lr}
 8000386:	b08c      	sub	sp, #48	; 0x30
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]

	UBaseType_t uxHighWaterMark;

	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800038c:	2000      	movs	r0, #0
 800038e:	f005 fca5 	bl	8005cdc <uxTaskGetStackHighWaterMark>
 8000392:	62f8      	str	r0, [r7, #44]	; 0x2c
	printf("Display WaterMark at the beggining: %d words\r\n", uxHighWaterMark);
 8000394:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000396:	485e      	ldr	r0, [pc, #376]	; (8000510 <display_task+0x18c>)
 8000398:	f006 fd68 	bl	8006e6c <iprintf>
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800039c:	f005 f97c 	bl	8005698 <xTaskGetTickCount>
 80003a0:	4603      	mov	r3, r0
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24

	char button_res;	
	adc_t adc_res;
	char aux[10];

	uint8_t position_x = 10;
 80003a4:	230a      	movs	r3, #10
 80003a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t position_y = 10;
 80003aa:	230a      	movs	r3, #10
 80003ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	while(1){
		if(connected == 0){
 80003b0:	4b58      	ldr	r3, [pc, #352]	; (8000514 <display_task+0x190>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d133      	bne.n	8000420 <display_task+0x9c>
			HAL_StatusTypeDef res = SSD1306_Init(0x78); 
 80003b8:	2078      	movs	r0, #120	; 0x78
 80003ba:	f000 fe6b 	bl	8001094 <SSD1306_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			if( res != HAL_OK){
 80003c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d006      	beq.n	80003da <display_task+0x56>
				printf("Display connection err: %d\r\n", res);
 80003cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80003d0:	4619      	mov	r1, r3
 80003d2:	4851      	ldr	r0, [pc, #324]	; (8000518 <display_task+0x194>)
 80003d4:	f006 fd4a 	bl	8006e6c <iprintf>
 80003d8:	e093      	b.n	8000502 <display_task+0x17e>
			}else{
				HAL_GPIO_WritePin(main_led_GPIO_Port, main_led_Pin, SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e0:	484e      	ldr	r0, [pc, #312]	; (800051c <display_task+0x198>)
 80003e2:	f001 ffca 	bl	800237a <HAL_GPIO_WritePin>
				connected = 1;
 80003e6:	4b4b      	ldr	r3, [pc, #300]	; (8000514 <display_task+0x190>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	601a      	str	r2, [r3, #0]
				printf("Display connected.\r\n" );
 80003ec:	484c      	ldr	r0, [pc, #304]	; (8000520 <display_task+0x19c>)
 80003ee:	f006 fda3 	bl	8006f38 <puts>

				SSD1306_Clear();
 80003f2:	f001 f876 	bl	80014e2 <SSD1306_Clear>
				vTaskPrioritySet(xButton_task_handle, tskIDLE_PRIORITY+3);
 80003f6:	4b4b      	ldr	r3, [pc, #300]	; (8000524 <display_task+0x1a0>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2103      	movs	r1, #3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f004 ff87 	bl	8005310 <vTaskPrioritySet>
				xTaskNotifyGive(xButton_task_handle);
 8000402:	4b48      	ldr	r3, [pc, #288]	; (8000524 <display_task+0x1a0>)
 8000404:	6818      	ldr	r0, [r3, #0]
 8000406:	2300      	movs	r3, #0
 8000408:	2202      	movs	r2, #2
 800040a:	2100      	movs	r1, #0
 800040c:	f005 fe2a 	bl	8006064 <xTaskGenericNotify>
				xTaskNotifyGive(xConversion_task_handle);
 8000410:	4b45      	ldr	r3, [pc, #276]	; (8000528 <display_task+0x1a4>)
 8000412:	6818      	ldr	r0, [r3, #0]
 8000414:	2300      	movs	r3, #0
 8000416:	2202      	movs	r2, #2
 8000418:	2100      	movs	r1, #0
 800041a:	f005 fe23 	bl	8006064 <xTaskGenericNotify>
 800041e:	e070      	b.n	8000502 <display_task+0x17e>
			}
		}else{
			HAL_TIM_Base_Stop_IT(&htim2);
 8000420:	4842      	ldr	r0, [pc, #264]	; (800052c <display_task+0x1a8>)
 8000422:	f003 fb3d 	bl	8003aa0 <HAL_TIM_Base_Stop_IT>
			while(uxQueueMessagesWaiting(button_queue) != 0){
 8000426:	e01a      	b.n	800045e <display_task+0xda>
				xQueueReceive(button_queue, &button_res, 0);
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <display_task+0x1ac>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000430:	2200      	movs	r2, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f004 faf8 	bl	8004a28 <xQueueReceive>
				SSD1306_GotoXY (position_x,position_y); 
 8000438:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800043c:	b29b      	uxth	r3, r3
 800043e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000442:	b292      	uxth	r2, r2
 8000444:	4611      	mov	r1, r2
 8000446:	4618      	mov	r0, r3
 8000448:	f000 ff90 	bl	800136c <SSD1306_GotoXY>
				SSD1306_Putc (button_res, &Font_11x18, 1); 
 800044c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000450:	2201      	movs	r2, #1
 8000452:	4938      	ldr	r1, [pc, #224]	; (8000534 <display_task+0x1b0>)
 8000454:	4618      	mov	r0, r3
 8000456:	f000 ff9f 	bl	8001398 <SSD1306_Putc>
				SSD1306_UpdateScreen(); 
 800045a:	f000 fee3 	bl	8001224 <SSD1306_UpdateScreen>
			while(uxQueueMessagesWaiting(button_queue) != 0){
 800045e:	4b34      	ldr	r3, [pc, #208]	; (8000530 <display_task+0x1ac>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f004 fbc0 	bl	8004be8 <uxQueueMessagesWaiting>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1dc      	bne.n	8000428 <display_task+0xa4>
			}
		
			while(uxQueueMessagesWaiting(conversion_queue) != 0){
 800046e:	e03d      	b.n	80004ec <display_task+0x168>
				xQueueReceive(conversion_queue, &adc_res, 0);
 8000470:	4b31      	ldr	r3, [pc, #196]	; (8000538 <display_task+0x1b4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f107 0118 	add.w	r1, r7, #24
 8000478:	2200      	movs	r2, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f004 fad4 	bl	8004a28 <xQueueReceive>

				SSD1306_GotoXY (position_x,position_y+15); 
 8000480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000484:	b29a      	uxth	r2, r3
 8000486:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800048a:	b29b      	uxth	r3, r3
 800048c:	330f      	adds	r3, #15
 800048e:	b29b      	uxth	r3, r3
 8000490:	4619      	mov	r1, r3
 8000492:	4610      	mov	r0, r2
 8000494:	f000 ff6a 	bl	800136c <SSD1306_GotoXY>
				sprintf(aux, "%04d", adc_res.x);
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	4927      	ldr	r1, [pc, #156]	; (800053c <display_task+0x1b8>)
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 fd51 	bl	8006f48 <siprintf>
				SSD1306_Puts (aux, &Font_11x18, 1); 
 80004a6:	f107 030c 	add.w	r3, r7, #12
 80004aa:	2201      	movs	r2, #1
 80004ac:	4921      	ldr	r1, [pc, #132]	; (8000534 <display_task+0x1b0>)
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fff2 	bl	8001498 <SSD1306_Puts>

				SSD1306_GotoXY (position_x,position_y+30); 
 80004b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80004be:	b29b      	uxth	r3, r3
 80004c0:	331e      	adds	r3, #30
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	4619      	mov	r1, r3
 80004c6:	4610      	mov	r0, r2
 80004c8:	f000 ff50 	bl	800136c <SSD1306_GotoXY>
				sprintf(aux, "%04d", adc_res.y);
 80004cc:	69fa      	ldr	r2, [r7, #28]
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	491a      	ldr	r1, [pc, #104]	; (800053c <display_task+0x1b8>)
 80004d4:	4618      	mov	r0, r3
 80004d6:	f006 fd37 	bl	8006f48 <siprintf>
				SSD1306_Puts (aux, &Font_11x18, 1); 
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	2201      	movs	r2, #1
 80004e0:	4914      	ldr	r1, [pc, #80]	; (8000534 <display_task+0x1b0>)
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 ffd8 	bl	8001498 <SSD1306_Puts>

				SSD1306_UpdateScreen(); 
 80004e8:	f000 fe9c 	bl	8001224 <SSD1306_UpdateScreen>
			while(uxQueueMessagesWaiting(conversion_queue) != 0){
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <display_task+0x1b4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f004 fb79 	bl	8004be8 <uxQueueMessagesWaiting>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1b9      	bne.n	8000470 <display_task+0xec>
			}
			HAL_TIM_Base_Start_IT(&htim2);
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <display_task+0x1a8>)
 80004fe:	f003 fa7d 	bl	80039fc <HAL_TIM_Base_Start_IT>
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(150));
 8000502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000506:	2196      	movs	r1, #150	; 0x96
 8000508:	4618      	mov	r0, r3
 800050a:	f004 fe4f 	bl	80051ac <vTaskDelayUntil>
		if(connected == 0){
 800050e:	e74f      	b.n	80003b0 <display_task+0x2c>
 8000510:	080080d0 	.word	0x080080d0
 8000514:	20000468 	.word	0x20000468
 8000518:	08008100 	.word	0x08008100
 800051c:	40010c00 	.word	0x40010c00
 8000520:	08008120 	.word	0x08008120
 8000524:	20000454 	.word	0x20000454
 8000528:	2000045c 	.word	0x2000045c
 800052c:	2000040c 	.word	0x2000040c
 8000530:	20000460 	.word	0x20000460
 8000534:	20000004 	.word	0x20000004
 8000538:	20000464 	.word	0x20000464
 800053c:	08008134 	.word	0x08008134

08000540 <button_task>:
	printf("Destroying Display task 1 \r\n");
	vTaskDelete(xDisplay_task_handle);

}

void button_task(void *pvParameters){
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint8_t counter = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	72fb      	strb	r3, [r7, #11]

	// printf("Button WaterMark at the beggining: %d words\r\n", uxTaskGetStackHighWaterMark(NULL));
	printf("Button task started, waiting for display ready\r\n");
 800054c:	484c      	ldr	r0, [pc, #304]	; (8000680 <button_task+0x140>)
 800054e:	f006 fcf3 	bl	8006f38 <puts>

	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000552:	f04f 31ff 	mov.w	r1, #4294967295
 8000556:	2001      	movs	r0, #1
 8000558:	f005 fcd8 	bl	8005f0c <ulTaskNotifyTake>

	uint8_t button_left_var = 0, button_right_var = 0, button_up_var = 0, button_down_var = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	2300      	movs	r3, #0
 8000562:	73bb      	strb	r3, [r7, #14]
 8000564:	2300      	movs	r3, #0
 8000566:	737b      	strb	r3, [r7, #13]
 8000568:	2300      	movs	r3, #0
 800056a:	733b      	strb	r3, [r7, #12]
	char current_button;

	while(1){
		// HAL_GPIO_TogglePin(sec_led_GPIO_Port, sec_led_Pin);

		if(button_left_var == 1){
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d114      	bne.n	800059c <button_task+0x5c>
			if(HAL_GPIO_ReadPin(button_l_GPIO_Port, button_l_Pin) == GPIO_PIN_SET){
 8000572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000576:	4843      	ldr	r0, [pc, #268]	; (8000684 <button_task+0x144>)
 8000578:	f001 fee8 	bl	800234c <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d116      	bne.n	80005b0 <button_task+0x70>
				button_left_var = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]
				current_button = 'L';
 8000586:	234c      	movs	r3, #76	; 0x4c
 8000588:	72bb      	strb	r3, [r7, #10]
				xQueueSend(button_queue, &current_button, 0);
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <button_task+0x148>)
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	f107 010a 	add.w	r1, r7, #10
 8000592:	2300      	movs	r3, #0
 8000594:	2200      	movs	r2, #0
 8000596:	f004 f949 	bl	800482c <xQueueGenericSend>
 800059a:	e009      	b.n	80005b0 <button_task+0x70>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_l_GPIO_Port, button_l_Pin) == GPIO_PIN_RESET){
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	4838      	ldr	r0, [pc, #224]	; (8000684 <button_task+0x144>)
 80005a2:	f001 fed3 	bl	800234c <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d101      	bne.n	80005b0 <button_task+0x70>
				button_left_var = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(button_right_var == 1){
 80005b0:	7bbb      	ldrb	r3, [r7, #14]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d113      	bne.n	80005de <button_task+0x9e>
			if(HAL_GPIO_ReadPin(button_r_GPIO_Port, button_r_Pin) == GPIO_PIN_SET){
 80005b6:	2120      	movs	r1, #32
 80005b8:	4834      	ldr	r0, [pc, #208]	; (800068c <button_task+0x14c>)
 80005ba:	f001 fec7 	bl	800234c <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d115      	bne.n	80005f0 <button_task+0xb0>
				button_right_var = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73bb      	strb	r3, [r7, #14]
				current_button = 'R';
 80005c8:	2352      	movs	r3, #82	; 0x52
 80005ca:	72bb      	strb	r3, [r7, #10]
				xQueueSend(button_queue, &current_button, 0);
 80005cc:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <button_task+0x148>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	f107 010a 	add.w	r1, r7, #10
 80005d4:	2300      	movs	r3, #0
 80005d6:	2200      	movs	r2, #0
 80005d8:	f004 f928 	bl	800482c <xQueueGenericSend>
 80005dc:	e008      	b.n	80005f0 <button_task+0xb0>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_r_GPIO_Port, button_r_Pin) == GPIO_PIN_RESET){
 80005de:	2120      	movs	r1, #32
 80005e0:	482a      	ldr	r0, [pc, #168]	; (800068c <button_task+0x14c>)
 80005e2:	f001 feb3 	bl	800234c <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <button_task+0xb0>
				button_right_var = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	73bb      	strb	r3, [r7, #14]
			}
		}

		if(button_up_var == 1){
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d113      	bne.n	800061e <button_task+0xde>
			if(HAL_GPIO_ReadPin(button_u_GPIO_Port, button_u_Pin) == GPIO_PIN_SET){
 80005f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fa:	4822      	ldr	r0, [pc, #136]	; (8000684 <button_task+0x144>)
 80005fc:	f001 fea6 	bl	800234c <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d115      	bne.n	8000632 <button_task+0xf2>
				button_up_var = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	737b      	strb	r3, [r7, #13]
				current_button = 'U';
 800060a:	2355      	movs	r3, #85	; 0x55
 800060c:	72bb      	strb	r3, [r7, #10]
				xQueueSend(button_queue, (void*)'U', 0);
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <button_task+0x148>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2200      	movs	r2, #0
 8000616:	2155      	movs	r1, #85	; 0x55
 8000618:	f004 f908 	bl	800482c <xQueueGenericSend>
 800061c:	e009      	b.n	8000632 <button_task+0xf2>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_u_GPIO_Port, button_u_Pin) == GPIO_PIN_RESET){
 800061e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000622:	4818      	ldr	r0, [pc, #96]	; (8000684 <button_task+0x144>)
 8000624:	f001 fe92 	bl	800234c <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d101      	bne.n	8000632 <button_task+0xf2>
				button_up_var = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	737b      	strb	r3, [r7, #13]
			}
		}

		if(button_down_var == 1){
 8000632:	7b3b      	ldrb	r3, [r7, #12]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d114      	bne.n	8000662 <button_task+0x122>
			if(HAL_GPIO_ReadPin(button_d_GPIO_Port, button_d_Pin) == GPIO_PIN_SET){
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <button_task+0x144>)
 800063e:	f001 fe85 	bl	800234c <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d116      	bne.n	8000676 <button_task+0x136>
				button_down_var = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	733b      	strb	r3, [r7, #12]
				current_button = 'D';
 800064c:	2344      	movs	r3, #68	; 0x44
 800064e:	72bb      	strb	r3, [r7, #10]
				xQueueSend(button_queue, &current_button, 0);
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <button_task+0x148>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	f107 010a 	add.w	r1, r7, #10
 8000658:	2300      	movs	r3, #0
 800065a:	2200      	movs	r2, #0
 800065c:	f004 f8e6 	bl	800482c <xQueueGenericSend>
 8000660:	e009      	b.n	8000676 <button_task+0x136>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_d_GPIO_Port, button_d_Pin) == GPIO_PIN_RESET){
 8000662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <button_task+0x144>)
 8000668:	f001 fe70 	bl	800234c <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <button_task+0x136>
				button_down_var = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	733b      	strb	r3, [r7, #12]
			}
		}

		vTaskDelay(100/ portTICK_PERIOD_MS);
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f004 fe16 	bl	80052a8 <vTaskDelay>
		if(button_left_var == 1){
 800067c:	e776      	b.n	800056c <button_task+0x2c>
 800067e:	bf00      	nop
 8000680:	0800813c 	.word	0x0800813c
 8000684:	40010800 	.word	0x40010800
 8000688:	20000460 	.word	0x20000460
 800068c:	40010c00 	.word	0x40010c00

08000690 <conversion_task>:
	}
	printf("Destroying Button task \r\n");
	vTaskDelete(xButton_task_handle);
}

void conversion_task(void *pvParameters){
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	uint16_t counter = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	83fb      	strh	r3, [r7, #30]
	adc_t adc_out;
	uint32_t adc1 = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
	uint32_t adc2 = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]

	printf("Conversion task,, waiting for display ready\r\n");
 80006a4:	4822      	ldr	r0, [pc, #136]	; (8000730 <conversion_task+0xa0>)
 80006a6:	f006 fc47 	bl	8006f38 <puts>

	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80006aa:	f04f 31ff 	mov.w	r1, #4294967295
 80006ae:	2001      	movs	r0, #1
 80006b0:	f005 fc2c 	bl	8005f0c <ulTaskNotifyTake>

	printf("Ready, activating timer\r\n");
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <conversion_task+0xa4>)
 80006b6:	f006 fc3f 	bl	8006f38 <puts>

	HAL_TIM_Base_Start_IT(&htim2);
 80006ba:	481f      	ldr	r0, [pc, #124]	; (8000738 <conversion_task+0xa8>)
 80006bc:	f003 f99e 	bl	80039fc <HAL_TIM_Base_Start_IT>

	while(1){
		ulTaskNotifyTake(pdFALSE, portMAX_DELAY);
 80006c0:	f04f 31ff 	mov.w	r1, #4294967295
 80006c4:	2000      	movs	r0, #0
 80006c6:	f005 fc21 	bl	8005f0c <ulTaskNotifyTake>
		
		HAL_ADC_Start_IT(&hadc1);
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <conversion_task+0xac>)
 80006cc:	f001 f8b4 	bl	8001838 <HAL_ADC_Start_IT>
		xTaskNotifyWait(0, 0, &adc1, portMAX_DELAY);
 80006d0:	f107 0210 	add.w	r2, r7, #16
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2100      	movs	r1, #0
 80006da:	2000      	movs	r0, #0
 80006dc:	f005 fc62 	bl	8005fa4 <xTaskNotifyWait>

		change_adc_channel(ADC_CHANNEL_7);
 80006e0:	2007      	movs	r0, #7
 80006e2:	f7ff fd95 	bl	8000210 <change_adc_channel>
		HAL_ADC_Start_IT(&hadc1);
 80006e6:	4815      	ldr	r0, [pc, #84]	; (800073c <conversion_task+0xac>)
 80006e8:	f001 f8a6 	bl	8001838 <HAL_ADC_Start_IT>
		xTaskNotifyWait(0, 0, &adc2, portMAX_DELAY);
 80006ec:	f107 020c 	add.w	r2, r7, #12
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	2100      	movs	r1, #0
 80006f6:	2000      	movs	r0, #0
 80006f8:	f005 fc54 	bl	8005fa4 <xTaskNotifyWait>

		change_adc_channel(ADC_CHANNEL_6);
 80006fc:	2006      	movs	r0, #6
 80006fe:	f7ff fd87 	bl	8000210 <change_adc_channel>

		if( counter++ == 3000){
 8000702:	8bfb      	ldrh	r3, [r7, #30]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	83fa      	strh	r2, [r7, #30]
 8000708:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800070c:	4293      	cmp	r3, r2
 800070e:	d1d7      	bne.n	80006c0 <conversion_task+0x30>
			adc_out.x = adc1;
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	617b      	str	r3, [r7, #20]
			adc_out.y = adc2;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	61bb      	str	r3, [r7, #24]
			counter = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	83fb      	strh	r3, [r7, #30]
			xQueueSend(conversion_queue, &adc_out, 0);
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <conversion_task+0xb0>)
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	f107 0114 	add.w	r1, r7, #20
 8000724:	2300      	movs	r3, #0
 8000726:	2200      	movs	r2, #0
 8000728:	f004 f880 	bl	800482c <xQueueGenericSend>
		ulTaskNotifyTake(pdFALSE, portMAX_DELAY);
 800072c:	e7c8      	b.n	80006c0 <conversion_task+0x30>
 800072e:	bf00      	nop
 8000730:	0800816c 	.word	0x0800816c
 8000734:	0800819c 	.word	0x0800819c
 8000738:	2000040c 	.word	0x2000040c
 800073c:	200003dc 	.word	0x200003dc
 8000740:	20000464 	.word	0x20000464

08000744 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
 800074c:	2301      	movs	r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
	if (htim->Instance == TIM1) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d102      	bne.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_IncTick();
 800075a:	f000 ff79 	bl	8001650 <HAL_IncTick>
	}else if (htim->Instance == TIM2) {
		trace_toggle(3);
		vTaskNotifyGiveFromISR(xConversion_task_handle, &xHigherPriorityTaskWoken);
	}
}
 800075e:	e00f      	b.n	8000780 <HAL_TIM_PeriodElapsedCallback+0x3c>
	}else if (htim->Instance == TIM2) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000768:	d10a      	bne.n	8000780 <HAL_TIM_PeriodElapsedCallback+0x3c>
		trace_toggle(3);
 800076a:	2003      	movs	r0, #3
 800076c:	f7ff fd72 	bl	8000254 <trace_toggle>
		vTaskNotifyGiveFromISR(xConversion_task_handle, &xHigherPriorityTaskWoken);
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f107 020c 	add.w	r2, r7, #12
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f005 fdec 	bl	8006358 <vTaskNotifyGiveFromISR>
}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40012c00 	.word	0x40012c00
 800078c:	2000045c 	.word	0x2000045c

08000790 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b087      	sub	sp, #28
 8000794:	af02      	add	r7, sp, #8
 8000796:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
 8000798:	2301      	movs	r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(xConversion_task_handle,(uint32_t)HAL_ADC_GetValue(&hadc1), eSetValueWithOverwrite, &xHigherPriorityTaskWoken); 
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_ADC_ConvCpltCallback+0x30>)
 800079e:	681c      	ldr	r4, [r3, #0]
 80007a0:	4808      	ldr	r0, [pc, #32]	; (80007c4 <HAL_ADC_ConvCpltCallback+0x34>)
 80007a2:	f001 f8ff 	bl	80019a4 <HAL_ADC_GetValue>
 80007a6:	4601      	mov	r1, r0
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	2203      	movs	r2, #3
 80007b2:	4620      	mov	r0, r4
 80007b4:	f005 fd00 	bl	80061b8 <xTaskGenericNotifyFromISR>
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	2000045c 	.word	0x2000045c
 80007c4:	200003dc 	.word	0x200003dc

080007c8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	2228      	movs	r2, #40	; 0x28
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f006 fcae 	bl	8007138 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000806:	2301      	movs	r3, #1
 8000808:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000814:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fba6 	bl	8002f70 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800082a:	f000 f99b 	bl	8000b64 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	617b      	str	r3, [r7, #20]
								|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2102      	movs	r1, #2
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fe12 	bl	8003474 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000856:	f000 f985 	bl	8000b64 <Error_Handler>
	}
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800085a:	2302      	movs	r3, #2
 800085c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4618      	mov	r0, r3
 8000866:	f002 ffc3 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xac>
  {
	Error_Handler();
 8000870:	f000 f978 	bl	8000b64 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3750      	adds	r7, #80	; 0x50
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]

	hadc1.Instance = ADC1;
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC1_Init+0x70>)
 800088e:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <MX_ADC1_Init+0x74>)
 8000890:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_ADC1_Init+0x70>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC1_Init+0x70>)
 800089a:	2200      	movs	r2, #0
 800089c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_ADC1_Init+0x70>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ADC1_Init+0x70>)
 80008a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008aa:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC1_Init+0x70>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1; 
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_ADC1_Init+0x70>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_ADC1_Init+0x70>)
 80008ba:	f000 fee5 	bl	8001688 <HAL_ADC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 80008c4:	f000 f94e 	bl	8000b64 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_6;
 80008c8:	2306      	movs	r3, #6
 80008ca:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
	// sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC1_Init+0x70>)
 80008d6:	f001 f939 	bl	8001b4c <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x68>
	{
		Error_Handler();
 80008e0:	f000 f940 	bl	8000b64 <Error_Handler>
	}

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200003dc 	.word	0x200003dc
 80008f0:	40012400 	.word	0x40012400

080008f4 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C2_Init+0x50>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_I2C2_Init+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C2_Init+0x50>)
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_I2C2_Init+0x58>)
 8000902:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C2_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_I2C2_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_I2C2_Init+0x50>)
 8000912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000916:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_I2C2_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_I2C2_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_I2C2_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_I2C2_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_I2C2_Init+0x50>)
 8000932:	f001 fd53 	bl	80023dc <HAL_I2C_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 800093c:	f000 f912 	bl	8000b64 <Error_Handler>
	}
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000340 	.word	0x20000340
 8000948:	40005800 	.word	0x40005800
 800094c:	00061a80 	.word	0x00061a80

08000950 <MX_TIM2_Init>:


static void MX_TIM2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_TIM2_Init+0x98>)
 8000970:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000974:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_TIM2_Init+0x98>)
 8000978:	2247      	movs	r2, #71	; 0x47
 800097a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_TIM2_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_TIM2_Init+0x98>)
 8000984:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_TIM2_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_TIM2_Init+0x98>)
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000996:	4814      	ldr	r0, [pc, #80]	; (80009e8 <MX_TIM2_Init+0x98>)
 8000998:	f002 ffe0 	bl	800395c <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x56>
  {
	Error_Handler();
 80009a2:	f000 f8df 	bl	8000b64 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80009aa:	2310      	movs	r3, #16
 80009ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_TIM2_Init+0x98>)
 80009b6:	f003 f9a9 	bl	8003d0c <HAL_TIM_SlaveConfigSynchro>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x74>
  {
	Error_Handler();
 80009c0:	f000 f8d0 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_TIM2_Init+0x98>)
 80009d2:	f003 fb71 	bl	80040b8 <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x90>
  {
	Error_Handler();
 80009dc:	f000 f8c2 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000040c 	.word	0x2000040c

080009ec <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_USART1_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f003 fbb8 	bl	8004198 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a2e:	f000 f899 	bl	8000b64 <Error_Handler>
	}

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000394 	.word	0x20000394
 8000a3c:	40013800 	.word	0x40013800

08000a40 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a54:	4b40      	ldr	r3, [pc, #256]	; (8000b58 <MX_GPIO_Init+0x118>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a3f      	ldr	r2, [pc, #252]	; (8000b58 <MX_GPIO_Init+0x118>)
 8000a5a:	f043 0320 	orr.w	r3, r3, #32
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <MX_GPIO_Init+0x118>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0320 	and.w	r3, r3, #32
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <MX_GPIO_Init+0x118>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a39      	ldr	r2, [pc, #228]	; (8000b58 <MX_GPIO_Init+0x118>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <MX_GPIO_Init+0x118>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <MX_GPIO_Init+0x118>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a33      	ldr	r2, [pc, #204]	; (8000b58 <MX_GPIO_Init+0x118>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <MX_GPIO_Init+0x118>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, main_led_Pin|sec_led_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000aa2:	482e      	ldr	r0, [pc, #184]	; (8000b5c <MX_GPIO_Init+0x11c>)
 8000aa4:	f001 fc69 	bl	800237a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = main_led_Pin|sec_led_Pin;
 8000aa8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000aac:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4826      	ldr	r0, [pc, #152]	; (8000b5c <MX_GPIO_Init+0x11c>)
 8000ac2:	f001 fabf 	bl	8002044 <HAL_GPIO_Init>
//   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
// //   GPIO_InitStruct.Pull = GPIO_PULLUP;
//   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  HAL_GPIO_WritePin(GPIOB, trace_3_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2110      	movs	r1, #16
 8000aca:	4824      	ldr	r0, [pc, #144]	; (8000b5c <MX_GPIO_Init+0x11c>)
 8000acc:	f001 fc55 	bl	800237a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = trace_3_Pin;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ad4:	2311      	movs	r3, #17
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481d      	ldr	r0, [pc, #116]	; (8000b5c <MX_GPIO_Init+0x11c>)
 8000ae8:	f001 faac 	bl	8002044 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, trace_1_Pin|trace_2_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000af2:	481b      	ldr	r0, [pc, #108]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000af4:	f001 fc41 	bl	800237a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = trace_1_Pin|trace_2_Pin;
 8000af8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000afe:	2311      	movs	r3, #17
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000b12:	f001 fa97 	bl	8002044 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = button_l_Pin|button_r_Pin|button_u_Pin|button_d_Pin;
 8000b16:	f648 1320 	movw	r3, #35104	; 0x8920
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_GPIO_Init+0x120>)
 8000b30:	f001 fa88 	bl	8002044 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = button_r_Pin;
 8000b34:	2320      	movs	r3, #32
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0x11c>)
 8000b4c:	f001 fa7a 	bl	8002044 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010c00 	.word	0x40010c00
 8000b60:	40010800 	.word	0x40010800

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_MspInit+0x68>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_MspInit+0x68>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_MspInit+0x68>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_MspInit+0x68>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <HAL_MspInit+0x68>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_MspInit+0x68>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	210f      	movs	r1, #15
 8000baa:	f06f 0001 	mvn.w	r0, #1
 8000bae:	f001 fa1e 	bl	8001fee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_MspInit+0x6c>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_MspInit+0x6c>)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000

08000be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <HAL_ADC_MspInit+0x7c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d129      	bne.n	8000c54 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c30:	2301      	movs	r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c34:	2303      	movs	r3, #3
 8000c36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4809      	ldr	r0, [pc, #36]	; (8000c64 <HAL_ADC_MspInit+0x84>)
 8000c40:	f001 fa00 	bl	8002044 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 6, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2106      	movs	r1, #6
 8000c48:	2012      	movs	r0, #18
 8000c4a:	f001 f9d0 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c4e:	2012      	movs	r0, #18
 8000c50:	f001 f9e9 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40012400 	.word	0x40012400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010800 	.word	0x40010800

08000c68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <HAL_I2C_MspInit+0x74>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d124      	bne.n	8000cd2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_I2C_MspInit+0x78>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_I2C_MspInit+0x78>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_I2C_MspInit+0x78>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ca0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca6:	2312      	movs	r3, #18
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <HAL_I2C_MspInit+0x7c>)
 8000cb6:	f001 f9c5 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_I2C_MspInit+0x78>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_I2C_MspInit+0x78>)
 8000cc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_I2C_MspInit+0x78>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40005800 	.word	0x40005800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d113      	bne.n	8000d22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_TIM_Base_MspInit+0x44>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_TIM_Base_MspInit+0x44>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_TIM_Base_MspInit+0x44>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2105      	movs	r1, #5
 8000d16:	201c      	movs	r0, #28
 8000d18:	f001 f969 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d1c:	201c      	movs	r0, #28
 8000d1e:	f001 f982 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <HAL_UART_MspInit+0xa4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d13d      	bne.n	8000dcc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d80:	2340      	movs	r3, #64	; 0x40
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <HAL_UART_MspInit+0xac>)
 8000d94:	f001 f956 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <HAL_UART_MspInit+0xac>)
 8000dac:	f001 f94a 	bl	8002044 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_UART_MspInit+0xb0>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc6:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_UART_MspInit+0xb0>)
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	40010000 	.word	0x40010000

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000e00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e04:	6193      	str	r3, [r2, #24]
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e12:	f107 020c 	add.w	r2, r7, #12
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fc99 	bl	8003754 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e22:	f002 fc83 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8000e26:	4603      	mov	r3, r0
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_InitTick+0xd8>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0c9b      	lsrs	r3, r3, #18
 8000e36:	3b01      	subs	r3, #1
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <HAL_InitTick+0xdc>)
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <HAL_InitTick+0xe0>)
 8000e3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <HAL_InitTick+0xdc>)
 8000e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e46:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e48:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <HAL_InitTick+0xdc>)
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_InitTick+0xdc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_InitTick+0xdc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_InitTick+0xdc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e60:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <HAL_InitTick+0xdc>)
 8000e62:	f002 fd7b 	bl	800395c <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d11b      	bne.n	8000eac <HAL_InitTick+0xc8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e74:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <HAL_InitTick+0xdc>)
 8000e76:	f002 fdc1 	bl	80039fc <HAL_TIM_Base_Start_IT>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d111      	bne.n	8000eac <HAL_InitTick+0xc8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e88:	2019      	movs	r0, #25
 8000e8a:	f001 f8cc 	bl	8002026 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d808      	bhi.n	8000ea6 <HAL_InitTick+0xc2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2019      	movs	r0, #25
 8000e9a:	f001 f8a8 	bl	8001fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e002      	b.n	8000eac <HAL_InitTick+0xc8>
      }
      else
      {
        status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3730      	adds	r7, #48	; 0x30
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	431bde83 	.word	0x431bde83
 8000ec0:	2000046c 	.word	0x2000046c
 8000ec4:	40012c00 	.word	0x40012c00
 8000ec8:	2000000c 	.word	0x2000000c

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <ADC1_2_IRQHandler+0x10>)
 8000efe:	f000 fd5d 	bl	80019bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200003dc 	.word	0x200003dc

08000f0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <TIM1_UP_IRQHandler+0x10>)
 8000f12:	f002 fdf3 	bl	8003afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000046c 	.word	0x2000046c

08000f20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM2_IRQHandler+0x10>)
 8000f26:	f002 fde9 	bl	8003afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000040c 	.word	0x2000040c

08000f34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e00a      	b.n	8000f5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f46:	f3af 8000 	nop.w
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	60ba      	str	r2, [r7, #8]
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf0      	blt.n	8000f46 <_read+0x12>
  }

  return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f94:	605a      	str	r2, [r3, #4]
  return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <_isatty>:

int _isatty(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
	...

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f006 f93e 	bl	8007280 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20005000 	.word	0x20005000
 8001030:	00000400 	.word	0x00000400
 8001034:	200004b4 	.word	0x200004b4
 8001038:	20001768 	.word	0x20001768

0800103c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8001048:	f7ff fff8 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800104e:	490c      	ldr	r1, [pc, #48]	; (8001080 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001050:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001064:	4c09      	ldr	r4, [pc, #36]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001072:	f006 f90b 	bl	800728c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001076:	f7ff f913 	bl	80002a0 <main>
  bx lr
 800107a:	4770      	bx	lr
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001084:	08008fac 	.word	0x08008fac
  ldr r2, =_sbss
 8001088:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800108c:	20001764 	.word	0x20001764

08001090 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <CAN1_RX1_IRQHandler>
	...

08001094 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

HAL_StatusTypeDef SSD1306_Init(int addr) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

	/* Init I2C */
	ssd1306_I2C_Init();
 800109c:	f000 fa2a 	bl	80014f4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	HAL_StatusTypeDef res = HAL_I2C_IsDeviceReady(&hi2c2, addr, 1, 2000);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	b299      	uxth	r1, r3
 80010a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010a8:	2201      	movs	r2, #1
 80010aa:	485c      	ldr	r0, [pc, #368]	; (800121c <SSD1306_Init+0x188>)
 80010ac:	f001 fbd8 	bl	8002860 <HAL_I2C_IsDeviceReady>
 80010b0:	4603      	mov	r3, r0
 80010b2:	72fb      	strb	r3, [r7, #11]
	if ( res != HAL_OK) {
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SSD1306_Init+0x2a>
		/* Return false */
		return res;
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	e0a9      	b.n	8001212 <SSD1306_Init+0x17e>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80010be:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010c2:	60fb      	str	r3, [r7, #12]
	while(p>0)
 80010c4:	e002      	b.n	80010cc <SSD1306_Init+0x38>
		p--;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
	while(p>0)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f9      	bne.n	80010c6 <SSD1306_Init+0x32>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010d2:	22ae      	movs	r2, #174	; 0xae
 80010d4:	2100      	movs	r1, #0
 80010d6:	2078      	movs	r0, #120	; 0x78
 80010d8:	f000 fa86 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80010dc:	2220      	movs	r2, #32
 80010de:	2100      	movs	r1, #0
 80010e0:	2078      	movs	r0, #120	; 0x78
 80010e2:	f000 fa81 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010e6:	2210      	movs	r2, #16
 80010e8:	2100      	movs	r1, #0
 80010ea:	2078      	movs	r0, #120	; 0x78
 80010ec:	f000 fa7c 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010f0:	22b0      	movs	r2, #176	; 0xb0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2078      	movs	r0, #120	; 0x78
 80010f6:	f000 fa77 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010fa:	22c8      	movs	r2, #200	; 0xc8
 80010fc:	2100      	movs	r1, #0
 80010fe:	2078      	movs	r0, #120	; 0x78
 8001100:	f000 fa72 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2078      	movs	r0, #120	; 0x78
 800110a:	f000 fa6d 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800110e:	2210      	movs	r2, #16
 8001110:	2100      	movs	r1, #0
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f000 fa68 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001118:	2240      	movs	r2, #64	; 0x40
 800111a:	2100      	movs	r1, #0
 800111c:	2078      	movs	r0, #120	; 0x78
 800111e:	f000 fa63 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001122:	2281      	movs	r2, #129	; 0x81
 8001124:	2100      	movs	r1, #0
 8001126:	2078      	movs	r0, #120	; 0x78
 8001128:	f000 fa5e 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800112c:	22ff      	movs	r2, #255	; 0xff
 800112e:	2100      	movs	r1, #0
 8001130:	2078      	movs	r0, #120	; 0x78
 8001132:	f000 fa59 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001136:	22a1      	movs	r2, #161	; 0xa1
 8001138:	2100      	movs	r1, #0
 800113a:	2078      	movs	r0, #120	; 0x78
 800113c:	f000 fa54 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001140:	22a6      	movs	r2, #166	; 0xa6
 8001142:	2100      	movs	r1, #0
 8001144:	2078      	movs	r0, #120	; 0x78
 8001146:	f000 fa4f 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800114a:	22a8      	movs	r2, #168	; 0xa8
 800114c:	2100      	movs	r1, #0
 800114e:	2078      	movs	r0, #120	; 0x78
 8001150:	f000 fa4a 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001154:	223f      	movs	r2, #63	; 0x3f
 8001156:	2100      	movs	r1, #0
 8001158:	2078      	movs	r0, #120	; 0x78
 800115a:	f000 fa45 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800115e:	22a4      	movs	r2, #164	; 0xa4
 8001160:	2100      	movs	r1, #0
 8001162:	2078      	movs	r0, #120	; 0x78
 8001164:	f000 fa40 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001168:	22d3      	movs	r2, #211	; 0xd3
 800116a:	2100      	movs	r1, #0
 800116c:	2078      	movs	r0, #120	; 0x78
 800116e:	f000 fa3b 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2078      	movs	r0, #120	; 0x78
 8001178:	f000 fa36 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800117c:	22d5      	movs	r2, #213	; 0xd5
 800117e:	2100      	movs	r1, #0
 8001180:	2078      	movs	r0, #120	; 0x78
 8001182:	f000 fa31 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001186:	22f0      	movs	r2, #240	; 0xf0
 8001188:	2100      	movs	r1, #0
 800118a:	2078      	movs	r0, #120	; 0x78
 800118c:	f000 fa2c 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001190:	22d9      	movs	r2, #217	; 0xd9
 8001192:	2100      	movs	r1, #0
 8001194:	2078      	movs	r0, #120	; 0x78
 8001196:	f000 fa27 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800119a:	2222      	movs	r2, #34	; 0x22
 800119c:	2100      	movs	r1, #0
 800119e:	2078      	movs	r0, #120	; 0x78
 80011a0:	f000 fa22 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80011a4:	22da      	movs	r2, #218	; 0xda
 80011a6:	2100      	movs	r1, #0
 80011a8:	2078      	movs	r0, #120	; 0x78
 80011aa:	f000 fa1d 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80011ae:	2212      	movs	r2, #18
 80011b0:	2100      	movs	r1, #0
 80011b2:	2078      	movs	r0, #120	; 0x78
 80011b4:	f000 fa18 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011b8:	22db      	movs	r2, #219	; 0xdb
 80011ba:	2100      	movs	r1, #0
 80011bc:	2078      	movs	r0, #120	; 0x78
 80011be:	f000 fa13 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011c2:	2220      	movs	r2, #32
 80011c4:	2100      	movs	r1, #0
 80011c6:	2078      	movs	r0, #120	; 0x78
 80011c8:	f000 fa0e 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011cc:	228d      	movs	r2, #141	; 0x8d
 80011ce:	2100      	movs	r1, #0
 80011d0:	2078      	movs	r0, #120	; 0x78
 80011d2:	f000 fa09 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011d6:	2214      	movs	r2, #20
 80011d8:	2100      	movs	r1, #0
 80011da:	2078      	movs	r0, #120	; 0x78
 80011dc:	f000 fa04 	bl	80015e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011e0:	22af      	movs	r2, #175	; 0xaf
 80011e2:	2100      	movs	r1, #0
 80011e4:	2078      	movs	r0, #120	; 0x78
 80011e6:	f000 f9ff 	bl	80015e8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011ea:	222e      	movs	r2, #46	; 0x2e
 80011ec:	2100      	movs	r1, #0
 80011ee:	2078      	movs	r0, #120	; 0x78
 80011f0:	f000 f9fa 	bl	80015e8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f843 	bl	8001280 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80011fa:	f000 f813 	bl	8001224 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <SSD1306_Init+0x18c>)
 8001200:	2200      	movs	r2, #0
 8001202:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <SSD1306_Init+0x18c>)
 8001206:	2200      	movs	r2, #0
 8001208:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SSD1306_Init+0x18c>)
 800120c:	2201      	movs	r2, #1
 800120e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000340 	.word	0x20000340
 8001220:	200008b8 	.word	0x200008b8

08001224 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800122a:	2300      	movs	r3, #0
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	e01d      	b.n	800126c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	3b50      	subs	r3, #80	; 0x50
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	2100      	movs	r1, #0
 800123a:	2078      	movs	r0, #120	; 0x78
 800123c:	f000 f9d4 	bl	80015e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001240:	2200      	movs	r2, #0
 8001242:	2100      	movs	r1, #0
 8001244:	2078      	movs	r0, #120	; 0x78
 8001246:	f000 f9cf 	bl	80015e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800124a:	2210      	movs	r2, #16
 800124c:	2100      	movs	r1, #0
 800124e:	2078      	movs	r0, #120	; 0x78
 8001250:	f000 f9ca 	bl	80015e8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	4a08      	ldr	r2, [pc, #32]	; (800127c <SSD1306_UpdateScreen+0x58>)
 800125a:	441a      	add	r2, r3
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	2140      	movs	r1, #64	; 0x40
 8001260:	2078      	movs	r0, #120	; 0x78
 8001262:	f000 f95b 	bl	800151c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	3301      	adds	r3, #1
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b07      	cmp	r3, #7
 8001270:	d9de      	bls.n	8001230 <SSD1306_UpdateScreen+0xc>
	}
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200004b8 	.word	0x200004b8

08001280 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <SSD1306_Fill+0x14>
 8001290:	2300      	movs	r3, #0
 8001292:	e000      	b.n	8001296 <SSD1306_Fill+0x16>
 8001294:	23ff      	movs	r3, #255	; 0xff
 8001296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129a:	4619      	mov	r1, r3
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <SSD1306_Fill+0x2c>)
 800129e:	f005 ff4b 	bl	8007138 <memset>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200004b8 	.word	0x200004b8

080012b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
 80012ba:	460b      	mov	r3, r1
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	70fb      	strb	r3, [r7, #3]
	if (
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d848      	bhi.n	800135a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	2b3f      	cmp	r3, #63	; 0x3f
 80012cc:	d845      	bhi.n	800135a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <SSD1306_DrawPixel+0xb4>)
 80012d0:	791b      	ldrb	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d11a      	bne.n	8001320 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	b298      	uxth	r0, r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	01db      	lsls	r3, r3, #7
 80012f6:	4413      	add	r3, r2
 80012f8:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <SSD1306_DrawPixel+0xb8>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	b25a      	sxtb	r2, r3
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	2101      	movs	r1, #1
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	b25b      	sxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b259      	sxtb	r1, r3
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	4603      	mov	r3, r0
 8001314:	01db      	lsls	r3, r3, #7
 8001316:	4413      	add	r3, r2
 8001318:	b2c9      	uxtb	r1, r1
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <SSD1306_DrawPixel+0xb8>)
 800131c:	54d1      	strb	r1, [r2, r3]
 800131e:	e01d      	b.n	800135c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001320:	88fa      	ldrh	r2, [r7, #6]
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	b298      	uxth	r0, r3
 8001328:	4603      	mov	r3, r0
 800132a:	01db      	lsls	r3, r3, #7
 800132c:	4413      	add	r3, r2
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <SSD1306_DrawPixel+0xb8>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	b25a      	sxtb	r2, r3
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	b25b      	sxtb	r3, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	b25b      	sxtb	r3, r3
 8001346:	4013      	ands	r3, r2
 8001348:	b259      	sxtb	r1, r3
 800134a:	88fa      	ldrh	r2, [r7, #6]
 800134c:	4603      	mov	r3, r0
 800134e:	01db      	lsls	r3, r3, #7
 8001350:	4413      	add	r3, r2
 8001352:	b2c9      	uxtb	r1, r1
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <SSD1306_DrawPixel+0xb8>)
 8001356:	54d1      	strb	r1, [r2, r3]
 8001358:	e000      	b.n	800135c <SSD1306_DrawPixel+0xac>
		return;
 800135a:	bf00      	nop
	}
}
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	200008b8 	.word	0x200008b8
 8001368:	200004b8 	.word	0x200004b8

0800136c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	460a      	mov	r2, r1
 8001376:	80fb      	strh	r3, [r7, #6]
 8001378:	4613      	mov	r3, r2
 800137a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <SSD1306_GotoXY+0x28>)
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <SSD1306_GotoXY+0x28>)
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	8053      	strh	r3, [r2, #2]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200008b8 	.word	0x200008b8

08001398 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013a8:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <SSD1306_Putc+0xfc>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
	if (
 80013b4:	2b7f      	cmp	r3, #127	; 0x7f
 80013b6:	dc07      	bgt.n	80013c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <SSD1306_Putc+0xfc>)
 80013ba:	885b      	ldrh	r3, [r3, #2]
 80013bc:	461a      	mov	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013c4:	2b3f      	cmp	r3, #63	; 0x3f
 80013c6:	dd01      	ble.n	80013cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e05e      	b.n	800148a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e04b      	b.n	800146a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	3b20      	subs	r3, #32
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	7849      	ldrb	r1, [r1, #1]
 80013de:	fb01 f303 	mul.w	r3, r1, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	440b      	add	r3, r1
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	e030      	b.n	8001458 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d010      	beq.n	8001428 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <SSD1306_Putc+0xfc>)
 8001408:	881a      	ldrh	r2, [r3, #0]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b298      	uxth	r0, r3
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <SSD1306_Putc+0xfc>)
 8001414:	885a      	ldrh	r2, [r3, #2]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	b29b      	uxth	r3, r3
 800141a:	4413      	add	r3, r2
 800141c:	b29b      	uxth	r3, r3
 800141e:	79ba      	ldrb	r2, [r7, #6]
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff ff45 	bl	80012b0 <SSD1306_DrawPixel>
 8001426:	e014      	b.n	8001452 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <SSD1306_Putc+0xfc>)
 800142a:	881a      	ldrh	r2, [r3, #0]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	b29b      	uxth	r3, r3
 8001430:	4413      	add	r3, r2
 8001432:	b298      	uxth	r0, r3
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <SSD1306_Putc+0xfc>)
 8001436:	885a      	ldrh	r2, [r3, #2]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4413      	add	r3, r2
 800143e:	b299      	uxth	r1, r3
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf0c      	ite	eq
 8001446:	2301      	moveq	r3, #1
 8001448:	2300      	movne	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	f7ff ff2f 	bl	80012b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	3301      	adds	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4293      	cmp	r3, r2
 8001462:	d3c8      	bcc.n	80013f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	461a      	mov	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4293      	cmp	r3, r2
 8001474:	d3ad      	bcc.n	80013d2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <SSD1306_Putc+0xfc>)
 8001478:	881a      	ldrh	r2, [r3, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4413      	add	r3, r2
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <SSD1306_Putc+0xfc>)
 8001486:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001488:	79fb      	ldrb	r3, [r7, #7]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200008b8 	.word	0x200008b8

08001498 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	4613      	mov	r3, r2
 80014a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014a6:	e012      	b.n	80014ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff71 	bl	8001398 <SSD1306_Putc>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d002      	beq.n	80014c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	e008      	b.n	80014da <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1e8      	bne.n	80014a8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	781b      	ldrb	r3, [r3, #0]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff feca 	bl	8001280 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014ec:	f7ff fe9a 	bl	8001224 <SSD1306_UpdateScreen>
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <ssd1306_I2C_Init+0x24>)
 80014fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014fe:	e002      	b.n	8001506 <ssd1306_I2C_Init+0x12>
		p--;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f9      	bne.n	8001500 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	0003d090 	.word	0x0003d090

0800151c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b0c7      	sub	sp, #284	; 0x11c
 8001520:	af02      	add	r7, sp, #8
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800152a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800152e:	600a      	str	r2, [r1, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001536:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800153a:	4622      	mov	r2, r4
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001542:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001546:	4602      	mov	r2, r0
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800154e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001552:	460a      	mov	r2, r1
 8001554:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800155a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800155e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001562:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001570:	e015      	b.n	800159e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001572:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001576:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800157a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	441a      	add	r2, r3
 8001582:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001586:	3301      	adds	r3, #1
 8001588:	7811      	ldrb	r1, [r2, #0]
 800158a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800158e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001592:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001594:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001598:	3301      	adds	r3, #1
 800159a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800159e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015a8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80015ac:	8812      	ldrh	r2, [r2, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d8df      	bhi.n	8001572 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80015b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015b6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b299      	uxth	r1, r3
 80015be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f107 020c 	add.w	r2, r7, #12
 80015d0:	200a      	movs	r0, #10
 80015d2:	9000      	str	r0, [sp, #0]
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <ssd1306_I2C_WriteMulti+0xc8>)
 80015d6:	f001 f845 	bl	8002664 <HAL_I2C_Master_Transmit>
}
 80015da:	bf00      	nop
 80015dc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	20000340 	.word	0x20000340

080015e8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	460b      	mov	r3, r1
 80015f4:	71bb      	strb	r3, [r7, #6]
 80015f6:	4613      	mov	r3, r2
 80015f8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015fe:	797b      	ldrb	r3, [r7, #5]
 8001600:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	b299      	uxth	r1, r3
 8001606:	f107 020c 	add.w	r2, r7, #12
 800160a:	230a      	movs	r3, #10
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2302      	movs	r3, #2
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <ssd1306_I2C_Write+0x38>)
 8001612:	f001 f827 	bl	8002664 <HAL_I2C_Master_Transmit>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000340 	.word	0x20000340

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x28>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x28>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 fccf 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	200f      	movs	r0, #15
 800163c:	f7ff fbd2 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fa96 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000

08001650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x1c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_IncTick+0x20>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <HAL_IncTick+0x20>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20000010 	.word	0x20000010
 8001670:	200008c0 	.word	0x200008c0

08001674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <HAL_GetTick+0x10>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	200008c0 	.word	0x200008c0

08001688 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0be      	b.n	8001828 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fa8a 	bl	8000be0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fb8f 	bl	8001df0 <ADC_ConversionStop_Disable>
 80016d2:	4603      	mov	r3, r0
 80016d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 8099 	bne.w	8001816 <HAL_ADC_Init+0x18e>
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 8095 	bne.w	8001816 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f4:	f023 0302 	bic.w	r3, r3, #2
 80016f8:	f043 0202 	orr.w	r2, r3, #2
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001708:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7b1b      	ldrb	r3, [r3, #12]
 800170e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001710:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4313      	orrs	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001720:	d003      	beq.n	800172a <HAL_ADC_Init+0xa2>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d102      	bne.n	8001730 <HAL_ADC_Init+0xa8>
 800172a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172e:	e000      	b.n	8001732 <HAL_ADC_Init+0xaa>
 8001730:	2300      	movs	r3, #0
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7d1b      	ldrb	r3, [r3, #20]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d119      	bne.n	8001774 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7b1b      	ldrb	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	3b01      	subs	r3, #1
 800174e:	035a      	lsls	r2, r3, #13
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	e00b      	b.n	8001774 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	f043 0220 	orr.w	r2, r3, #32
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	430a      	orrs	r2, r1
 8001786:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_ADC_Init+0x1a8>)
 8001790:	4013      	ands	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	430b      	orrs	r3, r1
 800179a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a4:	d003      	beq.n	80017ae <HAL_ADC_Init+0x126>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d104      	bne.n	80017b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	051b      	lsls	r3, r3, #20
 80017b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_ADC_Init+0x1ac>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d10b      	bne.n	80017f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017f2:	e018      	b.n	8001826 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	f023 0312 	bic.w	r3, r3, #18
 80017fc:	f043 0210 	orr.w	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001814:	e007      	b.n	8001826 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	f043 0210 	orr.w	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001826:	7dfb      	ldrb	r3, [r7, #23]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	ffe1f7fd 	.word	0xffe1f7fd
 8001834:	ff1f0efe 	.word	0xff1f0efe

08001838 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Start_IT+0x1a>
 800184e:	2302      	movs	r3, #2
 8001850:	e0a0      	b.n	8001994 <HAL_ADC_Start_IT+0x15c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fa6e 	bl	8001d3c <ADC_Enable>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 808f 	bne.w	800198a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_ADC_Start_IT+0x164>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d105      	bne.n	8001896 <HAL_ADC_Start_IT+0x5e>
 800188a:	4b45      	ldr	r3, [pc, #276]	; (80019a0 <HAL_ADC_Start_IT+0x168>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d115      	bne.n	80018c2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d026      	beq.n	80018fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018c0:	e01d      	b.n	80018fe <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <HAL_ADC_Start_IT+0x168>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d004      	beq.n	80018e2 <HAL_ADC_Start_IT+0xaa>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2f      	ldr	r2, [pc, #188]	; (800199c <HAL_ADC_Start_IT+0x164>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10d      	bne.n	80018fe <HAL_ADC_Start_IT+0xc6>
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <HAL_ADC_Start_IT+0x168>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	f023 0206 	bic.w	r2, r3, #6
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
 8001916:	e002      	b.n	800191e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f06f 0202 	mvn.w	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0220 	orr.w	r2, r2, #32
 800193e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800194a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800194e:	d113      	bne.n	8001978 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_ADC_Start_IT+0x164>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d105      	bne.n	8001966 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_ADC_Start_IT+0x168>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001962:	2b00      	cmp	r3, #0
 8001964:	d108      	bne.n	8001978 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	e00c      	b.n	8001992 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	e003      	b.n	8001992 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40012800 	.word	0x40012800
 80019a0:	40012400 	.word	0x40012400

080019a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d03e      	beq.n	8001a5c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d039      	beq.n	8001a5c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a0e:	d11d      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d119      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0220 	bic.w	r2, r2, #32
 8001a26:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7fe fe9f 	bl	8000790 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f06f 0212 	mvn.w	r2, #18
 8001a5a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d04d      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d048      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001a92:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001a96:	d012      	beq.n	8001abe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d125      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ab0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ab4:	d11d      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d119      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001acc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	f043 0201 	orr.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f9bd 	bl	8001e72 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 020c 	mvn.w	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d012      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00d      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f809 	bl	8001b3a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0201 	mvn.w	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x20>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e0dc      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x1da>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b06      	cmp	r3, #6
 8001b7a:	d81c      	bhi.n	8001bb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b05      	subs	r3, #5
 8001b8e:	221f      	movs	r2, #31
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4019      	ands	r1, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b05      	subs	r3, #5
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb4:	e03c      	b.n	8001c30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d81c      	bhi.n	8001bf8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b23      	subs	r3, #35	; 0x23
 8001bd0:	221f      	movs	r2, #31
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4019      	ands	r1, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b23      	subs	r3, #35	; 0x23
 8001bea:	fa00 f203 	lsl.w	r2, r0, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf6:	e01b      	b.n	8001c30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	3b41      	subs	r3, #65	; 0x41
 8001c0a:	221f      	movs	r2, #31
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4019      	ands	r1, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3b41      	subs	r3, #65	; 0x41
 8001c24:	fa00 f203 	lsl.w	r2, r0, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b09      	cmp	r3, #9
 8001c36:	d91c      	bls.n	8001c72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68d9      	ldr	r1, [r3, #12]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6898      	ldr	r0, [r3, #8]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	3b1e      	subs	r3, #30
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	e019      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6919      	ldr	r1, [r3, #16]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	2207      	movs	r2, #7
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4019      	ands	r1, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6898      	ldr	r0, [r3, #8]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d003      	beq.n	8001cb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cb2:	2b11      	cmp	r3, #17
 8001cb4:	d132      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d125      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d126      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cdc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d11a      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	0c9a      	lsrs	r2, r3, #18
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x1b2>
 8001d0a:	e007      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40012400 	.word	0x40012400
 8001d34:	20000000 	.word	0x20000000
 8001d38:	431bde83 	.word	0x431bde83

08001d3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d040      	beq.n	8001ddc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <ADC_Enable+0xac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <ADC_Enable+0xb0>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	0c9b      	lsrs	r3, r3, #18
 8001d76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d78:	e002      	b.n	8001d80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d86:	f7ff fc75 	bl	8001674 <HAL_GetTick>
 8001d8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d8c:	e01f      	b.n	8001dce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d8e:	f7ff fc71 	bl	8001674 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d918      	bls.n	8001dce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d011      	beq.n	8001dce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e007      	b.n	8001dde <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d1d8      	bne.n	8001d8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d12e      	bne.n	8001e68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e1a:	f7ff fc2b 	bl	8001674 <HAL_GetTick>
 8001e1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e20:	e01b      	b.n	8001e5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e22:	f7ff fc27 	bl	8001674 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d914      	bls.n	8001e5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10d      	bne.n	8001e5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e007      	b.n	8001e6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d0dc      	beq.n	8001e22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4906      	ldr	r1, [pc, #24]	; (8001f1c <__NVIC_EnableIRQ+0x34>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff4f 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff64 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ffb2 	bl	8001f74 <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff81 	bl	8001f20 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff57 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	; 0x2c
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e169      	b.n	800232c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002058:	2201      	movs	r2, #1
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8158 	bne.w	8002326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a9a      	ldr	r2, [pc, #616]	; (80022e4 <HAL_GPIO_Init+0x2a0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002080:	4a98      	ldr	r2, [pc, #608]	; (80022e4 <HAL_GPIO_Init+0x2a0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d875      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002086:	4a98      	ldr	r2, [pc, #608]	; (80022e8 <HAL_GPIO_Init+0x2a4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d058      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 800208c:	4a96      	ldr	r2, [pc, #600]	; (80022e8 <HAL_GPIO_Init+0x2a4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d86f      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002092:	4a96      	ldr	r2, [pc, #600]	; (80022ec <HAL_GPIO_Init+0x2a8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d052      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002098:	4a94      	ldr	r2, [pc, #592]	; (80022ec <HAL_GPIO_Init+0x2a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d869      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 800209e:	4a94      	ldr	r2, [pc, #592]	; (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04c      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020a4:	4a92      	ldr	r2, [pc, #584]	; (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d863      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020aa:	4a92      	ldr	r2, [pc, #584]	; (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d046      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020b0:	4a90      	ldr	r2, [pc, #576]	; (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d85d      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d82a      	bhi.n	8002110 <HAL_GPIO_Init+0xcc>
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d859      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020be:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <HAL_GPIO_Init+0x80>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	0800213f 	.word	0x0800213f
 80020c8:	08002119 	.word	0x08002119
 80020cc:	0800212b 	.word	0x0800212b
 80020d0:	0800216d 	.word	0x0800216d
 80020d4:	08002173 	.word	0x08002173
 80020d8:	08002173 	.word	0x08002173
 80020dc:	08002173 	.word	0x08002173
 80020e0:	08002173 	.word	0x08002173
 80020e4:	08002173 	.word	0x08002173
 80020e8:	08002173 	.word	0x08002173
 80020ec:	08002173 	.word	0x08002173
 80020f0:	08002173 	.word	0x08002173
 80020f4:	08002173 	.word	0x08002173
 80020f8:	08002173 	.word	0x08002173
 80020fc:	08002173 	.word	0x08002173
 8002100:	08002173 	.word	0x08002173
 8002104:	08002173 	.word	0x08002173
 8002108:	08002121 	.word	0x08002121
 800210c:	08002135 	.word	0x08002135
 8002110:	4a79      	ldr	r2, [pc, #484]	; (80022f8 <HAL_GPIO_Init+0x2b4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002116:	e02c      	b.n	8002172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e029      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	3304      	adds	r3, #4
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e024      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	3308      	adds	r3, #8
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e01f      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	330c      	adds	r3, #12
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e01a      	b.n	8002174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002146:	2304      	movs	r3, #4
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e013      	b.n	8002174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	611a      	str	r2, [r3, #16]
          break;
 800215e:	e009      	b.n	8002174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	615a      	str	r2, [r3, #20]
          break;
 800216a:	e003      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x130>
          break;
 8002172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	; 0xff
 8002178:	d801      	bhi.n	800217e <HAL_GPIO_Init+0x13a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_Init+0x13e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d802      	bhi.n	8002190 <HAL_GPIO_Init+0x14c>
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0x152>
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	3b08      	subs	r3, #8
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	210f      	movs	r1, #15
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	6a39      	ldr	r1, [r7, #32]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80b1 	beq.w	8002326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c4:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <HAL_GPIO_Init+0x2b8>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_GPIO_Init+0x2b8>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <HAL_GPIO_Init+0x2b8>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021dc:	4a48      	ldr	r2, [pc, #288]	; (8002300 <HAL_GPIO_Init+0x2bc>)
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a40      	ldr	r2, [pc, #256]	; (8002304 <HAL_GPIO_Init+0x2c0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_GPIO_Init+0x1ec>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3f      	ldr	r2, [pc, #252]	; (8002308 <HAL_GPIO_Init+0x2c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00d      	beq.n	800222c <HAL_GPIO_Init+0x1e8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3e      	ldr	r2, [pc, #248]	; (800230c <HAL_GPIO_Init+0x2c8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x1e4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <HAL_GPIO_Init+0x2cc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_GPIO_Init+0x1e0>
 8002220:	2303      	movs	r3, #3
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002224:	2304      	movs	r3, #4
 8002226:	e004      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002228:	2302      	movs	r3, #2
 800222a:	e002      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002230:	2300      	movs	r3, #0
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002242:	492f      	ldr	r1, [pc, #188]	; (8002300 <HAL_GPIO_Init+0x2bc>)
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	492c      	ldr	r1, [pc, #176]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	4928      	ldr	r1, [pc, #160]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4922      	ldr	r1, [pc, #136]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	491e      	ldr	r1, [pc, #120]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4918      	ldr	r1, [pc, #96]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4914      	ldr	r1, [pc, #80]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e021      	b.n	8002326 <HAL_GPIO_Init+0x2e2>
 80022e2:	bf00      	nop
 80022e4:	10320000 	.word	0x10320000
 80022e8:	10310000 	.word	0x10310000
 80022ec:	10220000 	.word	0x10220000
 80022f0:	10210000 	.word	0x10210000
 80022f4:	10120000 	.word	0x10120000
 80022f8:	10110000 	.word	0x10110000
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010000 	.word	0x40010000
 8002304:	40010800 	.word	0x40010800
 8002308:	40010c00 	.word	0x40010c00
 800230c:	40011000 	.word	0x40011000
 8002310:	40011400 	.word	0x40011400
 8002314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_GPIO_Init+0x304>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	43db      	mvns	r3, r3
 8002320:	4909      	ldr	r1, [pc, #36]	; (8002348 <HAL_GPIO_Init+0x304>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	3301      	adds	r3, #1
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	f47f ae8e 	bne.w	8002058 <HAL_GPIO_Init+0x14>
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	372c      	adds	r7, #44	; 0x2c
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	807b      	strh	r3, [r7, #2]
 8002386:	4613      	mov	r3, r2
 8002388:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800238a:	787b      	ldrb	r3, [r7, #1]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002396:	e003      	b.n	80023a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	041a      	lsls	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	611a      	str	r2, [r3, #16]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023bc:	887a      	ldrh	r2, [r7, #2]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	041a      	lsls	r2, r3, #16
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	400b      	ands	r3, r1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	611a      	str	r2, [r3, #16]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e12b      	b.n	8002646 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fc30 	bl	8000c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800242e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800243e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002440:	f001 f960 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8002444:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4a81      	ldr	r2, [pc, #516]	; (8002650 <HAL_I2C_Init+0x274>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d807      	bhi.n	8002460 <HAL_I2C_Init+0x84>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a80      	ldr	r2, [pc, #512]	; (8002654 <HAL_I2C_Init+0x278>)
 8002454:	4293      	cmp	r3, r2
 8002456:	bf94      	ite	ls
 8002458:	2301      	movls	r3, #1
 800245a:	2300      	movhi	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e006      	b.n	800246e <HAL_I2C_Init+0x92>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a7d      	ldr	r2, [pc, #500]	; (8002658 <HAL_I2C_Init+0x27c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	bf94      	ite	ls
 8002468:	2301      	movls	r3, #1
 800246a:	2300      	movhi	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0e7      	b.n	8002646 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a78      	ldr	r2, [pc, #480]	; (800265c <HAL_I2C_Init+0x280>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0c9b      	lsrs	r3, r3, #18
 8002480:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a6a      	ldr	r2, [pc, #424]	; (8002650 <HAL_I2C_Init+0x274>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d802      	bhi.n	80024b0 <HAL_I2C_Init+0xd4>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3301      	adds	r3, #1
 80024ae:	e009      	b.n	80024c4 <HAL_I2C_Init+0xe8>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	4a69      	ldr	r2, [pc, #420]	; (8002660 <HAL_I2C_Init+0x284>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	3301      	adds	r3, #1
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	495c      	ldr	r1, [pc, #368]	; (8002650 <HAL_I2C_Init+0x274>)
 80024e0:	428b      	cmp	r3, r1
 80024e2:	d819      	bhi.n	8002518 <HAL_I2C_Init+0x13c>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e59      	subs	r1, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f2:	1c59      	adds	r1, r3, #1
 80024f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024f8:	400b      	ands	r3, r1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_I2C_Init+0x138>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1e59      	subs	r1, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fbb1 f3f3 	udiv	r3, r1, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002512:	e051      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002514:	2304      	movs	r3, #4
 8002516:	e04f      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d111      	bne.n	8002544 <HAL_I2C_Init+0x168>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1e58      	subs	r0, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	440b      	add	r3, r1
 800252e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e012      	b.n	800256a <HAL_I2C_Init+0x18e>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	0099      	lsls	r1, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	fbb0 f3f3 	udiv	r3, r0, r3
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Init+0x196>
 800256e:	2301      	movs	r3, #1
 8002570:	e022      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10e      	bne.n	8002598 <HAL_I2C_Init+0x1bc>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1e58      	subs	r0, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	440b      	add	r3, r1
 8002588:	fbb0 f3f3 	udiv	r3, r0, r3
 800258c:	3301      	adds	r3, #1
 800258e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002596:	e00f      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	0099      	lsls	r1, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	6809      	ldr	r1, [r1, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6911      	ldr	r1, [r2, #16]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68d2      	ldr	r2, [r2, #12]
 80025f2:	4311      	orrs	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	000186a0 	.word	0x000186a0
 8002654:	001e847f 	.word	0x001e847f
 8002658:	003d08ff 	.word	0x003d08ff
 800265c:	431bde83 	.word	0x431bde83
 8002660:	10624dd3 	.word	0x10624dd3

08002664 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	461a      	mov	r2, r3
 8002670:	460b      	mov	r3, r1
 8002672:	817b      	strh	r3, [r7, #10]
 8002674:	4613      	mov	r3, r2
 8002676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7fe fffc 	bl	8001674 <HAL_GetTick>
 800267c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b20      	cmp	r3, #32
 8002688:	f040 80e0 	bne.w	800284c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2319      	movs	r3, #25
 8002692:	2201      	movs	r2, #1
 8002694:	4970      	ldr	r1, [pc, #448]	; (8002858 <HAL_I2C_Master_Transmit+0x1f4>)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fa92 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
 80026a4:	e0d3      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_I2C_Master_Transmit+0x50>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e0cc      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d007      	beq.n	80026da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2221      	movs	r2, #33	; 0x21
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2210      	movs	r2, #16
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	893a      	ldrh	r2, [r7, #8]
 800270a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a50      	ldr	r2, [pc, #320]	; (800285c <HAL_I2C_Master_Transmit+0x1f8>)
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f9ca 	bl	8002abc <I2C_MasterRequestWrite>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e08d      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002748:	e066      	b.n	8002818 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	6a39      	ldr	r1, [r7, #32]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fb50 	bl	8002df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00d      	beq.n	8002776 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b04      	cmp	r3, #4
 8002760:	d107      	bne.n	8002772 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e06b      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d11b      	bne.n	80027ec <HAL_I2C_Master_Transmit+0x188>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d017      	beq.n	80027ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	6a39      	ldr	r1, [r7, #32]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fb47 	bl	8002e84 <I2C_WaitOnBTFFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	2b04      	cmp	r3, #4
 8002802:	d107      	bne.n	8002814 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002812:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e01a      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	d194      	bne.n	800274a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	e000      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800284c:	2302      	movs	r3, #2
  }
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	00100002 	.word	0x00100002
 800285c:	ffff0000 	.word	0xffff0000

08002860 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	460b      	mov	r3, r1
 800286e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7fe ff00 	bl	8001674 <HAL_GetTick>
 8002874:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b20      	cmp	r3, #32
 8002884:	f040 8111 	bne.w	8002aaa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2319      	movs	r3, #25
 800288e:	2201      	movs	r2, #1
 8002890:	4988      	ldr	r1, [pc, #544]	; (8002ab4 <HAL_I2C_IsDeviceReady+0x254>)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f994 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
 80028a0:	e104      	b.n	8002aac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_I2C_IsDeviceReady+0x50>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0fd      	b.n	8002aac <HAL_I2C_IsDeviceReady+0x24c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d007      	beq.n	80028d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2224      	movs	r2, #36	; 0x24
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a70      	ldr	r2, [pc, #448]	; (8002ab8 <HAL_I2C_IsDeviceReady+0x258>)
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002908:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f952 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002930:	d103      	bne.n	800293a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0b6      	b.n	8002aac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800294c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe fe91 	bl	8001674 <HAL_GetTick>
 8002952:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	bf0c      	ite	eq
 8002962:	2301      	moveq	r3, #1
 8002964:	2300      	movne	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002982:	e025      	b.n	80029d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002984:	f7fe fe76 	bl	8001674 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d302      	bcc.n	800299a <HAL_I2C_IsDeviceReady+0x13a>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	22a0      	movs	r2, #160	; 0xa0
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2ba0      	cmp	r3, #160	; 0xa0
 80029da:	d005      	beq.n	80029e8 <HAL_I2C_IsDeviceReady+0x188>
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <HAL_I2C_IsDeviceReady+0x188>
 80029e2:	7dbb      	ldrb	r3, [r7, #22]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0cd      	beq.n	8002984 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d129      	bne.n	8002a52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2319      	movs	r3, #25
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4921      	ldr	r1, [pc, #132]	; (8002ab4 <HAL_I2C_IsDeviceReady+0x254>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f8c6 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e036      	b.n	8002aac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e02c      	b.n	8002aac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2319      	movs	r3, #25
 8002a72:	2201      	movs	r2, #1
 8002a74:	490f      	ldr	r1, [pc, #60]	; (8002ab4 <HAL_I2C_IsDeviceReady+0x254>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f8a2 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e012      	b.n	8002aac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	f4ff af32 	bcc.w	80028fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	00100002 	.word	0x00100002
 8002ab8:	ffff0000 	.word	0xffff0000

08002abc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d006      	beq.n	8002ae6 <I2C_MasterRequestWrite+0x2a>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d003      	beq.n	8002ae6 <I2C_MasterRequestWrite+0x2a>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ae4:	d108      	bne.n	8002af8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e00b      	b.n	8002b10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	2b12      	cmp	r3, #18
 8002afe:	d107      	bne.n	8002b10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f84f 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b36:	d103      	bne.n	8002b40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e035      	b.n	8002bb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b4c:	d108      	bne.n	8002b60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b4e:	897b      	ldrh	r3, [r7, #10]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b5c:	611a      	str	r2, [r3, #16]
 8002b5e:	e01b      	b.n	8002b98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b60:	897b      	ldrh	r3, [r7, #10]
 8002b62:	11db      	asrs	r3, r3, #7
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	f003 0306 	and.w	r3, r3, #6
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f063 030f 	orn	r3, r3, #15
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	490e      	ldr	r1, [pc, #56]	; (8002bb8 <I2C_MasterRequestWrite+0xfc>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f898 	bl	8002cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e010      	b.n	8002bb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b8e:	897b      	ldrh	r3, [r7, #10]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <I2C_MasterRequestWrite+0x100>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f888 	bl	8002cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	00010008 	.word	0x00010008
 8002bbc:	00010002 	.word	0x00010002

08002bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd0:	e048      	b.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d044      	beq.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bda:	f7fe fd4b 	bl	8001674 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d302      	bcc.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d139      	bne.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10d      	bne.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	43da      	mvns	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4013      	ands	r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	e00c      	b.n	8002c30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d116      	bne.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e023      	b.n	8002cac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10d      	bne.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	43da      	mvns	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	e00c      	b.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d093      	beq.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cc2:	e071      	b.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd2:	d123      	bne.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0204 	orr.w	r2, r3, #4
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e067      	b.n	8002dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d22:	d041      	beq.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d24:	f7fe fca6 	bl	8001674 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d302      	bcc.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d136      	bne.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d10c      	bne.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e00b      	b.n	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	43da      	mvns	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d016      	beq.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e021      	b.n	8002dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10c      	bne.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e00b      	b.n	8002de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f47f af6d 	bne.w	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e00:	e034      	b.n	8002e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f886 	bl	8002f14 <I2C_IsAcknowledgeFailed>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e034      	b.n	8002e7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d028      	beq.n	8002e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1a:	f7fe fc2b 	bl	8001674 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11d      	bne.n	8002e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3a:	2b80      	cmp	r3, #128	; 0x80
 8002e3c:	d016      	beq.n	8002e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e007      	b.n	8002e7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d1c3      	bne.n	8002e02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e90:	e034      	b.n	8002efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f83e 	bl	8002f14 <I2C_IsAcknowledgeFailed>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e034      	b.n	8002f0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d028      	beq.n	8002efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eaa:	f7fe fbe3 	bl	8001674 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d11d      	bne.n	8002efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d016      	beq.n	8002efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e007      	b.n	8002f0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d1c3      	bne.n	8002e92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d11b      	bne.n	8002f64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e272      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8087 	beq.w	800309e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f90:	4b92      	ldr	r3, [pc, #584]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d00c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f9c:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d112      	bne.n	8002fce <HAL_RCC_OscConfig+0x5e>
 8002fa8:	4b8c      	ldr	r3, [pc, #560]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d10b      	bne.n	8002fce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb6:	4b89      	ldr	r3, [pc, #548]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d06c      	beq.n	800309c <HAL_RCC_OscConfig+0x12c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d168      	bne.n	800309c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e24c      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x76>
 8002fd8:	4b80      	ldr	r3, [pc, #512]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a7f      	ldr	r2, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	e02e      	b.n	8003044 <HAL_RCC_OscConfig+0xd4>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x98>
 8002fee:	4b7b      	ldr	r3, [pc, #492]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a7a      	ldr	r2, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b78      	ldr	r3, [pc, #480]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a77      	ldr	r2, [pc, #476]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e01d      	b.n	8003044 <HAL_RCC_OscConfig+0xd4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0xbc>
 8003012:	4b72      	ldr	r3, [pc, #456]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a71      	ldr	r2, [pc, #452]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6e      	ldr	r2, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e00b      	b.n	8003044 <HAL_RCC_OscConfig+0xd4>
 800302c:	4b6b      	ldr	r3, [pc, #428]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6a      	ldr	r2, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b68      	ldr	r3, [pc, #416]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a67      	ldr	r2, [pc, #412]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 800303e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003042:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe fb12 	bl	8001674 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe fb0e 	bl	8001674 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e200      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0xe4>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fafe 	bl	8001674 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fafa 	bl	8001674 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1ec      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x10c>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d063      	beq.n	8003172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030aa:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030b6:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d11c      	bne.n	80030fc <HAL_RCC_OscConfig+0x18c>
 80030c2:	4b46      	ldr	r3, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d116      	bne.n	80030fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	4b43      	ldr	r3, [pc, #268]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_RCC_OscConfig+0x176>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1c0      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4939      	ldr	r1, [pc, #228]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	e03a      	b.n	8003172 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d020      	beq.n	8003146 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_RCC_OscConfig+0x270>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe fab3 	bl	8001674 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003112:	f7fe faaf 	bl	8001674 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e1a1      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4927      	ldr	r1, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
 8003144:	e015      	b.n	8003172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003146:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_RCC_OscConfig+0x270>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fa92 	bl	8001674 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003154:	f7fe fa8e 	bl	8001674 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e180      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d03a      	beq.n	80031f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d019      	beq.n	80031ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003188:	2201      	movs	r2, #1
 800318a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318c:	f7fe fa72 	bl	8001674 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003194:	f7fe fa6e 	bl	8001674 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e160      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031b2:	2001      	movs	r0, #1
 80031b4:	f000 fafe 	bl	80037b4 <RCC_Delay>
 80031b8:	e01c      	b.n	80031f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7fe fa58 	bl	8001674 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c6:	e00f      	b.n	80031e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fe fa54 	bl	8001674 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d908      	bls.n	80031e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e146      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	42420000 	.word	0x42420000
 80031e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	4b92      	ldr	r3, [pc, #584]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e9      	bne.n	80031c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80a6 	beq.w	800334e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003206:	4b8b      	ldr	r3, [pc, #556]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10d      	bne.n	800322e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4a87      	ldr	r2, [pc, #540]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	61d3      	str	r3, [r2, #28]
 800321e:	4b85      	ldr	r3, [pc, #532]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b82      	ldr	r3, [pc, #520]	; (8003438 <HAL_RCC_OscConfig+0x4c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d118      	bne.n	800326c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323a:	4b7f      	ldr	r3, [pc, #508]	; (8003438 <HAL_RCC_OscConfig+0x4c8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7e      	ldr	r2, [pc, #504]	; (8003438 <HAL_RCC_OscConfig+0x4c8>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003246:	f7fe fa15 	bl	8001674 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324e:	f7fe fa11 	bl	8001674 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b64      	cmp	r3, #100	; 0x64
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e103      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	4b75      	ldr	r3, [pc, #468]	; (8003438 <HAL_RCC_OscConfig+0x4c8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x312>
 8003274:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4a6e      	ldr	r2, [pc, #440]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6213      	str	r3, [r2, #32]
 8003280:	e02d      	b.n	80032de <HAL_RCC_OscConfig+0x36e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x334>
 800328a:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4a69      	ldr	r2, [pc, #420]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6213      	str	r3, [r2, #32]
 8003296:	4b67      	ldr	r3, [pc, #412]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4a66      	ldr	r2, [pc, #408]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	6213      	str	r3, [r2, #32]
 80032a2:	e01c      	b.n	80032de <HAL_RCC_OscConfig+0x36e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d10c      	bne.n	80032c6 <HAL_RCC_OscConfig+0x356>
 80032ac:	4b61      	ldr	r3, [pc, #388]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4a60      	ldr	r2, [pc, #384]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	6213      	str	r3, [r2, #32]
 80032b8:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4a5d      	ldr	r2, [pc, #372]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6213      	str	r3, [r2, #32]
 80032c4:	e00b      	b.n	80032de <HAL_RCC_OscConfig+0x36e>
 80032c6:	4b5b      	ldr	r3, [pc, #364]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a5a      	ldr	r2, [pc, #360]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6213      	str	r3, [r2, #32]
 80032d2:	4b58      	ldr	r3, [pc, #352]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4a57      	ldr	r2, [pc, #348]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	f023 0304 	bic.w	r3, r3, #4
 80032dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d015      	beq.n	8003312 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e6:	f7fe f9c5 	bl	8001674 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fe f9c1 	bl	8001674 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0b1      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ee      	beq.n	80032ee <HAL_RCC_OscConfig+0x37e>
 8003310:	e014      	b.n	800333c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7fe f9af 	bl	8001674 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe f9ab 	bl	8001674 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e09b      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003330:	4b40      	ldr	r3, [pc, #256]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ee      	bne.n	800331a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4b3c      	ldr	r3, [pc, #240]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	4a3b      	ldr	r2, [pc, #236]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8087 	beq.w	8003466 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b08      	cmp	r3, #8
 8003362:	d061      	beq.n	8003428 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d146      	bne.n	80033fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336c:	4b33      	ldr	r3, [pc, #204]	; (800343c <HAL_RCC_OscConfig+0x4cc>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe f97f 	bl	8001674 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337a:	f7fe f97b 	bl	8001674 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e06d      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338c:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d108      	bne.n	80033b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4921      	ldr	r1, [pc, #132]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b4:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a19      	ldr	r1, [r3, #32]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	430b      	orrs	r3, r1
 80033c6:	491b      	ldr	r1, [pc, #108]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x4cc>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d2:	f7fe f94f 	bl	8001674 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033da:	f7fe f94b 	bl	8001674 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e03d      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x46a>
 80033f8:	e035      	b.n	8003466 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_OscConfig+0x4cc>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe f938 	bl	8001674 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe f934 	bl	8001674 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e026      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x498>
 8003426:	e01e      	b.n	8003466 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e019      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
 800343c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_OscConfig+0x500>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	429a      	cmp	r2, r3
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0d0      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d910      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b67      	ldr	r3, [pc, #412]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 0207 	bic.w	r2, r3, #7
 800349e:	4965      	ldr	r1, [pc, #404]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b8      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	494d      	ldr	r1, [pc, #308]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d040      	beq.n	8003594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d115      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07f      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b41      	ldr	r3, [pc, #260]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e073      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3d      	ldr	r3, [pc, #244]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06b      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4936      	ldr	r1, [pc, #216]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003564:	f7fe f886 	bl	8001674 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7fe f882 	bl	8001674 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e053      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d210      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 0207 	bic.w	r2, r3, #7
 80035aa:	4922      	ldr	r1, [pc, #136]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	490e      	ldr	r1, [pc, #56]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003602:	f000 f821 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490a      	ldr	r1, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x1c8>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1cc>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1d0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fbde 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40022000 	.word	0x40022000
 8003638:	40021000 	.word	0x40021000
 800363c:	080081e8 	.word	0x080081e8
 8003640:	20000000 	.word	0x20000000
 8003644:	2000000c 	.word	0x2000000c

08003648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b04      	cmp	r3, #4
 8003670:	d002      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x30>
 8003672:	2b08      	cmp	r3, #8
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x36>
 8003676:	e027      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800367a:	613b      	str	r3, [r7, #16]
      break;
 800367c:	e027      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	0c9b      	lsrs	r3, r3, #18
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
 800368a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d010      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	0c5b      	lsrs	r3, r3, #17
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036a2:	5cd3      	ldrb	r3, [r2, r3]
 80036a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80036aa:	fb03 f202 	mul.w	r2, r3, r2
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e004      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	613b      	str	r3, [r7, #16]
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80036ca:	613b      	str	r3, [r7, #16]
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	693b      	ldr	r3, [r7, #16]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	007a1200 	.word	0x007a1200
 80036e4:	08008f5c 	.word	0x08008f5c
 80036e8:	08008f6c 	.word	0x08008f6c
 80036ec:	003d0900 	.word	0x003d0900

080036f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f4:	4b02      	ldr	r3, [pc, #8]	; (8003700 <HAL_RCC_GetHCLKFreq+0x10>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	20000000 	.word	0x20000000

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff2 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000
 8003728:	080081f8 	.word	0x080081f8

0800372c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003730:	f7ff ffde 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0adb      	lsrs	r3, r3, #11
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	080081f8 	.word	0x080081f8

08003754 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	220f      	movs	r2, #15
 8003762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_RCC_GetClockConfig+0x58>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0203 	and.w	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_RCC_GetClockConfig+0x58>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_GetClockConfig+0x58>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <HAL_RCC_GetClockConfig+0x58>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	08db      	lsrs	r3, r3, #3
 800378e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0207 	and.w	r2, r3, #7
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40022000 	.word	0x40022000

080037b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <RCC_Delay+0x34>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <RCC_Delay+0x38>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0a5b      	lsrs	r3, r3, #9
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037d0:	bf00      	nop
  }
  while (Delay --);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	60fa      	str	r2, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f9      	bne.n	80037d0 <RCC_Delay+0x1c>
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	20000000 	.word	0x20000000
 80037ec:	10624dd3 	.word	0x10624dd3

080037f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d07d      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800380c:	2300      	movs	r3, #0
 800380e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003810:	4b4f      	ldr	r3, [pc, #316]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10d      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381c:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	4a4b      	ldr	r2, [pc, #300]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003826:	61d3      	str	r3, [r2, #28]
 8003828:	4b49      	ldr	r3, [pc, #292]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003834:	2301      	movs	r3, #1
 8003836:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	4b46      	ldr	r3, [pc, #280]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d118      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a42      	ldr	r2, [pc, #264]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800384a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003850:	f7fd ff10 	bl	8001674 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003856:	e008      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003858:	f7fd ff0c 	bl	8001674 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e06d      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386a:	4b3a      	ldr	r3, [pc, #232]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003876:	4b36      	ldr	r3, [pc, #216]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02e      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	429a      	cmp	r2, r3
 8003892:	d027      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003894:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800389e:	4b2e      	ldr	r3, [pc, #184]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038a4:	4b2c      	ldr	r3, [pc, #176]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038aa:	4a29      	ldr	r2, [pc, #164]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d014      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fd fedb 	bl	8001674 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fd fed7 	bl	8001674 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e036      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ee      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4917      	ldr	r1, [pc, #92]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d105      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	4a13      	ldr	r2, [pc, #76]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003906:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	490b      	ldr	r1, [pc, #44]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4904      	ldr	r1, [pc, #16]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
 8003958:	42420440 	.word	0x42420440

0800395c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e041      	b.n	80039f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd f9b0 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 fa1c 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d001      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e03a      	b.n	8003a8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_TIM_Base_Start_IT+0x98>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00e      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x58>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d009      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x58>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x58>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <HAL_TIM_Base_Start_IT+0xa0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d111      	bne.n	8003a78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d010      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	e007      	b.n	8003a88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800

08003aa0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6a1a      	ldr	r2, [r3, #32]
 8003abe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10f      	bne.n	8003ae8 <HAL_TIM_Base_Stop_IT+0x48>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	f240 4344 	movw	r3, #1092	; 0x444
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_Base_Stop_IT+0x48>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0202 	mvn.w	r2, #2
 8003b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f92f 	bl	8003da2 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f922 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f931 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0204 	mvn.w	r2, #4
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f905 	bl	8003da2 <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8f8 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f907 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d122      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d11b      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0208 	mvn.w	r2, #8
 8003bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8db 	bl	8003da2 <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8ce 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f8dd 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d122      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d11b      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0210 	mvn.w	r2, #16
 8003c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8b1 	bl	8003da2 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8a4 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f8b3 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d10e      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d107      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0201 	mvn.w	r2, #1
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fc fd62 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b80      	cmp	r3, #128	; 0x80
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa6d 	bl	8004186 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d107      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f877 	bl	8003dc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d10e      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d107      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0220 	mvn.w	r2, #32
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa38 	bl	8004174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e031      	b.n	8003d88 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8b0 	bl	8003e9c <TIM_SlaveTimer_SetConfig>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e018      	b.n	8003d88 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d64:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d74:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <TIM_Base_SetConfig+0xb8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00b      	beq.n	8003e08 <TIM_Base_SetConfig+0x30>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df6:	d007      	beq.n	8003e08 <TIM_Base_SetConfig+0x30>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <TIM_Base_SetConfig+0xbc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_Base_SetConfig+0x30>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <TIM_Base_SetConfig+0xc0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d108      	bne.n	8003e1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <TIM_Base_SetConfig+0xb8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_Base_SetConfig+0x62>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0x62>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <TIM_Base_SetConfig+0xbc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0x62>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <TIM_Base_SetConfig+0xc0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a07      	ldr	r2, [pc, #28]	; (8003e90 <TIM_Base_SetConfig+0xb8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d103      	bne.n	8003e80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	615a      	str	r2, [r3, #20]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800

08003e9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f023 0307 	bic.w	r3, r3, #7
 8003eca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b70      	cmp	r3, #112	; 0x70
 8003ee4:	d01a      	beq.n	8003f1c <TIM_SlaveTimer_SetConfig+0x80>
 8003ee6:	2b70      	cmp	r3, #112	; 0x70
 8003ee8:	d860      	bhi.n	8003fac <TIM_SlaveTimer_SetConfig+0x110>
 8003eea:	2b60      	cmp	r3, #96	; 0x60
 8003eec:	d054      	beq.n	8003f98 <TIM_SlaveTimer_SetConfig+0xfc>
 8003eee:	2b60      	cmp	r3, #96	; 0x60
 8003ef0:	d85c      	bhi.n	8003fac <TIM_SlaveTimer_SetConfig+0x110>
 8003ef2:	2b50      	cmp	r3, #80	; 0x50
 8003ef4:	d046      	beq.n	8003f84 <TIM_SlaveTimer_SetConfig+0xe8>
 8003ef6:	2b50      	cmp	r3, #80	; 0x50
 8003ef8:	d858      	bhi.n	8003fac <TIM_SlaveTimer_SetConfig+0x110>
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d019      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x96>
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d854      	bhi.n	8003fac <TIM_SlaveTimer_SetConfig+0x110>
 8003f02:	2b30      	cmp	r3, #48	; 0x30
 8003f04:	d055      	beq.n	8003fb2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f06:	2b30      	cmp	r3, #48	; 0x30
 8003f08:	d850      	bhi.n	8003fac <TIM_SlaveTimer_SetConfig+0x110>
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d051      	beq.n	8003fb2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d84c      	bhi.n	8003fac <TIM_SlaveTimer_SetConfig+0x110>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d04d      	beq.n	8003fb2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d04b      	beq.n	8003fb2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f1a:	e047      	b.n	8003fac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003f2c:	f000 f8a4 	bl	8004078 <TIM_ETR_SetConfig>
      break;
 8003f30:	e040      	b.n	8003fb4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d101      	bne.n	8003f3e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e03b      	b.n	8003fb6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6a1a      	ldr	r2, [r3, #32]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f64:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
      break;
 8003f82:	e017      	b.n	8003fb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f90:	461a      	mov	r2, r3
 8003f92:	f000 f814 	bl	8003fbe <TIM_TI1_ConfigInputStage>
      break;
 8003f96:	e00d      	b.n	8003fb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f000 f838 	bl	800401a <TIM_TI2_ConfigInputStage>
      break;
 8003faa:	e003      	b.n	8003fb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb0:	e000      	b.n	8003fb4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003fb2:	bf00      	nop
  }

  return status;
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f023 0201 	bic.w	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 030a 	bic.w	r3, r3, #10
 8003ffa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b087      	sub	sp, #28
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f023 0210 	bic.w	r2, r3, #16
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004056:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	431a      	orrs	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	609a      	str	r2, [r3, #8]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e046      	b.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d009      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a12      	ldr	r2, [pc, #72]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a10      	ldr	r2, [pc, #64]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10c      	bne.n	800414c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4313      	orrs	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800

08004174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e042      	b.n	8004230 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc fdb6 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	; 0x24
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f91d 	bl	800441c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b20      	cmp	r3, #32
 8004256:	d16d      	bne.n	8004334 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_UART_Transmit+0x2c>
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e066      	b.n	8004336 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2221      	movs	r2, #33	; 0x21
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004276:	f7fd f9fd 	bl	8001674 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	88fa      	ldrh	r2, [r7, #6]
 8004286:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d108      	bne.n	80042a4 <HAL_UART_Transmit+0x6c>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e003      	b.n	80042ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042ac:	e02a      	b.n	8004304 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f840 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e036      	b.n	8004336 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	3302      	adds	r3, #2
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	e007      	b.n	80042f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	3301      	adds	r3, #1
 80042f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1cf      	bne.n	80042ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	2140      	movs	r1, #64	; 0x40
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f810 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e006      	b.n	8004336 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e000      	b.n	8004336 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b090      	sub	sp, #64	; 0x40
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434e:	e050      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d04c      	beq.n	80043f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0x30>
 800435e:	f7fd f989 	bl	8001674 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800436a:	429a      	cmp	r2, r3
 800436c:	d241      	bcs.n	80043f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800438e:	637a      	str	r2, [r7, #52]	; 0x34
 8004390:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e5      	bne.n	800436e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3314      	adds	r3, #20
 80043a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	613b      	str	r3, [r7, #16]
   return(result);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c2:	623a      	str	r2, [r7, #32]
 80043c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	69f9      	ldr	r1, [r7, #28]
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e5      	bne.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e00f      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	429a      	cmp	r2, r3
 8004400:	bf0c      	ite	eq
 8004402:	2301      	moveq	r3, #1
 8004404:	2300      	movne	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	429a      	cmp	r2, r3
 800440e:	d09f      	beq.n	8004350 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3740      	adds	r7, #64	; 0x40
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004456:	f023 030c 	bic.w	r3, r3, #12
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	430b      	orrs	r3, r1
 8004462:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <UART_SetConfig+0x114>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7ff f952 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	e002      	b.n	8004492 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800448c:	f7ff f93a 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004490:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	4a22      	ldr	r2, [pc, #136]	; (8004534 <UART_SetConfig+0x118>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	0119      	lsls	r1, r3, #4
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009a      	lsls	r2, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <UART_SetConfig+0x118>)
 80044ca:	fba3 0302 	umull	r0, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2064      	movs	r0, #100	; 0x64
 80044d2:	fb00 f303 	mul.w	r3, r0, r3
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	3332      	adds	r3, #50	; 0x32
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <UART_SetConfig+0x118>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e8:	4419      	add	r1, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009a      	lsls	r2, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <UART_SetConfig+0x118>)
 8004502:	fba3 0302 	umull	r0, r3, r3, r2
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2064      	movs	r0, #100	; 0x64
 800450a:	fb00 f303 	mul.w	r3, r0, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	3332      	adds	r3, #50	; 0x32
 8004514:	4a07      	ldr	r2, [pc, #28]	; (8004534 <UART_SetConfig+0x118>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	f003 020f 	and.w	r2, r3, #15
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	440a      	add	r2, r1
 8004526:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40013800 	.word	0x40013800
 8004534:	51eb851f 	.word	0x51eb851f

08004538 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f103 0208 	add.w	r2, r3, #8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f04f 32ff 	mov.w	r2, #4294967295
 8004550:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f103 0208 	add.w	r2, r3, #8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f103 0208 	add.w	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d103      	bne.n	80045f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	e00c      	b.n	800460e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3308      	adds	r3, #8
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	e002      	b.n	8004602 <vListInsert+0x2e>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	429a      	cmp	r2, r3
 800460c:	d2f6      	bcs.n	80045fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6892      	ldr	r2, [r2, #8]
 800465a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d103      	bne.n	8004678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	1e5a      	subs	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
	...

08004698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046c2:	f002 f833 	bl	800672c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	441a      	add	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f2:	3b01      	subs	r3, #1
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	441a      	add	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	22ff      	movs	r2, #255	; 0xff
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d114      	bne.n	8004742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3310      	adds	r3, #16
 8004724:	4618      	mov	r0, r3
 8004726:	f001 f951 	bl	80059cc <xTaskRemoveFromEventList>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d012      	beq.n	8004756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <xQueueGenericReset+0xcc>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	e009      	b.n	8004756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3310      	adds	r3, #16
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fef6 	bl	8004538 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3324      	adds	r3, #36	; 0x24
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fef1 	bl	8004538 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004756:	f002 f819 	bl	800678c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800475a:	2301      	movs	r3, #1
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	4613      	mov	r3, r2
 8004774:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xQueueGenericCreate+0x2a>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	613b      	str	r3, [r7, #16]
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004798:	2300      	movs	r3, #0
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e004      	b.n	80047a8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	3350      	adds	r3, #80	; 0x50
 80047ac:	4618      	mov	r0, r3
 80047ae:	f002 f8bd 	bl	800692c <pvPortMalloc>
 80047b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00f      	beq.n	80047da <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	3350      	adds	r3, #80	; 0x50
 80047be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047c8:	79fa      	ldrb	r2, [r7, #7]
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f805 	bl	80047e4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047da:	69bb      	ldr	r3, [r7, #24]
	}
 80047dc:	4618      	mov	r0, r3
 80047de:	3720      	adds	r7, #32
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d103      	bne.n	8004800 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e002      	b.n	8004806 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004812:	2101      	movs	r1, #1
 8004814:	69b8      	ldr	r0, [r7, #24]
 8004816:	f7ff ff3f 	bl	8004698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	; 0x38
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800483a:	2300      	movs	r3, #0
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <xQueueGenericSend+0x32>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d103      	bne.n	800486c <xQueueGenericSend+0x40>
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <xQueueGenericSend+0x44>
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <xQueueGenericSend+0x46>
 8004870:	2300      	movs	r3, #0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <xQueueGenericSend+0x60>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d103      	bne.n	800489a <xQueueGenericSend+0x6e>
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <xQueueGenericSend+0x72>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xQueueGenericSend+0x74>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xQueueGenericSend+0x8e>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	623b      	str	r3, [r7, #32]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ba:	f001 fa83 	bl	8005dc4 <xTaskGetSchedulerState>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <xQueueGenericSend+0x9e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <xQueueGenericSend+0xa2>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <xQueueGenericSend+0xa4>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xQueueGenericSend+0xbe>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	61fb      	str	r3, [r7, #28]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048ea:	f001 ff1f 	bl	800672c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <xQueueGenericSend+0xd4>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d129      	bne.n	8004954 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004906:	f000 f98d 	bl	8004c24 <prvCopyDataToQueue>
 800490a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	2b00      	cmp	r3, #0
 8004912:	d010      	beq.n	8004936 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	3324      	adds	r3, #36	; 0x24
 8004918:	4618      	mov	r0, r3
 800491a:	f001 f857 	bl	80059cc <xTaskRemoveFromEventList>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004924:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <xQueueGenericSend+0x1f8>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	e00a      	b.n	800494c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800493c:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <xQueueGenericSend+0x1f8>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800494c:	f001 ff1e 	bl	800678c <vPortExitCritical>
				return pdPASS;
 8004950:	2301      	movs	r3, #1
 8004952:	e063      	b.n	8004a1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800495a:	f001 ff17 	bl	800678c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800495e:	2300      	movs	r3, #0
 8004960:	e05c      	b.n	8004a1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	4618      	mov	r0, r3
 800496e:	f001 f88f 	bl	8005a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004972:	2301      	movs	r3, #1
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004976:	f001 ff09 	bl	800678c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800497a:	f000 fde3 	bl	8005544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800497e:	f001 fed5 	bl	800672c <vPortEnterCritical>
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004988:	b25b      	sxtb	r3, r3
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d103      	bne.n	8004998 <xQueueGenericSend+0x16c>
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d103      	bne.n	80049ae <xQueueGenericSend+0x182>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ae:	f001 feed 	bl	800678c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049b2:	1d3a      	adds	r2, r7, #4
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 f87e 	bl	8005abc <xTaskCheckForTimeOut>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d124      	bne.n	8004a10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049c8:	f000 fa24 	bl	8004e14 <prvIsQueueFull>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d018      	beq.n	8004a04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	3310      	adds	r3, #16
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	4611      	mov	r1, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 ffd2 	bl	8005984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e2:	f000 f9af 	bl	8004d44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049e6:	f000 fdbb 	bl	8005560 <xTaskResumeAll>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f47f af7c 	bne.w	80048ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <xQueueGenericSend+0x1f8>)
 80049f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	e772      	b.n	80048ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a06:	f000 f99d 	bl	8004d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a0a:	f000 fda9 	bl	8005560 <xTaskResumeAll>
 8004a0e:	e76c      	b.n	80048ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a12:	f000 f997 	bl	8004d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a16:	f000 fda3 	bl	8005560 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a1a:	2300      	movs	r3, #0
		}
	}
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3738      	adds	r7, #56	; 0x38
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	; 0x30
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <xQueueReceive+0x30>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	623b      	str	r3, [r7, #32]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <xQueueReceive+0x3e>
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <xQueueReceive+0x42>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueReceive+0x44>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueReceive+0x5e>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61fb      	str	r3, [r7, #28]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a86:	f001 f99d 	bl	8005dc4 <xTaskGetSchedulerState>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <xQueueReceive+0x6e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueReceive+0x72>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueReceive+0x74>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xQueueReceive+0x8e>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	61bb      	str	r3, [r7, #24]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ab6:	f001 fe39 	bl	800672c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01f      	beq.n	8004b06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aca:	f000 f915 	bl	8004cf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00f      	beq.n	8004afe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 ff72 	bl	80059cc <xTaskRemoveFromEventList>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004aee:	4b3d      	ldr	r3, [pc, #244]	; (8004be4 <xQueueReceive+0x1bc>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004afe:	f001 fe45 	bl	800678c <vPortExitCritical>
				return pdPASS;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e069      	b.n	8004bda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b0c:	f001 fe3e 	bl	800678c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e062      	b.n	8004bda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b1a:	f107 0310 	add.w	r3, r7, #16
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 ffb6 	bl	8005a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b24:	2301      	movs	r3, #1
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b28:	f001 fe30 	bl	800678c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b2c:	f000 fd0a 	bl	8005544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b30:	f001 fdfc 	bl	800672c <vPortEnterCritical>
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d103      	bne.n	8004b4a <xQueueReceive+0x122>
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d103      	bne.n	8004b60 <xQueueReceive+0x138>
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b60:	f001 fe14 	bl	800678c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b64:	1d3a      	adds	r2, r7, #4
 8004b66:	f107 0310 	add.w	r3, r7, #16
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 ffa5 	bl	8005abc <xTaskCheckForTimeOut>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d123      	bne.n	8004bc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b7a:	f000 f935 	bl	8004de8 <prvIsQueueEmpty>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d017      	beq.n	8004bb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	3324      	adds	r3, #36	; 0x24
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fef9 	bl	8005984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b94:	f000 f8d6 	bl	8004d44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b98:	f000 fce2 	bl	8005560 <xTaskResumeAll>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d189      	bne.n	8004ab6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <xQueueReceive+0x1bc>)
 8004ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	e780      	b.n	8004ab6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb6:	f000 f8c5 	bl	8004d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bba:	f000 fcd1 	bl	8005560 <xTaskResumeAll>
 8004bbe:	e77a      	b.n	8004ab6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc2:	f000 f8bf 	bl	8004d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bc6:	f000 fccb 	bl	8005560 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bcc:	f000 f90c 	bl	8004de8 <prvIsQueueEmpty>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f43f af6f 	beq.w	8004ab6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3730      	adds	r7, #48	; 0x30
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	60bb      	str	r3, [r7, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004c0c:	f001 fd8e 	bl	800672c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004c16:	f001 fdb9 	bl	800678c <vPortExitCritical>

	return uxReturn;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d14d      	bne.n	8004ce6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f001 f8d6 	bl	8005e00 <xTaskPriorityDisinherit>
 8004c54:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	e043      	b.n	8004ce6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d119      	bne.n	8004c98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6898      	ldr	r0, [r3, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	f002 fb33 	bl	80072da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	441a      	add	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d32b      	bcc.n	8004ce6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	e026      	b.n	8004ce6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68d8      	ldr	r0, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	f002 fb19 	bl	80072da <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	441a      	add	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d207      	bcs.n	8004cd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	425b      	negs	r3, r3
 8004cce:	441a      	add	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d105      	bne.n	8004ce6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cee:	697b      	ldr	r3, [r7, #20]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d018      	beq.n	8004d3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	441a      	add	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d303      	bcc.n	8004d2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68d9      	ldr	r1, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	461a      	mov	r2, r3
 8004d36:	6838      	ldr	r0, [r7, #0]
 8004d38:	f002 facf 	bl	80072da <memcpy>
	}
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d4c:	f001 fcee 	bl	800672c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d58:	e011      	b.n	8004d7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d012      	beq.n	8004d88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3324      	adds	r3, #36	; 0x24
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fe30 	bl	80059cc <xTaskRemoveFromEventList>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d72:	f000 ff05 	bl	8005b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	dce9      	bgt.n	8004d5a <prvUnlockQueue+0x16>
 8004d86:	e000      	b.n	8004d8a <prvUnlockQueue+0x46>
					break;
 8004d88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	22ff      	movs	r2, #255	; 0xff
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d92:	f001 fcfb 	bl	800678c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d96:	f001 fcc9 	bl	800672c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004da0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004da2:	e011      	b.n	8004dc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d012      	beq.n	8004dd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3310      	adds	r3, #16
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fe0b 	bl	80059cc <xTaskRemoveFromEventList>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dbc:	f000 fee0 	bl	8005b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dc0:	7bbb      	ldrb	r3, [r7, #14]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dce9      	bgt.n	8004da4 <prvUnlockQueue+0x60>
 8004dd0:	e000      	b.n	8004dd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	22ff      	movs	r2, #255	; 0xff
 8004dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ddc:	f001 fcd6 	bl	800678c <vPortExitCritical>
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004df0:	f001 fc9c 	bl	800672c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e001      	b.n	8004e06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e06:	f001 fcc1 	bl	800678c <vPortExitCritical>

	return xReturn;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e1c:	f001 fc86 	bl	800672c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d102      	bne.n	8004e32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e001      	b.n	8004e36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e36:	f001 fca9 	bl	800678c <vPortExitCritical>

	return xReturn;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08e      	sub	sp, #56	; 0x38
 8004e48:	af04      	add	r7, sp, #16
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	623b      	str	r3, [r7, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <xTaskCreateStatic+0x46>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61fb      	str	r3, [r7, #28]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e8a:	23b0      	movs	r3, #176	; 0xb0
 8004e8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2bb0      	cmp	r3, #176	; 0xb0
 8004e92:	d00a      	beq.n	8004eaa <xTaskCreateStatic+0x66>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	61bb      	str	r3, [r7, #24]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01e      	beq.n	8004eee <xTaskCreateStatic+0xaa>
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01b      	beq.n	8004eee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9303      	str	r3, [sp, #12]
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	9302      	str	r3, [sp, #8]
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f851 	bl	8004f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ee6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ee8:	f000 f8f2 	bl	80050d0 <prvAddNewTaskToReadyList>
 8004eec:	e001      	b.n	8004ef2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ef2:	697b      	ldr	r3, [r7, #20]
	}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3728      	adds	r7, #40	; 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	; 0x30
 8004f00:	af04      	add	r7, sp, #16
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 fd0b 	bl	800692c <pvPortMalloc>
 8004f16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00e      	beq.n	8004f3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f1e:	20b0      	movs	r0, #176	; 0xb0
 8004f20:	f001 fd04 	bl	800692c <pvPortMalloc>
 8004f24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
 8004f32:	e005      	b.n	8004f40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f34:	6978      	ldr	r0, [r7, #20]
 8004f36:	f001 fdc3 	bl	8006ac0 <vPortFree>
 8004f3a:	e001      	b.n	8004f40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d017      	beq.n	8004f76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f4e:	88fa      	ldrh	r2, [r7, #6]
 8004f50:	2300      	movs	r3, #0
 8004f52:	9303      	str	r3, [sp, #12]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f80f 	bl	8004f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f6a:	69f8      	ldr	r0, [r7, #28]
 8004f6c:	f000 f8b0 	bl	80050d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f70:	2301      	movs	r3, #1
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e002      	b.n	8004f7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f76:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
	}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	21a5      	movs	r1, #165	; 0xa5
 8004fa2:	f002 f8c9 	bl	8007138 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	617b      	str	r3, [r7, #20]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	e012      	b.n	800500c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	7819      	ldrb	r1, [r3, #0]
 8004fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3334      	adds	r3, #52	; 0x34
 8004ff6:	460a      	mov	r2, r1
 8004ff8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4413      	add	r3, r2
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d006      	beq.n	8005014 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3301      	adds	r3, #1
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b0f      	cmp	r3, #15
 8005010:	d9e9      	bls.n	8004fe6 <prvInitialiseNewTask+0x5e>
 8005012:	e000      	b.n	8005016 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005014:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	2b06      	cmp	r3, #6
 8005022:	d901      	bls.n	8005028 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005024:	2306      	movs	r3, #6
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005032:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	2200      	movs	r2, #0
 8005038:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	3304      	adds	r3, #4
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff fa99 	bl	8004576 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	3318      	adds	r3, #24
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fa94 	bl	8004576 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005052:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	f1c3 0207 	rsb	r2, r3, #7
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005062:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	2200      	movs	r2, #0
 8005068:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	2200      	movs	r2, #0
 800506e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	2200      	movs	r2, #0
 800507c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	335c      	adds	r3, #92	; 0x5c
 8005084:	224c      	movs	r2, #76	; 0x4c
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f002 f855 	bl	8007138 <memset>
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	4a0c      	ldr	r2, [pc, #48]	; (80050c4 <prvInitialiseNewTask+0x13c>)
 8005092:	661a      	str	r2, [r3, #96]	; 0x60
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <prvInitialiseNewTask+0x140>)
 8005098:	665a      	str	r2, [r3, #100]	; 0x64
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <prvInitialiseNewTask+0x144>)
 800509e:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	69b8      	ldr	r0, [r7, #24]
 80050a6:	f001 fa51 	bl	800654c <pxPortInitialiseStack>
 80050aa:	4602      	mov	r2, r0
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <prvInitialiseNewTask+0x134>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050bc:	bf00      	nop
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20001618 	.word	0x20001618
 80050c8:	20001680 	.word	0x20001680
 80050cc:	200016e8 	.word	0x200016e8

080050d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050d8:	f001 fb28 	bl	800672c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050dc:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <prvAddNewTaskToReadyList+0xc0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	4a2b      	ldr	r2, [pc, #172]	; (8005190 <prvAddNewTaskToReadyList+0xc0>)
 80050e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050e6:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <prvAddNewTaskToReadyList+0xc4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050ee:	4a29      	ldr	r2, [pc, #164]	; (8005194 <prvAddNewTaskToReadyList+0xc4>)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050f4:	4b26      	ldr	r3, [pc, #152]	; (8005190 <prvAddNewTaskToReadyList+0xc0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d110      	bne.n	800511e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050fc:	f000 fd64 	bl	8005bc8 <prvInitialiseTaskLists>
 8005100:	e00d      	b.n	800511e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005102:	4b25      	ldr	r3, [pc, #148]	; (8005198 <prvAddNewTaskToReadyList+0xc8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800510a:	4b22      	ldr	r3, [pc, #136]	; (8005194 <prvAddNewTaskToReadyList+0xc4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	429a      	cmp	r2, r3
 8005116:	d802      	bhi.n	800511e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005118:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <prvAddNewTaskToReadyList+0xc4>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800511e:	4b1f      	ldr	r3, [pc, #124]	; (800519c <prvAddNewTaskToReadyList+0xcc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	4a1d      	ldr	r2, [pc, #116]	; (800519c <prvAddNewTaskToReadyList+0xcc>)
 8005126:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005128:	4b1c      	ldr	r3, [pc, #112]	; (800519c <prvAddNewTaskToReadyList+0xcc>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	2201      	movs	r2, #1
 8005136:	409a      	lsls	r2, r3
 8005138:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <prvAddNewTaskToReadyList+0xd0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4313      	orrs	r3, r2
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <prvAddNewTaskToReadyList+0xd0>)
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <prvAddNewTaskToReadyList+0xd4>)
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f7ff fa18 	bl	800458e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800515e:	f001 fb15 	bl	800678c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <prvAddNewTaskToReadyList+0xc8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00e      	beq.n	8005188 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <prvAddNewTaskToReadyList+0xc4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	429a      	cmp	r2, r3
 8005176:	d207      	bcs.n	8005188 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <prvAddNewTaskToReadyList+0xd8>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	200009c4 	.word	0x200009c4
 8005194:	200008c4 	.word	0x200008c4
 8005198:	200009d0 	.word	0x200009d0
 800519c:	200009e0 	.word	0x200009e0
 80051a0:	200009cc 	.word	0x200009cc
 80051a4:	200008c8 	.word	0x200008c8
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	617b      	str	r3, [r7, #20]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <vTaskDelayUntil+0x46>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	613b      	str	r3, [r7, #16]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80051f2:	4b2a      	ldr	r3, [pc, #168]	; (800529c <vTaskDelayUntil+0xf0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <vTaskDelayUntil+0x64>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	60fb      	str	r3, [r7, #12]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005210:	f000 f998 	bl	8005544 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005214:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <vTaskDelayUntil+0xf4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	4413      	add	r3, r2
 8005222:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6a3a      	ldr	r2, [r7, #32]
 800522a:	429a      	cmp	r2, r3
 800522c:	d20b      	bcs.n	8005246 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	429a      	cmp	r2, r3
 8005236:	d211      	bcs.n	800525c <vTaskDelayUntil+0xb0>
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	429a      	cmp	r2, r3
 800523e:	d90d      	bls.n	800525c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005240:	2301      	movs	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
 8005244:	e00a      	b.n	800525c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	429a      	cmp	r2, r3
 800524e:	d303      	bcc.n	8005258 <vTaskDelayUntil+0xac>
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	429a      	cmp	r2, r3
 8005256:	d901      	bls.n	800525c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	d006      	beq.n	8005276 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2100      	movs	r1, #0
 8005270:	4618      	mov	r0, r3
 8005272:	f001 f905 	bl	8006480 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005276:	f000 f973 	bl	8005560 <xTaskResumeAll>
 800527a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d107      	bne.n	8005292 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005282:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <vTaskDelayUntil+0xf8>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005292:	bf00      	nop
 8005294:	3728      	adds	r7, #40	; 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200009ec 	.word	0x200009ec
 80052a0:	200009c8 	.word	0x200009c8
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d017      	beq.n	80052ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <vTaskDelay+0x60>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <vTaskDelay+0x30>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	60bb      	str	r3, [r7, #8]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052d8:	f000 f934 	bl	8005544 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052dc:	2100      	movs	r1, #0
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 f8ce 	bl	8006480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052e4:	f000 f93c 	bl	8005560 <xTaskResumeAll>
 80052e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d107      	bne.n	8005300 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052f0:	4b06      	ldr	r3, [pc, #24]	; (800530c <vTaskDelay+0x64>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	200009ec 	.word	0x200009ec
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b06      	cmp	r3, #6
 8005322:	d90a      	bls.n	800533a <vTaskPrioritySet+0x2a>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60fb      	str	r3, [r7, #12]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b06      	cmp	r3, #6
 800533e:	d901      	bls.n	8005344 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005340:	2306      	movs	r3, #6
 8005342:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005344:	f001 f9f2 	bl	800672c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <vTaskPrioritySet+0x44>
 800534e:	4b43      	ldr	r3, [pc, #268]	; (800545c <vTaskPrioritySet+0x14c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	e000      	b.n	8005356 <vTaskPrioritySet+0x46>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535c:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d074      	beq.n	8005450 <vTaskPrioritySet+0x140>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	429a      	cmp	r2, r3
 800536c:	d90d      	bls.n	800538a <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800536e:	4b3b      	ldr	r3, [pc, #236]	; (800545c <vTaskPrioritySet+0x14c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	429a      	cmp	r2, r3
 8005376:	d00f      	beq.n	8005398 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005378:	4b38      	ldr	r3, [pc, #224]	; (800545c <vTaskPrioritySet+0x14c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d309      	bcc.n	8005398 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8005384:	2301      	movs	r3, #1
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e006      	b.n	8005398 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800538a:	4b34      	ldr	r3, [pc, #208]	; (800545c <vTaskPrioritySet+0x14c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	429a      	cmp	r2, r3
 8005392:	d101      	bne.n	8005398 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d102      	bne.n	80053b0 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db04      	blt.n	80053c8 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f1c3 0207 	rsb	r2, r3, #7
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	6959      	ldr	r1, [r3, #20]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4a22      	ldr	r2, [pc, #136]	; (8005460 <vTaskPrioritySet+0x150>)
 80053d8:	4413      	add	r3, r2
 80053da:	4299      	cmp	r1, r3
 80053dc:	d101      	bne.n	80053e2 <vTaskPrioritySet+0xd2>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <vTaskPrioritySet+0xd4>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d028      	beq.n	800543a <vTaskPrioritySet+0x12a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff f929 	bl	8004644 <uxListRemove>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <vTaskPrioritySet+0xfc>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80053f8:	2201      	movs	r2, #1
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	43da      	mvns	r2, r3
 8005402:	4b18      	ldr	r3, [pc, #96]	; (8005464 <vTaskPrioritySet+0x154>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4013      	ands	r3, r2
 8005408:	4a16      	ldr	r2, [pc, #88]	; (8005464 <vTaskPrioritySet+0x154>)
 800540a:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	2201      	movs	r2, #1
 8005412:	409a      	lsls	r2, r3
 8005414:	4b13      	ldr	r3, [pc, #76]	; (8005464 <vTaskPrioritySet+0x154>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4313      	orrs	r3, r2
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <vTaskPrioritySet+0x154>)
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <vTaskPrioritySet+0x150>)
 800542c:	441a      	add	r2, r3
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	3304      	adds	r3, #4
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f7ff f8aa 	bl	800458e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <vTaskPrioritySet+0x140>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005440:	4b09      	ldr	r3, [pc, #36]	; (8005468 <vTaskPrioritySet+0x158>)
 8005442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005450:	f001 f99c 	bl	800678c <vPortExitCritical>
	}
 8005454:	bf00      	nop
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	200008c4 	.word	0x200008c4
 8005460:	200008c8 	.word	0x200008c8
 8005464:	200009cc 	.word	0x200009cc
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800547a:	463a      	mov	r2, r7
 800547c:	1d39      	adds	r1, r7, #4
 800547e:	f107 0308 	add.w	r3, r7, #8
 8005482:	4618      	mov	r0, r3
 8005484:	f7fa fe82 	bl	800018c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	9202      	str	r2, [sp, #8]
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	2300      	movs	r3, #0
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	460a      	mov	r2, r1
 800549a:	4922      	ldr	r1, [pc, #136]	; (8005524 <vTaskStartScheduler+0xb8>)
 800549c:	4822      	ldr	r0, [pc, #136]	; (8005528 <vTaskStartScheduler+0xbc>)
 800549e:	f7ff fcd1 	bl	8004e44 <xTaskCreateStatic>
 80054a2:	4603      	mov	r3, r0
 80054a4:	4a21      	ldr	r2, [pc, #132]	; (800552c <vTaskStartScheduler+0xc0>)
 80054a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054a8:	4b20      	ldr	r3, [pc, #128]	; (800552c <vTaskStartScheduler+0xc0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054b0:	2301      	movs	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e001      	b.n	80054ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d11d      	bne.n	80054fc <vTaskStartScheduler+0x90>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	613b      	str	r3, [r7, #16]
}
 80054d2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054d4:	4b16      	ldr	r3, [pc, #88]	; (8005530 <vTaskStartScheduler+0xc4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	335c      	adds	r3, #92	; 0x5c
 80054da:	4a16      	ldr	r2, [pc, #88]	; (8005534 <vTaskStartScheduler+0xc8>)
 80054dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054de:	4b16      	ldr	r3, [pc, #88]	; (8005538 <vTaskStartScheduler+0xcc>)
 80054e0:	f04f 32ff 	mov.w	r2, #4294967295
 80054e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054e6:	4b15      	ldr	r3, [pc, #84]	; (800553c <vTaskStartScheduler+0xd0>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <vTaskStartScheduler+0xd4>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80054f2:	f7fa fe2d 	bl	8000150 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054f6:	f001 f8a7 	bl	8006648 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054fa:	e00e      	b.n	800551a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005502:	d10a      	bne.n	800551a <vTaskStartScheduler+0xae>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	60fb      	str	r3, [r7, #12]
}
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <vTaskStartScheduler+0xac>
}
 800551a:	bf00      	nop
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	080081b8 	.word	0x080081b8
 8005528:	08005b99 	.word	0x08005b99
 800552c:	200009e8 	.word	0x200009e8
 8005530:	200008c4 	.word	0x200008c4
 8005534:	20000070 	.word	0x20000070
 8005538:	200009e4 	.word	0x200009e4
 800553c:	200009d0 	.word	0x200009d0
 8005540:	200009c8 	.word	0x200009c8

08005544 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005548:	4b04      	ldr	r3, [pc, #16]	; (800555c <vTaskSuspendAll+0x18>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	4a03      	ldr	r2, [pc, #12]	; (800555c <vTaskSuspendAll+0x18>)
 8005550:	6013      	str	r3, [r2, #0]
}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	200009ec 	.word	0x200009ec

08005560 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800556e:	4b41      	ldr	r3, [pc, #260]	; (8005674 <xTaskResumeAll+0x114>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <xTaskResumeAll+0x2c>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	603b      	str	r3, [r7, #0]
}
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800558c:	f001 f8ce 	bl	800672c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005590:	4b38      	ldr	r3, [pc, #224]	; (8005674 <xTaskResumeAll+0x114>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3b01      	subs	r3, #1
 8005596:	4a37      	ldr	r2, [pc, #220]	; (8005674 <xTaskResumeAll+0x114>)
 8005598:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800559a:	4b36      	ldr	r3, [pc, #216]	; (8005674 <xTaskResumeAll+0x114>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d161      	bne.n	8005666 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055a2:	4b35      	ldr	r3, [pc, #212]	; (8005678 <xTaskResumeAll+0x118>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d05d      	beq.n	8005666 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055aa:	e02e      	b.n	800560a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055ac:	4b33      	ldr	r3, [pc, #204]	; (800567c <xTaskResumeAll+0x11c>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3318      	adds	r3, #24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff f843 	bl	8004644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff f83e 	bl	8004644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	2201      	movs	r2, #1
 80055ce:	409a      	lsls	r2, r3
 80055d0:	4b2b      	ldr	r3, [pc, #172]	; (8005680 <xTaskResumeAll+0x120>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	4a2a      	ldr	r2, [pc, #168]	; (8005680 <xTaskResumeAll+0x120>)
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4a27      	ldr	r2, [pc, #156]	; (8005684 <xTaskResumeAll+0x124>)
 80055e8:	441a      	add	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4619      	mov	r1, r3
 80055f0:	4610      	mov	r0, r2
 80055f2:	f7fe ffcc 	bl	800458e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fa:	4b23      	ldr	r3, [pc, #140]	; (8005688 <xTaskResumeAll+0x128>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <xTaskResumeAll+0x12c>)
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <xTaskResumeAll+0x11c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1cc      	bne.n	80055ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005618:	f000 fbb0 	bl	8005d7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800561c:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <xTaskResumeAll+0x130>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d010      	beq.n	800564a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005628:	f000 f844 	bl	80056b4 <xTaskIncrementTick>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005632:	4b16      	ldr	r3, [pc, #88]	; (800568c <xTaskResumeAll+0x12c>)
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3b01      	subs	r3, #1
 800563c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f1      	bne.n	8005628 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005644:	4b12      	ldr	r3, [pc, #72]	; (8005690 <xTaskResumeAll+0x130>)
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800564a:	4b10      	ldr	r3, [pc, #64]	; (800568c <xTaskResumeAll+0x12c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005652:	2301      	movs	r3, #1
 8005654:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005656:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <xTaskResumeAll+0x134>)
 8005658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005666:	f001 f891 	bl	800678c <vPortExitCritical>

	return xAlreadyYielded;
 800566a:	68bb      	ldr	r3, [r7, #8]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	200009ec 	.word	0x200009ec
 8005678:	200009c4 	.word	0x200009c4
 800567c:	20000984 	.word	0x20000984
 8005680:	200009cc 	.word	0x200009cc
 8005684:	200008c8 	.word	0x200008c8
 8005688:	200008c4 	.word	0x200008c4
 800568c:	200009d8 	.word	0x200009d8
 8005690:	200009d4 	.word	0x200009d4
 8005694:	e000ed04 	.word	0xe000ed04

08005698 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800569e:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <xTaskGetTickCount+0x18>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056a4:	687b      	ldr	r3, [r7, #4]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	200009c8 	.word	0x200009c8

080056b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056be:	4b51      	ldr	r3, [pc, #324]	; (8005804 <xTaskIncrementTick+0x150>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 808d 	bne.w	80057e2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c8:	4b4f      	ldr	r3, [pc, #316]	; (8005808 <xTaskIncrementTick+0x154>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056d0:	4a4d      	ldr	r2, [pc, #308]	; (8005808 <xTaskIncrementTick+0x154>)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d120      	bne.n	800571e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056dc:	4b4b      	ldr	r3, [pc, #300]	; (800580c <xTaskIncrementTick+0x158>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <xTaskIncrementTick+0x48>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	603b      	str	r3, [r7, #0]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <xTaskIncrementTick+0x46>
 80056fc:	4b43      	ldr	r3, [pc, #268]	; (800580c <xTaskIncrementTick+0x158>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b43      	ldr	r3, [pc, #268]	; (8005810 <xTaskIncrementTick+0x15c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a41      	ldr	r2, [pc, #260]	; (800580c <xTaskIncrementTick+0x158>)
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4a41      	ldr	r2, [pc, #260]	; (8005810 <xTaskIncrementTick+0x15c>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4b40      	ldr	r3, [pc, #256]	; (8005814 <xTaskIncrementTick+0x160>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	4a3f      	ldr	r2, [pc, #252]	; (8005814 <xTaskIncrementTick+0x160>)
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	f000 fb2f 	bl	8005d7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800571e:	4b3e      	ldr	r3, [pc, #248]	; (8005818 <xTaskIncrementTick+0x164>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	429a      	cmp	r2, r3
 8005726:	d34d      	bcc.n	80057c4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005728:	4b38      	ldr	r3, [pc, #224]	; (800580c <xTaskIncrementTick+0x158>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <xTaskIncrementTick+0x82>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <xTaskIncrementTick+0x84>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800573c:	4b36      	ldr	r3, [pc, #216]	; (8005818 <xTaskIncrementTick+0x164>)
 800573e:	f04f 32ff 	mov.w	r2, #4294967295
 8005742:	601a      	str	r2, [r3, #0]
					break;
 8005744:	e03e      	b.n	80057c4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005746:	4b31      	ldr	r3, [pc, #196]	; (800580c <xTaskIncrementTick+0x158>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	429a      	cmp	r2, r3
 800575c:	d203      	bcs.n	8005766 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800575e:	4a2e      	ldr	r2, [pc, #184]	; (8005818 <xTaskIncrementTick+0x164>)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6013      	str	r3, [r2, #0]
						break;
 8005764:	e02e      	b.n	80057c4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	3304      	adds	r3, #4
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe ff6a 	bl	8004644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	3318      	adds	r3, #24
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe ff61 	bl	8004644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	2201      	movs	r2, #1
 8005788:	409a      	lsls	r2, r3
 800578a:	4b24      	ldr	r3, [pc, #144]	; (800581c <xTaskIncrementTick+0x168>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4313      	orrs	r3, r2
 8005790:	4a22      	ldr	r2, [pc, #136]	; (800581c <xTaskIncrementTick+0x168>)
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <xTaskIncrementTick+0x16c>)
 80057a2:	441a      	add	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f7fe feef 	bl	800458e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <xTaskIncrementTick+0x170>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d3b4      	bcc.n	8005728 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057be:	2301      	movs	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c2:	e7b1      	b.n	8005728 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057c4:	4b17      	ldr	r3, [pc, #92]	; (8005824 <xTaskIncrementTick+0x170>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ca:	4915      	ldr	r1, [pc, #84]	; (8005820 <xTaskIncrementTick+0x16c>)
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d907      	bls.n	80057ec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80057dc:	2301      	movs	r3, #1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e004      	b.n	80057ec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057e2:	4b11      	ldr	r3, [pc, #68]	; (8005828 <xTaskIncrementTick+0x174>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3301      	adds	r3, #1
 80057e8:	4a0f      	ldr	r2, [pc, #60]	; (8005828 <xTaskIncrementTick+0x174>)
 80057ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <xTaskIncrementTick+0x178>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80057f4:	2301      	movs	r3, #1
 80057f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057f8:	697b      	ldr	r3, [r7, #20]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	200009ec 	.word	0x200009ec
 8005808:	200009c8 	.word	0x200009c8
 800580c:	2000097c 	.word	0x2000097c
 8005810:	20000980 	.word	0x20000980
 8005814:	200009dc 	.word	0x200009dc
 8005818:	200009e4 	.word	0x200009e4
 800581c:	200009cc 	.word	0x200009cc
 8005820:	200008c8 	.word	0x200008c8
 8005824:	200008c4 	.word	0x200008c4
 8005828:	200009d4 	.word	0x200009d4
 800582c:	200009d8 	.word	0x200009d8

08005830 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8005840:	4b08      	ldr	r3, [pc, #32]	; (8005864 <vTaskSetApplicationTaskTag+0x34>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e001      	b.n	800584c <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 800584c:	f000 ff6e 	bl	800672c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
		taskEXIT_CRITICAL();
 8005856:	f000 ff99 	bl	800678c <vPortExitCritical>
	}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200008c4 	.word	0x200008c4

08005868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800586e:	4b3d      	ldr	r3, [pc, #244]	; (8005964 <vTaskSwitchContext+0xfc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005876:	4b3c      	ldr	r3, [pc, #240]	; (8005968 <vTaskSwitchContext+0x100>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800587c:	e06e      	b.n	800595c <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800587e:	4b3a      	ldr	r3, [pc, #232]	; (8005968 <vTaskSwitchContext+0x100>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005884:	f7fa fc6a 	bl	800015c <getRunTimeCounterValue>
 8005888:	4603      	mov	r3, r0
 800588a:	4a38      	ldr	r2, [pc, #224]	; (800596c <vTaskSwitchContext+0x104>)
 800588c:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800588e:	4b37      	ldr	r3, [pc, #220]	; (800596c <vTaskSwitchContext+0x104>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b37      	ldr	r3, [pc, #220]	; (8005970 <vTaskSwitchContext+0x108>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d909      	bls.n	80058ae <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800589a:	4b36      	ldr	r3, [pc, #216]	; (8005974 <vTaskSwitchContext+0x10c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80058a0:	4a32      	ldr	r2, [pc, #200]	; (800596c <vTaskSwitchContext+0x104>)
 80058a2:	6810      	ldr	r0, [r2, #0]
 80058a4:	4a32      	ldr	r2, [pc, #200]	; (8005970 <vTaskSwitchContext+0x108>)
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	1a82      	subs	r2, r0, r2
 80058aa:	440a      	add	r2, r1
 80058ac:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80058ae:	4b2f      	ldr	r3, [pc, #188]	; (800596c <vTaskSwitchContext+0x104>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2f      	ldr	r2, [pc, #188]	; (8005970 <vTaskSwitchContext+0x108>)
 80058b4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80058b6:	4b2f      	ldr	r3, [pc, #188]	; (8005974 <vTaskSwitchContext+0x10c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b2d      	ldr	r3, [pc, #180]	; (8005974 <vTaskSwitchContext+0x10c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d808      	bhi.n	80058d8 <vTaskSwitchContext+0x70>
 80058c6:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <vTaskSwitchContext+0x10c>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b2a      	ldr	r3, [pc, #168]	; (8005974 <vTaskSwitchContext+0x10c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3334      	adds	r3, #52	; 0x34
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f7fa fc49 	bl	800016a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058d8:	4b27      	ldr	r3, [pc, #156]	; (8005978 <vTaskSwitchContext+0x110>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	fab3 f383 	clz	r3, r3
 80058e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058e6:	7afb      	ldrb	r3, [r7, #11]
 80058e8:	f1c3 031f 	rsb	r3, r3, #31
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	4923      	ldr	r1, [pc, #140]	; (800597c <vTaskSwitchContext+0x114>)
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <vTaskSwitchContext+0xb0>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	607b      	str	r3, [r7, #4]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <vTaskSwitchContext+0xae>
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4a16      	ldr	r2, [pc, #88]	; (800597c <vTaskSwitchContext+0x114>)
 8005924:	4413      	add	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3308      	adds	r3, #8
 800593a:	429a      	cmp	r2, r3
 800593c:	d104      	bne.n	8005948 <vTaskSwitchContext+0xe0>
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	4a09      	ldr	r2, [pc, #36]	; (8005974 <vTaskSwitchContext+0x10c>)
 8005950:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <vTaskSwitchContext+0x10c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	335c      	adds	r3, #92	; 0x5c
 8005958:	4a09      	ldr	r2, [pc, #36]	; (8005980 <vTaskSwitchContext+0x118>)
 800595a:	6013      	str	r3, [r2, #0]
}
 800595c:	bf00      	nop
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	200009ec 	.word	0x200009ec
 8005968:	200009d8 	.word	0x200009d8
 800596c:	200009f4 	.word	0x200009f4
 8005970:	200009f0 	.word	0x200009f0
 8005974:	200008c4 	.word	0x200008c4
 8005978:	200009cc 	.word	0x200009cc
 800597c:	200008c8 	.word	0x200008c8
 8005980:	20000070 	.word	0x20000070

08005984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	60fb      	str	r3, [r7, #12]
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <vTaskPlaceOnEventList+0x44>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3318      	adds	r3, #24
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fe fe0e 	bl	80045d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059b8:	2101      	movs	r1, #1
 80059ba:	6838      	ldr	r0, [r7, #0]
 80059bc:	f000 fd60 	bl	8006480 <prvAddCurrentTaskToDelayedList>
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	200008c4 	.word	0x200008c4

080059cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	60fb      	str	r3, [r7, #12]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	3318      	adds	r3, #24
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fe fe21 	bl	8004644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a02:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <xTaskRemoveFromEventList+0xac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d11c      	bne.n	8005a44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fe18 	bl	8004644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	2201      	movs	r2, #1
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <xTaskRemoveFromEventList+0xb0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <xTaskRemoveFromEventList+0xb0>)
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <xTaskRemoveFromEventList+0xb4>)
 8005a34:	441a      	add	r2, r3
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7fe fda6 	bl	800458e <vListInsertEnd>
 8005a42:	e005      	b.n	8005a50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3318      	adds	r3, #24
 8005a48:	4619      	mov	r1, r3
 8005a4a:	480e      	ldr	r0, [pc, #56]	; (8005a84 <xTaskRemoveFromEventList+0xb8>)
 8005a4c:	f7fe fd9f 	bl	800458e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <xTaskRemoveFromEventList+0xbc>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d905      	bls.n	8005a6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a62:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <xTaskRemoveFromEventList+0xc0>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	e001      	b.n	8005a6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a6e:	697b      	ldr	r3, [r7, #20]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	200009ec 	.word	0x200009ec
 8005a7c:	200009cc 	.word	0x200009cc
 8005a80:	200008c8 	.word	0x200008c8
 8005a84:	20000984 	.word	0x20000984
 8005a88:	200008c4 	.word	0x200008c4
 8005a8c:	200009d8 	.word	0x200009d8

08005a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a98:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <vTaskInternalSetTimeOutState+0x24>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <vTaskInternalSetTimeOutState+0x28>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	605a      	str	r2, [r3, #4]
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	200009dc 	.word	0x200009dc
 8005ab8:	200009c8 	.word	0x200009c8

08005abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	613b      	str	r3, [r7, #16]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	60fb      	str	r3, [r7, #12]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005afe:	f000 fe15 	bl	800672c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <xTaskCheckForTimeOut+0xbc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d102      	bne.n	8005b22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e023      	b.n	8005b6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <xTaskCheckForTimeOut+0xc0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d007      	beq.n	8005b3e <xTaskCheckForTimeOut+0x82>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e015      	b.n	8005b6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d20b      	bcs.n	8005b60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ff9b 	bl	8005a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	e004      	b.n	8005b6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b6a:	f000 fe0f 	bl	800678c <vPortExitCritical>

	return xReturn;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	200009c8 	.word	0x200009c8
 8005b7c:	200009dc 	.word	0x200009dc

08005b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <vTaskMissedYield+0x14>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	200009d8 	.word	0x200009d8

08005b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ba0:	f000 f852 	bl	8005c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <prvIdleTask+0x28>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d9f9      	bls.n	8005ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <prvIdleTask+0x2c>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bbc:	e7f0      	b.n	8005ba0 <prvIdleTask+0x8>
 8005bbe:	bf00      	nop
 8005bc0:	200008c8 	.word	0x200008c8
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	e00c      	b.n	8005bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a12      	ldr	r2, [pc, #72]	; (8005c28 <prvInitialiseTaskLists+0x60>)
 8005be0:	4413      	add	r3, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fca8 	bl	8004538 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3301      	adds	r3, #1
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b06      	cmp	r3, #6
 8005bf2:	d9ef      	bls.n	8005bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bf4:	480d      	ldr	r0, [pc, #52]	; (8005c2c <prvInitialiseTaskLists+0x64>)
 8005bf6:	f7fe fc9f 	bl	8004538 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bfa:	480d      	ldr	r0, [pc, #52]	; (8005c30 <prvInitialiseTaskLists+0x68>)
 8005bfc:	f7fe fc9c 	bl	8004538 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c00:	480c      	ldr	r0, [pc, #48]	; (8005c34 <prvInitialiseTaskLists+0x6c>)
 8005c02:	f7fe fc99 	bl	8004538 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c06:	480c      	ldr	r0, [pc, #48]	; (8005c38 <prvInitialiseTaskLists+0x70>)
 8005c08:	f7fe fc96 	bl	8004538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c0c:	480b      	ldr	r0, [pc, #44]	; (8005c3c <prvInitialiseTaskLists+0x74>)
 8005c0e:	f7fe fc93 	bl	8004538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <prvInitialiseTaskLists+0x78>)
 8005c14:	4a05      	ldr	r2, [pc, #20]	; (8005c2c <prvInitialiseTaskLists+0x64>)
 8005c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <prvInitialiseTaskLists+0x7c>)
 8005c1a:	4a05      	ldr	r2, [pc, #20]	; (8005c30 <prvInitialiseTaskLists+0x68>)
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	200008c8 	.word	0x200008c8
 8005c2c:	20000954 	.word	0x20000954
 8005c30:	20000968 	.word	0x20000968
 8005c34:	20000984 	.word	0x20000984
 8005c38:	20000998 	.word	0x20000998
 8005c3c:	200009b0 	.word	0x200009b0
 8005c40:	2000097c 	.word	0x2000097c
 8005c44:	20000980 	.word	0x20000980

08005c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c4e:	e019      	b.n	8005c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c50:	f000 fd6c 	bl	800672c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c54:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <prvCheckTasksWaitingTermination+0x50>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fcef 	bl	8004644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c66:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <prvCheckTasksWaitingTermination+0x54>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	4a0b      	ldr	r2, [pc, #44]	; (8005c9c <prvCheckTasksWaitingTermination+0x54>)
 8005c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c7a:	f000 fd87 	bl	800678c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f848 	bl	8005d14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c84:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e1      	bne.n	8005c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000998 	.word	0x20000998
 8005c9c:	200009c4 	.word	0x200009c4
 8005ca0:	200009ac 	.word	0x200009ac

08005ca4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005cb0:	e005      	b.n	8005cbe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2ba5      	cmp	r3, #165	; 0xa5
 8005cc4:	d0f5      	beq.n	8005cb2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	089b      	lsrs	r3, r3, #2
 8005cca:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	b29b      	uxth	r3, r3
	}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr
	...

08005cdc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <uxTaskGetStackHighWaterMark+0x14>
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <uxTaskGetStackHighWaterMark+0x34>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	e000      	b.n	8005cf2 <uxTaskGetStackHighWaterMark+0x16>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005cfa:	6938      	ldr	r0, [r7, #16]
 8005cfc:	f7ff ffd2 	bl	8005ca4 <prvTaskCheckFreeStackSpace>
 8005d00:	4603      	mov	r3, r0
 8005d02:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005d04:	68fb      	ldr	r3, [r7, #12]
	}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	200008c4 	.word	0x200008c4

08005d14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	335c      	adds	r3, #92	; 0x5c
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 fa21 	bl	8007168 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d108      	bne.n	8005d42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fec3 	bl	8006ac0 <vPortFree>
				vPortFree( pxTCB );
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fec0 	bl	8006ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d40:	e018      	b.n	8005d74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d103      	bne.n	8005d54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 feb7 	bl	8006ac0 <vPortFree>
	}
 8005d52:	e00f      	b.n	8005d74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d00a      	beq.n	8005d74 <prvDeleteTCB+0x60>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	60fb      	str	r3, [r7, #12]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <prvDeleteTCB+0x5e>
	}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d82:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <prvResetNextTaskUnblockTime+0x40>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <prvResetNextTaskUnblockTime+0x14>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <prvResetNextTaskUnblockTime+0x16>
 8005d90:	2300      	movs	r3, #0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d96:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <prvResetNextTaskUnblockTime+0x44>)
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d9e:	e008      	b.n	8005db2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <prvResetNextTaskUnblockTime+0x40>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4a04      	ldr	r2, [pc, #16]	; (8005dc0 <prvResetNextTaskUnblockTime+0x44>)
 8005db0:	6013      	str	r3, [r2, #0]
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr
 8005dbc:	2000097c 	.word	0x2000097c
 8005dc0:	200009e4 	.word	0x200009e4

08005dc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <xTaskGetSchedulerState+0x34>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d102      	bne.n	8005dd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	607b      	str	r3, [r7, #4]
 8005dd6:	e008      	b.n	8005dea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd8:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <xTaskGetSchedulerState+0x38>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005de0:	2302      	movs	r3, #2
 8005de2:	607b      	str	r3, [r7, #4]
 8005de4:	e001      	b.n	8005dea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dea:	687b      	ldr	r3, [r7, #4]
	}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	200009d0 	.word	0x200009d0
 8005dfc:	200009ec 	.word	0x200009ec

08005e00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d06e      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e16:	4b3a      	ldr	r3, [pc, #232]	; (8005f00 <xTaskPriorityDisinherit+0x100>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d00a      	beq.n	8005e36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	60fb      	str	r3, [r7, #12]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60bb      	str	r3, [r7, #8]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e58:	1e5a      	subs	r2, r3, #1
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d044      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d140      	bne.n	8005ef4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fbe4 	bl	8004644 <uxListRemove>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d115      	bne.n	8005eae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	491f      	ldr	r1, [pc, #124]	; (8005f04 <xTaskPriorityDisinherit+0x104>)
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xTaskPriorityDisinherit+0xae>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43da      	mvns	r2, r3
 8005ea4:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <xTaskPriorityDisinherit+0x108>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <xTaskPriorityDisinherit+0x108>)
 8005eac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	f1c3 0207 	rsb	r2, r3, #7
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	409a      	lsls	r2, r3
 8005eca:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <xTaskPriorityDisinherit+0x108>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	4a0d      	ldr	r2, [pc, #52]	; (8005f08 <xTaskPriorityDisinherit+0x108>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <xTaskPriorityDisinherit+0x104>)
 8005ee2:	441a      	add	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7fe fb4f 	bl	800458e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ef4:	697b      	ldr	r3, [r7, #20]
	}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200008c4 	.word	0x200008c4
 8005f04:	200008c8 	.word	0x200008c8
 8005f08:	200009cc 	.word	0x200009cc

08005f0c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005f16:	f000 fc09 	bl	800672c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005f1a:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <ulTaskNotifyTake+0x90>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d113      	bne.n	8005f4e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005f26:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <ulTaskNotifyTake+0x90>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00b      	beq.n	8005f4e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f36:	2101      	movs	r1, #1
 8005f38:	6838      	ldr	r0, [r7, #0]
 8005f3a:	f000 faa1 	bl	8006480 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005f3e:	4b18      	ldr	r3, [pc, #96]	; (8005fa0 <ulTaskNotifyTake+0x94>)
 8005f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005f4e:	f000 fc1d 	bl	800678c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005f52:	f000 fbeb 	bl	800672c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005f56:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <ulTaskNotifyTake+0x90>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f5e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00e      	beq.n	8005f84 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <ulTaskNotifyTake+0x90>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005f76:	e005      	b.n	8005f84 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005f78:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <ulTaskNotifyTake+0x90>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	3a01      	subs	r2, #1
 8005f80:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <ulTaskNotifyTake+0x90>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 8005f8e:	f000 fbfd 	bl	800678c <vPortExitCritical>

		return ulReturn;
 8005f92:	68fb      	ldr	r3, [r7, #12]
	}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	200008c4 	.word	0x200008c4
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005fb2:	f000 fbbb 	bl	800672c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005fb6:	4b29      	ldr	r3, [pc, #164]	; (800605c <xTaskNotifyWait+0xb8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d01c      	beq.n	8005ffe <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005fc4:	4b25      	ldr	r3, [pc, #148]	; (800605c <xTaskNotifyWait+0xb8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	43d2      	mvns	r2, r2
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005fd6:	4b21      	ldr	r3, [pc, #132]	; (800605c <xTaskNotifyWait+0xb8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	6838      	ldr	r0, [r7, #0]
 8005fea:	f000 fa49 	bl	8006480 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005fee:	4b1c      	ldr	r3, [pc, #112]	; (8006060 <xTaskNotifyWait+0xbc>)
 8005ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005ffe:	f000 fbc5 	bl	800678c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006002:	f000 fb93 	bl	800672c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800600c:	4b13      	ldr	r3, [pc, #76]	; (800605c <xTaskNotifyWait+0xb8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006018:	4b10      	ldr	r3, [pc, #64]	; (800605c <xTaskNotifyWait+0xb8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d002      	beq.n	800602c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	e00a      	b.n	8006042 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <xTaskNotifyWait+0xb8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	43d2      	mvns	r2, r2
 8006038:	400a      	ands	r2, r1
 800603a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				xReturn = pdTRUE;
 800603e:	2301      	movs	r3, #1
 8006040:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <xTaskNotifyWait+0xb8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 800604c:	f000 fb9e 	bl	800678c <vPortExitCritical>

		return xReturn;
 8006050:	697b      	ldr	r3, [r7, #20]
	}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200008c4 	.word	0x200008c4
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	; 0x28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006074:	2301      	movs	r3, #1
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10a      	bne.n	8006094 <xTaskGenericNotify+0x30>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	61bb      	str	r3, [r7, #24]
}
 8006090:	bf00      	nop
 8006092:	e7fe      	b.n	8006092 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006098:	f000 fb48 	bl	800672c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80060b2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d82d      	bhi.n	800611e <xTaskGenericNotify+0xba>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <xTaskGenericNotify+0x64>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	0800611f 	.word	0x0800611f
 80060cc:	080060dd 	.word	0x080060dd
 80060d0:	080060ef 	.word	0x080060ef
 80060d4:	080060ff 	.word	0x080060ff
 80060d8:	08006109 	.word	0x08006109
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 80060ec:	e017      	b.n	800611e <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 80060fc:	e00f      	b.n	800611e <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006106:	e00a      	b.n	800611e <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006108:	7ffb      	ldrb	r3, [r7, #31]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d004      	beq.n	8006118 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006116:	e001      	b.n	800611c <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8006118:	2300      	movs	r3, #0
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800611c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800611e:	7ffb      	ldrb	r3, [r7, #31]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d139      	bne.n	8006198 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	3304      	adds	r3, #4
 8006128:	4618      	mov	r0, r3
 800612a:	f7fe fa8b 	bl	8004644 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	2201      	movs	r2, #1
 8006134:	409a      	lsls	r2, r3
 8006136:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <xTaskGenericNotify+0x144>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4313      	orrs	r3, r2
 800613c:	4a1a      	ldr	r2, [pc, #104]	; (80061a8 <xTaskGenericNotify+0x144>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4a17      	ldr	r2, [pc, #92]	; (80061ac <xTaskGenericNotify+0x148>)
 800614e:	441a      	add	r2, r3
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe fa19 	bl	800458e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <xTaskGenericNotify+0x116>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	617b      	str	r3, [r7, #20]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <xTaskGenericNotify+0x14c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	429a      	cmp	r2, r3
 8006186:	d907      	bls.n	8006198 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <xTaskGenericNotify+0x150>)
 800618a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006198:	f000 faf8 	bl	800678c <vPortExitCritical>

		return xReturn;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800619e:	4618      	mov	r0, r3
 80061a0:	3728      	adds	r7, #40	; 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200009cc 	.word	0x200009cc
 80061ac:	200008c8 	.word	0x200008c8
 80061b0:	200008c4 	.word	0x200008c4
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08e      	sub	sp, #56	; 0x38
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80061c8:	2301      	movs	r3, #1
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061e8:	f000 fb62 	bl	80068b0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061f0:	f3ef 8211 	mrs	r2, BASEPRI
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	623a      	str	r2, [r7, #32]
 8006206:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006208:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	2202      	movs	r2, #2
 800622a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	2b04      	cmp	r3, #4
 8006232:	d82f      	bhi.n	8006294 <xTaskGenericNotifyFromISR+0xdc>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <xTaskGenericNotifyFromISR+0x84>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006295 	.word	0x08006295
 8006240:	08006251 	.word	0x08006251
 8006244:	08006263 	.word	0x08006263
 8006248:	08006273 	.word	0x08006273
 800624c:	0800627d 	.word	0x0800627d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	431a      	orrs	r2, r3
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006260:	e018      	b.n	8006294 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006270:	e010      	b.n	8006294 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800627a:	e00b      	b.n	8006294 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800627c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006280:	2b02      	cmp	r3, #2
 8006282:	d004      	beq.n	800628e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800628c:	e001      	b.n	8006292 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800628e:	2300      	movs	r3, #0
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8006292:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006294:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006298:	2b01      	cmp	r3, #1
 800629a:	d146      	bne.n	800632a <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	61bb      	str	r3, [r7, #24]
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ba:	4b21      	ldr	r3, [pc, #132]	; (8006340 <xTaskGenericNotifyFromISR+0x188>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d11c      	bne.n	80062fc <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	3304      	adds	r3, #4
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe f9bc 	bl	8004644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	2201      	movs	r2, #1
 80062d2:	409a      	lsls	r2, r3
 80062d4:	4b1b      	ldr	r3, [pc, #108]	; (8006344 <xTaskGenericNotifyFromISR+0x18c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4313      	orrs	r3, r2
 80062da:	4a1a      	ldr	r2, [pc, #104]	; (8006344 <xTaskGenericNotifyFromISR+0x18c>)
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <xTaskGenericNotifyFromISR+0x190>)
 80062ec:	441a      	add	r2, r3
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	3304      	adds	r3, #4
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f7fe f94a 	bl	800458e <vListInsertEnd>
 80062fa:	e005      	b.n	8006308 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	3318      	adds	r3, #24
 8006300:	4619      	mov	r1, r3
 8006302:	4812      	ldr	r0, [pc, #72]	; (800634c <xTaskGenericNotifyFromISR+0x194>)
 8006304:	f7fe f943 	bl	800458e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630c:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xTaskGenericNotifyFromISR+0x198>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	429a      	cmp	r2, r3
 8006314:	d909      	bls.n	800632a <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800631c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631e:	2201      	movs	r2, #1
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	e002      	b.n	800632a <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <xTaskGenericNotifyFromISR+0x19c>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006334:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006338:	4618      	mov	r0, r3
 800633a:	3738      	adds	r7, #56	; 0x38
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	200009ec 	.word	0x200009ec
 8006344:	200009cc 	.word	0x200009cc
 8006348:	200008c8 	.word	0x200008c8
 800634c:	20000984 	.word	0x20000984
 8006350:	200008c4 	.word	0x200008c4
 8006354:	200009d8 	.word	0x200009d8

08006358 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	61bb      	str	r3, [r7, #24]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800637e:	f000 fa97 	bl	80068b0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8006386:	f3ef 8211 	mrs	r2, BASEPRI
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	617a      	str	r2, [r7, #20]
 800639c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800639e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063a0:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80063a8:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	2202      	movs	r2, #2
 80063ae:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063c0:	7ffb      	ldrb	r3, [r7, #31]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d146      	bne.n	8006454 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60fb      	str	r3, [r7, #12]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e4:	4b20      	ldr	r3, [pc, #128]	; (8006468 <vTaskNotifyGiveFromISR+0x110>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d11c      	bne.n	8006426 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	3304      	adds	r3, #4
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe f927 	bl	8004644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	2201      	movs	r2, #1
 80063fc:	409a      	lsls	r2, r3
 80063fe:	4b1b      	ldr	r3, [pc, #108]	; (800646c <vTaskNotifyGiveFromISR+0x114>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4313      	orrs	r3, r2
 8006404:	4a19      	ldr	r2, [pc, #100]	; (800646c <vTaskNotifyGiveFromISR+0x114>)
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4a16      	ldr	r2, [pc, #88]	; (8006470 <vTaskNotifyGiveFromISR+0x118>)
 8006416:	441a      	add	r2, r3
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7fe f8b5 	bl	800458e <vListInsertEnd>
 8006424:	e005      	b.n	8006432 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	3318      	adds	r3, #24
 800642a:	4619      	mov	r1, r3
 800642c:	4811      	ldr	r0, [pc, #68]	; (8006474 <vTaskNotifyGiveFromISR+0x11c>)
 800642e:	f7fe f8ae 	bl	800458e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	4b10      	ldr	r3, [pc, #64]	; (8006478 <vTaskNotifyGiveFromISR+0x120>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	429a      	cmp	r2, r3
 800643e:	d909      	bls.n	8006454 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e002      	b.n	8006454 <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <vTaskNotifyGiveFromISR+0x124>)
 8006450:	2201      	movs	r2, #1
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f383 8811 	msr	BASEPRI, r3
}
 800645e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006460:	bf00      	nop
 8006462:	3728      	adds	r7, #40	; 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	200009ec 	.word	0x200009ec
 800646c:	200009cc 	.word	0x200009cc
 8006470:	200008c8 	.word	0x200008c8
 8006474:	20000984 	.word	0x20000984
 8006478:	200008c4 	.word	0x200008c4
 800647c:	200009d8 	.word	0x200009d8

08006480 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800648a:	4b29      	ldr	r3, [pc, #164]	; (8006530 <prvAddCurrentTaskToDelayedList+0xb0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006490:	4b28      	ldr	r3, [pc, #160]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3304      	adds	r3, #4
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe f8d4 	bl	8004644 <uxListRemove>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80064a2:	4b24      	ldr	r3, [pc, #144]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	2201      	movs	r2, #1
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	43da      	mvns	r2, r3
 80064b0:	4b21      	ldr	r3, [pc, #132]	; (8006538 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4013      	ands	r3, r2
 80064b6:	4a20      	ldr	r2, [pc, #128]	; (8006538 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d10a      	bne.n	80064d8 <prvAddCurrentTaskToDelayedList+0x58>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	481a      	ldr	r0, [pc, #104]	; (800653c <prvAddCurrentTaskToDelayedList+0xbc>)
 80064d2:	f7fe f85c 	bl	800458e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064d6:	e026      	b.n	8006526 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064e0:	4b14      	ldr	r3, [pc, #80]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d209      	bcs.n	8006504 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064f0:	4b13      	ldr	r3, [pc, #76]	; (8006540 <prvAddCurrentTaskToDelayedList+0xc0>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f7fe f869 	bl	80045d4 <vListInsert>
}
 8006502:	e010      	b.n	8006526 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006504:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fe f85f 	bl	80045d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	429a      	cmp	r2, r3
 800651e:	d202      	bcs.n	8006526 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006520:	4a09      	ldr	r2, [pc, #36]	; (8006548 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6013      	str	r3, [r2, #0]
}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	200009c8 	.word	0x200009c8
 8006534:	200008c4 	.word	0x200008c4
 8006538:	200009cc 	.word	0x200009cc
 800653c:	200009b0 	.word	0x200009b0
 8006540:	20000980 	.word	0x20000980
 8006544:	2000097c 	.word	0x2000097c
 8006548:	200009e4 	.word	0x200009e4

0800654c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3b04      	subs	r3, #4
 800655c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3b04      	subs	r3, #4
 800656a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f023 0201 	bic.w	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3b04      	subs	r3, #4
 800657a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800657c:	4a08      	ldr	r2, [pc, #32]	; (80065a0 <pxPortInitialiseStack+0x54>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3b14      	subs	r3, #20
 8006586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3b20      	subs	r3, #32
 8006592:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006594:	68fb      	ldr	r3, [r7, #12]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	080065a5 	.word	0x080065a5

080065a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <prvTaskExitError+0x54>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d00a      	beq.n	80065ce <prvTaskExitError+0x2a>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60fb      	str	r3, [r7, #12]
}
 80065ca:	bf00      	nop
 80065cc:	e7fe      	b.n	80065cc <prvTaskExitError+0x28>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	60bb      	str	r3, [r7, #8]
}
 80065e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065e2:	bf00      	nop
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0fc      	beq.n	80065e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000014 	.word	0x20000014
 80065fc:	00000000 	.word	0x00000000

08006600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <pxCurrentTCBConst2>)
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	6808      	ldr	r0, [r1, #0]
 8006606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800660a:	f380 8809 	msr	PSP, r0
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	f04e 0e0d 	orr.w	lr, lr, #13
 800661e:	4770      	bx	lr

08006620 <pxCurrentTCBConst2>:
 8006620:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006628:	4806      	ldr	r0, [pc, #24]	; (8006644 <prvPortStartFirstTask+0x1c>)
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	6800      	ldr	r0, [r0, #0]
 800662e:	f380 8808 	msr	MSP, r0
 8006632:	b662      	cpsie	i
 8006634:	b661      	cpsie	f
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	df00      	svc	0
 8006640:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006642:	bf00      	nop
 8006644:	e000ed08 	.word	0xe000ed08

08006648 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800664e:	4b32      	ldr	r3, [pc, #200]	; (8006718 <xPortStartScheduler+0xd0>)
 8006650:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	22ff      	movs	r2, #255	; 0xff
 800665e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006670:	b2da      	uxtb	r2, r3
 8006672:	4b2a      	ldr	r3, [pc, #168]	; (800671c <xPortStartScheduler+0xd4>)
 8006674:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006676:	4b2a      	ldr	r3, [pc, #168]	; (8006720 <xPortStartScheduler+0xd8>)
 8006678:	2207      	movs	r2, #7
 800667a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800667c:	e009      	b.n	8006692 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800667e:	4b28      	ldr	r3, [pc, #160]	; (8006720 <xPortStartScheduler+0xd8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3b01      	subs	r3, #1
 8006684:	4a26      	ldr	r2, [pc, #152]	; (8006720 <xPortStartScheduler+0xd8>)
 8006686:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	b2db      	uxtb	r3, r3
 8006690:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d0ef      	beq.n	800667e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800669e:	4b20      	ldr	r3, [pc, #128]	; (8006720 <xPortStartScheduler+0xd8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f1c3 0307 	rsb	r3, r3, #7
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d00a      	beq.n	80066c0 <xPortStartScheduler+0x78>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	60bb      	str	r3, [r7, #8]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066c0:	4b17      	ldr	r3, [pc, #92]	; (8006720 <xPortStartScheduler+0xd8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	4a16      	ldr	r2, [pc, #88]	; (8006720 <xPortStartScheduler+0xd8>)
 80066c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066ca:	4b15      	ldr	r3, [pc, #84]	; (8006720 <xPortStartScheduler+0xd8>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066d2:	4a13      	ldr	r2, [pc, #76]	; (8006720 <xPortStartScheduler+0xd8>)
 80066d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066de:	4b11      	ldr	r3, [pc, #68]	; (8006724 <xPortStartScheduler+0xdc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a10      	ldr	r2, [pc, #64]	; (8006724 <xPortStartScheduler+0xdc>)
 80066e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066ea:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <xPortStartScheduler+0xdc>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a0d      	ldr	r2, [pc, #52]	; (8006724 <xPortStartScheduler+0xdc>)
 80066f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066f6:	f000 f8b9 	bl	800686c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066fa:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <xPortStartScheduler+0xe0>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006700:	f7ff ff92 	bl	8006628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006704:	f7ff f8b0 	bl	8005868 <vTaskSwitchContext>
	prvTaskExitError();
 8006708:	f7ff ff4c 	bl	80065a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	e000e400 	.word	0xe000e400
 800671c:	200009f8 	.word	0x200009f8
 8006720:	200009fc 	.word	0x200009fc
 8006724:	e000ed20 	.word	0xe000ed20
 8006728:	20000014 	.word	0x20000014

0800672c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	607b      	str	r3, [r7, #4]
}
 8006744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006746:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <vPortEnterCritical+0x58>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	4a0d      	ldr	r2, [pc, #52]	; (8006784 <vPortEnterCritical+0x58>)
 800674e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006750:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <vPortEnterCritical+0x58>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d10f      	bne.n	8006778 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <vPortEnterCritical+0x5c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <vPortEnterCritical+0x4c>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	603b      	str	r3, [r7, #0]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <vPortEnterCritical+0x4a>
	}
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000014 	.word	0x20000014
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006792:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <vPortExitCritical+0x4c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <vPortExitCritical+0x24>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	607b      	str	r3, [r7, #4]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067b0:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <vPortExitCritical+0x4c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	4a08      	ldr	r2, [pc, #32]	; (80067d8 <vPortExitCritical+0x4c>)
 80067b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067ba:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <vPortExitCritical+0x4c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d105      	bne.n	80067ce <vPortExitCritical+0x42>
 80067c2:	2300      	movs	r3, #0
 80067c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f383 8811 	msr	BASEPRI, r3
}
 80067cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr
 80067d8:	20000014 	.word	0x20000014
 80067dc:	00000000 	.word	0x00000000

080067e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067e0:	f3ef 8009 	mrs	r0, PSP
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <pxCurrentTCBConst>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067f0:	6010      	str	r0, [r2, #0]
 80067f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80067f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067fa:	f380 8811 	msr	BASEPRI, r0
 80067fe:	f7ff f833 	bl	8005868 <vTaskSwitchContext>
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	6808      	ldr	r0, [r1, #0]
 8006812:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006816:	f380 8809 	msr	PSP, r0
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	4770      	bx	lr

08006820 <pxCurrentTCBConst>:
 8006820:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	607b      	str	r3, [r7, #4]
}
 8006840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006842:	f7fe ff37 	bl	80056b4 <xTaskIncrementTick>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <SysTick_Handler+0x40>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f383 8811 	msr	BASEPRI, r3
}
 800685e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <vPortSetupTimerInterrupt+0x30>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006876:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <vPortSetupTimerInterrupt+0x34>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <vPortSetupTimerInterrupt+0x38>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <vPortSetupTimerInterrupt+0x3c>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	4a08      	ldr	r2, [pc, #32]	; (80068ac <vPortSetupTimerInterrupt+0x40>)
 800688a:	3b01      	subs	r3, #1
 800688c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800688e:	4b03      	ldr	r3, [pc, #12]	; (800689c <vPortSetupTimerInterrupt+0x30>)
 8006890:	2207      	movs	r2, #7
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr
 800689c:	e000e010 	.word	0xe000e010
 80068a0:	e000e018 	.word	0xe000e018
 80068a4:	20000000 	.word	0x20000000
 80068a8:	10624dd3 	.word	0x10624dd3
 80068ac:	e000e014 	.word	0xe000e014

080068b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068b6:	f3ef 8305 	mrs	r3, IPSR
 80068ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d914      	bls.n	80068ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <vPortValidateInterruptPriority+0x6c>)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068cc:	4b14      	ldr	r3, [pc, #80]	; (8006920 <vPortValidateInterruptPriority+0x70>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	7afa      	ldrb	r2, [r7, #11]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d20a      	bcs.n	80068ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	607b      	str	r3, [r7, #4]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068ec:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <vPortValidateInterruptPriority+0x74>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <vPortValidateInterruptPriority+0x78>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d90a      	bls.n	8006912 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	603b      	str	r3, [r7, #0]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <vPortValidateInterruptPriority+0x60>
	}
 8006912:	bf00      	nop
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	bc80      	pop	{r7}
 800691a:	4770      	bx	lr
 800691c:	e000e3f0 	.word	0xe000e3f0
 8006920:	200009f8 	.word	0x200009f8
 8006924:	e000ed0c 	.word	0xe000ed0c
 8006928:	200009fc 	.word	0x200009fc

0800692c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006938:	f7fe fe04 	bl	8005544 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800693c:	4b5b      	ldr	r3, [pc, #364]	; (8006aac <pvPortMalloc+0x180>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006944:	f000 f916 	bl	8006b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006948:	4b59      	ldr	r3, [pc, #356]	; (8006ab0 <pvPortMalloc+0x184>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4013      	ands	r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	f040 808e 	bne.w	8006a72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01d      	beq.n	8006998 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800695c:	2208      	movs	r2, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b00      	cmp	r3, #0
 800696c:	d014      	beq.n	8006998 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f023 0307 	bic.w	r3, r3, #7
 8006974:	3308      	adds	r3, #8
 8006976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <pvPortMalloc+0x6c>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	617b      	str	r3, [r7, #20]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d069      	beq.n	8006a72 <pvPortMalloc+0x146>
 800699e:	4b45      	ldr	r3, [pc, #276]	; (8006ab4 <pvPortMalloc+0x188>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d864      	bhi.n	8006a72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069a8:	4b43      	ldr	r3, [pc, #268]	; (8006ab8 <pvPortMalloc+0x18c>)
 80069aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069ac:	4b42      	ldr	r3, [pc, #264]	; (8006ab8 <pvPortMalloc+0x18c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069b2:	e004      	b.n	80069be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d903      	bls.n	80069d0 <pvPortMalloc+0xa4>
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f1      	bne.n	80069b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069d0:	4b36      	ldr	r3, [pc, #216]	; (8006aac <pvPortMalloc+0x180>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d04b      	beq.n	8006a72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2208      	movs	r2, #8
 80069e0:	4413      	add	r3, r2
 80069e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	1ad2      	subs	r2, r2, r3
 80069f4:	2308      	movs	r3, #8
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d91f      	bls.n	8006a3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4413      	add	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <pvPortMalloc+0xf8>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	613b      	str	r3, [r7, #16]
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	1ad2      	subs	r2, r2, r3
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a36:	69b8      	ldr	r0, [r7, #24]
 8006a38:	f000 f8fe 	bl	8006c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a3c:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <pvPortMalloc+0x188>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	4a1b      	ldr	r2, [pc, #108]	; (8006ab4 <pvPortMalloc+0x188>)
 8006a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a4a:	4b1a      	ldr	r3, [pc, #104]	; (8006ab4 <pvPortMalloc+0x188>)
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b1b      	ldr	r3, [pc, #108]	; (8006abc <pvPortMalloc+0x190>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d203      	bcs.n	8006a5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a56:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <pvPortMalloc+0x188>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a18      	ldr	r2, [pc, #96]	; (8006abc <pvPortMalloc+0x190>)
 8006a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <pvPortMalloc+0x184>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a72:	f7fe fd75 	bl	8005560 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8006a7c:	f7f9 fb7f 	bl	800017e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <pvPortMalloc+0x174>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	60fb      	str	r3, [r7, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <pvPortMalloc+0x172>
	return pvReturn;
 8006aa0:	69fb      	ldr	r3, [r7, #28]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3728      	adds	r7, #40	; 0x28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20001608 	.word	0x20001608
 8006ab0:	20001614 	.word	0x20001614
 8006ab4:	2000160c 	.word	0x2000160c
 8006ab8:	20001600 	.word	0x20001600
 8006abc:	20001610 	.word	0x20001610

08006ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d048      	beq.n	8006b64 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ad2:	2308      	movs	r3, #8
 8006ad4:	425b      	negs	r3, r3
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4413      	add	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	4b21      	ldr	r3, [pc, #132]	; (8006b6c <vPortFree+0xac>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <vPortFree+0x44>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	60fb      	str	r3, [r7, #12]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <vPortFree+0x62>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	60bb      	str	r3, [r7, #8]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	4b11      	ldr	r3, [pc, #68]	; (8006b6c <vPortFree+0xac>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d019      	beq.n	8006b64 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d115      	bne.n	8006b64 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <vPortFree+0xac>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	43db      	mvns	r3, r3
 8006b42:	401a      	ands	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b48:	f7fe fcfc 	bl	8005544 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <vPortFree+0xb0>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4413      	add	r3, r2
 8006b56:	4a06      	ldr	r2, [pc, #24]	; (8006b70 <vPortFree+0xb0>)
 8006b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b5a:	6938      	ldr	r0, [r7, #16]
 8006b5c:	f000 f86c 	bl	8006c38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b60:	f7fe fcfe 	bl	8005560 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b64:	bf00      	nop
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20001614 	.word	0x20001614
 8006b70:	2000160c 	.word	0x2000160c

08006b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b80:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <prvHeapInit+0xac>)
 8006b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00c      	beq.n	8006ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3307      	adds	r3, #7
 8006b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <prvHeapInit+0xac>)
 8006ba4:	4413      	add	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <prvHeapInit+0xb0>)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <prvHeapInit+0xb0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1a9b      	subs	r3, r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0307 	bic.w	r3, r3, #7
 8006bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <prvHeapInit+0xb4>)
 8006bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <prvHeapInit+0xb4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bde:	4b12      	ldr	r3, [pc, #72]	; (8006c28 <prvHeapInit+0xb4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	1ad2      	subs	r2, r2, r3
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <prvHeapInit+0xb4>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	4a0a      	ldr	r2, [pc, #40]	; (8006c2c <prvHeapInit+0xb8>)
 8006c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	4a09      	ldr	r2, [pc, #36]	; (8006c30 <prvHeapInit+0xbc>)
 8006c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c0c:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <prvHeapInit+0xc0>)
 8006c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c12:	601a      	str	r2, [r3, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20000a00 	.word	0x20000a00
 8006c24:	20001600 	.word	0x20001600
 8006c28:	20001608 	.word	0x20001608
 8006c2c:	20001610 	.word	0x20001610
 8006c30:	2000160c 	.word	0x2000160c
 8006c34:	20001614 	.word	0x20001614

08006c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c40:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <prvInsertBlockIntoFreeList+0xa8>)
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e002      	b.n	8006c4c <prvInsertBlockIntoFreeList+0x14>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d8f7      	bhi.n	8006c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4413      	add	r3, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d108      	bne.n	8006c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	441a      	add	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	441a      	add	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d118      	bne.n	8006cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b14      	ldr	r3, [pc, #80]	; (8006ce4 <prvInsertBlockIntoFreeList+0xac>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d00d      	beq.n	8006cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	e008      	b.n	8006cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <prvInsertBlockIntoFreeList+0xac>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	e003      	b.n	8006cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d002      	beq.n	8006cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr
 8006ce0:	20001600 	.word	0x20001600
 8006ce4:	20001608 	.word	0x20001608

08006ce8 <std>:
 8006ce8:	2300      	movs	r3, #0
 8006cea:	b510      	push	{r4, lr}
 8006cec:	4604      	mov	r4, r0
 8006cee:	e9c0 3300 	strd	r3, r3, [r0]
 8006cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cf6:	6083      	str	r3, [r0, #8]
 8006cf8:	8181      	strh	r1, [r0, #12]
 8006cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8006cfc:	81c2      	strh	r2, [r0, #14]
 8006cfe:	6183      	str	r3, [r0, #24]
 8006d00:	4619      	mov	r1, r3
 8006d02:	2208      	movs	r2, #8
 8006d04:	305c      	adds	r0, #92	; 0x5c
 8006d06:	f000 fa17 	bl	8007138 <memset>
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <std+0x58>)
 8006d0c:	6224      	str	r4, [r4, #32]
 8006d0e:	6263      	str	r3, [r4, #36]	; 0x24
 8006d10:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <std+0x5c>)
 8006d12:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <std+0x60>)
 8006d16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d18:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <std+0x64>)
 8006d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <std+0x68>)
 8006d1e:	429c      	cmp	r4, r3
 8006d20:	d006      	beq.n	8006d30 <std+0x48>
 8006d22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d26:	4294      	cmp	r4, r2
 8006d28:	d002      	beq.n	8006d30 <std+0x48>
 8006d2a:	33d0      	adds	r3, #208	; 0xd0
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	d105      	bne.n	8006d3c <std+0x54>
 8006d30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d38:	f000 bacc 	b.w	80072d4 <__retarget_lock_init_recursive>
 8006d3c:	bd10      	pop	{r4, pc}
 8006d3e:	bf00      	nop
 8006d40:	08006f89 	.word	0x08006f89
 8006d44:	08006fab 	.word	0x08006fab
 8006d48:	08006fe3 	.word	0x08006fe3
 8006d4c:	08007007 	.word	0x08007007
 8006d50:	20001618 	.word	0x20001618

08006d54 <stdio_exit_handler>:
 8006d54:	4a02      	ldr	r2, [pc, #8]	; (8006d60 <stdio_exit_handler+0xc>)
 8006d56:	4903      	ldr	r1, [pc, #12]	; (8006d64 <stdio_exit_handler+0x10>)
 8006d58:	4803      	ldr	r0, [pc, #12]	; (8006d68 <stdio_exit_handler+0x14>)
 8006d5a:	f000 b869 	b.w	8006e30 <_fwalk_sglue>
 8006d5e:	bf00      	nop
 8006d60:	20000018 	.word	0x20000018
 8006d64:	08007e41 	.word	0x08007e41
 8006d68:	20000024 	.word	0x20000024

08006d6c <cleanup_stdio>:
 8006d6c:	6841      	ldr	r1, [r0, #4]
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <cleanup_stdio+0x34>)
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4299      	cmp	r1, r3
 8006d74:	4604      	mov	r4, r0
 8006d76:	d001      	beq.n	8006d7c <cleanup_stdio+0x10>
 8006d78:	f001 f862 	bl	8007e40 <_fflush_r>
 8006d7c:	68a1      	ldr	r1, [r4, #8]
 8006d7e:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <cleanup_stdio+0x38>)
 8006d80:	4299      	cmp	r1, r3
 8006d82:	d002      	beq.n	8006d8a <cleanup_stdio+0x1e>
 8006d84:	4620      	mov	r0, r4
 8006d86:	f001 f85b 	bl	8007e40 <_fflush_r>
 8006d8a:	68e1      	ldr	r1, [r4, #12]
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <cleanup_stdio+0x3c>)
 8006d8e:	4299      	cmp	r1, r3
 8006d90:	d004      	beq.n	8006d9c <cleanup_stdio+0x30>
 8006d92:	4620      	mov	r0, r4
 8006d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d98:	f001 b852 	b.w	8007e40 <_fflush_r>
 8006d9c:	bd10      	pop	{r4, pc}
 8006d9e:	bf00      	nop
 8006da0:	20001618 	.word	0x20001618
 8006da4:	20001680 	.word	0x20001680
 8006da8:	200016e8 	.word	0x200016e8

08006dac <global_stdio_init.part.0>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <global_stdio_init.part.0+0x30>)
 8006db0:	4c0b      	ldr	r4, [pc, #44]	; (8006de0 <global_stdio_init.part.0+0x34>)
 8006db2:	4a0c      	ldr	r2, [pc, #48]	; (8006de4 <global_stdio_init.part.0+0x38>)
 8006db4:	4620      	mov	r0, r4
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	2104      	movs	r1, #4
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f7ff ff94 	bl	8006ce8 <std>
 8006dc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	2109      	movs	r1, #9
 8006dc8:	f7ff ff8e 	bl	8006ce8 <std>
 8006dcc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd6:	2112      	movs	r1, #18
 8006dd8:	f7ff bf86 	b.w	8006ce8 <std>
 8006ddc:	20001750 	.word	0x20001750
 8006de0:	20001618 	.word	0x20001618
 8006de4:	08006d55 	.word	0x08006d55

08006de8 <__sfp_lock_acquire>:
 8006de8:	4801      	ldr	r0, [pc, #4]	; (8006df0 <__sfp_lock_acquire+0x8>)
 8006dea:	f000 ba74 	b.w	80072d6 <__retarget_lock_acquire_recursive>
 8006dee:	bf00      	nop
 8006df0:	20001759 	.word	0x20001759

08006df4 <__sfp_lock_release>:
 8006df4:	4801      	ldr	r0, [pc, #4]	; (8006dfc <__sfp_lock_release+0x8>)
 8006df6:	f000 ba6f 	b.w	80072d8 <__retarget_lock_release_recursive>
 8006dfa:	bf00      	nop
 8006dfc:	20001759 	.word	0x20001759

08006e00 <__sinit>:
 8006e00:	b510      	push	{r4, lr}
 8006e02:	4604      	mov	r4, r0
 8006e04:	f7ff fff0 	bl	8006de8 <__sfp_lock_acquire>
 8006e08:	6a23      	ldr	r3, [r4, #32]
 8006e0a:	b11b      	cbz	r3, 8006e14 <__sinit+0x14>
 8006e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e10:	f7ff bff0 	b.w	8006df4 <__sfp_lock_release>
 8006e14:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <__sinit+0x28>)
 8006e16:	6223      	str	r3, [r4, #32]
 8006e18:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <__sinit+0x2c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f5      	bne.n	8006e0c <__sinit+0xc>
 8006e20:	f7ff ffc4 	bl	8006dac <global_stdio_init.part.0>
 8006e24:	e7f2      	b.n	8006e0c <__sinit+0xc>
 8006e26:	bf00      	nop
 8006e28:	08006d6d 	.word	0x08006d6d
 8006e2c:	20001750 	.word	0x20001750

08006e30 <_fwalk_sglue>:
 8006e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e34:	4607      	mov	r7, r0
 8006e36:	4688      	mov	r8, r1
 8006e38:	4614      	mov	r4, r2
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e40:	f1b9 0901 	subs.w	r9, r9, #1
 8006e44:	d505      	bpl.n	8006e52 <_fwalk_sglue+0x22>
 8006e46:	6824      	ldr	r4, [r4, #0]
 8006e48:	2c00      	cmp	r4, #0
 8006e4a:	d1f7      	bne.n	8006e3c <_fwalk_sglue+0xc>
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e52:	89ab      	ldrh	r3, [r5, #12]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d907      	bls.n	8006e68 <_fwalk_sglue+0x38>
 8006e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	d003      	beq.n	8006e68 <_fwalk_sglue+0x38>
 8006e60:	4629      	mov	r1, r5
 8006e62:	4638      	mov	r0, r7
 8006e64:	47c0      	blx	r8
 8006e66:	4306      	orrs	r6, r0
 8006e68:	3568      	adds	r5, #104	; 0x68
 8006e6a:	e7e9      	b.n	8006e40 <_fwalk_sglue+0x10>

08006e6c <iprintf>:
 8006e6c:	b40f      	push	{r0, r1, r2, r3}
 8006e6e:	b507      	push	{r0, r1, r2, lr}
 8006e70:	4906      	ldr	r1, [pc, #24]	; (8006e8c <iprintf+0x20>)
 8006e72:	ab04      	add	r3, sp, #16
 8006e74:	6808      	ldr	r0, [r1, #0]
 8006e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e7a:	6881      	ldr	r1, [r0, #8]
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	f000 fcaf 	bl	80077e0 <_vfiprintf_r>
 8006e82:	b003      	add	sp, #12
 8006e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e88:	b004      	add	sp, #16
 8006e8a:	4770      	bx	lr
 8006e8c:	20000070 	.word	0x20000070

08006e90 <_puts_r>:
 8006e90:	6a03      	ldr	r3, [r0, #32]
 8006e92:	b570      	push	{r4, r5, r6, lr}
 8006e94:	4605      	mov	r5, r0
 8006e96:	460e      	mov	r6, r1
 8006e98:	6884      	ldr	r4, [r0, #8]
 8006e9a:	b90b      	cbnz	r3, 8006ea0 <_puts_r+0x10>
 8006e9c:	f7ff ffb0 	bl	8006e00 <__sinit>
 8006ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ea2:	07db      	lsls	r3, r3, #31
 8006ea4:	d405      	bmi.n	8006eb2 <_puts_r+0x22>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	0598      	lsls	r0, r3, #22
 8006eaa:	d402      	bmi.n	8006eb2 <_puts_r+0x22>
 8006eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eae:	f000 fa12 	bl	80072d6 <__retarget_lock_acquire_recursive>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	0719      	lsls	r1, r3, #28
 8006eb6:	d513      	bpl.n	8006ee0 <_puts_r+0x50>
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	b18b      	cbz	r3, 8006ee0 <_puts_r+0x50>
 8006ebc:	3e01      	subs	r6, #1
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	60a3      	str	r3, [r4, #8]
 8006ec8:	b9e9      	cbnz	r1, 8006f06 <_puts_r+0x76>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da2e      	bge.n	8006f2c <_puts_r+0x9c>
 8006ece:	4622      	mov	r2, r4
 8006ed0:	210a      	movs	r1, #10
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f000 f89b 	bl	800700e <__swbuf_r>
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d007      	beq.n	8006eec <_puts_r+0x5c>
 8006edc:	250a      	movs	r5, #10
 8006ede:	e007      	b.n	8006ef0 <_puts_r+0x60>
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 f8d0 	bl	8007088 <__swsetup_r>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d0e7      	beq.n	8006ebc <_puts_r+0x2c>
 8006eec:	f04f 35ff 	mov.w	r5, #4294967295
 8006ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ef2:	07da      	lsls	r2, r3, #31
 8006ef4:	d405      	bmi.n	8006f02 <_puts_r+0x72>
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	059b      	lsls	r3, r3, #22
 8006efa:	d402      	bmi.n	8006f02 <_puts_r+0x72>
 8006efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006efe:	f000 f9eb 	bl	80072d8 <__retarget_lock_release_recursive>
 8006f02:	4628      	mov	r0, r5
 8006f04:	bd70      	pop	{r4, r5, r6, pc}
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da04      	bge.n	8006f14 <_puts_r+0x84>
 8006f0a:	69a2      	ldr	r2, [r4, #24]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	dc06      	bgt.n	8006f1e <_puts_r+0x8e>
 8006f10:	290a      	cmp	r1, #10
 8006f12:	d004      	beq.n	8006f1e <_puts_r+0x8e>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	6022      	str	r2, [r4, #0]
 8006f1a:	7019      	strb	r1, [r3, #0]
 8006f1c:	e7cf      	b.n	8006ebe <_puts_r+0x2e>
 8006f1e:	4622      	mov	r2, r4
 8006f20:	4628      	mov	r0, r5
 8006f22:	f000 f874 	bl	800700e <__swbuf_r>
 8006f26:	3001      	adds	r0, #1
 8006f28:	d1c9      	bne.n	8006ebe <_puts_r+0x2e>
 8006f2a:	e7df      	b.n	8006eec <_puts_r+0x5c>
 8006f2c:	250a      	movs	r5, #10
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	6022      	str	r2, [r4, #0]
 8006f34:	701d      	strb	r5, [r3, #0]
 8006f36:	e7db      	b.n	8006ef0 <_puts_r+0x60>

08006f38 <puts>:
 8006f38:	4b02      	ldr	r3, [pc, #8]	; (8006f44 <puts+0xc>)
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	f7ff bfa7 	b.w	8006e90 <_puts_r>
 8006f42:	bf00      	nop
 8006f44:	20000070 	.word	0x20000070

08006f48 <siprintf>:
 8006f48:	b40e      	push	{r1, r2, r3}
 8006f4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f4e:	b500      	push	{lr}
 8006f50:	b09c      	sub	sp, #112	; 0x70
 8006f52:	ab1d      	add	r3, sp, #116	; 0x74
 8006f54:	9002      	str	r0, [sp, #8]
 8006f56:	9006      	str	r0, [sp, #24]
 8006f58:	9107      	str	r1, [sp, #28]
 8006f5a:	9104      	str	r1, [sp, #16]
 8006f5c:	4808      	ldr	r0, [pc, #32]	; (8006f80 <siprintf+0x38>)
 8006f5e:	4909      	ldr	r1, [pc, #36]	; (8006f84 <siprintf+0x3c>)
 8006f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f64:	9105      	str	r1, [sp, #20]
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	a902      	add	r1, sp, #8
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	f000 fb12 	bl	8007594 <_svfiprintf_r>
 8006f70:	2200      	movs	r2, #0
 8006f72:	9b02      	ldr	r3, [sp, #8]
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	b01c      	add	sp, #112	; 0x70
 8006f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f7c:	b003      	add	sp, #12
 8006f7e:	4770      	bx	lr
 8006f80:	20000070 	.word	0x20000070
 8006f84:	ffff0208 	.word	0xffff0208

08006f88 <__sread>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f90:	f000 f952 	bl	8007238 <_read_r>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	bfab      	itete	ge
 8006f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f9c:	181b      	addge	r3, r3, r0
 8006f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fa2:	bfac      	ite	ge
 8006fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fa6:	81a3      	strhlt	r3, [r4, #12]
 8006fa8:	bd10      	pop	{r4, pc}

08006faa <__swrite>:
 8006faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fae:	461f      	mov	r7, r3
 8006fb0:	898b      	ldrh	r3, [r1, #12]
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	05db      	lsls	r3, r3, #23
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	4616      	mov	r6, r2
 8006fba:	d505      	bpl.n	8006fc8 <__swrite+0x1e>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc4:	f000 f926 	bl	8007214 <_lseek_r>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	4632      	mov	r2, r6
 8006fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fde:	f000 b93d 	b.w	800725c <_write_r>

08006fe2 <__sseek>:
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fea:	f000 f913 	bl	8007214 <_lseek_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	bf15      	itete	ne
 8006ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ffe:	81a3      	strheq	r3, [r4, #12]
 8007000:	bf18      	it	ne
 8007002:	81a3      	strhne	r3, [r4, #12]
 8007004:	bd10      	pop	{r4, pc}

08007006 <__sclose>:
 8007006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700a:	f000 b89d 	b.w	8007148 <_close_r>

0800700e <__swbuf_r>:
 800700e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007010:	460e      	mov	r6, r1
 8007012:	4614      	mov	r4, r2
 8007014:	4605      	mov	r5, r0
 8007016:	b118      	cbz	r0, 8007020 <__swbuf_r+0x12>
 8007018:	6a03      	ldr	r3, [r0, #32]
 800701a:	b90b      	cbnz	r3, 8007020 <__swbuf_r+0x12>
 800701c:	f7ff fef0 	bl	8006e00 <__sinit>
 8007020:	69a3      	ldr	r3, [r4, #24]
 8007022:	60a3      	str	r3, [r4, #8]
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	071a      	lsls	r2, r3, #28
 8007028:	d525      	bpl.n	8007076 <__swbuf_r+0x68>
 800702a:	6923      	ldr	r3, [r4, #16]
 800702c:	b31b      	cbz	r3, 8007076 <__swbuf_r+0x68>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	6922      	ldr	r2, [r4, #16]
 8007032:	b2f6      	uxtb	r6, r6
 8007034:	1a98      	subs	r0, r3, r2
 8007036:	6963      	ldr	r3, [r4, #20]
 8007038:	4637      	mov	r7, r6
 800703a:	4283      	cmp	r3, r0
 800703c:	dc04      	bgt.n	8007048 <__swbuf_r+0x3a>
 800703e:	4621      	mov	r1, r4
 8007040:	4628      	mov	r0, r5
 8007042:	f000 fefd 	bl	8007e40 <_fflush_r>
 8007046:	b9e0      	cbnz	r0, 8007082 <__swbuf_r+0x74>
 8007048:	68a3      	ldr	r3, [r4, #8]
 800704a:	3b01      	subs	r3, #1
 800704c:	60a3      	str	r3, [r4, #8]
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	6022      	str	r2, [r4, #0]
 8007054:	701e      	strb	r6, [r3, #0]
 8007056:	6962      	ldr	r2, [r4, #20]
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	429a      	cmp	r2, r3
 800705c:	d004      	beq.n	8007068 <__swbuf_r+0x5a>
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	07db      	lsls	r3, r3, #31
 8007062:	d506      	bpl.n	8007072 <__swbuf_r+0x64>
 8007064:	2e0a      	cmp	r6, #10
 8007066:	d104      	bne.n	8007072 <__swbuf_r+0x64>
 8007068:	4621      	mov	r1, r4
 800706a:	4628      	mov	r0, r5
 800706c:	f000 fee8 	bl	8007e40 <_fflush_r>
 8007070:	b938      	cbnz	r0, 8007082 <__swbuf_r+0x74>
 8007072:	4638      	mov	r0, r7
 8007074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007076:	4621      	mov	r1, r4
 8007078:	4628      	mov	r0, r5
 800707a:	f000 f805 	bl	8007088 <__swsetup_r>
 800707e:	2800      	cmp	r0, #0
 8007080:	d0d5      	beq.n	800702e <__swbuf_r+0x20>
 8007082:	f04f 37ff 	mov.w	r7, #4294967295
 8007086:	e7f4      	b.n	8007072 <__swbuf_r+0x64>

08007088 <__swsetup_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4b2a      	ldr	r3, [pc, #168]	; (8007134 <__swsetup_r+0xac>)
 800708c:	4605      	mov	r5, r0
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	460c      	mov	r4, r1
 8007092:	b118      	cbz	r0, 800709c <__swsetup_r+0x14>
 8007094:	6a03      	ldr	r3, [r0, #32]
 8007096:	b90b      	cbnz	r3, 800709c <__swsetup_r+0x14>
 8007098:	f7ff feb2 	bl	8006e00 <__sinit>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070a2:	0718      	lsls	r0, r3, #28
 80070a4:	d422      	bmi.n	80070ec <__swsetup_r+0x64>
 80070a6:	06d9      	lsls	r1, r3, #27
 80070a8:	d407      	bmi.n	80070ba <__swsetup_r+0x32>
 80070aa:	2309      	movs	r3, #9
 80070ac:	602b      	str	r3, [r5, #0]
 80070ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070b2:	f04f 30ff 	mov.w	r0, #4294967295
 80070b6:	81a3      	strh	r3, [r4, #12]
 80070b8:	e034      	b.n	8007124 <__swsetup_r+0x9c>
 80070ba:	0758      	lsls	r0, r3, #29
 80070bc:	d512      	bpl.n	80070e4 <__swsetup_r+0x5c>
 80070be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070c0:	b141      	cbz	r1, 80070d4 <__swsetup_r+0x4c>
 80070c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070c6:	4299      	cmp	r1, r3
 80070c8:	d002      	beq.n	80070d0 <__swsetup_r+0x48>
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 f914 	bl	80072f8 <_free_r>
 80070d0:	2300      	movs	r3, #0
 80070d2:	6363      	str	r3, [r4, #52]	; 0x34
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	2300      	movs	r3, #0
 80070de:	6063      	str	r3, [r4, #4]
 80070e0:	6923      	ldr	r3, [r4, #16]
 80070e2:	6023      	str	r3, [r4, #0]
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	f043 0308 	orr.w	r3, r3, #8
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	b94b      	cbnz	r3, 8007104 <__swsetup_r+0x7c>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070fa:	d003      	beq.n	8007104 <__swsetup_r+0x7c>
 80070fc:	4621      	mov	r1, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 feeb 	bl	8007eda <__smakebuf_r>
 8007104:	89a0      	ldrh	r0, [r4, #12]
 8007106:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800710a:	f010 0301 	ands.w	r3, r0, #1
 800710e:	d00a      	beq.n	8007126 <__swsetup_r+0x9e>
 8007110:	2300      	movs	r3, #0
 8007112:	60a3      	str	r3, [r4, #8]
 8007114:	6963      	ldr	r3, [r4, #20]
 8007116:	425b      	negs	r3, r3
 8007118:	61a3      	str	r3, [r4, #24]
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	b943      	cbnz	r3, 8007130 <__swsetup_r+0xa8>
 800711e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007122:	d1c4      	bne.n	80070ae <__swsetup_r+0x26>
 8007124:	bd38      	pop	{r3, r4, r5, pc}
 8007126:	0781      	lsls	r1, r0, #30
 8007128:	bf58      	it	pl
 800712a:	6963      	ldrpl	r3, [r4, #20]
 800712c:	60a3      	str	r3, [r4, #8]
 800712e:	e7f4      	b.n	800711a <__swsetup_r+0x92>
 8007130:	2000      	movs	r0, #0
 8007132:	e7f7      	b.n	8007124 <__swsetup_r+0x9c>
 8007134:	20000070 	.word	0x20000070

08007138 <memset>:
 8007138:	4603      	mov	r3, r0
 800713a:	4402      	add	r2, r0
 800713c:	4293      	cmp	r3, r2
 800713e:	d100      	bne.n	8007142 <memset+0xa>
 8007140:	4770      	bx	lr
 8007142:	f803 1b01 	strb.w	r1, [r3], #1
 8007146:	e7f9      	b.n	800713c <memset+0x4>

08007148 <_close_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	2300      	movs	r3, #0
 800714c:	4d05      	ldr	r5, [pc, #20]	; (8007164 <_close_r+0x1c>)
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	602b      	str	r3, [r5, #0]
 8007154:	f7f9 ff0b 	bl	8000f6e <_close>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d102      	bne.n	8007162 <_close_r+0x1a>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	b103      	cbz	r3, 8007162 <_close_r+0x1a>
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	20001754 	.word	0x20001754

08007168 <_reclaim_reent>:
 8007168:	4b29      	ldr	r3, [pc, #164]	; (8007210 <_reclaim_reent+0xa8>)
 800716a:	b570      	push	{r4, r5, r6, lr}
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4604      	mov	r4, r0
 8007170:	4283      	cmp	r3, r0
 8007172:	d04b      	beq.n	800720c <_reclaim_reent+0xa4>
 8007174:	69c3      	ldr	r3, [r0, #28]
 8007176:	b143      	cbz	r3, 800718a <_reclaim_reent+0x22>
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d144      	bne.n	8007208 <_reclaim_reent+0xa0>
 800717e:	69e3      	ldr	r3, [r4, #28]
 8007180:	6819      	ldr	r1, [r3, #0]
 8007182:	b111      	cbz	r1, 800718a <_reclaim_reent+0x22>
 8007184:	4620      	mov	r0, r4
 8007186:	f000 f8b7 	bl	80072f8 <_free_r>
 800718a:	6961      	ldr	r1, [r4, #20]
 800718c:	b111      	cbz	r1, 8007194 <_reclaim_reent+0x2c>
 800718e:	4620      	mov	r0, r4
 8007190:	f000 f8b2 	bl	80072f8 <_free_r>
 8007194:	69e1      	ldr	r1, [r4, #28]
 8007196:	b111      	cbz	r1, 800719e <_reclaim_reent+0x36>
 8007198:	4620      	mov	r0, r4
 800719a:	f000 f8ad 	bl	80072f8 <_free_r>
 800719e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80071a0:	b111      	cbz	r1, 80071a8 <_reclaim_reent+0x40>
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 f8a8 	bl	80072f8 <_free_r>
 80071a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071aa:	b111      	cbz	r1, 80071b2 <_reclaim_reent+0x4a>
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 f8a3 	bl	80072f8 <_free_r>
 80071b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80071b4:	b111      	cbz	r1, 80071bc <_reclaim_reent+0x54>
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 f89e 	bl	80072f8 <_free_r>
 80071bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80071be:	b111      	cbz	r1, 80071c6 <_reclaim_reent+0x5e>
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 f899 	bl	80072f8 <_free_r>
 80071c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80071c8:	b111      	cbz	r1, 80071d0 <_reclaim_reent+0x68>
 80071ca:	4620      	mov	r0, r4
 80071cc:	f000 f894 	bl	80072f8 <_free_r>
 80071d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80071d2:	b111      	cbz	r1, 80071da <_reclaim_reent+0x72>
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 f88f 	bl	80072f8 <_free_r>
 80071da:	6a23      	ldr	r3, [r4, #32]
 80071dc:	b1b3      	cbz	r3, 800720c <_reclaim_reent+0xa4>
 80071de:	4620      	mov	r0, r4
 80071e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071e4:	4718      	bx	r3
 80071e6:	5949      	ldr	r1, [r1, r5]
 80071e8:	b941      	cbnz	r1, 80071fc <_reclaim_reent+0x94>
 80071ea:	3504      	adds	r5, #4
 80071ec:	69e3      	ldr	r3, [r4, #28]
 80071ee:	2d80      	cmp	r5, #128	; 0x80
 80071f0:	68d9      	ldr	r1, [r3, #12]
 80071f2:	d1f8      	bne.n	80071e6 <_reclaim_reent+0x7e>
 80071f4:	4620      	mov	r0, r4
 80071f6:	f000 f87f 	bl	80072f8 <_free_r>
 80071fa:	e7c0      	b.n	800717e <_reclaim_reent+0x16>
 80071fc:	680e      	ldr	r6, [r1, #0]
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 f87a 	bl	80072f8 <_free_r>
 8007204:	4631      	mov	r1, r6
 8007206:	e7ef      	b.n	80071e8 <_reclaim_reent+0x80>
 8007208:	2500      	movs	r5, #0
 800720a:	e7ef      	b.n	80071ec <_reclaim_reent+0x84>
 800720c:	bd70      	pop	{r4, r5, r6, pc}
 800720e:	bf00      	nop
 8007210:	20000070 	.word	0x20000070

08007214 <_lseek_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	4611      	mov	r1, r2
 800721c:	2200      	movs	r2, #0
 800721e:	4d05      	ldr	r5, [pc, #20]	; (8007234 <_lseek_r+0x20>)
 8007220:	602a      	str	r2, [r5, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	f7f9 fec7 	bl	8000fb6 <_lseek>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_lseek_r+0x1e>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_lseek_r+0x1e>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	20001754 	.word	0x20001754

08007238 <_read_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	2200      	movs	r2, #0
 8007242:	4d05      	ldr	r5, [pc, #20]	; (8007258 <_read_r+0x20>)
 8007244:	602a      	str	r2, [r5, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f7f9 fe74 	bl	8000f34 <_read>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_read_r+0x1e>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_read_r+0x1e>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20001754 	.word	0x20001754

0800725c <_write_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	4611      	mov	r1, r2
 8007264:	2200      	movs	r2, #0
 8007266:	4d05      	ldr	r5, [pc, #20]	; (800727c <_write_r+0x20>)
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f7f8 ffa6 	bl	80001bc <_write>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_write_r+0x1e>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_write_r+0x1e>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	20001754 	.word	0x20001754

08007280 <__errno>:
 8007280:	4b01      	ldr	r3, [pc, #4]	; (8007288 <__errno+0x8>)
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	20000070 	.word	0x20000070

0800728c <__libc_init_array>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	2600      	movs	r6, #0
 8007290:	4d0c      	ldr	r5, [pc, #48]	; (80072c4 <__libc_init_array+0x38>)
 8007292:	4c0d      	ldr	r4, [pc, #52]	; (80072c8 <__libc_init_array+0x3c>)
 8007294:	1b64      	subs	r4, r4, r5
 8007296:	10a4      	asrs	r4, r4, #2
 8007298:	42a6      	cmp	r6, r4
 800729a:	d109      	bne.n	80072b0 <__libc_init_array+0x24>
 800729c:	f000 feec 	bl	8008078 <_init>
 80072a0:	2600      	movs	r6, #0
 80072a2:	4d0a      	ldr	r5, [pc, #40]	; (80072cc <__libc_init_array+0x40>)
 80072a4:	4c0a      	ldr	r4, [pc, #40]	; (80072d0 <__libc_init_array+0x44>)
 80072a6:	1b64      	subs	r4, r4, r5
 80072a8:	10a4      	asrs	r4, r4, #2
 80072aa:	42a6      	cmp	r6, r4
 80072ac:	d105      	bne.n	80072ba <__libc_init_array+0x2e>
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b4:	4798      	blx	r3
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7ee      	b.n	8007298 <__libc_init_array+0xc>
 80072ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80072be:	4798      	blx	r3
 80072c0:	3601      	adds	r6, #1
 80072c2:	e7f2      	b.n	80072aa <__libc_init_array+0x1e>
 80072c4:	08008fa4 	.word	0x08008fa4
 80072c8:	08008fa4 	.word	0x08008fa4
 80072cc:	08008fa4 	.word	0x08008fa4
 80072d0:	08008fa8 	.word	0x08008fa8

080072d4 <__retarget_lock_init_recursive>:
 80072d4:	4770      	bx	lr

080072d6 <__retarget_lock_acquire_recursive>:
 80072d6:	4770      	bx	lr

080072d8 <__retarget_lock_release_recursive>:
 80072d8:	4770      	bx	lr

080072da <memcpy>:
 80072da:	440a      	add	r2, r1
 80072dc:	4291      	cmp	r1, r2
 80072de:	f100 33ff 	add.w	r3, r0, #4294967295
 80072e2:	d100      	bne.n	80072e6 <memcpy+0xc>
 80072e4:	4770      	bx	lr
 80072e6:	b510      	push	{r4, lr}
 80072e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ec:	4291      	cmp	r1, r2
 80072ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f2:	d1f9      	bne.n	80072e8 <memcpy+0xe>
 80072f4:	bd10      	pop	{r4, pc}
	...

080072f8 <_free_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4605      	mov	r5, r0
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d040      	beq.n	8007382 <_free_r+0x8a>
 8007300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007304:	1f0c      	subs	r4, r1, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	bfb8      	it	lt
 800730a:	18e4      	addlt	r4, r4, r3
 800730c:	f000 f8dc 	bl	80074c8 <__malloc_lock>
 8007310:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <_free_r+0x8c>)
 8007312:	6813      	ldr	r3, [r2, #0]
 8007314:	b933      	cbnz	r3, 8007324 <_free_r+0x2c>
 8007316:	6063      	str	r3, [r4, #4]
 8007318:	6014      	str	r4, [r2, #0]
 800731a:	4628      	mov	r0, r5
 800731c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007320:	f000 b8d8 	b.w	80074d4 <__malloc_unlock>
 8007324:	42a3      	cmp	r3, r4
 8007326:	d908      	bls.n	800733a <_free_r+0x42>
 8007328:	6820      	ldr	r0, [r4, #0]
 800732a:	1821      	adds	r1, r4, r0
 800732c:	428b      	cmp	r3, r1
 800732e:	bf01      	itttt	eq
 8007330:	6819      	ldreq	r1, [r3, #0]
 8007332:	685b      	ldreq	r3, [r3, #4]
 8007334:	1809      	addeq	r1, r1, r0
 8007336:	6021      	streq	r1, [r4, #0]
 8007338:	e7ed      	b.n	8007316 <_free_r+0x1e>
 800733a:	461a      	mov	r2, r3
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	b10b      	cbz	r3, 8007344 <_free_r+0x4c>
 8007340:	42a3      	cmp	r3, r4
 8007342:	d9fa      	bls.n	800733a <_free_r+0x42>
 8007344:	6811      	ldr	r1, [r2, #0]
 8007346:	1850      	adds	r0, r2, r1
 8007348:	42a0      	cmp	r0, r4
 800734a:	d10b      	bne.n	8007364 <_free_r+0x6c>
 800734c:	6820      	ldr	r0, [r4, #0]
 800734e:	4401      	add	r1, r0
 8007350:	1850      	adds	r0, r2, r1
 8007352:	4283      	cmp	r3, r0
 8007354:	6011      	str	r1, [r2, #0]
 8007356:	d1e0      	bne.n	800731a <_free_r+0x22>
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	4408      	add	r0, r1
 800735e:	6010      	str	r0, [r2, #0]
 8007360:	6053      	str	r3, [r2, #4]
 8007362:	e7da      	b.n	800731a <_free_r+0x22>
 8007364:	d902      	bls.n	800736c <_free_r+0x74>
 8007366:	230c      	movs	r3, #12
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	e7d6      	b.n	800731a <_free_r+0x22>
 800736c:	6820      	ldr	r0, [r4, #0]
 800736e:	1821      	adds	r1, r4, r0
 8007370:	428b      	cmp	r3, r1
 8007372:	bf01      	itttt	eq
 8007374:	6819      	ldreq	r1, [r3, #0]
 8007376:	685b      	ldreq	r3, [r3, #4]
 8007378:	1809      	addeq	r1, r1, r0
 800737a:	6021      	streq	r1, [r4, #0]
 800737c:	6063      	str	r3, [r4, #4]
 800737e:	6054      	str	r4, [r2, #4]
 8007380:	e7cb      	b.n	800731a <_free_r+0x22>
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	2000175c 	.word	0x2000175c

08007388 <sbrk_aligned>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	4e0e      	ldr	r6, [pc, #56]	; (80073c4 <sbrk_aligned+0x3c>)
 800738c:	460c      	mov	r4, r1
 800738e:	6831      	ldr	r1, [r6, #0]
 8007390:	4605      	mov	r5, r0
 8007392:	b911      	cbnz	r1, 800739a <sbrk_aligned+0x12>
 8007394:	f000 fe1a 	bl	8007fcc <_sbrk_r>
 8007398:	6030      	str	r0, [r6, #0]
 800739a:	4621      	mov	r1, r4
 800739c:	4628      	mov	r0, r5
 800739e:	f000 fe15 	bl	8007fcc <_sbrk_r>
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	d00a      	beq.n	80073bc <sbrk_aligned+0x34>
 80073a6:	1cc4      	adds	r4, r0, #3
 80073a8:	f024 0403 	bic.w	r4, r4, #3
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d007      	beq.n	80073c0 <sbrk_aligned+0x38>
 80073b0:	1a21      	subs	r1, r4, r0
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 fe0a 	bl	8007fcc <_sbrk_r>
 80073b8:	3001      	adds	r0, #1
 80073ba:	d101      	bne.n	80073c0 <sbrk_aligned+0x38>
 80073bc:	f04f 34ff 	mov.w	r4, #4294967295
 80073c0:	4620      	mov	r0, r4
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
 80073c4:	20001760 	.word	0x20001760

080073c8 <_malloc_r>:
 80073c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	1ccd      	adds	r5, r1, #3
 80073ce:	f025 0503 	bic.w	r5, r5, #3
 80073d2:	3508      	adds	r5, #8
 80073d4:	2d0c      	cmp	r5, #12
 80073d6:	bf38      	it	cc
 80073d8:	250c      	movcc	r5, #12
 80073da:	2d00      	cmp	r5, #0
 80073dc:	4607      	mov	r7, r0
 80073de:	db01      	blt.n	80073e4 <_malloc_r+0x1c>
 80073e0:	42a9      	cmp	r1, r5
 80073e2:	d905      	bls.n	80073f0 <_malloc_r+0x28>
 80073e4:	230c      	movs	r3, #12
 80073e6:	2600      	movs	r6, #0
 80073e8:	603b      	str	r3, [r7, #0]
 80073ea:	4630      	mov	r0, r6
 80073ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074c4 <_malloc_r+0xfc>
 80073f4:	f000 f868 	bl	80074c8 <__malloc_lock>
 80073f8:	f8d8 3000 	ldr.w	r3, [r8]
 80073fc:	461c      	mov	r4, r3
 80073fe:	bb5c      	cbnz	r4, 8007458 <_malloc_r+0x90>
 8007400:	4629      	mov	r1, r5
 8007402:	4638      	mov	r0, r7
 8007404:	f7ff ffc0 	bl	8007388 <sbrk_aligned>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	4604      	mov	r4, r0
 800740c:	d155      	bne.n	80074ba <_malloc_r+0xf2>
 800740e:	f8d8 4000 	ldr.w	r4, [r8]
 8007412:	4626      	mov	r6, r4
 8007414:	2e00      	cmp	r6, #0
 8007416:	d145      	bne.n	80074a4 <_malloc_r+0xdc>
 8007418:	2c00      	cmp	r4, #0
 800741a:	d048      	beq.n	80074ae <_malloc_r+0xe6>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	4631      	mov	r1, r6
 8007420:	4638      	mov	r0, r7
 8007422:	eb04 0903 	add.w	r9, r4, r3
 8007426:	f000 fdd1 	bl	8007fcc <_sbrk_r>
 800742a:	4581      	cmp	r9, r0
 800742c:	d13f      	bne.n	80074ae <_malloc_r+0xe6>
 800742e:	6821      	ldr	r1, [r4, #0]
 8007430:	4638      	mov	r0, r7
 8007432:	1a6d      	subs	r5, r5, r1
 8007434:	4629      	mov	r1, r5
 8007436:	f7ff ffa7 	bl	8007388 <sbrk_aligned>
 800743a:	3001      	adds	r0, #1
 800743c:	d037      	beq.n	80074ae <_malloc_r+0xe6>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	442b      	add	r3, r5
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	f8d8 3000 	ldr.w	r3, [r8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d038      	beq.n	80074be <_malloc_r+0xf6>
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	42a2      	cmp	r2, r4
 8007450:	d12b      	bne.n	80074aa <_malloc_r+0xe2>
 8007452:	2200      	movs	r2, #0
 8007454:	605a      	str	r2, [r3, #4]
 8007456:	e00f      	b.n	8007478 <_malloc_r+0xb0>
 8007458:	6822      	ldr	r2, [r4, #0]
 800745a:	1b52      	subs	r2, r2, r5
 800745c:	d41f      	bmi.n	800749e <_malloc_r+0xd6>
 800745e:	2a0b      	cmp	r2, #11
 8007460:	d917      	bls.n	8007492 <_malloc_r+0xca>
 8007462:	1961      	adds	r1, r4, r5
 8007464:	42a3      	cmp	r3, r4
 8007466:	6025      	str	r5, [r4, #0]
 8007468:	bf18      	it	ne
 800746a:	6059      	strne	r1, [r3, #4]
 800746c:	6863      	ldr	r3, [r4, #4]
 800746e:	bf08      	it	eq
 8007470:	f8c8 1000 	streq.w	r1, [r8]
 8007474:	5162      	str	r2, [r4, r5]
 8007476:	604b      	str	r3, [r1, #4]
 8007478:	4638      	mov	r0, r7
 800747a:	f104 060b 	add.w	r6, r4, #11
 800747e:	f000 f829 	bl	80074d4 <__malloc_unlock>
 8007482:	f026 0607 	bic.w	r6, r6, #7
 8007486:	1d23      	adds	r3, r4, #4
 8007488:	1af2      	subs	r2, r6, r3
 800748a:	d0ae      	beq.n	80073ea <_malloc_r+0x22>
 800748c:	1b9b      	subs	r3, r3, r6
 800748e:	50a3      	str	r3, [r4, r2]
 8007490:	e7ab      	b.n	80073ea <_malloc_r+0x22>
 8007492:	42a3      	cmp	r3, r4
 8007494:	6862      	ldr	r2, [r4, #4]
 8007496:	d1dd      	bne.n	8007454 <_malloc_r+0x8c>
 8007498:	f8c8 2000 	str.w	r2, [r8]
 800749c:	e7ec      	b.n	8007478 <_malloc_r+0xb0>
 800749e:	4623      	mov	r3, r4
 80074a0:	6864      	ldr	r4, [r4, #4]
 80074a2:	e7ac      	b.n	80073fe <_malloc_r+0x36>
 80074a4:	4634      	mov	r4, r6
 80074a6:	6876      	ldr	r6, [r6, #4]
 80074a8:	e7b4      	b.n	8007414 <_malloc_r+0x4c>
 80074aa:	4613      	mov	r3, r2
 80074ac:	e7cc      	b.n	8007448 <_malloc_r+0x80>
 80074ae:	230c      	movs	r3, #12
 80074b0:	4638      	mov	r0, r7
 80074b2:	603b      	str	r3, [r7, #0]
 80074b4:	f000 f80e 	bl	80074d4 <__malloc_unlock>
 80074b8:	e797      	b.n	80073ea <_malloc_r+0x22>
 80074ba:	6025      	str	r5, [r4, #0]
 80074bc:	e7dc      	b.n	8007478 <_malloc_r+0xb0>
 80074be:	605b      	str	r3, [r3, #4]
 80074c0:	deff      	udf	#255	; 0xff
 80074c2:	bf00      	nop
 80074c4:	2000175c 	.word	0x2000175c

080074c8 <__malloc_lock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	; (80074d0 <__malloc_lock+0x8>)
 80074ca:	f7ff bf04 	b.w	80072d6 <__retarget_lock_acquire_recursive>
 80074ce:	bf00      	nop
 80074d0:	20001758 	.word	0x20001758

080074d4 <__malloc_unlock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__malloc_unlock+0x8>)
 80074d6:	f7ff beff 	b.w	80072d8 <__retarget_lock_release_recursive>
 80074da:	bf00      	nop
 80074dc:	20001758 	.word	0x20001758

080074e0 <__ssputs_r>:
 80074e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	461f      	mov	r7, r3
 80074e6:	688e      	ldr	r6, [r1, #8]
 80074e8:	4682      	mov	sl, r0
 80074ea:	42be      	cmp	r6, r7
 80074ec:	460c      	mov	r4, r1
 80074ee:	4690      	mov	r8, r2
 80074f0:	680b      	ldr	r3, [r1, #0]
 80074f2:	d82c      	bhi.n	800754e <__ssputs_r+0x6e>
 80074f4:	898a      	ldrh	r2, [r1, #12]
 80074f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074fa:	d026      	beq.n	800754a <__ssputs_r+0x6a>
 80074fc:	6965      	ldr	r5, [r4, #20]
 80074fe:	6909      	ldr	r1, [r1, #16]
 8007500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007504:	eba3 0901 	sub.w	r9, r3, r1
 8007508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800750c:	1c7b      	adds	r3, r7, #1
 800750e:	444b      	add	r3, r9
 8007510:	106d      	asrs	r5, r5, #1
 8007512:	429d      	cmp	r5, r3
 8007514:	bf38      	it	cc
 8007516:	461d      	movcc	r5, r3
 8007518:	0553      	lsls	r3, r2, #21
 800751a:	d527      	bpl.n	800756c <__ssputs_r+0x8c>
 800751c:	4629      	mov	r1, r5
 800751e:	f7ff ff53 	bl	80073c8 <_malloc_r>
 8007522:	4606      	mov	r6, r0
 8007524:	b360      	cbz	r0, 8007580 <__ssputs_r+0xa0>
 8007526:	464a      	mov	r2, r9
 8007528:	6921      	ldr	r1, [r4, #16]
 800752a:	f7ff fed6 	bl	80072da <memcpy>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	6126      	str	r6, [r4, #16]
 800753c:	444e      	add	r6, r9
 800753e:	6026      	str	r6, [r4, #0]
 8007540:	463e      	mov	r6, r7
 8007542:	6165      	str	r5, [r4, #20]
 8007544:	eba5 0509 	sub.w	r5, r5, r9
 8007548:	60a5      	str	r5, [r4, #8]
 800754a:	42be      	cmp	r6, r7
 800754c:	d900      	bls.n	8007550 <__ssputs_r+0x70>
 800754e:	463e      	mov	r6, r7
 8007550:	4632      	mov	r2, r6
 8007552:	4641      	mov	r1, r8
 8007554:	6820      	ldr	r0, [r4, #0]
 8007556:	f000 fcfc 	bl	8007f52 <memmove>
 800755a:	2000      	movs	r0, #0
 800755c:	68a3      	ldr	r3, [r4, #8]
 800755e:	1b9b      	subs	r3, r3, r6
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	4433      	add	r3, r6
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756c:	462a      	mov	r2, r5
 800756e:	f000 fd4b 	bl	8008008 <_realloc_r>
 8007572:	4606      	mov	r6, r0
 8007574:	2800      	cmp	r0, #0
 8007576:	d1e0      	bne.n	800753a <__ssputs_r+0x5a>
 8007578:	4650      	mov	r0, sl
 800757a:	6921      	ldr	r1, [r4, #16]
 800757c:	f7ff febc 	bl	80072f8 <_free_r>
 8007580:	230c      	movs	r3, #12
 8007582:	f8ca 3000 	str.w	r3, [sl]
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	e7e9      	b.n	8007568 <__ssputs_r+0x88>

08007594 <_svfiprintf_r>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	4698      	mov	r8, r3
 800759a:	898b      	ldrh	r3, [r1, #12]
 800759c:	4607      	mov	r7, r0
 800759e:	061b      	lsls	r3, r3, #24
 80075a0:	460d      	mov	r5, r1
 80075a2:	4614      	mov	r4, r2
 80075a4:	b09d      	sub	sp, #116	; 0x74
 80075a6:	d50e      	bpl.n	80075c6 <_svfiprintf_r+0x32>
 80075a8:	690b      	ldr	r3, [r1, #16]
 80075aa:	b963      	cbnz	r3, 80075c6 <_svfiprintf_r+0x32>
 80075ac:	2140      	movs	r1, #64	; 0x40
 80075ae:	f7ff ff0b 	bl	80073c8 <_malloc_r>
 80075b2:	6028      	str	r0, [r5, #0]
 80075b4:	6128      	str	r0, [r5, #16]
 80075b6:	b920      	cbnz	r0, 80075c2 <_svfiprintf_r+0x2e>
 80075b8:	230c      	movs	r3, #12
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	e0d0      	b.n	8007764 <_svfiprintf_r+0x1d0>
 80075c2:	2340      	movs	r3, #64	; 0x40
 80075c4:	616b      	str	r3, [r5, #20]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ca:	2320      	movs	r3, #32
 80075cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075d0:	2330      	movs	r3, #48	; 0x30
 80075d2:	f04f 0901 	mov.w	r9, #1
 80075d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800777c <_svfiprintf_r+0x1e8>
 80075de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e2:	4623      	mov	r3, r4
 80075e4:	469a      	mov	sl, r3
 80075e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ea:	b10a      	cbz	r2, 80075f0 <_svfiprintf_r+0x5c>
 80075ec:	2a25      	cmp	r2, #37	; 0x25
 80075ee:	d1f9      	bne.n	80075e4 <_svfiprintf_r+0x50>
 80075f0:	ebba 0b04 	subs.w	fp, sl, r4
 80075f4:	d00b      	beq.n	800760e <_svfiprintf_r+0x7a>
 80075f6:	465b      	mov	r3, fp
 80075f8:	4622      	mov	r2, r4
 80075fa:	4629      	mov	r1, r5
 80075fc:	4638      	mov	r0, r7
 80075fe:	f7ff ff6f 	bl	80074e0 <__ssputs_r>
 8007602:	3001      	adds	r0, #1
 8007604:	f000 80a9 	beq.w	800775a <_svfiprintf_r+0x1c6>
 8007608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800760a:	445a      	add	r2, fp
 800760c:	9209      	str	r2, [sp, #36]	; 0x24
 800760e:	f89a 3000 	ldrb.w	r3, [sl]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 80a1 	beq.w	800775a <_svfiprintf_r+0x1c6>
 8007618:	2300      	movs	r3, #0
 800761a:	f04f 32ff 	mov.w	r2, #4294967295
 800761e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007622:	f10a 0a01 	add.w	sl, sl, #1
 8007626:	9304      	str	r3, [sp, #16]
 8007628:	9307      	str	r3, [sp, #28]
 800762a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800762e:	931a      	str	r3, [sp, #104]	; 0x68
 8007630:	4654      	mov	r4, sl
 8007632:	2205      	movs	r2, #5
 8007634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007638:	4850      	ldr	r0, [pc, #320]	; (800777c <_svfiprintf_r+0x1e8>)
 800763a:	f000 fcd7 	bl	8007fec <memchr>
 800763e:	9a04      	ldr	r2, [sp, #16]
 8007640:	b9d8      	cbnz	r0, 800767a <_svfiprintf_r+0xe6>
 8007642:	06d0      	lsls	r0, r2, #27
 8007644:	bf44      	itt	mi
 8007646:	2320      	movmi	r3, #32
 8007648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800764c:	0711      	lsls	r1, r2, #28
 800764e:	bf44      	itt	mi
 8007650:	232b      	movmi	r3, #43	; 0x2b
 8007652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007656:	f89a 3000 	ldrb.w	r3, [sl]
 800765a:	2b2a      	cmp	r3, #42	; 0x2a
 800765c:	d015      	beq.n	800768a <_svfiprintf_r+0xf6>
 800765e:	4654      	mov	r4, sl
 8007660:	2000      	movs	r0, #0
 8007662:	f04f 0c0a 	mov.w	ip, #10
 8007666:	9a07      	ldr	r2, [sp, #28]
 8007668:	4621      	mov	r1, r4
 800766a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800766e:	3b30      	subs	r3, #48	; 0x30
 8007670:	2b09      	cmp	r3, #9
 8007672:	d94d      	bls.n	8007710 <_svfiprintf_r+0x17c>
 8007674:	b1b0      	cbz	r0, 80076a4 <_svfiprintf_r+0x110>
 8007676:	9207      	str	r2, [sp, #28]
 8007678:	e014      	b.n	80076a4 <_svfiprintf_r+0x110>
 800767a:	eba0 0308 	sub.w	r3, r0, r8
 800767e:	fa09 f303 	lsl.w	r3, r9, r3
 8007682:	4313      	orrs	r3, r2
 8007684:	46a2      	mov	sl, r4
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	e7d2      	b.n	8007630 <_svfiprintf_r+0x9c>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	1d19      	adds	r1, r3, #4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	9103      	str	r1, [sp, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfbb      	ittet	lt
 8007696:	425b      	neglt	r3, r3
 8007698:	f042 0202 	orrlt.w	r2, r2, #2
 800769c:	9307      	strge	r3, [sp, #28]
 800769e:	9307      	strlt	r3, [sp, #28]
 80076a0:	bfb8      	it	lt
 80076a2:	9204      	strlt	r2, [sp, #16]
 80076a4:	7823      	ldrb	r3, [r4, #0]
 80076a6:	2b2e      	cmp	r3, #46	; 0x2e
 80076a8:	d10c      	bne.n	80076c4 <_svfiprintf_r+0x130>
 80076aa:	7863      	ldrb	r3, [r4, #1]
 80076ac:	2b2a      	cmp	r3, #42	; 0x2a
 80076ae:	d134      	bne.n	800771a <_svfiprintf_r+0x186>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	3402      	adds	r4, #2
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	9203      	str	r2, [sp, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	bfb8      	it	lt
 80076be:	f04f 33ff 	movlt.w	r3, #4294967295
 80076c2:	9305      	str	r3, [sp, #20]
 80076c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007780 <_svfiprintf_r+0x1ec>
 80076c8:	2203      	movs	r2, #3
 80076ca:	4650      	mov	r0, sl
 80076cc:	7821      	ldrb	r1, [r4, #0]
 80076ce:	f000 fc8d 	bl	8007fec <memchr>
 80076d2:	b138      	cbz	r0, 80076e4 <_svfiprintf_r+0x150>
 80076d4:	2240      	movs	r2, #64	; 0x40
 80076d6:	9b04      	ldr	r3, [sp, #16]
 80076d8:	eba0 000a 	sub.w	r0, r0, sl
 80076dc:	4082      	lsls	r2, r0
 80076de:	4313      	orrs	r3, r2
 80076e0:	3401      	adds	r4, #1
 80076e2:	9304      	str	r3, [sp, #16]
 80076e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e8:	2206      	movs	r2, #6
 80076ea:	4826      	ldr	r0, [pc, #152]	; (8007784 <_svfiprintf_r+0x1f0>)
 80076ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076f0:	f000 fc7c 	bl	8007fec <memchr>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d038      	beq.n	800776a <_svfiprintf_r+0x1d6>
 80076f8:	4b23      	ldr	r3, [pc, #140]	; (8007788 <_svfiprintf_r+0x1f4>)
 80076fa:	bb1b      	cbnz	r3, 8007744 <_svfiprintf_r+0x1b0>
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	3307      	adds	r3, #7
 8007700:	f023 0307 	bic.w	r3, r3, #7
 8007704:	3308      	adds	r3, #8
 8007706:	9303      	str	r3, [sp, #12]
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	4433      	add	r3, r6
 800770c:	9309      	str	r3, [sp, #36]	; 0x24
 800770e:	e768      	b.n	80075e2 <_svfiprintf_r+0x4e>
 8007710:	460c      	mov	r4, r1
 8007712:	2001      	movs	r0, #1
 8007714:	fb0c 3202 	mla	r2, ip, r2, r3
 8007718:	e7a6      	b.n	8007668 <_svfiprintf_r+0xd4>
 800771a:	2300      	movs	r3, #0
 800771c:	f04f 0c0a 	mov.w	ip, #10
 8007720:	4619      	mov	r1, r3
 8007722:	3401      	adds	r4, #1
 8007724:	9305      	str	r3, [sp, #20]
 8007726:	4620      	mov	r0, r4
 8007728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800772c:	3a30      	subs	r2, #48	; 0x30
 800772e:	2a09      	cmp	r2, #9
 8007730:	d903      	bls.n	800773a <_svfiprintf_r+0x1a6>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0c6      	beq.n	80076c4 <_svfiprintf_r+0x130>
 8007736:	9105      	str	r1, [sp, #20]
 8007738:	e7c4      	b.n	80076c4 <_svfiprintf_r+0x130>
 800773a:	4604      	mov	r4, r0
 800773c:	2301      	movs	r3, #1
 800773e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007742:	e7f0      	b.n	8007726 <_svfiprintf_r+0x192>
 8007744:	ab03      	add	r3, sp, #12
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	462a      	mov	r2, r5
 800774a:	4638      	mov	r0, r7
 800774c:	4b0f      	ldr	r3, [pc, #60]	; (800778c <_svfiprintf_r+0x1f8>)
 800774e:	a904      	add	r1, sp, #16
 8007750:	f3af 8000 	nop.w
 8007754:	1c42      	adds	r2, r0, #1
 8007756:	4606      	mov	r6, r0
 8007758:	d1d6      	bne.n	8007708 <_svfiprintf_r+0x174>
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	065b      	lsls	r3, r3, #25
 800775e:	f53f af2d 	bmi.w	80075bc <_svfiprintf_r+0x28>
 8007762:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007764:	b01d      	add	sp, #116	; 0x74
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776a:	ab03      	add	r3, sp, #12
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	462a      	mov	r2, r5
 8007770:	4638      	mov	r0, r7
 8007772:	4b06      	ldr	r3, [pc, #24]	; (800778c <_svfiprintf_r+0x1f8>)
 8007774:	a904      	add	r1, sp, #16
 8007776:	f000 f9bf 	bl	8007af8 <_printf_i>
 800777a:	e7eb      	b.n	8007754 <_svfiprintf_r+0x1c0>
 800777c:	08008f6e 	.word	0x08008f6e
 8007780:	08008f74 	.word	0x08008f74
 8007784:	08008f78 	.word	0x08008f78
 8007788:	00000000 	.word	0x00000000
 800778c:	080074e1 	.word	0x080074e1

08007790 <__sfputc_r>:
 8007790:	6893      	ldr	r3, [r2, #8]
 8007792:	b410      	push	{r4}
 8007794:	3b01      	subs	r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	6093      	str	r3, [r2, #8]
 800779a:	da07      	bge.n	80077ac <__sfputc_r+0x1c>
 800779c:	6994      	ldr	r4, [r2, #24]
 800779e:	42a3      	cmp	r3, r4
 80077a0:	db01      	blt.n	80077a6 <__sfputc_r+0x16>
 80077a2:	290a      	cmp	r1, #10
 80077a4:	d102      	bne.n	80077ac <__sfputc_r+0x1c>
 80077a6:	bc10      	pop	{r4}
 80077a8:	f7ff bc31 	b.w	800700e <__swbuf_r>
 80077ac:	6813      	ldr	r3, [r2, #0]
 80077ae:	1c58      	adds	r0, r3, #1
 80077b0:	6010      	str	r0, [r2, #0]
 80077b2:	7019      	strb	r1, [r3, #0]
 80077b4:	4608      	mov	r0, r1
 80077b6:	bc10      	pop	{r4}
 80077b8:	4770      	bx	lr

080077ba <__sfputs_r>:
 80077ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	4614      	mov	r4, r2
 80077c2:	18d5      	adds	r5, r2, r3
 80077c4:	42ac      	cmp	r4, r5
 80077c6:	d101      	bne.n	80077cc <__sfputs_r+0x12>
 80077c8:	2000      	movs	r0, #0
 80077ca:	e007      	b.n	80077dc <__sfputs_r+0x22>
 80077cc:	463a      	mov	r2, r7
 80077ce:	4630      	mov	r0, r6
 80077d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d4:	f7ff ffdc 	bl	8007790 <__sfputc_r>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d1f3      	bne.n	80077c4 <__sfputs_r+0xa>
 80077dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077e0 <_vfiprintf_r>:
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	460d      	mov	r5, r1
 80077e6:	4614      	mov	r4, r2
 80077e8:	4698      	mov	r8, r3
 80077ea:	4606      	mov	r6, r0
 80077ec:	b09d      	sub	sp, #116	; 0x74
 80077ee:	b118      	cbz	r0, 80077f8 <_vfiprintf_r+0x18>
 80077f0:	6a03      	ldr	r3, [r0, #32]
 80077f2:	b90b      	cbnz	r3, 80077f8 <_vfiprintf_r+0x18>
 80077f4:	f7ff fb04 	bl	8006e00 <__sinit>
 80077f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077fa:	07d9      	lsls	r1, r3, #31
 80077fc:	d405      	bmi.n	800780a <_vfiprintf_r+0x2a>
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	059a      	lsls	r2, r3, #22
 8007802:	d402      	bmi.n	800780a <_vfiprintf_r+0x2a>
 8007804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007806:	f7ff fd66 	bl	80072d6 <__retarget_lock_acquire_recursive>
 800780a:	89ab      	ldrh	r3, [r5, #12]
 800780c:	071b      	lsls	r3, r3, #28
 800780e:	d501      	bpl.n	8007814 <_vfiprintf_r+0x34>
 8007810:	692b      	ldr	r3, [r5, #16]
 8007812:	b99b      	cbnz	r3, 800783c <_vfiprintf_r+0x5c>
 8007814:	4629      	mov	r1, r5
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff fc36 	bl	8007088 <__swsetup_r>
 800781c:	b170      	cbz	r0, 800783c <_vfiprintf_r+0x5c>
 800781e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007820:	07dc      	lsls	r4, r3, #31
 8007822:	d504      	bpl.n	800782e <_vfiprintf_r+0x4e>
 8007824:	f04f 30ff 	mov.w	r0, #4294967295
 8007828:	b01d      	add	sp, #116	; 0x74
 800782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	0598      	lsls	r0, r3, #22
 8007832:	d4f7      	bmi.n	8007824 <_vfiprintf_r+0x44>
 8007834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007836:	f7ff fd4f 	bl	80072d8 <__retarget_lock_release_recursive>
 800783a:	e7f3      	b.n	8007824 <_vfiprintf_r+0x44>
 800783c:	2300      	movs	r3, #0
 800783e:	9309      	str	r3, [sp, #36]	; 0x24
 8007840:	2320      	movs	r3, #32
 8007842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007846:	2330      	movs	r3, #48	; 0x30
 8007848:	f04f 0901 	mov.w	r9, #1
 800784c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007850:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007a00 <_vfiprintf_r+0x220>
 8007854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007858:	4623      	mov	r3, r4
 800785a:	469a      	mov	sl, r3
 800785c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007860:	b10a      	cbz	r2, 8007866 <_vfiprintf_r+0x86>
 8007862:	2a25      	cmp	r2, #37	; 0x25
 8007864:	d1f9      	bne.n	800785a <_vfiprintf_r+0x7a>
 8007866:	ebba 0b04 	subs.w	fp, sl, r4
 800786a:	d00b      	beq.n	8007884 <_vfiprintf_r+0xa4>
 800786c:	465b      	mov	r3, fp
 800786e:	4622      	mov	r2, r4
 8007870:	4629      	mov	r1, r5
 8007872:	4630      	mov	r0, r6
 8007874:	f7ff ffa1 	bl	80077ba <__sfputs_r>
 8007878:	3001      	adds	r0, #1
 800787a:	f000 80a9 	beq.w	80079d0 <_vfiprintf_r+0x1f0>
 800787e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007880:	445a      	add	r2, fp
 8007882:	9209      	str	r2, [sp, #36]	; 0x24
 8007884:	f89a 3000 	ldrb.w	r3, [sl]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80a1 	beq.w	80079d0 <_vfiprintf_r+0x1f0>
 800788e:	2300      	movs	r3, #0
 8007890:	f04f 32ff 	mov.w	r2, #4294967295
 8007894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007898:	f10a 0a01 	add.w	sl, sl, #1
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078a4:	931a      	str	r3, [sp, #104]	; 0x68
 80078a6:	4654      	mov	r4, sl
 80078a8:	2205      	movs	r2, #5
 80078aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ae:	4854      	ldr	r0, [pc, #336]	; (8007a00 <_vfiprintf_r+0x220>)
 80078b0:	f000 fb9c 	bl	8007fec <memchr>
 80078b4:	9a04      	ldr	r2, [sp, #16]
 80078b6:	b9d8      	cbnz	r0, 80078f0 <_vfiprintf_r+0x110>
 80078b8:	06d1      	lsls	r1, r2, #27
 80078ba:	bf44      	itt	mi
 80078bc:	2320      	movmi	r3, #32
 80078be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c2:	0713      	lsls	r3, r2, #28
 80078c4:	bf44      	itt	mi
 80078c6:	232b      	movmi	r3, #43	; 0x2b
 80078c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078cc:	f89a 3000 	ldrb.w	r3, [sl]
 80078d0:	2b2a      	cmp	r3, #42	; 0x2a
 80078d2:	d015      	beq.n	8007900 <_vfiprintf_r+0x120>
 80078d4:	4654      	mov	r4, sl
 80078d6:	2000      	movs	r0, #0
 80078d8:	f04f 0c0a 	mov.w	ip, #10
 80078dc:	9a07      	ldr	r2, [sp, #28]
 80078de:	4621      	mov	r1, r4
 80078e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078e4:	3b30      	subs	r3, #48	; 0x30
 80078e6:	2b09      	cmp	r3, #9
 80078e8:	d94d      	bls.n	8007986 <_vfiprintf_r+0x1a6>
 80078ea:	b1b0      	cbz	r0, 800791a <_vfiprintf_r+0x13a>
 80078ec:	9207      	str	r2, [sp, #28]
 80078ee:	e014      	b.n	800791a <_vfiprintf_r+0x13a>
 80078f0:	eba0 0308 	sub.w	r3, r0, r8
 80078f4:	fa09 f303 	lsl.w	r3, r9, r3
 80078f8:	4313      	orrs	r3, r2
 80078fa:	46a2      	mov	sl, r4
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	e7d2      	b.n	80078a6 <_vfiprintf_r+0xc6>
 8007900:	9b03      	ldr	r3, [sp, #12]
 8007902:	1d19      	adds	r1, r3, #4
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	9103      	str	r1, [sp, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	bfbb      	ittet	lt
 800790c:	425b      	neglt	r3, r3
 800790e:	f042 0202 	orrlt.w	r2, r2, #2
 8007912:	9307      	strge	r3, [sp, #28]
 8007914:	9307      	strlt	r3, [sp, #28]
 8007916:	bfb8      	it	lt
 8007918:	9204      	strlt	r2, [sp, #16]
 800791a:	7823      	ldrb	r3, [r4, #0]
 800791c:	2b2e      	cmp	r3, #46	; 0x2e
 800791e:	d10c      	bne.n	800793a <_vfiprintf_r+0x15a>
 8007920:	7863      	ldrb	r3, [r4, #1]
 8007922:	2b2a      	cmp	r3, #42	; 0x2a
 8007924:	d134      	bne.n	8007990 <_vfiprintf_r+0x1b0>
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	3402      	adds	r4, #2
 800792a:	1d1a      	adds	r2, r3, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	9203      	str	r2, [sp, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfb8      	it	lt
 8007934:	f04f 33ff 	movlt.w	r3, #4294967295
 8007938:	9305      	str	r3, [sp, #20]
 800793a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a04 <_vfiprintf_r+0x224>
 800793e:	2203      	movs	r2, #3
 8007940:	4650      	mov	r0, sl
 8007942:	7821      	ldrb	r1, [r4, #0]
 8007944:	f000 fb52 	bl	8007fec <memchr>
 8007948:	b138      	cbz	r0, 800795a <_vfiprintf_r+0x17a>
 800794a:	2240      	movs	r2, #64	; 0x40
 800794c:	9b04      	ldr	r3, [sp, #16]
 800794e:	eba0 000a 	sub.w	r0, r0, sl
 8007952:	4082      	lsls	r2, r0
 8007954:	4313      	orrs	r3, r2
 8007956:	3401      	adds	r4, #1
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795e:	2206      	movs	r2, #6
 8007960:	4829      	ldr	r0, [pc, #164]	; (8007a08 <_vfiprintf_r+0x228>)
 8007962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007966:	f000 fb41 	bl	8007fec <memchr>
 800796a:	2800      	cmp	r0, #0
 800796c:	d03f      	beq.n	80079ee <_vfiprintf_r+0x20e>
 800796e:	4b27      	ldr	r3, [pc, #156]	; (8007a0c <_vfiprintf_r+0x22c>)
 8007970:	bb1b      	cbnz	r3, 80079ba <_vfiprintf_r+0x1da>
 8007972:	9b03      	ldr	r3, [sp, #12]
 8007974:	3307      	adds	r3, #7
 8007976:	f023 0307 	bic.w	r3, r3, #7
 800797a:	3308      	adds	r3, #8
 800797c:	9303      	str	r3, [sp, #12]
 800797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007980:	443b      	add	r3, r7
 8007982:	9309      	str	r3, [sp, #36]	; 0x24
 8007984:	e768      	b.n	8007858 <_vfiprintf_r+0x78>
 8007986:	460c      	mov	r4, r1
 8007988:	2001      	movs	r0, #1
 800798a:	fb0c 3202 	mla	r2, ip, r2, r3
 800798e:	e7a6      	b.n	80078de <_vfiprintf_r+0xfe>
 8007990:	2300      	movs	r3, #0
 8007992:	f04f 0c0a 	mov.w	ip, #10
 8007996:	4619      	mov	r1, r3
 8007998:	3401      	adds	r4, #1
 800799a:	9305      	str	r3, [sp, #20]
 800799c:	4620      	mov	r0, r4
 800799e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079a2:	3a30      	subs	r2, #48	; 0x30
 80079a4:	2a09      	cmp	r2, #9
 80079a6:	d903      	bls.n	80079b0 <_vfiprintf_r+0x1d0>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0c6      	beq.n	800793a <_vfiprintf_r+0x15a>
 80079ac:	9105      	str	r1, [sp, #20]
 80079ae:	e7c4      	b.n	800793a <_vfiprintf_r+0x15a>
 80079b0:	4604      	mov	r4, r0
 80079b2:	2301      	movs	r3, #1
 80079b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b8:	e7f0      	b.n	800799c <_vfiprintf_r+0x1bc>
 80079ba:	ab03      	add	r3, sp, #12
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	462a      	mov	r2, r5
 80079c0:	4630      	mov	r0, r6
 80079c2:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <_vfiprintf_r+0x230>)
 80079c4:	a904      	add	r1, sp, #16
 80079c6:	f3af 8000 	nop.w
 80079ca:	4607      	mov	r7, r0
 80079cc:	1c78      	adds	r0, r7, #1
 80079ce:	d1d6      	bne.n	800797e <_vfiprintf_r+0x19e>
 80079d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079d2:	07d9      	lsls	r1, r3, #31
 80079d4:	d405      	bmi.n	80079e2 <_vfiprintf_r+0x202>
 80079d6:	89ab      	ldrh	r3, [r5, #12]
 80079d8:	059a      	lsls	r2, r3, #22
 80079da:	d402      	bmi.n	80079e2 <_vfiprintf_r+0x202>
 80079dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079de:	f7ff fc7b 	bl	80072d8 <__retarget_lock_release_recursive>
 80079e2:	89ab      	ldrh	r3, [r5, #12]
 80079e4:	065b      	lsls	r3, r3, #25
 80079e6:	f53f af1d 	bmi.w	8007824 <_vfiprintf_r+0x44>
 80079ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ec:	e71c      	b.n	8007828 <_vfiprintf_r+0x48>
 80079ee:	ab03      	add	r3, sp, #12
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	462a      	mov	r2, r5
 80079f4:	4630      	mov	r0, r6
 80079f6:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <_vfiprintf_r+0x230>)
 80079f8:	a904      	add	r1, sp, #16
 80079fa:	f000 f87d 	bl	8007af8 <_printf_i>
 80079fe:	e7e4      	b.n	80079ca <_vfiprintf_r+0x1ea>
 8007a00:	08008f6e 	.word	0x08008f6e
 8007a04:	08008f74 	.word	0x08008f74
 8007a08:	08008f78 	.word	0x08008f78
 8007a0c:	00000000 	.word	0x00000000
 8007a10:	080077bb 	.word	0x080077bb

08007a14 <_printf_common>:
 8007a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	4616      	mov	r6, r2
 8007a1a:	4699      	mov	r9, r3
 8007a1c:	688a      	ldr	r2, [r1, #8]
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	4607      	mov	r7, r0
 8007a22:	4293      	cmp	r3, r2
 8007a24:	bfb8      	it	lt
 8007a26:	4613      	movlt	r3, r2
 8007a28:	6033      	str	r3, [r6, #0]
 8007a2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a2e:	460c      	mov	r4, r1
 8007a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a34:	b10a      	cbz	r2, 8007a3a <_printf_common+0x26>
 8007a36:	3301      	adds	r3, #1
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	0699      	lsls	r1, r3, #26
 8007a3e:	bf42      	ittt	mi
 8007a40:	6833      	ldrmi	r3, [r6, #0]
 8007a42:	3302      	addmi	r3, #2
 8007a44:	6033      	strmi	r3, [r6, #0]
 8007a46:	6825      	ldr	r5, [r4, #0]
 8007a48:	f015 0506 	ands.w	r5, r5, #6
 8007a4c:	d106      	bne.n	8007a5c <_printf_common+0x48>
 8007a4e:	f104 0a19 	add.w	sl, r4, #25
 8007a52:	68e3      	ldr	r3, [r4, #12]
 8007a54:	6832      	ldr	r2, [r6, #0]
 8007a56:	1a9b      	subs	r3, r3, r2
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	dc2b      	bgt.n	8007ab4 <_printf_common+0xa0>
 8007a5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a60:	1e13      	subs	r3, r2, #0
 8007a62:	6822      	ldr	r2, [r4, #0]
 8007a64:	bf18      	it	ne
 8007a66:	2301      	movne	r3, #1
 8007a68:	0692      	lsls	r2, r2, #26
 8007a6a:	d430      	bmi.n	8007ace <_printf_common+0xba>
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a74:	47c0      	blx	r8
 8007a76:	3001      	adds	r0, #1
 8007a78:	d023      	beq.n	8007ac2 <_printf_common+0xae>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	6922      	ldr	r2, [r4, #16]
 8007a7e:	f003 0306 	and.w	r3, r3, #6
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	bf14      	ite	ne
 8007a86:	2500      	movne	r5, #0
 8007a88:	6833      	ldreq	r3, [r6, #0]
 8007a8a:	f04f 0600 	mov.w	r6, #0
 8007a8e:	bf08      	it	eq
 8007a90:	68e5      	ldreq	r5, [r4, #12]
 8007a92:	f104 041a 	add.w	r4, r4, #26
 8007a96:	bf08      	it	eq
 8007a98:	1aed      	subeq	r5, r5, r3
 8007a9a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a9e:	bf08      	it	eq
 8007aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	bfc4      	itt	gt
 8007aa8:	1a9b      	subgt	r3, r3, r2
 8007aaa:	18ed      	addgt	r5, r5, r3
 8007aac:	42b5      	cmp	r5, r6
 8007aae:	d11a      	bne.n	8007ae6 <_printf_common+0xd2>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e008      	b.n	8007ac6 <_printf_common+0xb2>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4652      	mov	r2, sl
 8007ab8:	4649      	mov	r1, r9
 8007aba:	4638      	mov	r0, r7
 8007abc:	47c0      	blx	r8
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d103      	bne.n	8007aca <_printf_common+0xb6>
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aca:	3501      	adds	r5, #1
 8007acc:	e7c1      	b.n	8007a52 <_printf_common+0x3e>
 8007ace:	2030      	movs	r0, #48	; 0x30
 8007ad0:	18e1      	adds	r1, r4, r3
 8007ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007adc:	4422      	add	r2, r4
 8007ade:	3302      	adds	r3, #2
 8007ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ae4:	e7c2      	b.n	8007a6c <_printf_common+0x58>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4622      	mov	r2, r4
 8007aea:	4649      	mov	r1, r9
 8007aec:	4638      	mov	r0, r7
 8007aee:	47c0      	blx	r8
 8007af0:	3001      	adds	r0, #1
 8007af2:	d0e6      	beq.n	8007ac2 <_printf_common+0xae>
 8007af4:	3601      	adds	r6, #1
 8007af6:	e7d9      	b.n	8007aac <_printf_common+0x98>

08007af8 <_printf_i>:
 8007af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007afc:	7e0f      	ldrb	r7, [r1, #24]
 8007afe:	4691      	mov	r9, r2
 8007b00:	2f78      	cmp	r7, #120	; 0x78
 8007b02:	4680      	mov	r8, r0
 8007b04:	460c      	mov	r4, r1
 8007b06:	469a      	mov	sl, r3
 8007b08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b0e:	d807      	bhi.n	8007b20 <_printf_i+0x28>
 8007b10:	2f62      	cmp	r7, #98	; 0x62
 8007b12:	d80a      	bhi.n	8007b2a <_printf_i+0x32>
 8007b14:	2f00      	cmp	r7, #0
 8007b16:	f000 80d5 	beq.w	8007cc4 <_printf_i+0x1cc>
 8007b1a:	2f58      	cmp	r7, #88	; 0x58
 8007b1c:	f000 80c1 	beq.w	8007ca2 <_printf_i+0x1aa>
 8007b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b28:	e03a      	b.n	8007ba0 <_printf_i+0xa8>
 8007b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b2e:	2b15      	cmp	r3, #21
 8007b30:	d8f6      	bhi.n	8007b20 <_printf_i+0x28>
 8007b32:	a101      	add	r1, pc, #4	; (adr r1, 8007b38 <_printf_i+0x40>)
 8007b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b38:	08007b91 	.word	0x08007b91
 8007b3c:	08007ba5 	.word	0x08007ba5
 8007b40:	08007b21 	.word	0x08007b21
 8007b44:	08007b21 	.word	0x08007b21
 8007b48:	08007b21 	.word	0x08007b21
 8007b4c:	08007b21 	.word	0x08007b21
 8007b50:	08007ba5 	.word	0x08007ba5
 8007b54:	08007b21 	.word	0x08007b21
 8007b58:	08007b21 	.word	0x08007b21
 8007b5c:	08007b21 	.word	0x08007b21
 8007b60:	08007b21 	.word	0x08007b21
 8007b64:	08007cab 	.word	0x08007cab
 8007b68:	08007bd1 	.word	0x08007bd1
 8007b6c:	08007c65 	.word	0x08007c65
 8007b70:	08007b21 	.word	0x08007b21
 8007b74:	08007b21 	.word	0x08007b21
 8007b78:	08007ccd 	.word	0x08007ccd
 8007b7c:	08007b21 	.word	0x08007b21
 8007b80:	08007bd1 	.word	0x08007bd1
 8007b84:	08007b21 	.word	0x08007b21
 8007b88:	08007b21 	.word	0x08007b21
 8007b8c:	08007c6d 	.word	0x08007c6d
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	1d1a      	adds	r2, r3, #4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	602a      	str	r2, [r5, #0]
 8007b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e0a0      	b.n	8007ce6 <_printf_i+0x1ee>
 8007ba4:	6820      	ldr	r0, [r4, #0]
 8007ba6:	682b      	ldr	r3, [r5, #0]
 8007ba8:	0607      	lsls	r7, r0, #24
 8007baa:	f103 0104 	add.w	r1, r3, #4
 8007bae:	6029      	str	r1, [r5, #0]
 8007bb0:	d501      	bpl.n	8007bb6 <_printf_i+0xbe>
 8007bb2:	681e      	ldr	r6, [r3, #0]
 8007bb4:	e003      	b.n	8007bbe <_printf_i+0xc6>
 8007bb6:	0646      	lsls	r6, r0, #25
 8007bb8:	d5fb      	bpl.n	8007bb2 <_printf_i+0xba>
 8007bba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	da03      	bge.n	8007bca <_printf_i+0xd2>
 8007bc2:	232d      	movs	r3, #45	; 0x2d
 8007bc4:	4276      	negs	r6, r6
 8007bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bca:	230a      	movs	r3, #10
 8007bcc:	4859      	ldr	r0, [pc, #356]	; (8007d34 <_printf_i+0x23c>)
 8007bce:	e012      	b.n	8007bf6 <_printf_i+0xfe>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	6820      	ldr	r0, [r4, #0]
 8007bd4:	1d19      	adds	r1, r3, #4
 8007bd6:	6029      	str	r1, [r5, #0]
 8007bd8:	0605      	lsls	r5, r0, #24
 8007bda:	d501      	bpl.n	8007be0 <_printf_i+0xe8>
 8007bdc:	681e      	ldr	r6, [r3, #0]
 8007bde:	e002      	b.n	8007be6 <_printf_i+0xee>
 8007be0:	0641      	lsls	r1, r0, #25
 8007be2:	d5fb      	bpl.n	8007bdc <_printf_i+0xe4>
 8007be4:	881e      	ldrh	r6, [r3, #0]
 8007be6:	2f6f      	cmp	r7, #111	; 0x6f
 8007be8:	bf0c      	ite	eq
 8007bea:	2308      	moveq	r3, #8
 8007bec:	230a      	movne	r3, #10
 8007bee:	4851      	ldr	r0, [pc, #324]	; (8007d34 <_printf_i+0x23c>)
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bf6:	6865      	ldr	r5, [r4, #4]
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	bfa8      	it	ge
 8007bfc:	6821      	ldrge	r1, [r4, #0]
 8007bfe:	60a5      	str	r5, [r4, #8]
 8007c00:	bfa4      	itt	ge
 8007c02:	f021 0104 	bicge.w	r1, r1, #4
 8007c06:	6021      	strge	r1, [r4, #0]
 8007c08:	b90e      	cbnz	r6, 8007c0e <_printf_i+0x116>
 8007c0a:	2d00      	cmp	r5, #0
 8007c0c:	d04b      	beq.n	8007ca6 <_printf_i+0x1ae>
 8007c0e:	4615      	mov	r5, r2
 8007c10:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c14:	fb03 6711 	mls	r7, r3, r1, r6
 8007c18:	5dc7      	ldrb	r7, [r0, r7]
 8007c1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c1e:	4637      	mov	r7, r6
 8007c20:	42bb      	cmp	r3, r7
 8007c22:	460e      	mov	r6, r1
 8007c24:	d9f4      	bls.n	8007c10 <_printf_i+0x118>
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d10b      	bne.n	8007c42 <_printf_i+0x14a>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	07de      	lsls	r6, r3, #31
 8007c2e:	d508      	bpl.n	8007c42 <_printf_i+0x14a>
 8007c30:	6923      	ldr	r3, [r4, #16]
 8007c32:	6861      	ldr	r1, [r4, #4]
 8007c34:	4299      	cmp	r1, r3
 8007c36:	bfde      	ittt	le
 8007c38:	2330      	movle	r3, #48	; 0x30
 8007c3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c42:	1b52      	subs	r2, r2, r5
 8007c44:	6122      	str	r2, [r4, #16]
 8007c46:	464b      	mov	r3, r9
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f8cd a000 	str.w	sl, [sp]
 8007c50:	aa03      	add	r2, sp, #12
 8007c52:	f7ff fedf 	bl	8007a14 <_printf_common>
 8007c56:	3001      	adds	r0, #1
 8007c58:	d14a      	bne.n	8007cf0 <_printf_i+0x1f8>
 8007c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5e:	b004      	add	sp, #16
 8007c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	f043 0320 	orr.w	r3, r3, #32
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	2778      	movs	r7, #120	; 0x78
 8007c6e:	4832      	ldr	r0, [pc, #200]	; (8007d38 <_printf_i+0x240>)
 8007c70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	6829      	ldr	r1, [r5, #0]
 8007c78:	061f      	lsls	r7, r3, #24
 8007c7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c7e:	d402      	bmi.n	8007c86 <_printf_i+0x18e>
 8007c80:	065f      	lsls	r7, r3, #25
 8007c82:	bf48      	it	mi
 8007c84:	b2b6      	uxthmi	r6, r6
 8007c86:	07df      	lsls	r7, r3, #31
 8007c88:	bf48      	it	mi
 8007c8a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c8e:	6029      	str	r1, [r5, #0]
 8007c90:	bf48      	it	mi
 8007c92:	6023      	strmi	r3, [r4, #0]
 8007c94:	b91e      	cbnz	r6, 8007c9e <_printf_i+0x1a6>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	f023 0320 	bic.w	r3, r3, #32
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	2310      	movs	r3, #16
 8007ca0:	e7a6      	b.n	8007bf0 <_printf_i+0xf8>
 8007ca2:	4824      	ldr	r0, [pc, #144]	; (8007d34 <_printf_i+0x23c>)
 8007ca4:	e7e4      	b.n	8007c70 <_printf_i+0x178>
 8007ca6:	4615      	mov	r5, r2
 8007ca8:	e7bd      	b.n	8007c26 <_printf_i+0x12e>
 8007caa:	682b      	ldr	r3, [r5, #0]
 8007cac:	6826      	ldr	r6, [r4, #0]
 8007cae:	1d18      	adds	r0, r3, #4
 8007cb0:	6961      	ldr	r1, [r4, #20]
 8007cb2:	6028      	str	r0, [r5, #0]
 8007cb4:	0635      	lsls	r5, r6, #24
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	d501      	bpl.n	8007cbe <_printf_i+0x1c6>
 8007cba:	6019      	str	r1, [r3, #0]
 8007cbc:	e002      	b.n	8007cc4 <_printf_i+0x1cc>
 8007cbe:	0670      	lsls	r0, r6, #25
 8007cc0:	d5fb      	bpl.n	8007cba <_printf_i+0x1c2>
 8007cc2:	8019      	strh	r1, [r3, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4615      	mov	r5, r2
 8007cc8:	6123      	str	r3, [r4, #16]
 8007cca:	e7bc      	b.n	8007c46 <_printf_i+0x14e>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	2100      	movs	r1, #0
 8007cd0:	1d1a      	adds	r2, r3, #4
 8007cd2:	602a      	str	r2, [r5, #0]
 8007cd4:	681d      	ldr	r5, [r3, #0]
 8007cd6:	6862      	ldr	r2, [r4, #4]
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 f987 	bl	8007fec <memchr>
 8007cde:	b108      	cbz	r0, 8007ce4 <_printf_i+0x1ec>
 8007ce0:	1b40      	subs	r0, r0, r5
 8007ce2:	6060      	str	r0, [r4, #4]
 8007ce4:	6863      	ldr	r3, [r4, #4]
 8007ce6:	6123      	str	r3, [r4, #16]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cee:	e7aa      	b.n	8007c46 <_printf_i+0x14e>
 8007cf0:	462a      	mov	r2, r5
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	47d0      	blx	sl
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	d0ad      	beq.n	8007c5a <_printf_i+0x162>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	079b      	lsls	r3, r3, #30
 8007d02:	d413      	bmi.n	8007d2c <_printf_i+0x234>
 8007d04:	68e0      	ldr	r0, [r4, #12]
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	4298      	cmp	r0, r3
 8007d0a:	bfb8      	it	lt
 8007d0c:	4618      	movlt	r0, r3
 8007d0e:	e7a6      	b.n	8007c5e <_printf_i+0x166>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4632      	mov	r2, r6
 8007d14:	4649      	mov	r1, r9
 8007d16:	4640      	mov	r0, r8
 8007d18:	47d0      	blx	sl
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d09d      	beq.n	8007c5a <_printf_i+0x162>
 8007d1e:	3501      	adds	r5, #1
 8007d20:	68e3      	ldr	r3, [r4, #12]
 8007d22:	9903      	ldr	r1, [sp, #12]
 8007d24:	1a5b      	subs	r3, r3, r1
 8007d26:	42ab      	cmp	r3, r5
 8007d28:	dcf2      	bgt.n	8007d10 <_printf_i+0x218>
 8007d2a:	e7eb      	b.n	8007d04 <_printf_i+0x20c>
 8007d2c:	2500      	movs	r5, #0
 8007d2e:	f104 0619 	add.w	r6, r4, #25
 8007d32:	e7f5      	b.n	8007d20 <_printf_i+0x228>
 8007d34:	08008f7f 	.word	0x08008f7f
 8007d38:	08008f90 	.word	0x08008f90

08007d3c <__sflush_r>:
 8007d3c:	898a      	ldrh	r2, [r1, #12]
 8007d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d40:	4605      	mov	r5, r0
 8007d42:	0710      	lsls	r0, r2, #28
 8007d44:	460c      	mov	r4, r1
 8007d46:	d457      	bmi.n	8007df8 <__sflush_r+0xbc>
 8007d48:	684b      	ldr	r3, [r1, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dc04      	bgt.n	8007d58 <__sflush_r+0x1c>
 8007d4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dc01      	bgt.n	8007d58 <__sflush_r+0x1c>
 8007d54:	2000      	movs	r0, #0
 8007d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	d0fa      	beq.n	8007d54 <__sflush_r+0x18>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d64:	682f      	ldr	r7, [r5, #0]
 8007d66:	6a21      	ldr	r1, [r4, #32]
 8007d68:	602b      	str	r3, [r5, #0]
 8007d6a:	d032      	beq.n	8007dd2 <__sflush_r+0x96>
 8007d6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	075a      	lsls	r2, r3, #29
 8007d72:	d505      	bpl.n	8007d80 <__sflush_r+0x44>
 8007d74:	6863      	ldr	r3, [r4, #4]
 8007d76:	1ac0      	subs	r0, r0, r3
 8007d78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d7a:	b10b      	cbz	r3, 8007d80 <__sflush_r+0x44>
 8007d7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d7e:	1ac0      	subs	r0, r0, r3
 8007d80:	2300      	movs	r3, #0
 8007d82:	4602      	mov	r2, r0
 8007d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d86:	4628      	mov	r0, r5
 8007d88:	6a21      	ldr	r1, [r4, #32]
 8007d8a:	47b0      	blx	r6
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	d106      	bne.n	8007da0 <__sflush_r+0x64>
 8007d92:	6829      	ldr	r1, [r5, #0]
 8007d94:	291d      	cmp	r1, #29
 8007d96:	d82b      	bhi.n	8007df0 <__sflush_r+0xb4>
 8007d98:	4a28      	ldr	r2, [pc, #160]	; (8007e3c <__sflush_r+0x100>)
 8007d9a:	410a      	asrs	r2, r1
 8007d9c:	07d6      	lsls	r6, r2, #31
 8007d9e:	d427      	bmi.n	8007df0 <__sflush_r+0xb4>
 8007da0:	2200      	movs	r2, #0
 8007da2:	6062      	str	r2, [r4, #4]
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	04d9      	lsls	r1, r3, #19
 8007da8:	6022      	str	r2, [r4, #0]
 8007daa:	d504      	bpl.n	8007db6 <__sflush_r+0x7a>
 8007dac:	1c42      	adds	r2, r0, #1
 8007dae:	d101      	bne.n	8007db4 <__sflush_r+0x78>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	b903      	cbnz	r3, 8007db6 <__sflush_r+0x7a>
 8007db4:	6560      	str	r0, [r4, #84]	; 0x54
 8007db6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007db8:	602f      	str	r7, [r5, #0]
 8007dba:	2900      	cmp	r1, #0
 8007dbc:	d0ca      	beq.n	8007d54 <__sflush_r+0x18>
 8007dbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc2:	4299      	cmp	r1, r3
 8007dc4:	d002      	beq.n	8007dcc <__sflush_r+0x90>
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f7ff fa96 	bl	80072f8 <_free_r>
 8007dcc:	2000      	movs	r0, #0
 8007dce:	6360      	str	r0, [r4, #52]	; 0x34
 8007dd0:	e7c1      	b.n	8007d56 <__sflush_r+0x1a>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47b0      	blx	r6
 8007dd8:	1c41      	adds	r1, r0, #1
 8007dda:	d1c8      	bne.n	8007d6e <__sflush_r+0x32>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0c5      	beq.n	8007d6e <__sflush_r+0x32>
 8007de2:	2b1d      	cmp	r3, #29
 8007de4:	d001      	beq.n	8007dea <__sflush_r+0xae>
 8007de6:	2b16      	cmp	r3, #22
 8007de8:	d101      	bne.n	8007dee <__sflush_r+0xb2>
 8007dea:	602f      	str	r7, [r5, #0]
 8007dec:	e7b2      	b.n	8007d54 <__sflush_r+0x18>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	e7ae      	b.n	8007d56 <__sflush_r+0x1a>
 8007df8:	690f      	ldr	r7, [r1, #16]
 8007dfa:	2f00      	cmp	r7, #0
 8007dfc:	d0aa      	beq.n	8007d54 <__sflush_r+0x18>
 8007dfe:	0793      	lsls	r3, r2, #30
 8007e00:	bf18      	it	ne
 8007e02:	2300      	movne	r3, #0
 8007e04:	680e      	ldr	r6, [r1, #0]
 8007e06:	bf08      	it	eq
 8007e08:	694b      	ldreq	r3, [r1, #20]
 8007e0a:	1bf6      	subs	r6, r6, r7
 8007e0c:	600f      	str	r7, [r1, #0]
 8007e0e:	608b      	str	r3, [r1, #8]
 8007e10:	2e00      	cmp	r6, #0
 8007e12:	dd9f      	ble.n	8007d54 <__sflush_r+0x18>
 8007e14:	4633      	mov	r3, r6
 8007e16:	463a      	mov	r2, r7
 8007e18:	4628      	mov	r0, r5
 8007e1a:	6a21      	ldr	r1, [r4, #32]
 8007e1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e20:	47e0      	blx	ip
 8007e22:	2800      	cmp	r0, #0
 8007e24:	dc06      	bgt.n	8007e34 <__sflush_r+0xf8>
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e30:	81a3      	strh	r3, [r4, #12]
 8007e32:	e790      	b.n	8007d56 <__sflush_r+0x1a>
 8007e34:	4407      	add	r7, r0
 8007e36:	1a36      	subs	r6, r6, r0
 8007e38:	e7ea      	b.n	8007e10 <__sflush_r+0xd4>
 8007e3a:	bf00      	nop
 8007e3c:	dfbffffe 	.word	0xdfbffffe

08007e40 <_fflush_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	690b      	ldr	r3, [r1, #16]
 8007e44:	4605      	mov	r5, r0
 8007e46:	460c      	mov	r4, r1
 8007e48:	b913      	cbnz	r3, 8007e50 <_fflush_r+0x10>
 8007e4a:	2500      	movs	r5, #0
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	b118      	cbz	r0, 8007e5a <_fflush_r+0x1a>
 8007e52:	6a03      	ldr	r3, [r0, #32]
 8007e54:	b90b      	cbnz	r3, 8007e5a <_fflush_r+0x1a>
 8007e56:	f7fe ffd3 	bl	8006e00 <__sinit>
 8007e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f3      	beq.n	8007e4a <_fflush_r+0xa>
 8007e62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e64:	07d0      	lsls	r0, r2, #31
 8007e66:	d404      	bmi.n	8007e72 <_fflush_r+0x32>
 8007e68:	0599      	lsls	r1, r3, #22
 8007e6a:	d402      	bmi.n	8007e72 <_fflush_r+0x32>
 8007e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e6e:	f7ff fa32 	bl	80072d6 <__retarget_lock_acquire_recursive>
 8007e72:	4628      	mov	r0, r5
 8007e74:	4621      	mov	r1, r4
 8007e76:	f7ff ff61 	bl	8007d3c <__sflush_r>
 8007e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	07da      	lsls	r2, r3, #31
 8007e80:	d4e4      	bmi.n	8007e4c <_fflush_r+0xc>
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	059b      	lsls	r3, r3, #22
 8007e86:	d4e1      	bmi.n	8007e4c <_fflush_r+0xc>
 8007e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e8a:	f7ff fa25 	bl	80072d8 <__retarget_lock_release_recursive>
 8007e8e:	e7dd      	b.n	8007e4c <_fflush_r+0xc>

08007e90 <__swhatbuf_r>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	460c      	mov	r4, r1
 8007e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e98:	4615      	mov	r5, r2
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	461e      	mov	r6, r3
 8007e9e:	b096      	sub	sp, #88	; 0x58
 8007ea0:	da0c      	bge.n	8007ebc <__swhatbuf_r+0x2c>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007eaa:	bf0c      	ite	eq
 8007eac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007eb0:	2340      	movne	r3, #64	; 0x40
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	6031      	str	r1, [r6, #0]
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	b016      	add	sp, #88	; 0x58
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	466a      	mov	r2, sp
 8007ebe:	f000 f863 	bl	8007f88 <_fstat_r>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	dbed      	blt.n	8007ea2 <__swhatbuf_r+0x12>
 8007ec6:	9901      	ldr	r1, [sp, #4]
 8007ec8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ecc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ed0:	4259      	negs	r1, r3
 8007ed2:	4159      	adcs	r1, r3
 8007ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ed8:	e7eb      	b.n	8007eb2 <__swhatbuf_r+0x22>

08007eda <__smakebuf_r>:
 8007eda:	898b      	ldrh	r3, [r1, #12]
 8007edc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ede:	079d      	lsls	r5, r3, #30
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	d507      	bpl.n	8007ef6 <__smakebuf_r+0x1c>
 8007ee6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	6123      	str	r3, [r4, #16]
 8007eee:	2301      	movs	r3, #1
 8007ef0:	6163      	str	r3, [r4, #20]
 8007ef2:	b002      	add	sp, #8
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
 8007ef6:	466a      	mov	r2, sp
 8007ef8:	ab01      	add	r3, sp, #4
 8007efa:	f7ff ffc9 	bl	8007e90 <__swhatbuf_r>
 8007efe:	9900      	ldr	r1, [sp, #0]
 8007f00:	4605      	mov	r5, r0
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7ff fa60 	bl	80073c8 <_malloc_r>
 8007f08:	b948      	cbnz	r0, 8007f1e <__smakebuf_r+0x44>
 8007f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f0e:	059a      	lsls	r2, r3, #22
 8007f10:	d4ef      	bmi.n	8007ef2 <__smakebuf_r+0x18>
 8007f12:	f023 0303 	bic.w	r3, r3, #3
 8007f16:	f043 0302 	orr.w	r3, r3, #2
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	e7e3      	b.n	8007ee6 <__smakebuf_r+0xc>
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	6020      	str	r0, [r4, #0]
 8007f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f26:	81a3      	strh	r3, [r4, #12]
 8007f28:	9b00      	ldr	r3, [sp, #0]
 8007f2a:	6120      	str	r0, [r4, #16]
 8007f2c:	6163      	str	r3, [r4, #20]
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	b15b      	cbz	r3, 8007f4a <__smakebuf_r+0x70>
 8007f32:	4630      	mov	r0, r6
 8007f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f38:	f000 f838 	bl	8007fac <_isatty_r>
 8007f3c:	b128      	cbz	r0, 8007f4a <__smakebuf_r+0x70>
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	f023 0303 	bic.w	r3, r3, #3
 8007f44:	f043 0301 	orr.w	r3, r3, #1
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	431d      	orrs	r5, r3
 8007f4e:	81a5      	strh	r5, [r4, #12]
 8007f50:	e7cf      	b.n	8007ef2 <__smakebuf_r+0x18>

08007f52 <memmove>:
 8007f52:	4288      	cmp	r0, r1
 8007f54:	b510      	push	{r4, lr}
 8007f56:	eb01 0402 	add.w	r4, r1, r2
 8007f5a:	d902      	bls.n	8007f62 <memmove+0x10>
 8007f5c:	4284      	cmp	r4, r0
 8007f5e:	4623      	mov	r3, r4
 8007f60:	d807      	bhi.n	8007f72 <memmove+0x20>
 8007f62:	1e43      	subs	r3, r0, #1
 8007f64:	42a1      	cmp	r1, r4
 8007f66:	d008      	beq.n	8007f7a <memmove+0x28>
 8007f68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f70:	e7f8      	b.n	8007f64 <memmove+0x12>
 8007f72:	4601      	mov	r1, r0
 8007f74:	4402      	add	r2, r0
 8007f76:	428a      	cmp	r2, r1
 8007f78:	d100      	bne.n	8007f7c <memmove+0x2a>
 8007f7a:	bd10      	pop	{r4, pc}
 8007f7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f80:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f84:	e7f7      	b.n	8007f76 <memmove+0x24>
	...

08007f88 <_fstat_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4d06      	ldr	r5, [pc, #24]	; (8007fa8 <_fstat_r+0x20>)
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	602b      	str	r3, [r5, #0]
 8007f96:	f7f8 fff5 	bl	8000f84 <_fstat>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	d102      	bne.n	8007fa4 <_fstat_r+0x1c>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	b103      	cbz	r3, 8007fa4 <_fstat_r+0x1c>
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20001754 	.word	0x20001754

08007fac <_isatty_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	2300      	movs	r3, #0
 8007fb0:	4d05      	ldr	r5, [pc, #20]	; (8007fc8 <_isatty_r+0x1c>)
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7f8 fff3 	bl	8000fa2 <_isatty>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_isatty_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_isatty_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20001754 	.word	0x20001754

08007fcc <_sbrk_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4d05      	ldr	r5, [pc, #20]	; (8007fe8 <_sbrk_r+0x1c>)
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	f7f8 fffa 	bl	8000fd0 <_sbrk>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_sbrk_r+0x1a>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_sbrk_r+0x1a>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	20001754 	.word	0x20001754

08007fec <memchr>:
 8007fec:	4603      	mov	r3, r0
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	b2c9      	uxtb	r1, r1
 8007ff2:	4402      	add	r2, r0
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	d101      	bne.n	8007ffe <memchr+0x12>
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	e003      	b.n	8008006 <memchr+0x1a>
 8007ffe:	7804      	ldrb	r4, [r0, #0]
 8008000:	3301      	adds	r3, #1
 8008002:	428c      	cmp	r4, r1
 8008004:	d1f6      	bne.n	8007ff4 <memchr+0x8>
 8008006:	bd10      	pop	{r4, pc}

08008008 <_realloc_r>:
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	4680      	mov	r8, r0
 800800e:	4614      	mov	r4, r2
 8008010:	460e      	mov	r6, r1
 8008012:	b921      	cbnz	r1, 800801e <_realloc_r+0x16>
 8008014:	4611      	mov	r1, r2
 8008016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800801a:	f7ff b9d5 	b.w	80073c8 <_malloc_r>
 800801e:	b92a      	cbnz	r2, 800802c <_realloc_r+0x24>
 8008020:	f7ff f96a 	bl	80072f8 <_free_r>
 8008024:	4625      	mov	r5, r4
 8008026:	4628      	mov	r0, r5
 8008028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802c:	f000 f81b 	bl	8008066 <_malloc_usable_size_r>
 8008030:	4284      	cmp	r4, r0
 8008032:	4607      	mov	r7, r0
 8008034:	d802      	bhi.n	800803c <_realloc_r+0x34>
 8008036:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800803a:	d812      	bhi.n	8008062 <_realloc_r+0x5a>
 800803c:	4621      	mov	r1, r4
 800803e:	4640      	mov	r0, r8
 8008040:	f7ff f9c2 	bl	80073c8 <_malloc_r>
 8008044:	4605      	mov	r5, r0
 8008046:	2800      	cmp	r0, #0
 8008048:	d0ed      	beq.n	8008026 <_realloc_r+0x1e>
 800804a:	42bc      	cmp	r4, r7
 800804c:	4622      	mov	r2, r4
 800804e:	4631      	mov	r1, r6
 8008050:	bf28      	it	cs
 8008052:	463a      	movcs	r2, r7
 8008054:	f7ff f941 	bl	80072da <memcpy>
 8008058:	4631      	mov	r1, r6
 800805a:	4640      	mov	r0, r8
 800805c:	f7ff f94c 	bl	80072f8 <_free_r>
 8008060:	e7e1      	b.n	8008026 <_realloc_r+0x1e>
 8008062:	4635      	mov	r5, r6
 8008064:	e7df      	b.n	8008026 <_realloc_r+0x1e>

08008066 <_malloc_usable_size_r>:
 8008066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800806a:	1f18      	subs	r0, r3, #4
 800806c:	2b00      	cmp	r3, #0
 800806e:	bfbc      	itt	lt
 8008070:	580b      	ldrlt	r3, [r1, r0]
 8008072:	18c0      	addlt	r0, r0, r3
 8008074:	4770      	bx	lr
	...

08008078 <_init>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	bf00      	nop
 800807c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800807e:	bc08      	pop	{r3}
 8008080:	469e      	mov	lr, r3
 8008082:	4770      	bx	lr

08008084 <_fini>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	bf00      	nop
 8008088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808a:	bc08      	pop	{r3}
 800808c:	469e      	mov	lr, r3
 800808e:	4770      	bx	lr
