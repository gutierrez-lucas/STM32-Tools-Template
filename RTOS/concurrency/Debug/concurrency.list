
concurrency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007820  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fac  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088dc  080088dc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080088dc  080088dc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088dc  080088dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080088e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016e8  20000078  0800895c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001760  0800895c  00021760  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001833f  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039fb  00000000  00000000  00038423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003be20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c4  00000000  00000000  0003d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf72  00000000  00000000  0003e694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b9ad  00000000  00000000  0005a606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cfa3  00000000  00000000  00075fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066e0  00000000  00000000  00112f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00119638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08007918 	.word	0x08007918

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08007918 	.word	0x08007918

08000150 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
return 0;
 8000160:	2300      	movs	r3, #0
}
 8000162:	4618      	mov	r0, r3
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800016a:	b480      	push	{r7}
 800016c:	b083      	sub	sp, #12
 800016e:	af00      	add	r7, sp, #0
 8000170:	6078      	str	r0, [r7, #4]
 8000172:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000174:	bf00      	nop
 8000176:	370c      	adds	r7, #12
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr

0800017e <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800017e:	b480      	push	{r7}
 8000180:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000182:	bf00      	nop
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
	...

0800018c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <vApplicationGetIdleTaskMemory+0x28>)
 800019c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	4a05      	ldr	r2, [pc, #20]	; (80001b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2280      	movs	r2, #128	; 0x80
 80001a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001aa:	bf00      	nop
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000094 	.word	0x20000094
 80001b8:	20000144 	.word	0x20000144

080001bc <_write>:
I2C_HandleTypeDef hi2c2;
UART_HandleTypeDef huart1;
ADC_HandleTypeDef hadc1;
TIM_HandleTypeDef htim2;

int _write(int file, char *data, int len){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
		 if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)){
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d00a      	beq.n	80001e4 <_write+0x28>
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d007      	beq.n	80001e4 <_write+0x28>
						errno = EBADF;
 80001d4:	f006 fe4e 	bl	8006e74 <__errno>
 80001d8:	4603      	mov	r3, r0
 80001da:	2209      	movs	r2, #9
 80001dc:	601a      	str	r2, [r3, #0]
						return -1;
 80001de:	f04f 33ff 	mov.w	r3, #4294967295
 80001e2:	e00f      	b.n	8000204 <_write+0x48>
		 }
		 HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ec:	68b9      	ldr	r1, [r7, #8]
 80001ee:	4807      	ldr	r0, [pc, #28]	; (800020c <_write+0x50>)
 80001f0:	f004 f838 	bl	8004264 <HAL_UART_Transmit>
 80001f4:	4603      	mov	r3, r0
 80001f6:	75fb      	strb	r3, [r7, #23]

		 return (status == HAL_OK ? len : 0);
 80001f8:	7dfb      	ldrb	r3, [r7, #23]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d101      	bne.n	8000202 <_write+0x46>
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	e000      	b.n	8000204 <_write+0x48>
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	3718      	adds	r7, #24
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	20000398 	.word	0x20000398

08000210 <trace_toggle>:

void trace_toggle(int tag){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	if(tag == 1){
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d105      	bne.n	800022a <trace_toggle+0x1a>
		HAL_GPIO_TogglePin(trace_1_GPIO_Port, trace_1_Pin);
 800021e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000222:	480c      	ldr	r0, [pc, #48]	; (8000254 <trace_toggle+0x44>)
 8000224:	f002 f905 	bl	8002432 <HAL_GPIO_TogglePin>
	}else if(tag == 2){
		HAL_GPIO_TogglePin(trace_2_GPIO_Port, trace_2_Pin);
	}else if(tag == 3){
		HAL_GPIO_TogglePin(trace_3_GPIO_Port, trace_3_Pin);
	}
}
 8000228:	e00f      	b.n	800024a <trace_toggle+0x3a>
	}else if(tag == 2){
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b02      	cmp	r3, #2
 800022e:	d105      	bne.n	800023c <trace_toggle+0x2c>
		HAL_GPIO_TogglePin(trace_2_GPIO_Port, trace_2_Pin);
 8000230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000234:	4807      	ldr	r0, [pc, #28]	; (8000254 <trace_toggle+0x44>)
 8000236:	f002 f8fc 	bl	8002432 <HAL_GPIO_TogglePin>
}
 800023a:	e006      	b.n	800024a <trace_toggle+0x3a>
	}else if(tag == 3){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b03      	cmp	r3, #3
 8000240:	d103      	bne.n	800024a <trace_toggle+0x3a>
		HAL_GPIO_TogglePin(trace_3_GPIO_Port, trace_3_Pin);
 8000242:	2110      	movs	r1, #16
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <trace_toggle+0x48>)
 8000246:	f002 f8f4 	bl	8002432 <HAL_GPIO_TogglePin>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40010800 	.word	0x40010800
 8000258:	40010c00 	.word	0x40010c00

0800025c <trace_on>:

void trace_on(int tag){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	if(tag == 1){
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d106      	bne.n	8000278 <trace_on+0x1c>
		HAL_GPIO_WritePin(trace_1_GPIO_Port, trace_1_Pin, GPIO_PIN_SET);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <trace_on+0x48>)
 8000272:	f002 f8c6 	bl	8002402 <HAL_GPIO_WritePin>
	}else if(tag == 2){
		HAL_GPIO_WritePin(trace_2_GPIO_Port, trace_2_Pin, GPIO_PIN_SET);
	}else if(tag == 3){
		HAL_GPIO_WritePin(trace_3_GPIO_Port, trace_3_Pin, GPIO_PIN_SET);
	}
}
 8000276:	e011      	b.n	800029c <trace_on+0x40>
	}else if(tag == 2){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b02      	cmp	r3, #2
 800027c:	d106      	bne.n	800028c <trace_on+0x30>
		HAL_GPIO_WritePin(trace_2_GPIO_Port, trace_2_Pin, GPIO_PIN_SET);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000284:	4807      	ldr	r0, [pc, #28]	; (80002a4 <trace_on+0x48>)
 8000286:	f002 f8bc 	bl	8002402 <HAL_GPIO_WritePin>
}
 800028a:	e007      	b.n	800029c <trace_on+0x40>
	}else if(tag == 3){
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b03      	cmp	r3, #3
 8000290:	d104      	bne.n	800029c <trace_on+0x40>
		HAL_GPIO_WritePin(trace_3_GPIO_Port, trace_3_Pin, GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	2110      	movs	r1, #16
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <trace_on+0x4c>)
 8000298:	f002 f8b3 	bl	8002402 <HAL_GPIO_WritePin>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40010c00 	.word	0x40010c00

080002ac <trace_off>:

void trace_off(int tag){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	if(tag == 1){
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d106      	bne.n	80002c8 <trace_off+0x1c>
		HAL_GPIO_WritePin(trace_1_GPIO_Port, trace_1_Pin, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <trace_off+0x48>)
 80002c2:	f002 f89e 	bl	8002402 <HAL_GPIO_WritePin>
	}else if(tag == 2){
		HAL_GPIO_WritePin(trace_2_GPIO_Port, trace_2_Pin, GPIO_PIN_RESET);
	}else if(tag == 3){
		HAL_GPIO_WritePin(trace_3_GPIO_Port, trace_3_Pin, GPIO_PIN_RESET);
	}
}
 80002c6:	e011      	b.n	80002ec <trace_off+0x40>
	}else if(tag == 2){
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d106      	bne.n	80002dc <trace_off+0x30>
		HAL_GPIO_WritePin(trace_2_GPIO_Port, trace_2_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d4:	4807      	ldr	r0, [pc, #28]	; (80002f4 <trace_off+0x48>)
 80002d6:	f002 f894 	bl	8002402 <HAL_GPIO_WritePin>
}
 80002da:	e007      	b.n	80002ec <trace_off+0x40>
	}else if(tag == 3){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d104      	bne.n	80002ec <trace_off+0x40>
		HAL_GPIO_WritePin(trace_3_GPIO_Port, trace_3_Pin, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2110      	movs	r1, #16
 80002e6:	4804      	ldr	r0, [pc, #16]	; (80002f8 <trace_off+0x4c>)
 80002e8:	f002 f88b 	bl	8002402 <HAL_GPIO_WritePin>
}
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010800 	.word	0x40010800
 80002f8:	40010c00 	.word	0x40010c00

080002fc <main>:
QueueHandle_t button_queue;

bool block = true;

int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af02      	add	r7, sp, #8

	HAL_Init();
 8000302:	f001 f9ad 	bl	8001660 <HAL_Init>
	SystemClock_Config();
 8000306:	f000 fa7b 	bl	8000800 <SystemClock_Config>

	MX_GPIO_Init();
 800030a:	f000 fbb7 	bl	8000a7c <MX_GPIO_Init>
	MX_I2C2_Init();
 800030e:	f000 fb0f 	bl	8000930 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000312:	f000 fb89 	bl	8000a28 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000316:	f000 fb39 	bl	800098c <MX_TIM2_Init>
	MX_ADC1_Init();
 800031a:	f000 facb 	bl	80008b4 <MX_ADC1_Init>

	printf("\r\n\r\nDisplay Test\r\n");
 800031e:	481b      	ldr	r0, [pc, #108]	; (800038c <main+0x90>)
 8000320:	f006 fc24 	bl	8006b6c <puts>

	button_queue = xQueueCreate(20, sizeof(button_t));
 8000324:	2200      	movs	r2, #0
 8000326:	2101      	movs	r1, #1
 8000328:	2014      	movs	r0, #20
 800032a:	f004 fa33 	bl	8004794 <xQueueGenericCreate>
 800032e:	4603      	mov	r3, r0
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <main+0x94>)
 8000332:	6013      	str	r3, [r2, #0]

	xTaskCreate(display_task, "display_task", 128, NULL, tskIDLE_PRIORITY+2, &xDisplay_task_handle);
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <main+0x98>)
 8000336:	9301      	str	r3, [sp, #4]
 8000338:	2302      	movs	r3, #2
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2300      	movs	r3, #0
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	4915      	ldr	r1, [pc, #84]	; (8000398 <main+0x9c>)
 8000342:	4816      	ldr	r0, [pc, #88]	; (800039c <main+0xa0>)
 8000344:	f004 fdd2 	bl	8004eec <xTaskCreate>
	xTaskCreate(button_task, "button_task", 128, NULL, tskIDLE_PRIORITY+1, &xButton_task_handle);
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <main+0xa4>)
 800034a:	9301      	str	r3, [sp, #4]
 800034c:	2301      	movs	r3, #1
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2300      	movs	r3, #0
 8000352:	2280      	movs	r2, #128	; 0x80
 8000354:	4913      	ldr	r1, [pc, #76]	; (80003a4 <main+0xa8>)
 8000356:	4814      	ldr	r0, [pc, #80]	; (80003a8 <main+0xac>)
 8000358:	f004 fdc8 	bl	8004eec <xTaskCreate>

	vTaskSetApplicationTaskTag( xDisplay_task_handle, ( void * ) 1 );
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <main+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2101      	movs	r1, #1
 8000362:	4618      	mov	r0, r3
 8000364:	f005 fa5c 	bl	8005820 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xButton_task_handle, ( void * ) 2 );
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <main+0xa4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f005 fa56 	bl	8005820 <vTaskSetApplicationTaskTag>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000374:	201c      	movs	r0, #28
 8000376:	f001 fe9a 	bl	80020ae <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 800037a:	480c      	ldr	r0, [pc, #48]	; (80003ac <main+0xb0>)
 800037c:	f003 fb82 	bl	8003a84 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <main+0xb4>)
 8000382:	f001 fa77 	bl	8001874 <HAL_ADC_Start_IT>
	// HAL_Delay(1000);

	vTaskStartScheduler();
 8000386:	f005 f869 	bl	800545c <vTaskStartScheduler>

	while (1){
 800038a:	e7fe      	b.n	800038a <main+0x8e>
 800038c:	08007930 	.word	0x08007930
 8000390:	20000460 	.word	0x20000460
 8000394:	2000045c 	.word	0x2000045c
 8000398:	08007944 	.word	0x08007944
 800039c:	080003b5 	.word	0x080003b5
 80003a0:	20000458 	.word	0x20000458
 80003a4:	08007954 	.word	0x08007954
 80003a8:	08000561 	.word	0x08000561
 80003ac:	20000410 	.word	0x20000410
 80003b0:	200003e0 	.word	0x200003e0

080003b4 <display_task>:
	}
}


void display_task(void *pvParameters){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	UBaseType_t uxHighWaterMark;

	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80003bc:	2000      	movs	r0, #0
 80003be:	f005 fc91 	bl	8005ce4 <uxTaskGetStackHighWaterMark>
 80003c2:	61b8      	str	r0, [r7, #24]
	printf("Display WaterMark at the beggining: %d words\r\n", uxHighWaterMark);
 80003c4:	69b9      	ldr	r1, [r7, #24]
 80003c6:	4856      	ldr	r0, [pc, #344]	; (8000520 <display_task+0x16c>)
 80003c8:	f006 fb6a 	bl	8006aa0 <iprintf>
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80003cc:	f005 f95c 	bl	8005688 <xTaskGetTickCount>
 80003d0:	4603      	mov	r3, r0
 80003d2:	613b      	str	r3, [r7, #16]

	static int connected = 0;

	button_t button_res = 0;	
 80003d4:	2300      	movs	r3, #0
 80003d6:	73fb      	strb	r3, [r7, #15]
	uint8_t position_x = 10;
 80003d8:	230a      	movs	r3, #10
 80003da:	77fb      	strb	r3, [r7, #31]
	uint8_t position_y = 10;
 80003dc:	230a      	movs	r3, #10
 80003de:	77bb      	strb	r3, [r7, #30]

	while(1){
		if(connected == 0){
 80003e0:	4b50      	ldr	r3, [pc, #320]	; (8000524 <display_task+0x170>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d12a      	bne.n	800043e <display_task+0x8a>
			HAL_StatusTypeDef res = SSD1306_Init(0x78); 
 80003e8:	2078      	movs	r0, #120	; 0x78
 80003ea:	f000 fe71 	bl	80010d0 <SSD1306_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	75fb      	strb	r3, [r7, #23]
			if( res != HAL_OK){
 80003f2:	7dfb      	ldrb	r3, [r7, #23]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d005      	beq.n	8000404 <display_task+0x50>
				printf("Display connection err: %d\r\n", res);
 80003f8:	7dfb      	ldrb	r3, [r7, #23]
 80003fa:	4619      	mov	r1, r3
 80003fc:	484a      	ldr	r0, [pc, #296]	; (8000528 <display_task+0x174>)
 80003fe:	f006 fb4f 	bl	8006aa0 <iprintf>
 8000402:	e086      	b.n	8000512 <display_task+0x15e>
			}else{
				HAL_GPIO_WritePin(main_led_GPIO_Port, main_led_Pin, SET);
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040a:	4848      	ldr	r0, [pc, #288]	; (800052c <display_task+0x178>)
 800040c:	f001 fff9 	bl	8002402 <HAL_GPIO_WritePin>
				connected = 1;
 8000410:	4b44      	ldr	r3, [pc, #272]	; (8000524 <display_task+0x170>)
 8000412:	2201      	movs	r2, #1
 8000414:	601a      	str	r2, [r3, #0]
				printf("Display connected.\r\n" );
 8000416:	4846      	ldr	r0, [pc, #280]	; (8000530 <display_task+0x17c>)
 8000418:	f006 fba8 	bl	8006b6c <puts>

				SSD1306_Clear();
 800041c:	f001 f87f 	bl	800151e <SSD1306_Clear>
				vTaskPrioritySet(xButton_task_handle, tskIDLE_PRIORITY+3);
 8000420:	4b44      	ldr	r3, [pc, #272]	; (8000534 <display_task+0x180>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2103      	movs	r1, #3
 8000426:	4618      	mov	r0, r3
 8000428:	f004 ff6a 	bl	8005300 <vTaskPrioritySet>
				// xTaskNotifyGive(xButton_task_handle);
				xTaskNotify(xButton_task_handle, 0xffff, eSetValueWithOverwrite); 
 800042c:	4b41      	ldr	r3, [pc, #260]	; (8000534 <display_task+0x180>)
 800042e:	6818      	ldr	r0, [r3, #0]
 8000430:	2300      	movs	r3, #0
 8000432:	2203      	movs	r2, #3
 8000434:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000438:	f005 fdcc 	bl	8005fd4 <xTaskGenericNotify>
 800043c:	e069      	b.n	8000512 <display_task+0x15e>
			}
		}else{
			xQueueReceive(button_queue, &button_res, 0);
 800043e:	4b3e      	ldr	r3, [pc, #248]	; (8000538 <display_task+0x184>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f107 010f 	add.w	r1, r7, #15
 8000446:	2200      	movs	r2, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f004 fb03 	bl	8004a54 <xQueueReceive>
			while(button_res != 0){
 800044e:	e05d      	b.n	800050c <display_task+0x158>
				SSD1306_GotoXY (position_x,position_y); 
 8000450:	7ffb      	ldrb	r3, [r7, #31]
 8000452:	b29b      	uxth	r3, r3
 8000454:	7fba      	ldrb	r2, [r7, #30]
 8000456:	b292      	uxth	r2, r2
 8000458:	4611      	mov	r1, r2
 800045a:	4618      	mov	r0, r3
 800045c:	f000 ffa4 	bl	80013a8 <SSD1306_GotoXY>
				switch(button_res){
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	3b01      	subs	r3, #1
 8000464:	2b04      	cmp	r3, #4
 8000466:	d831      	bhi.n	80004cc <display_task+0x118>
 8000468:	a201      	add	r2, pc, #4	; (adr r2, 8000470 <display_task+0xbc>)
 800046a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046e:	bf00      	nop
 8000470:	08000485 	.word	0x08000485
 8000474:	08000497 	.word	0x08000497
 8000478:	080004cd 	.word	0x080004cd
 800047c:	080004a9 	.word	0x080004a9
 8000480:	080004bb 	.word	0x080004bb
					case(LEFT):
						printf("Button left pressed \r\n");
 8000484:	482d      	ldr	r0, [pc, #180]	; (800053c <display_task+0x188>)
 8000486:	f006 fb71 	bl	8006b6c <puts>
						SSD1306_Puts ("L", &Font_11x18, 1); 
 800048a:	2201      	movs	r2, #1
 800048c:	492c      	ldr	r1, [pc, #176]	; (8000540 <display_task+0x18c>)
 800048e:	482d      	ldr	r0, [pc, #180]	; (8000544 <display_task+0x190>)
 8000490:	f001 f820 	bl	80014d4 <SSD1306_Puts>
						break;
 8000494:	e01b      	b.n	80004ce <display_task+0x11a>
					case(RIGHT):
						printf("Button right pressed \r\n");
 8000496:	482c      	ldr	r0, [pc, #176]	; (8000548 <display_task+0x194>)
 8000498:	f006 fb68 	bl	8006b6c <puts>
						SSD1306_Puts ("R", &Font_11x18, 1);
 800049c:	2201      	movs	r2, #1
 800049e:	4928      	ldr	r1, [pc, #160]	; (8000540 <display_task+0x18c>)
 80004a0:	482a      	ldr	r0, [pc, #168]	; (800054c <display_task+0x198>)
 80004a2:	f001 f817 	bl	80014d4 <SSD1306_Puts>
						break;
 80004a6:	e012      	b.n	80004ce <display_task+0x11a>
					case(UP):
						printf("Button up pressed \r\n");
 80004a8:	4829      	ldr	r0, [pc, #164]	; (8000550 <display_task+0x19c>)
 80004aa:	f006 fb5f 	bl	8006b6c <puts>
						SSD1306_Puts ("U", &Font_11x18, 1); 
 80004ae:	2201      	movs	r2, #1
 80004b0:	4923      	ldr	r1, [pc, #140]	; (8000540 <display_task+0x18c>)
 80004b2:	4828      	ldr	r0, [pc, #160]	; (8000554 <display_task+0x1a0>)
 80004b4:	f001 f80e 	bl	80014d4 <SSD1306_Puts>
						break;
 80004b8:	e009      	b.n	80004ce <display_task+0x11a>
					case(DOWN):
						printf("Button down pressed \r\n");
 80004ba:	4827      	ldr	r0, [pc, #156]	; (8000558 <display_task+0x1a4>)
 80004bc:	f006 fb56 	bl	8006b6c <puts>
						SSD1306_Puts ("D", &Font_11x18, 1); 
 80004c0:	2201      	movs	r2, #1
 80004c2:	491f      	ldr	r1, [pc, #124]	; (8000540 <display_task+0x18c>)
 80004c4:	4825      	ldr	r0, [pc, #148]	; (800055c <display_task+0x1a8>)
 80004c6:	f001 f805 	bl	80014d4 <SSD1306_Puts>
						break;
 80004ca:	e000      	b.n	80004ce <display_task+0x11a>
					default: break;
 80004cc:	bf00      	nop
				}
				SSD1306_UpdateScreen(); 
 80004ce:	f000 fec7 	bl	8001260 <SSD1306_UpdateScreen>
				if(position_x < 100){
 80004d2:	7ffb      	ldrb	r3, [r7, #31]
 80004d4:	2b63      	cmp	r3, #99	; 0x63
 80004d6:	d803      	bhi.n	80004e0 <display_task+0x12c>
					position_x += 10;
 80004d8:	7ffb      	ldrb	r3, [r7, #31]
 80004da:	330a      	adds	r3, #10
 80004dc:	77fb      	strb	r3, [r7, #31]
 80004de:	e00b      	b.n	80004f8 <display_task+0x144>
				}else{
					position_x = 10;
 80004e0:	230a      	movs	r3, #10
 80004e2:	77fb      	strb	r3, [r7, #31]
					position_y += 15;
 80004e4:	7fbb      	ldrb	r3, [r7, #30]
 80004e6:	330f      	adds	r3, #15
 80004e8:	77bb      	strb	r3, [r7, #30]
					if(position_y > 40){
 80004ea:	7fbb      	ldrb	r3, [r7, #30]
 80004ec:	2b28      	cmp	r3, #40	; 0x28
 80004ee:	d903      	bls.n	80004f8 <display_task+0x144>
						position_y = 10;
 80004f0:	230a      	movs	r3, #10
 80004f2:	77bb      	strb	r3, [r7, #30]
						SSD1306_Clear();
 80004f4:	f001 f813 	bl	800151e <SSD1306_Clear>
					}
				}
				button_res = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]
				xQueueReceive(button_queue, &button_res, 0);
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <display_task+0x184>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f107 010f 	add.w	r1, r7, #15
 8000504:	2200      	movs	r2, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 faa4 	bl	8004a54 <xQueueReceive>
			while(button_res != 0){
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d19e      	bne.n	8000450 <display_task+0x9c>
			}
		}
		
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(150));
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	2196      	movs	r1, #150	; 0x96
 8000518:	4618      	mov	r0, r3
 800051a:	f004 fe3f 	bl	800519c <vTaskDelayUntil>
		if(connected == 0){
 800051e:	e75f      	b.n	80003e0 <display_task+0x2c>
 8000520:	08007960 	.word	0x08007960
 8000524:	20000464 	.word	0x20000464
 8000528:	08007990 	.word	0x08007990
 800052c:	40010c00 	.word	0x40010c00
 8000530:	080079b0 	.word	0x080079b0
 8000534:	20000458 	.word	0x20000458
 8000538:	20000460 	.word	0x20000460
 800053c:	080079c4 	.word	0x080079c4
 8000540:	20000008 	.word	0x20000008
 8000544:	080079dc 	.word	0x080079dc
 8000548:	080079e0 	.word	0x080079e0
 800054c:	080079f8 	.word	0x080079f8
 8000550:	080079fc 	.word	0x080079fc
 8000554:	08007a10 	.word	0x08007a10
 8000558:	08007a14 	.word	0x08007a14
 800055c:	08007a2c 	.word	0x08007a2c

08000560 <button_task>:
	}
	printf("Destroying Display task 1 \r\n");
	vTaskDelete(xDisplay_task_handle);
}

void button_task(void *pvParameters){
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint8_t counter = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	74fb      	strb	r3, [r7, #19]

	printf("Button WaterMark at the beggining: %d words\r\n", uxTaskGetStackHighWaterMark(NULL));
 800056c:	2000      	movs	r0, #0
 800056e:	f005 fbb9 	bl	8005ce4 <uxTaskGetStackHighWaterMark>
 8000572:	4603      	mov	r3, r0
 8000574:	4619      	mov	r1, r3
 8000576:	4854      	ldr	r0, [pc, #336]	; (80006c8 <button_task+0x168>)
 8000578:	f006 fa92 	bl	8006aa0 <iprintf>
	printf("Button task started, waiting for display ready\r\n");
 800057c:	4853      	ldr	r0, [pc, #332]	; (80006cc <button_task+0x16c>)
 800057e:	f006 faf5 	bl	8006b6c <puts>
	// ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
	uint32_t notification_message = 42;
 8000582:	232a      	movs	r3, #42	; 0x2a
 8000584:	60fb      	str	r3, [r7, #12]
	xTaskNotifyWait(0, 0, &notification_message, portMAX_DELAY);
 8000586:	f107 020c 	add.w	r2, r7, #12
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	2100      	movs	r1, #0
 8000590:	2000      	movs	r0, #0
 8000592:	f005 fcbf 	bl	8005f14 <xTaskNotifyWait>

	printf("Display ready, starting button task, message: 0x%04X\r\n", notification_message);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4619      	mov	r1, r3
 800059a:	484d      	ldr	r0, [pc, #308]	; (80006d0 <button_task+0x170>)
 800059c:	f006 fa80 	bl	8006aa0 <iprintf>

	uint8_t button_left_var = 0, button_right_var = 0, button_up_var = 0, button_down_var = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	75fb      	strb	r3, [r7, #23]
 80005a4:	2300      	movs	r3, #0
 80005a6:	75bb      	strb	r3, [r7, #22]
 80005a8:	2300      	movs	r3, #0
 80005aa:	757b      	strb	r3, [r7, #21]
 80005ac:	2300      	movs	r3, #0
 80005ae:	753b      	strb	r3, [r7, #20]
	button_t current_button = UNPRESS;
 80005b0:	2300      	movs	r3, #0
 80005b2:	72fb      	strb	r3, [r7, #11]

	while(1){
		// HAL_GPIO_TogglePin(sec_led_GPIO_Port, sec_led_Pin);

		if(button_left_var == 1){
 80005b4:	7dfb      	ldrb	r3, [r7, #23]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d114      	bne.n	80005e4 <button_task+0x84>
			if(HAL_GPIO_ReadPin(button_l_GPIO_Port, button_l_Pin) == GPIO_PIN_SET){
 80005ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005be:	4845      	ldr	r0, [pc, #276]	; (80006d4 <button_task+0x174>)
 80005c0:	f001 ff08 	bl	80023d4 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d116      	bne.n	80005f8 <button_task+0x98>
				button_left_var = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	75fb      	strb	r3, [r7, #23]
				current_button = LEFT;
 80005ce:	2301      	movs	r3, #1
 80005d0:	72fb      	strb	r3, [r7, #11]
				xQueueSend(button_queue, &current_button, 0);
 80005d2:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <button_task+0x178>)
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	f107 010b 	add.w	r1, r7, #11
 80005da:	2300      	movs	r3, #0
 80005dc:	2200      	movs	r2, #0
 80005de:	f004 f93b 	bl	8004858 <xQueueGenericSend>
 80005e2:	e009      	b.n	80005f8 <button_task+0x98>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_l_GPIO_Port, button_l_Pin) == GPIO_PIN_RESET){
 80005e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e8:	483a      	ldr	r0, [pc, #232]	; (80006d4 <button_task+0x174>)
 80005ea:	f001 fef3 	bl	80023d4 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d101      	bne.n	80005f8 <button_task+0x98>
				button_left_var = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
			}
		}

		if(button_right_var == 1){
 80005f8:	7dbb      	ldrb	r3, [r7, #22]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d113      	bne.n	8000626 <button_task+0xc6>
			if(HAL_GPIO_ReadPin(button_r_GPIO_Port, button_r_Pin) == GPIO_PIN_SET){
 80005fe:	2120      	movs	r1, #32
 8000600:	4836      	ldr	r0, [pc, #216]	; (80006dc <button_task+0x17c>)
 8000602:	f001 fee7 	bl	80023d4 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b01      	cmp	r3, #1
 800060a:	d115      	bne.n	8000638 <button_task+0xd8>
				button_right_var = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	75bb      	strb	r3, [r7, #22]
				current_button = RIGHT;
 8000610:	2302      	movs	r3, #2
 8000612:	72fb      	strb	r3, [r7, #11]
				xQueueSend(button_queue, &current_button, 0);
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <button_task+0x178>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	f107 010b 	add.w	r1, r7, #11
 800061c:	2300      	movs	r3, #0
 800061e:	2200      	movs	r2, #0
 8000620:	f004 f91a 	bl	8004858 <xQueueGenericSend>
 8000624:	e008      	b.n	8000638 <button_task+0xd8>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_r_GPIO_Port, button_r_Pin) == GPIO_PIN_RESET){
 8000626:	2120      	movs	r1, #32
 8000628:	482c      	ldr	r0, [pc, #176]	; (80006dc <button_task+0x17c>)
 800062a:	f001 fed3 	bl	80023d4 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d101      	bne.n	8000638 <button_task+0xd8>
				button_right_var = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	75bb      	strb	r3, [r7, #22]
			}
		}

		if(button_up_var == 1){
 8000638:	7d7b      	ldrb	r3, [r7, #21]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d114      	bne.n	8000668 <button_task+0x108>
			if(HAL_GPIO_ReadPin(button_u_GPIO_Port, button_u_Pin) == GPIO_PIN_SET){
 800063e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <button_task+0x174>)
 8000644:	f001 fec6 	bl	80023d4 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d116      	bne.n	800067c <button_task+0x11c>
				button_up_var = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	757b      	strb	r3, [r7, #21]
				current_button = UP;
 8000652:	2304      	movs	r3, #4
 8000654:	72fb      	strb	r3, [r7, #11]
				xQueueSend(button_queue, &current_button, 0);
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <button_task+0x178>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	f107 010b 	add.w	r1, r7, #11
 800065e:	2300      	movs	r3, #0
 8000660:	2200      	movs	r2, #0
 8000662:	f004 f8f9 	bl	8004858 <xQueueGenericSend>
 8000666:	e009      	b.n	800067c <button_task+0x11c>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_u_GPIO_Port, button_u_Pin) == GPIO_PIN_RESET){
 8000668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066c:	4819      	ldr	r0, [pc, #100]	; (80006d4 <button_task+0x174>)
 800066e:	f001 feb1 	bl	80023d4 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d101      	bne.n	800067c <button_task+0x11c>
				button_up_var = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	757b      	strb	r3, [r7, #21]
			}
		}

		if(button_down_var == 1){
 800067c:	7d3b      	ldrb	r3, [r7, #20]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d114      	bne.n	80006ac <button_task+0x14c>
			if(HAL_GPIO_ReadPin(button_d_GPIO_Port, button_d_Pin) == GPIO_PIN_SET){
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	4813      	ldr	r0, [pc, #76]	; (80006d4 <button_task+0x174>)
 8000688:	f001 fea4 	bl	80023d4 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d116      	bne.n	80006c0 <button_task+0x160>
				button_down_var = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	753b      	strb	r3, [r7, #20]
				current_button = DOWN;
 8000696:	2305      	movs	r3, #5
 8000698:	72fb      	strb	r3, [r7, #11]
				xQueueSend(button_queue, &current_button, 0);
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <button_task+0x178>)
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	f107 010b 	add.w	r1, r7, #11
 80006a2:	2300      	movs	r3, #0
 80006a4:	2200      	movs	r2, #0
 80006a6:	f004 f8d7 	bl	8004858 <xQueueGenericSend>
 80006aa:	e009      	b.n	80006c0 <button_task+0x160>
			}
		}else{
			if(HAL_GPIO_ReadPin(button_d_GPIO_Port, button_d_Pin) == GPIO_PIN_RESET){
 80006ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <button_task+0x174>)
 80006b2:	f001 fe8f 	bl	80023d4 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <button_task+0x160>
				button_down_var = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	753b      	strb	r3, [r7, #20]
			}
		}

		vTaskDelay(100/ portTICK_PERIOD_MS);
 80006c0:	2064      	movs	r0, #100	; 0x64
 80006c2:	f004 fde9 	bl	8005298 <vTaskDelay>
		if(button_left_var == 1){
 80006c6:	e775      	b.n	80005b4 <button_task+0x54>
 80006c8:	08007a30 	.word	0x08007a30
 80006cc:	08007a60 	.word	0x08007a60
 80006d0:	08007a90 	.word	0x08007a90
 80006d4:	40010800 	.word	0x40010800
 80006d8:	20000460 	.word	0x20000460
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <HAL_TIM_PeriodElapsedCallback>:
	printf("Destroying Button task \r\n");
	vTaskDelete(xButton_task_handle);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d102      	bne.n	80006f8 <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_IncTick();
 80006f2:	f000 ffcb 	bl	800168c <HAL_IncTick>
	}else if (htim->Instance == TIM2) {
		trace_toggle(3);
		HAL_ADC_Start_IT(&hadc1);
	}
}
 80006f6:	e00a      	b.n	800070e <HAL_TIM_PeriodElapsedCallback+0x2e>
	}else if (htim->Instance == TIM2) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000700:	d105      	bne.n	800070e <HAL_TIM_PeriodElapsedCallback+0x2e>
		trace_toggle(3);
 8000702:	2003      	movs	r0, #3
 8000704:	f7ff fd84 	bl	8000210 <trace_toggle>
		HAL_ADC_Start_IT(&hadc1);
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800070a:	f001 f8b3 	bl	8001874 <HAL_ADC_Start_IT>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40012c00 	.word	0x40012c00
 800071c:	200003e0 	.word	0x200003e0

08000720 <change_adc_channel>:

static void change_adc_channel(uint32_t channel){
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]

	sConfig.Channel = channel;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000738:	2301      	movs	r3, #1
 800073a:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <change_adc_channel+0x40>)
 8000748:	f001 fa1e 	bl	8001b88 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <change_adc_channel+0x36>
			Error_Handler();
 8000752:	f000 fa25 	bl	8000ba0 <Error_Handler>
	}
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200003e0 	.word	0x200003e0

08000764 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	static uint32_t current_channel = ADC_CHANNEL_6;
	if( current_channel == ADC_CHANNEL_6 ){
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_ADC_ConvCpltCallback+0x58>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b06      	cmp	r3, #6
 8000772:	d10b      	bne.n	800078c <HAL_ADC_ConvCpltCallback+0x28>
		printf("ADC_6: %d\r\n", HAL_ADC_GetValue(&hadc1)); // Read & Update The ADC Result
 8000774:	4812      	ldr	r0, [pc, #72]	; (80007c0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000776:	f001 f933 	bl	80019e0 <HAL_ADC_GetValue>
 800077a:	4603      	mov	r3, r0
 800077c:	4619      	mov	r1, r3
 800077e:	4811      	ldr	r0, [pc, #68]	; (80007c4 <HAL_ADC_ConvCpltCallback+0x60>)
 8000780:	f006 f98e 	bl	8006aa0 <iprintf>
		// ad_res1 = HAL_ADC_GetValue(&hadc1); // Read & Update The ADC Result
		current_channel = ADC_CHANNEL_7;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_ADC_ConvCpltCallback+0x58>)
 8000786:	2207      	movs	r2, #7
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	e00e      	b.n	80007aa <HAL_ADC_ConvCpltCallback+0x46>
	}else if(current_channel == ADC_CHANNEL_7){
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_ADC_ConvCpltCallback+0x58>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b07      	cmp	r3, #7
 8000792:	d10a      	bne.n	80007aa <HAL_ADC_ConvCpltCallback+0x46>
		printf("ADC_7: %d\r\n", HAL_ADC_GetValue(&hadc1)); // Read & Update The ADC Result
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000796:	f001 f923 	bl	80019e0 <HAL_ADC_GetValue>
 800079a:	4603      	mov	r3, r0
 800079c:	4619      	mov	r1, r3
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <HAL_ADC_ConvCpltCallback+0x64>)
 80007a0:	f006 f97e 	bl	8006aa0 <iprintf>
		// ad_res2 = HAL_ADC_GetValue(&hadc1); // Read & Update The ADC Result
		current_channel = ADC_CHANNEL_6;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_ADC_ConvCpltCallback+0x58>)
 80007a6:	2206      	movs	r2, #6
 80007a8:	601a      	str	r2, [r3, #0]
	}
	change_adc_channel(current_channel);
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <HAL_ADC_ConvCpltCallback+0x58>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffb6 	bl	8000720 <change_adc_channel>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000000 	.word	0x20000000
 80007c0:	200003e0 	.word	0x200003e0
 80007c4:	08007ac8 	.word	0x08007ac8
 80007c8:	08007ad4 	.word	0x08007ad4

080007cc <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* AdcHandle){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	printf("ADC inj: %d\r\n", HAL_ADC_GetValue(HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1)));  
 80007d4:	2101      	movs	r1, #1
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <HAL_ADCEx_InjectedConvCpltCallback+0x2c>)
 80007d8:	f001 fb69 	bl	8001eae <HAL_ADCEx_InjectedGetValue>
 80007dc:	4603      	mov	r3, r0
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 f8fe 	bl	80019e0 <HAL_ADC_GetValue>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4619      	mov	r1, r3
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <HAL_ADCEx_InjectedConvCpltCallback+0x30>)
 80007ea:	f006 f959 	bl	8006aa0 <iprintf>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200003e0 	.word	0x200003e0
 80007fc:	08007ae0 	.word	0x08007ae0

08000800 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	2228      	movs	r2, #40	; 0x28
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f006 fa8c 	bl	8006d2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083e:	2301      	movs	r3, #1
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800084c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000850:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fbce 	bl	8002ff8 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000862:	f000 f99d 	bl	8000ba0 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	230f      	movs	r3, #15
 8000868:	617b      	str	r3, [r7, #20]
								|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2102      	movs	r1, #2
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fe3a 	bl	80034fc <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x92>
	{
		Error_Handler();
 800088e:	f000 f987 	bl	8000ba0 <Error_Handler>
	}
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000892:	2302      	movs	r3, #2
 8000894:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f002 ffeb 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xac>
  {
	Error_Handler();
 80008a8:	f000 f97a 	bl	8000ba0 <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3750      	adds	r7, #80	; 0x50
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]

	hadc1.Instance = ADC1;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_ADC1_Init+0x74>)
 80008c6:	4a19      	ldr	r2, [pc, #100]	; (800092c <MX_ADC1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_ADC1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_ADC1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_ADC1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_ADC1_Init+0x74>)
 80008de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008e2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_ADC1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1; 
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_ADC1_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_ADC1_Init+0x74>)
 80008f2:	f000 fee7 	bl	80016c4 <HAL_ADC_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 80008fc:	f000 f950 	bl	8000ba0 <Error_Handler>
	}

  /** Configure Regular Channel
  */
	sConfig.Channel = ADC_CHANNEL_6;
 8000900:	2306      	movs	r3, #6
 8000902:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000908:	2307      	movs	r3, #7
 800090a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_ADC1_Init+0x74>)
 8000912:	f001 f939 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 800091c:	f000 f940 	bl	8000ba0 <Error_Handler>
	}

}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200003e0 	.word	0x200003e0
 800092c:	40012400 	.word	0x40012400

08000930 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C2_Init+0x50>)
 8000936:	4a13      	ldr	r2, [pc, #76]	; (8000984 <MX_I2C2_Init+0x54>)
 8000938:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_I2C2_Init+0x50>)
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_I2C2_Init+0x58>)
 800093e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C2_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_I2C2_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_I2C2_Init+0x50>)
 800094e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000952:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_I2C2_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_I2C2_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_I2C2_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_I2C2_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_I2C2_Init+0x50>)
 800096e:	f001 fd79 	bl	8002464 <HAL_I2C_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8000978:	f000 f912 	bl	8000ba0 <Error_Handler>
	}
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000344 	.word	0x20000344
 8000984:	40005800 	.word	0x40005800
 8000988:	00061a80 	.word	0x00061a80

0800098c <MX_TIM2_Init>:


static void MX_TIM2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_TIM2_Init+0x98>)
 80009ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_TIM2_Init+0x98>)
 80009b4:	2247      	movs	r2, #71	; 0x47
 80009b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_TIM2_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_TIM2_Init+0x98>)
 80009c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80009c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_TIM2_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_TIM2_Init+0x98>)
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d2:	4814      	ldr	r0, [pc, #80]	; (8000a24 <MX_TIM2_Init+0x98>)
 80009d4:	f003 f806 	bl	80039e4 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x56>
  {
	Error_Handler();
 80009de:	f000 f8df 	bl	8000ba0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80009e6:	2310      	movs	r3, #16
 80009e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_TIM2_Init+0x98>)
 80009f2:	f003 f9a1 	bl	8003d38 <HAL_TIM_SlaveConfigSynchro>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x74>
  {
	Error_Handler();
 80009fc:	f000 f8d0 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_TIM2_Init+0x98>)
 8000a0e:	f003 fb69 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x90>
  {
	Error_Handler();
 8000a18:	f000 f8c2 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000410 	.word	0x20000410

08000a28 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_USART1_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a38:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a60:	f003 fbb0 	bl	80041c4 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a6a:	f000 f899 	bl	8000ba0 <Error_Handler>
	}

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000398 	.word	0x20000398
 8000a78:	40013800 	.word	0x40013800

08000a7c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a90:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000a96:	f043 0320 	orr.w	r3, r3, #32
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0320 	and.w	r3, r3, #32
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a39      	ldr	r2, [pc, #228]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a33      	ldr	r2, [pc, #204]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <MX_GPIO_Init+0x118>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, main_led_Pin|sec_led_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ade:	482e      	ldr	r0, [pc, #184]	; (8000b98 <MX_GPIO_Init+0x11c>)
 8000ae0:	f001 fc8f 	bl	8002402 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = main_led_Pin|sec_led_Pin;
 8000ae4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ae8:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4619      	mov	r1, r3
 8000afc:	4826      	ldr	r0, [pc, #152]	; (8000b98 <MX_GPIO_Init+0x11c>)
 8000afe:	f001 fae5 	bl	80020cc <HAL_GPIO_Init>
//   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
// //   GPIO_InitStruct.Pull = GPIO_PULLUP;
//   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  HAL_GPIO_WritePin(GPIOB, trace_3_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2110      	movs	r1, #16
 8000b06:	4824      	ldr	r0, [pc, #144]	; (8000b98 <MX_GPIO_Init+0x11c>)
 8000b08:	f001 fc7b 	bl	8002402 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = trace_3_Pin;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b10:	2311      	movs	r3, #17
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	481d      	ldr	r0, [pc, #116]	; (8000b98 <MX_GPIO_Init+0x11c>)
 8000b24:	f001 fad2 	bl	80020cc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, trace_1_Pin|trace_2_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <MX_GPIO_Init+0x120>)
 8000b30:	f001 fc67 	bl	8002402 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = trace_1_Pin|trace_2_Pin;
 8000b34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b3a:	2311      	movs	r3, #17
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <MX_GPIO_Init+0x120>)
 8000b4e:	f001 fabd 	bl	80020cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = button_l_Pin|button_r_Pin|button_u_Pin|button_d_Pin;
 8000b52:	f648 1320 	movw	r3, #35104	; 0x8920
 8000b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <MX_GPIO_Init+0x120>)
 8000b6c:	f001 faae 	bl	80020cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = button_r_Pin;
 8000b70:	2320      	movs	r3, #32
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_GPIO_Init+0x11c>)
 8000b88:	f001 faa0 	bl	80020cc <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40010800 	.word	0x40010800

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_MspInit+0x68>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_MspInit+0x68>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_MspInit+0x68>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_MspInit+0x68>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <HAL_MspInit+0x68>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	61d3      	str	r3, [r2, #28]
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x68>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	210f      	movs	r1, #15
 8000be6:	f06f 0001 	mvn.w	r0, #1
 8000bea:	f001 fa44 	bl	8002076 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_MspInit+0x6c>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_MspInit+0x6c>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000

08000c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_ADC_MspInit+0x7c>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d129      	bne.n	8000c90 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_ADC_MspInit+0x80>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <HAL_ADC_MspInit+0x80>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_ADC_MspInit+0x80>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_ADC_MspInit+0x80>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_ADC_MspInit+0x80>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_ADC_MspInit+0x80>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c70:	2303      	movs	r3, #3
 8000c72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <HAL_ADC_MspInit+0x84>)
 8000c7c:	f001 fa26 	bl	80020cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 6, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2106      	movs	r1, #6
 8000c84:	2012      	movs	r0, #18
 8000c86:	f001 f9f6 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c8a:	2012      	movs	r0, #18
 8000c8c:	f001 fa0f 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40012400 	.word	0x40012400
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a16      	ldr	r2, [pc, #88]	; (8000d18 <HAL_I2C_MspInit+0x74>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d124      	bne.n	8000d0e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_I2C_MspInit+0x78>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <HAL_I2C_MspInit+0x78>)
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_I2C_MspInit+0x78>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0308 	and.w	r3, r3, #8
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ce0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce2:	2312      	movs	r3, #18
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <HAL_I2C_MspInit+0x7c>)
 8000cf2:	f001 f9eb 	bl	80020cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_I2C_MspInit+0x78>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_I2C_MspInit+0x78>)
 8000cfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_I2C_MspInit+0x78>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40005800 	.word	0x40005800
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010c00 	.word	0x40010c00

08000d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d34:	d113      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_TIM_Base_MspInit+0x44>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_TIM_Base_MspInit+0x44>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_TIM_Base_MspInit+0x44>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2105      	movs	r1, #5
 8000d52:	201c      	movs	r0, #28
 8000d54:	f001 f98f 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d58:	201c      	movs	r0, #28
 8000d5a:	f001 f9a8 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <HAL_UART_MspInit+0xa4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d13d      	bne.n	8000e08 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8c:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <HAL_UART_MspInit+0xa8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <HAL_UART_MspInit+0xa8>)
 8000d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HAL_UART_MspInit+0xa8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_UART_MspInit+0xa8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <HAL_UART_MspInit+0xa8>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_UART_MspInit+0xa8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dbc:	2340      	movs	r3, #64	; 0x40
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4812      	ldr	r0, [pc, #72]	; (8000e18 <HAL_UART_MspInit+0xac>)
 8000dd0:	f001 f97c 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <HAL_UART_MspInit+0xac>)
 8000de8:	f001 f970 	bl	80020cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_UART_MspInit+0xb0>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_UART_MspInit+0xb0>)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40013800 	.word	0x40013800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	40010000 	.word	0x40010000

08000e20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <HAL_InitTick+0xd4>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <HAL_InitTick+0xd4>)
 8000e3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <HAL_InitTick+0xd4>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e4e:	f107 020c 	add.w	r2, r7, #12
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fcbf 	bl	80037dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e5e:	f002 fca9 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8000e62:	4603      	mov	r3, r0
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <HAL_InitTick+0xd8>)
 8000e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e70:	0c9b      	lsrs	r3, r3, #18
 8000e72:	3b01      	subs	r3, #1
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_InitTick+0xdc>)
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <HAL_InitTick+0xe0>)
 8000e7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_InitTick+0xdc>)
 8000e7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e82:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e84:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <HAL_InitTick+0xdc>)
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_InitTick+0xdc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_InitTick+0xdc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_InitTick+0xdc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e9c:	4817      	ldr	r0, [pc, #92]	; (8000efc <HAL_InitTick+0xdc>)
 8000e9e:	f002 fda1 	bl	80039e4 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d11b      	bne.n	8000ee8 <HAL_InitTick+0xc8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000eb0:	4812      	ldr	r0, [pc, #72]	; (8000efc <HAL_InitTick+0xdc>)
 8000eb2:	f002 fde7 	bl	8003a84 <HAL_TIM_Base_Start_IT>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d111      	bne.n	8000ee8 <HAL_InitTick+0xc8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ec4:	2019      	movs	r0, #25
 8000ec6:	f001 f8f2 	bl	80020ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d808      	bhi.n	8000ee2 <HAL_InitTick+0xc2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	2019      	movs	r0, #25
 8000ed6:	f001 f8ce 	bl	8002076 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_InitTick+0xe4>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	e002      	b.n	8000ee8 <HAL_InitTick+0xc8>
      }
      else
      {
        status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3730      	adds	r7, #48	; 0x30
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	431bde83 	.word	0x431bde83
 8000efc:	20000468 	.word	0x20000468
 8000f00:	40012c00 	.word	0x40012c00
 8000f04:	20000010 	.word	0x20000010

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
	...

08000f34 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <ADC1_2_IRQHandler+0x10>)
 8000f3a:	f000 fd5d 	bl	80019f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200003e0 	.word	0x200003e0

08000f48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM1_UP_IRQHandler+0x10>)
 8000f4e:	f002 fdeb 	bl	8003b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000468 	.word	0x20000468

08000f5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM2_IRQHandler+0x10>)
 8000f62:	f002 fde1 	bl	8003b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000410 	.word	0x20000410

08000f70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f82:	f3af 8000 	nop.w
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
  }

  return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <_isatty>:

int _isatty(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
	...

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f005 ff1a 	bl	8006e74 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20005000 	.word	0x20005000
 800106c:	00000400 	.word	0x00000400
 8001070:	200004b0 	.word	0x200004b0
 8001074:	20001760 	.word	0x20001760

08001078 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8001084:	f7ff fff8 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800108a:	490c      	ldr	r1, [pc, #48]	; (80010bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a0:	4c09      	ldr	r4, [pc, #36]	; (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f005 fee7 	bl	8006e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff f923 	bl	80002fc <main>
  bx lr
 80010b6:	4770      	bx	lr
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80010c0:	080088e4 	.word	0x080088e4
  ldr r2, =_sbss
 80010c4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80010c8:	20001760 	.word	0x20001760

080010cc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <CAN1_RX1_IRQHandler>
	...

080010d0 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

HAL_StatusTypeDef SSD1306_Init(int addr) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

	/* Init I2C */
	ssd1306_I2C_Init();
 80010d8:	f000 fa2a 	bl	8001530 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	HAL_StatusTypeDef res = HAL_I2C_IsDeviceReady(&hi2c2, addr, 1, 2000);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	b299      	uxth	r1, r3
 80010e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010e4:	2201      	movs	r2, #1
 80010e6:	485c      	ldr	r0, [pc, #368]	; (8001258 <SSD1306_Init+0x188>)
 80010e8:	f001 fbfe 	bl	80028e8 <HAL_I2C_IsDeviceReady>
 80010ec:	4603      	mov	r3, r0
 80010ee:	72fb      	strb	r3, [r7, #11]
	if ( res != HAL_OK) {
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SSD1306_Init+0x2a>
		/* Return false */
		return res;
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	e0a9      	b.n	800124e <SSD1306_Init+0x17e>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80010fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010fe:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8001100:	e002      	b.n	8001108 <SSD1306_Init+0x38>
		p--;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3b01      	subs	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f9      	bne.n	8001102 <SSD1306_Init+0x32>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800110e:	22ae      	movs	r2, #174	; 0xae
 8001110:	2100      	movs	r1, #0
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f000 fa86 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001118:	2220      	movs	r2, #32
 800111a:	2100      	movs	r1, #0
 800111c:	2078      	movs	r0, #120	; 0x78
 800111e:	f000 fa81 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001122:	2210      	movs	r2, #16
 8001124:	2100      	movs	r1, #0
 8001126:	2078      	movs	r0, #120	; 0x78
 8001128:	f000 fa7c 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800112c:	22b0      	movs	r2, #176	; 0xb0
 800112e:	2100      	movs	r1, #0
 8001130:	2078      	movs	r0, #120	; 0x78
 8001132:	f000 fa77 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001136:	22c8      	movs	r2, #200	; 0xc8
 8001138:	2100      	movs	r1, #0
 800113a:	2078      	movs	r0, #120	; 0x78
 800113c:	f000 fa72 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2078      	movs	r0, #120	; 0x78
 8001146:	f000 fa6d 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800114a:	2210      	movs	r2, #16
 800114c:	2100      	movs	r1, #0
 800114e:	2078      	movs	r0, #120	; 0x78
 8001150:	f000 fa68 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001154:	2240      	movs	r2, #64	; 0x40
 8001156:	2100      	movs	r1, #0
 8001158:	2078      	movs	r0, #120	; 0x78
 800115a:	f000 fa63 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800115e:	2281      	movs	r2, #129	; 0x81
 8001160:	2100      	movs	r1, #0
 8001162:	2078      	movs	r0, #120	; 0x78
 8001164:	f000 fa5e 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001168:	22ff      	movs	r2, #255	; 0xff
 800116a:	2100      	movs	r1, #0
 800116c:	2078      	movs	r0, #120	; 0x78
 800116e:	f000 fa59 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001172:	22a1      	movs	r2, #161	; 0xa1
 8001174:	2100      	movs	r1, #0
 8001176:	2078      	movs	r0, #120	; 0x78
 8001178:	f000 fa54 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800117c:	22a6      	movs	r2, #166	; 0xa6
 800117e:	2100      	movs	r1, #0
 8001180:	2078      	movs	r0, #120	; 0x78
 8001182:	f000 fa4f 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001186:	22a8      	movs	r2, #168	; 0xa8
 8001188:	2100      	movs	r1, #0
 800118a:	2078      	movs	r0, #120	; 0x78
 800118c:	f000 fa4a 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001190:	223f      	movs	r2, #63	; 0x3f
 8001192:	2100      	movs	r1, #0
 8001194:	2078      	movs	r0, #120	; 0x78
 8001196:	f000 fa45 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800119a:	22a4      	movs	r2, #164	; 0xa4
 800119c:	2100      	movs	r1, #0
 800119e:	2078      	movs	r0, #120	; 0x78
 80011a0:	f000 fa40 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80011a4:	22d3      	movs	r2, #211	; 0xd3
 80011a6:	2100      	movs	r1, #0
 80011a8:	2078      	movs	r0, #120	; 0x78
 80011aa:	f000 fa3b 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2078      	movs	r0, #120	; 0x78
 80011b4:	f000 fa36 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80011b8:	22d5      	movs	r2, #213	; 0xd5
 80011ba:	2100      	movs	r1, #0
 80011bc:	2078      	movs	r0, #120	; 0x78
 80011be:	f000 fa31 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80011c2:	22f0      	movs	r2, #240	; 0xf0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2078      	movs	r0, #120	; 0x78
 80011c8:	f000 fa2c 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80011cc:	22d9      	movs	r2, #217	; 0xd9
 80011ce:	2100      	movs	r1, #0
 80011d0:	2078      	movs	r0, #120	; 0x78
 80011d2:	f000 fa27 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80011d6:	2222      	movs	r2, #34	; 0x22
 80011d8:	2100      	movs	r1, #0
 80011da:	2078      	movs	r0, #120	; 0x78
 80011dc:	f000 fa22 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80011e0:	22da      	movs	r2, #218	; 0xda
 80011e2:	2100      	movs	r1, #0
 80011e4:	2078      	movs	r0, #120	; 0x78
 80011e6:	f000 fa1d 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80011ea:	2212      	movs	r2, #18
 80011ec:	2100      	movs	r1, #0
 80011ee:	2078      	movs	r0, #120	; 0x78
 80011f0:	f000 fa18 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011f4:	22db      	movs	r2, #219	; 0xdb
 80011f6:	2100      	movs	r1, #0
 80011f8:	2078      	movs	r0, #120	; 0x78
 80011fa:	f000 fa13 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011fe:	2220      	movs	r2, #32
 8001200:	2100      	movs	r1, #0
 8001202:	2078      	movs	r0, #120	; 0x78
 8001204:	f000 fa0e 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001208:	228d      	movs	r2, #141	; 0x8d
 800120a:	2100      	movs	r1, #0
 800120c:	2078      	movs	r0, #120	; 0x78
 800120e:	f000 fa09 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001212:	2214      	movs	r2, #20
 8001214:	2100      	movs	r1, #0
 8001216:	2078      	movs	r0, #120	; 0x78
 8001218:	f000 fa04 	bl	8001624 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800121c:	22af      	movs	r2, #175	; 0xaf
 800121e:	2100      	movs	r1, #0
 8001220:	2078      	movs	r0, #120	; 0x78
 8001222:	f000 f9ff 	bl	8001624 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001226:	222e      	movs	r2, #46	; 0x2e
 8001228:	2100      	movs	r1, #0
 800122a:	2078      	movs	r0, #120	; 0x78
 800122c:	f000 f9fa 	bl	8001624 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001230:	2000      	movs	r0, #0
 8001232:	f000 f843 	bl	80012bc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001236:	f000 f813 	bl	8001260 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <SSD1306_Init+0x18c>)
 800123c:	2200      	movs	r2, #0
 800123e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <SSD1306_Init+0x18c>)
 8001242:	2200      	movs	r2, #0
 8001244:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <SSD1306_Init+0x18c>)
 8001248:	2201      	movs	r2, #1
 800124a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000344 	.word	0x20000344
 800125c:	200008b4 	.word	0x200008b4

08001260 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001266:	2300      	movs	r3, #0
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	e01d      	b.n	80012a8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	3b50      	subs	r3, #80	; 0x50
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	2100      	movs	r1, #0
 8001276:	2078      	movs	r0, #120	; 0x78
 8001278:	f000 f9d4 	bl	8001624 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2078      	movs	r0, #120	; 0x78
 8001282:	f000 f9cf 	bl	8001624 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001286:	2210      	movs	r2, #16
 8001288:	2100      	movs	r1, #0
 800128a:	2078      	movs	r0, #120	; 0x78
 800128c:	f000 f9ca 	bl	8001624 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	01db      	lsls	r3, r3, #7
 8001294:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <SSD1306_UpdateScreen+0x58>)
 8001296:	441a      	add	r2, r3
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	2140      	movs	r1, #64	; 0x40
 800129c:	2078      	movs	r0, #120	; 0x78
 800129e:	f000 f95b 	bl	8001558 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	3301      	adds	r3, #1
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2b07      	cmp	r3, #7
 80012ac:	d9de      	bls.n	800126c <SSD1306_UpdateScreen+0xc>
	}
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200004b4 	.word	0x200004b4

080012bc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <SSD1306_Fill+0x14>
 80012cc:	2300      	movs	r3, #0
 80012ce:	e000      	b.n	80012d2 <SSD1306_Fill+0x16>
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d6:	4619      	mov	r1, r3
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <SSD1306_Fill+0x2c>)
 80012da:	f005 fd27 	bl	8006d2c <memset>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200004b4 	.word	0x200004b4

080012ec <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
 80012f6:	460b      	mov	r3, r1
 80012f8:	80bb      	strh	r3, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	70fb      	strb	r3, [r7, #3]
	if (
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	2b7f      	cmp	r3, #127	; 0x7f
 8001302:	d848      	bhi.n	8001396 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	2b3f      	cmp	r3, #63	; 0x3f
 8001308:	d845      	bhi.n	8001396 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <SSD1306_DrawPixel+0xb4>)
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d11a      	bne.n	800135c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001326:	88fa      	ldrh	r2, [r7, #6]
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	b298      	uxth	r0, r3
 800132e:	4603      	mov	r3, r0
 8001330:	01db      	lsls	r3, r3, #7
 8001332:	4413      	add	r3, r2
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <SSD1306_DrawPixel+0xb8>)
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	b25a      	sxtb	r2, r3
 800133a:	88bb      	ldrh	r3, [r7, #4]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	b25b      	sxtb	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b259      	sxtb	r1, r3
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	4603      	mov	r3, r0
 8001350:	01db      	lsls	r3, r3, #7
 8001352:	4413      	add	r3, r2
 8001354:	b2c9      	uxtb	r1, r1
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <SSD1306_DrawPixel+0xb8>)
 8001358:	54d1      	strb	r1, [r2, r3]
 800135a:	e01d      	b.n	8001398 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	b298      	uxth	r0, r3
 8001364:	4603      	mov	r3, r0
 8001366:	01db      	lsls	r3, r3, #7
 8001368:	4413      	add	r3, r2
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <SSD1306_DrawPixel+0xb8>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	b25a      	sxtb	r2, r3
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	2101      	movs	r1, #1
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	b25b      	sxtb	r3, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	b25b      	sxtb	r3, r3
 8001382:	4013      	ands	r3, r2
 8001384:	b259      	sxtb	r1, r3
 8001386:	88fa      	ldrh	r2, [r7, #6]
 8001388:	4603      	mov	r3, r0
 800138a:	01db      	lsls	r3, r3, #7
 800138c:	4413      	add	r3, r2
 800138e:	b2c9      	uxtb	r1, r1
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <SSD1306_DrawPixel+0xb8>)
 8001392:	54d1      	strb	r1, [r2, r3]
 8001394:	e000      	b.n	8001398 <SSD1306_DrawPixel+0xac>
		return;
 8001396:	bf00      	nop
	}
}
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	200008b4 	.word	0x200008b4
 80013a4:	200004b4 	.word	0x200004b4

080013a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	460a      	mov	r2, r1
 80013b2:	80fb      	strh	r3, [r7, #6]
 80013b4:	4613      	mov	r3, r2
 80013b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80013b8:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SSD1306_GotoXY+0x28>)
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <SSD1306_GotoXY+0x28>)
 80013c0:	88bb      	ldrh	r3, [r7, #4]
 80013c2:	8053      	strh	r3, [r2, #2]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200008b4 	.word	0x200008b4

080013d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013e4:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <SSD1306_Putc+0xfc>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
	if (
 80013f0:	2b7f      	cmp	r3, #127	; 0x7f
 80013f2:	dc07      	bgt.n	8001404 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <SSD1306_Putc+0xfc>)
 80013f6:	885b      	ldrh	r3, [r3, #2]
 80013f8:	461a      	mov	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001400:	2b3f      	cmp	r3, #63	; 0x3f
 8001402:	dd01      	ble.n	8001408 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001404:	2300      	movs	r3, #0
 8001406:	e05e      	b.n	80014c6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e04b      	b.n	80014a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	3b20      	subs	r3, #32
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	7849      	ldrb	r1, [r1, #1]
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	4619      	mov	r1, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	440b      	add	r3, r1
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	e030      	b.n	8001494 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d010      	beq.n	8001464 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <SSD1306_Putc+0xfc>)
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4413      	add	r3, r2
 800144c:	b298      	uxth	r0, r3
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <SSD1306_Putc+0xfc>)
 8001450:	885a      	ldrh	r2, [r3, #2]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4413      	add	r3, r2
 8001458:	b29b      	uxth	r3, r3
 800145a:	79ba      	ldrb	r2, [r7, #6]
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff ff45 	bl	80012ec <SSD1306_DrawPixel>
 8001462:	e014      	b.n	800148e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <SSD1306_Putc+0xfc>)
 8001466:	881a      	ldrh	r2, [r3, #0]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b298      	uxth	r0, r3
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <SSD1306_Putc+0xfc>)
 8001472:	885a      	ldrh	r2, [r3, #2]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4413      	add	r3, r2
 800147a:	b299      	uxth	r1, r3
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	f7ff ff2f 	bl	80012ec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	3301      	adds	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4293      	cmp	r3, r2
 800149e:	d3c8      	bcc.n	8001432 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3301      	adds	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	461a      	mov	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d3ad      	bcc.n	800140e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <SSD1306_Putc+0xfc>)
 80014b4:	881a      	ldrh	r2, [r3, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4413      	add	r3, r2
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <SSD1306_Putc+0xfc>)
 80014c2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80014c4:	79fb      	ldrb	r3, [r7, #7]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200008b4 	.word	0x200008b4

080014d4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	4613      	mov	r3, r2
 80014e0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014e2:	e012      	b.n	800150a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff71 	bl	80013d4 <SSD1306_Putc>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d002      	beq.n	8001504 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	e008      	b.n	8001516 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3301      	adds	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1e8      	bne.n	80014e4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	781b      	ldrb	r3, [r3, #0]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff feca 	bl	80012bc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001528:	f7ff fe9a 	bl	8001260 <SSD1306_UpdateScreen>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <ssd1306_I2C_Init+0x24>)
 8001538:	607b      	str	r3, [r7, #4]
	while(p>0)
 800153a:	e002      	b.n	8001542 <ssd1306_I2C_Init+0x12>
		p--;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f9      	bne.n	800153c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	0003d090 	.word	0x0003d090

08001558 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b0c7      	sub	sp, #284	; 0x11c
 800155c:	af02      	add	r7, sp, #8
 800155e:	4604      	mov	r4, r0
 8001560:	4608      	mov	r0, r1
 8001562:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001566:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800156a:	600a      	str	r2, [r1, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001572:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001576:	4622      	mov	r2, r4
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800157e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001582:	4602      	mov	r2, r0
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800158a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800158e:	460a      	mov	r2, r1
 8001590:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001592:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800159a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800159e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80015a2:	7812      	ldrb	r2, [r2, #0]
 80015a4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015ac:	e015      	b.n	80015da <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80015ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	441a      	add	r2, r3
 80015be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015c2:	3301      	adds	r3, #1
 80015c4:	7811      	ldrb	r1, [r2, #0]
 80015c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015ca:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80015ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80015d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015de:	b29b      	uxth	r3, r3
 80015e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015e4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80015e8:	8812      	ldrh	r2, [r2, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d8df      	bhi.n	80015ae <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80015ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b299      	uxth	r1, r3
 80015fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b29b      	uxth	r3, r3
 8001608:	f107 020c 	add.w	r2, r7, #12
 800160c:	200a      	movs	r0, #10
 800160e:	9000      	str	r0, [sp, #0]
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <ssd1306_I2C_WriteMulti+0xc8>)
 8001612:	f001 f86b 	bl	80026ec <HAL_I2C_Master_Transmit>
}
 8001616:	bf00      	nop
 8001618:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	20000344 	.word	0x20000344

08001624 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	460b      	mov	r3, r1
 8001630:	71bb      	strb	r3, [r7, #6]
 8001632:	4613      	mov	r3, r2
 8001634:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800163a:	797b      	ldrb	r3, [r7, #5]
 800163c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	b299      	uxth	r1, r3
 8001642:	f107 020c 	add.w	r2, r7, #12
 8001646:	230a      	movs	r3, #10
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2302      	movs	r3, #2
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <ssd1306_I2C_Write+0x38>)
 800164e:	f001 f84d 	bl	80026ec <HAL_I2C_Master_Transmit>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000344 	.word	0x20000344

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_Init+0x28>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_Init+0x28>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 fcf5 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	200f      	movs	r0, #15
 8001678:	f7ff fbd2 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fa96 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000

0800168c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_IncTick+0x1c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_IncTick+0x20>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a03      	ldr	r2, [pc, #12]	; (80016ac <HAL_IncTick+0x20>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000014 	.word	0x20000014
 80016ac:	200008bc 	.word	0x200008bc

080016b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <HAL_GetTick+0x10>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	200008bc 	.word	0x200008bc

080016c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0be      	b.n	8001864 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fa8a 	bl	8000c1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fb8f 	bl	8001e2c <ADC_ConversionStop_Disable>
 800170e:	4603      	mov	r3, r0
 8001710:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 8099 	bne.w	8001852 <HAL_ADC_Init+0x18e>
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 8095 	bne.w	8001852 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	f043 0202 	orr.w	r2, r3, #2
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001744:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7b1b      	ldrb	r3, [r3, #12]
 800174a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800174c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4313      	orrs	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800175c:	d003      	beq.n	8001766 <HAL_ADC_Init+0xa2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <HAL_ADC_Init+0xa8>
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	e000      	b.n	800176e <HAL_ADC_Init+0xaa>
 800176c:	2300      	movs	r3, #0
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7d1b      	ldrb	r3, [r3, #20]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d119      	bne.n	80017b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7b1b      	ldrb	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	3b01      	subs	r3, #1
 800178a:	035a      	lsls	r2, r3, #13
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e00b      	b.n	80017b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f043 0220 	orr.w	r2, r3, #32
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_ADC_Init+0x1a8>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e0:	d003      	beq.n	80017ea <HAL_ADC_Init+0x126>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d104      	bne.n	80017f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	051b      	lsls	r3, r3, #20
 80017f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	430a      	orrs	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_ADC_Init+0x1ac>)
 8001810:	4013      	ands	r3, r2
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d10b      	bne.n	8001830 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800182e:	e018      	b.n	8001862 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	f023 0312 	bic.w	r3, r3, #18
 8001838:	f043 0210 	orr.w	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001850:	e007      	b.n	8001862 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001862:	7dfb      	ldrb	r3, [r7, #23]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	ffe1f7fd 	.word	0xffe1f7fd
 8001870:	ff1f0efe 	.word	0xff1f0efe

08001874 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_Start_IT+0x1a>
 800188a:	2302      	movs	r3, #2
 800188c:	e0a0      	b.n	80019d0 <HAL_ADC_Start_IT+0x15c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fa6e 	bl	8001d78 <ADC_Enable>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 808f 	bne.w	80019c6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <HAL_ADC_Start_IT+0x164>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d105      	bne.n	80018d2 <HAL_ADC_Start_IT+0x5e>
 80018c6:	4b45      	ldr	r3, [pc, #276]	; (80019dc <HAL_ADC_Start_IT+0x168>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d115      	bne.n	80018fe <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d026      	beq.n	800193a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018fc:	e01d      	b.n	800193a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a33      	ldr	r2, [pc, #204]	; (80019dc <HAL_ADC_Start_IT+0x168>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_ADC_Start_IT+0xaa>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <HAL_ADC_Start_IT+0x164>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d10d      	bne.n	800193a <HAL_ADC_Start_IT+0xc6>
 800191e:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <HAL_ADC_Start_IT+0x168>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001932:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	f023 0206 	bic.w	r2, r3, #6
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
 8001952:	e002      	b.n	800195a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f06f 0202 	mvn.w	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0220 	orr.w	r2, r2, #32
 800197a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001986:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800198a:	d113      	bne.n	80019b4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001990:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <HAL_ADC_Start_IT+0x164>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d105      	bne.n	80019a2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_ADC_Start_IT+0x168>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d108      	bne.n	80019b4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	e00c      	b.n	80019ce <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	e003      	b.n	80019ce <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40012800 	.word	0x40012800
 80019dc:	40012400 	.word	0x40012400

080019e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d03e      	beq.n	8001a98 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d039      	beq.n	8001a98 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a4a:	d11d      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d119      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0220 	bic.w	r2, r2, #32
 8001a62:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7fe fe6b 	bl	8000764 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f06f 0212 	mvn.w	r2, #18
 8001a96:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d04d      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d048      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001ace:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001ad2:	d012      	beq.n	8001afa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d125      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001aec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001af0:	d11d      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d119      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b08:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fe4c 	bl	80007cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 020c 	mvn.w	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d012      	beq.n	8001b6e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00d      	beq.n	8001b6e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f809 	bl	8001b76 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0201 	mvn.w	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x20>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0dc      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x1da>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d81c      	bhi.n	8001bf2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b05      	subs	r3, #5
 8001bca:	221f      	movs	r2, #31
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	4019      	ands	r1, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b05      	subs	r3, #5
 8001be4:	fa00 f203 	lsl.w	r2, r0, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf0:	e03c      	b.n	8001c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d81c      	bhi.n	8001c34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b23      	subs	r3, #35	; 0x23
 8001c0c:	221f      	movs	r2, #31
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4019      	ands	r1, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	3b23      	subs	r3, #35	; 0x23
 8001c26:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
 8001c32:	e01b      	b.n	8001c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b41      	subs	r3, #65	; 0x41
 8001c46:	221f      	movs	r2, #31
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4019      	ands	r1, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b41      	subs	r3, #65	; 0x41
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	d91c      	bls.n	8001cae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68d9      	ldr	r1, [r3, #12]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	3b1e      	subs	r3, #30
 8001c86:	2207      	movs	r2, #7
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4019      	ands	r1, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6898      	ldr	r0, [r3, #8]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b1e      	subs	r3, #30
 8001ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	e019      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6919      	ldr	r1, [r3, #16]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4019      	ands	r1, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6898      	ldr	r0, [r3, #8]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cee:	2b11      	cmp	r3, #17
 8001cf0:	d132      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_ADC_ConfigChannel+0x1e4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d125      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d126      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d11a      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	0c9a      	lsrs	r2, r3, #18
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f9      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x1b2>
 8001d46:	e007      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40012400 	.word	0x40012400
 8001d70:	20000004 	.word	0x20000004
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d040      	beq.n	8001e18 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001da6:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <ADC_Enable+0xac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <ADC_Enable+0xb0>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	0c9b      	lsrs	r3, r3, #18
 8001db2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001db4:	e002      	b.n	8001dbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dc2:	f7ff fc75 	bl	80016b0 <HAL_GetTick>
 8001dc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dc8:	e01f      	b.n	8001e0a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dca:	f7ff fc71 	bl	80016b0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d918      	bls.n	8001e0a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d011      	beq.n	8001e0a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	f043 0210 	orr.w	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e007      	b.n	8001e1a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d1d8      	bne.n	8001dca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000004 	.word	0x20000004
 8001e28:	431bde83 	.word	0x431bde83

08001e2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d12e      	bne.n	8001ea4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e56:	f7ff fc2b 	bl	80016b0 <HAL_GetTick>
 8001e5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e5c:	e01b      	b.n	8001e96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e5e:	f7ff fc27 	bl	80016b0 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d914      	bls.n	8001e96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d10d      	bne.n	8001e96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	f043 0210 	orr.w	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e007      	b.n	8001ea6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d0dc      	beq.n	8001e5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d009      	beq.n	8001ed6 <HAL_ADCEx_InjectedGetValue+0x28>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d815      	bhi.n	8001ef4 <HAL_ADCEx_InjectedGetValue+0x46>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d00d      	beq.n	8001eea <HAL_ADCEx_InjectedGetValue+0x3c>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d005      	beq.n	8001ee0 <HAL_ADCEx_InjectedGetValue+0x32>
 8001ed4:	e00e      	b.n	8001ef4 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001edc:	60fb      	str	r3, [r7, #12]
      break;
 8001ede:	e00e      	b.n	8001efe <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	60fb      	str	r3, [r7, #12]
      break;
 8001ee8:	e009      	b.n	8001efe <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	60fb      	str	r3, [r7, #12]
      break;
 8001ef2:	e004      	b.n	8001efe <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efa:	60fb      	str	r3, [r7, #12]
      break;
 8001efc:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
	...

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <__NVIC_EnableIRQ+0x34>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff4f 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff64 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ffb2 	bl	8001ffc <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff81 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff57 	bl	8001f70 <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b08b      	sub	sp, #44	; 0x2c
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	e169      	b.n	80023b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020e0:	2201      	movs	r2, #1
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8158 	bne.w	80023ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4a9a      	ldr	r2, [pc, #616]	; (800236c <HAL_GPIO_Init+0x2a0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d05e      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002108:	4a98      	ldr	r2, [pc, #608]	; (800236c <HAL_GPIO_Init+0x2a0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d875      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 800210e:	4a98      	ldr	r2, [pc, #608]	; (8002370 <HAL_GPIO_Init+0x2a4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d058      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002114:	4a96      	ldr	r2, [pc, #600]	; (8002370 <HAL_GPIO_Init+0x2a4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d86f      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 800211a:	4a96      	ldr	r2, [pc, #600]	; (8002374 <HAL_GPIO_Init+0x2a8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d052      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002120:	4a94      	ldr	r2, [pc, #592]	; (8002374 <HAL_GPIO_Init+0x2a8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d869      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 8002126:	4a94      	ldr	r2, [pc, #592]	; (8002378 <HAL_GPIO_Init+0x2ac>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d04c      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 800212c:	4a92      	ldr	r2, [pc, #584]	; (8002378 <HAL_GPIO_Init+0x2ac>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d863      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 8002132:	4a92      	ldr	r2, [pc, #584]	; (800237c <HAL_GPIO_Init+0x2b0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d046      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002138:	4a90      	ldr	r2, [pc, #576]	; (800237c <HAL_GPIO_Init+0x2b0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d85d      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 800213e:	2b12      	cmp	r3, #18
 8002140:	d82a      	bhi.n	8002198 <HAL_GPIO_Init+0xcc>
 8002142:	2b12      	cmp	r3, #18
 8002144:	d859      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 8002146:	a201      	add	r2, pc, #4	; (adr r2, 800214c <HAL_GPIO_Init+0x80>)
 8002148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214c:	080021c7 	.word	0x080021c7
 8002150:	080021a1 	.word	0x080021a1
 8002154:	080021b3 	.word	0x080021b3
 8002158:	080021f5 	.word	0x080021f5
 800215c:	080021fb 	.word	0x080021fb
 8002160:	080021fb 	.word	0x080021fb
 8002164:	080021fb 	.word	0x080021fb
 8002168:	080021fb 	.word	0x080021fb
 800216c:	080021fb 	.word	0x080021fb
 8002170:	080021fb 	.word	0x080021fb
 8002174:	080021fb 	.word	0x080021fb
 8002178:	080021fb 	.word	0x080021fb
 800217c:	080021fb 	.word	0x080021fb
 8002180:	080021fb 	.word	0x080021fb
 8002184:	080021fb 	.word	0x080021fb
 8002188:	080021fb 	.word	0x080021fb
 800218c:	080021fb 	.word	0x080021fb
 8002190:	080021a9 	.word	0x080021a9
 8002194:	080021bd 	.word	0x080021bd
 8002198:	4a79      	ldr	r2, [pc, #484]	; (8002380 <HAL_GPIO_Init+0x2b4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800219e:	e02c      	b.n	80021fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e029      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	3304      	adds	r3, #4
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e024      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	3308      	adds	r3, #8
 80021b8:	623b      	str	r3, [r7, #32]
          break;
 80021ba:	e01f      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	330c      	adds	r3, #12
 80021c2:	623b      	str	r3, [r7, #32]
          break;
 80021c4:	e01a      	b.n	80021fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ce:	2304      	movs	r3, #4
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e013      	b.n	80021fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021dc:	2308      	movs	r3, #8
 80021de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	611a      	str	r2, [r3, #16]
          break;
 80021e6:	e009      	b.n	80021fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e8:	2308      	movs	r3, #8
 80021ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	615a      	str	r2, [r3, #20]
          break;
 80021f2:	e003      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
          break;
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x130>
          break;
 80021fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2bff      	cmp	r3, #255	; 0xff
 8002200:	d801      	bhi.n	8002206 <HAL_GPIO_Init+0x13a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	e001      	b.n	800220a <HAL_GPIO_Init+0x13e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2bff      	cmp	r3, #255	; 0xff
 8002210:	d802      	bhi.n	8002218 <HAL_GPIO_Init+0x14c>
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	e002      	b.n	800221e <HAL_GPIO_Init+0x152>
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	3b08      	subs	r3, #8
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	210f      	movs	r1, #15
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	401a      	ands	r2, r3
 8002230:	6a39      	ldr	r1, [r7, #32]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80b1 	beq.w	80023ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800224c:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002264:	4a48      	ldr	r2, [pc, #288]	; (8002388 <HAL_GPIO_Init+0x2bc>)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a40      	ldr	r2, [pc, #256]	; (800238c <HAL_GPIO_Init+0x2c0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <HAL_GPIO_Init+0x1ec>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3f      	ldr	r2, [pc, #252]	; (8002390 <HAL_GPIO_Init+0x2c4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00d      	beq.n	80022b4 <HAL_GPIO_Init+0x1e8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3e      	ldr	r2, [pc, #248]	; (8002394 <HAL_GPIO_Init+0x2c8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <HAL_GPIO_Init+0x1e4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3d      	ldr	r2, [pc, #244]	; (8002398 <HAL_GPIO_Init+0x2cc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_GPIO_Init+0x1e0>
 80022a8:	2303      	movs	r3, #3
 80022aa:	e006      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022ac:	2304      	movs	r3, #4
 80022ae:	e004      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e002      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022b8:	2300      	movs	r3, #0
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	f002 0203 	and.w	r2, r2, #3
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	4093      	lsls	r3, r2
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ca:	492f      	ldr	r1, [pc, #188]	; (8002388 <HAL_GPIO_Init+0x2bc>)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	492c      	ldr	r1, [pc, #176]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4928      	ldr	r1, [pc, #160]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4922      	ldr	r1, [pc, #136]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	43db      	mvns	r3, r3
 8002322:	491e      	ldr	r1, [pc, #120]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002324:	4013      	ands	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4918      	ldr	r1, [pc, #96]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	43db      	mvns	r3, r3
 800234a:	4914      	ldr	r1, [pc, #80]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800234c:	4013      	ands	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d021      	beq.n	80023a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	490e      	ldr	r1, [pc, #56]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
 8002368:	e021      	b.n	80023ae <HAL_GPIO_Init+0x2e2>
 800236a:	bf00      	nop
 800236c:	10320000 	.word	0x10320000
 8002370:	10310000 	.word	0x10310000
 8002374:	10220000 	.word	0x10220000
 8002378:	10210000 	.word	0x10210000
 800237c:	10120000 	.word	0x10120000
 8002380:	10110000 	.word	0x10110000
 8002384:	40021000 	.word	0x40021000
 8002388:	40010000 	.word	0x40010000
 800238c:	40010800 	.word	0x40010800
 8002390:	40010c00 	.word	0x40010c00
 8002394:	40011000 	.word	0x40011000
 8002398:	40011400 	.word	0x40011400
 800239c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_GPIO_Init+0x304>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	4909      	ldr	r1, [pc, #36]	; (80023d0 <HAL_GPIO_Init+0x304>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	fa22 f303 	lsr.w	r3, r2, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f47f ae8e 	bne.w	80020e0 <HAL_GPIO_Init+0x14>
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	372c      	adds	r7, #44	; 0x2c
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	40010400 	.word	0x40010400

080023d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	e001      	b.n	80023f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	807b      	strh	r3, [r7, #2]
 800240e:	4613      	mov	r3, r2
 8002410:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002412:	787b      	ldrb	r3, [r7, #1]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002418:	887a      	ldrh	r2, [r7, #2]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800241e:	e003      	b.n	8002428 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	041a      	lsls	r2, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	611a      	str	r2, [r3, #16]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002444:	887a      	ldrh	r2, [r7, #2]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	041a      	lsls	r2, r3, #16
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43d9      	mvns	r1, r3
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	400b      	ands	r3, r1
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e12b      	b.n	80026ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fc0a 	bl	8000ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024c8:	f001 f960 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 80024cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4a81      	ldr	r2, [pc, #516]	; (80026d8 <HAL_I2C_Init+0x274>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d807      	bhi.n	80024e8 <HAL_I2C_Init+0x84>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4a80      	ldr	r2, [pc, #512]	; (80026dc <HAL_I2C_Init+0x278>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	bf94      	ite	ls
 80024e0:	2301      	movls	r3, #1
 80024e2:	2300      	movhi	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	e006      	b.n	80024f6 <HAL_I2C_Init+0x92>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a7d      	ldr	r2, [pc, #500]	; (80026e0 <HAL_I2C_Init+0x27c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	bf94      	ite	ls
 80024f0:	2301      	movls	r3, #1
 80024f2:	2300      	movhi	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0e7      	b.n	80026ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a78      	ldr	r2, [pc, #480]	; (80026e4 <HAL_I2C_Init+0x280>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	0c9b      	lsrs	r3, r3, #18
 8002508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a6a      	ldr	r2, [pc, #424]	; (80026d8 <HAL_I2C_Init+0x274>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d802      	bhi.n	8002538 <HAL_I2C_Init+0xd4>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3301      	adds	r3, #1
 8002536:	e009      	b.n	800254c <HAL_I2C_Init+0xe8>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	4a69      	ldr	r2, [pc, #420]	; (80026e8 <HAL_I2C_Init+0x284>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	3301      	adds	r3, #1
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	430b      	orrs	r3, r1
 8002552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800255e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	495c      	ldr	r1, [pc, #368]	; (80026d8 <HAL_I2C_Init+0x274>)
 8002568:	428b      	cmp	r3, r1
 800256a:	d819      	bhi.n	80025a0 <HAL_I2C_Init+0x13c>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e59      	subs	r1, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fbb1 f3f3 	udiv	r3, r1, r3
 800257a:	1c59      	adds	r1, r3, #1
 800257c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002580:	400b      	ands	r3, r1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_I2C_Init+0x138>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1e59      	subs	r1, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fbb1 f3f3 	udiv	r3, r1, r3
 8002594:	3301      	adds	r3, #1
 8002596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259a:	e051      	b.n	8002640 <HAL_I2C_Init+0x1dc>
 800259c:	2304      	movs	r3, #4
 800259e:	e04f      	b.n	8002640 <HAL_I2C_Init+0x1dc>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d111      	bne.n	80025cc <HAL_I2C_Init+0x168>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e58      	subs	r0, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e012      	b.n	80025f2 <HAL_I2C_Init+0x18e>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e58      	subs	r0, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	0099      	lsls	r1, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Init+0x196>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e022      	b.n	8002640 <HAL_I2C_Init+0x1dc>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10e      	bne.n	8002620 <HAL_I2C_Init+0x1bc>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1e58      	subs	r0, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	440b      	add	r3, r1
 8002610:	fbb0 f3f3 	udiv	r3, r0, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261e:	e00f      	b.n	8002640 <HAL_I2C_Init+0x1dc>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e58      	subs	r0, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	0099      	lsls	r1, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	fbb0 f3f3 	udiv	r3, r0, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	6809      	ldr	r1, [r1, #0]
 8002644:	4313      	orrs	r3, r2
 8002646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69da      	ldr	r2, [r3, #28]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800266e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6911      	ldr	r1, [r2, #16]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68d2      	ldr	r2, [r2, #12]
 800267a:	4311      	orrs	r1, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	430b      	orrs	r3, r1
 8002682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	000186a0 	.word	0x000186a0
 80026dc:	001e847f 	.word	0x001e847f
 80026e0:	003d08ff 	.word	0x003d08ff
 80026e4:	431bde83 	.word	0x431bde83
 80026e8:	10624dd3 	.word	0x10624dd3

080026ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	461a      	mov	r2, r3
 80026f8:	460b      	mov	r3, r1
 80026fa:	817b      	strh	r3, [r7, #10]
 80026fc:	4613      	mov	r3, r2
 80026fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7fe ffd6 	bl	80016b0 <HAL_GetTick>
 8002704:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b20      	cmp	r3, #32
 8002710:	f040 80e0 	bne.w	80028d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2319      	movs	r3, #25
 800271a:	2201      	movs	r2, #1
 800271c:	4970      	ldr	r1, [pc, #448]	; (80028e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fa92 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800272a:	2302      	movs	r3, #2
 800272c:	e0d3      	b.n	80028d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_I2C_Master_Transmit+0x50>
 8002738:	2302      	movs	r3, #2
 800273a:	e0cc      	b.n	80028d6 <HAL_I2C_Master_Transmit+0x1ea>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d007      	beq.n	8002762 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2221      	movs	r2, #33	; 0x21
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2210      	movs	r2, #16
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	893a      	ldrh	r2, [r7, #8]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4a50      	ldr	r2, [pc, #320]	; (80028e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027a4:	8979      	ldrh	r1, [r7, #10]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	6a3a      	ldr	r2, [r7, #32]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f9ca 	bl	8002b44 <I2C_MasterRequestWrite>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e08d      	b.n	80028d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027d0:	e066      	b.n	80028a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	6a39      	ldr	r1, [r7, #32]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fb50 	bl	8002e7c <I2C_WaitOnTXEFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00d      	beq.n	80027fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d107      	bne.n	80027fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06b      	b.n	80028d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b04      	cmp	r3, #4
 800283a:	d11b      	bne.n	8002874 <HAL_I2C_Master_Transmit+0x188>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	d017      	beq.n	8002874 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	6a39      	ldr	r1, [r7, #32]
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fb47 	bl	8002f0c <I2C_WaitOnBTFFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	2b04      	cmp	r3, #4
 800288a:	d107      	bne.n	800289c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e01a      	b.n	80028d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d194      	bne.n	80027d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e000      	b.n	80028d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
  }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	00100002 	.word	0x00100002
 80028e4:	ffff0000 	.word	0xffff0000

080028e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	460b      	mov	r3, r1
 80028f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80028f8:	f7fe feda 	bl	80016b0 <HAL_GetTick>
 80028fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b20      	cmp	r3, #32
 800290c:	f040 8111 	bne.w	8002b32 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2319      	movs	r3, #25
 8002916:	2201      	movs	r2, #1
 8002918:	4988      	ldr	r1, [pc, #544]	; (8002b3c <HAL_I2C_IsDeviceReady+0x254>)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f994 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
 8002928:	e104      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_I2C_IsDeviceReady+0x50>
 8002934:	2302      	movs	r3, #2
 8002936:	e0fd      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x24c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d007      	beq.n	800295e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0201 	orr.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2224      	movs	r2, #36	; 0x24
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a70      	ldr	r2, [pc, #448]	; (8002b40 <HAL_I2C_IsDeviceReady+0x258>)
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002990:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2200      	movs	r2, #0
 800299a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f952 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b8:	d103      	bne.n	80029c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0b6      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c6:	897b      	ldrh	r3, [r7, #10]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fe6b 	bl	80016b0 <HAL_GetTick>
 80029da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	bf0c      	ite	eq
 8002a02:	2301      	moveq	r3, #1
 8002a04:	2300      	movne	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a0a:	e025      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a0c:	f7fe fe50 	bl	80016b0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d302      	bcc.n	8002a22 <HAL_I2C_IsDeviceReady+0x13a>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	22a0      	movs	r2, #160	; 0xa0
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2ba0      	cmp	r3, #160	; 0xa0
 8002a62:	d005      	beq.n	8002a70 <HAL_I2C_IsDeviceReady+0x188>
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_I2C_IsDeviceReady+0x188>
 8002a6a:	7dbb      	ldrb	r3, [r7, #22]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0cd      	beq.n	8002a0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d129      	bne.n	8002ada <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2319      	movs	r3, #25
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4921      	ldr	r1, [pc, #132]	; (8002b3c <HAL_I2C_IsDeviceReady+0x254>)
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f8c6 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e036      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e02c      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	2201      	movs	r2, #1
 8002afc:	490f      	ldr	r1, [pc, #60]	; (8002b3c <HAL_I2C_IsDeviceReady+0x254>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f8a2 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e012      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	f4ff af32 	bcc.w	8002982 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	00100002 	.word	0x00100002
 8002b40:	ffff0000 	.word	0xffff0000

08002b44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	460b      	mov	r3, r1
 8002b52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d006      	beq.n	8002b6e <I2C_MasterRequestWrite+0x2a>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d003      	beq.n	8002b6e <I2C_MasterRequestWrite+0x2a>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b6c:	d108      	bne.n	8002b80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e00b      	b.n	8002b98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	2b12      	cmp	r3, #18
 8002b86:	d107      	bne.n	8002b98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f84f 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bbe:	d103      	bne.n	8002bc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e035      	b.n	8002c38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd4:	d108      	bne.n	8002be8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002be4:	611a      	str	r2, [r3, #16]
 8002be6:	e01b      	b.n	8002c20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002be8:	897b      	ldrh	r3, [r7, #10]
 8002bea:	11db      	asrs	r3, r3, #7
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f003 0306 	and.w	r3, r3, #6
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f063 030f 	orn	r3, r3, #15
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	490e      	ldr	r1, [pc, #56]	; (8002c40 <I2C_MasterRequestWrite+0xfc>)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f898 	bl	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e010      	b.n	8002c38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4907      	ldr	r1, [pc, #28]	; (8002c44 <I2C_MasterRequestWrite+0x100>)
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f888 	bl	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	00010008 	.word	0x00010008
 8002c44:	00010002 	.word	0x00010002

08002c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c58:	e048      	b.n	8002cec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d044      	beq.n	8002cec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c62:	f7fe fd25 	bl	80016b0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d302      	bcc.n	8002c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d139      	bne.n	8002cec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d10d      	bne.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	e00c      	b.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d116      	bne.n	8002cec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e023      	b.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d10d      	bne.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4013      	ands	r3, r2
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	e00c      	b.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d093      	beq.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d4a:	e071      	b.n	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5a:	d123      	bne.n	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f043 0204 	orr.w	r2, r3, #4
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e067      	b.n	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d041      	beq.n	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dac:	f7fe fc80 	bl	80016b0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d302      	bcc.n	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d136      	bne.n	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10c      	bne.n	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	e00b      	b.n	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	43da      	mvns	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4013      	ands	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e021      	b.n	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	0c1b      	lsrs	r3, r3, #16
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10c      	bne.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	43da      	mvns	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4013      	ands	r3, r2
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e00b      	b.n	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f47f af6d 	bne.w	8002d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e88:	e034      	b.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f886 	bl	8002f9c <I2C_IsAcknowledgeFailed>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e034      	b.n	8002f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d028      	beq.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7fe fc05 	bl	80016b0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d11d      	bne.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b80      	cmp	r3, #128	; 0x80
 8002ec4:	d016      	beq.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d1c3      	bne.n	8002e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f18:	e034      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f83e 	bl	8002f9c <I2C_IsAcknowledgeFailed>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e034      	b.n	8002f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d028      	beq.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe fbbd 	bl	80016b0 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d11d      	bne.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d016      	beq.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e007      	b.n	8002f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d1c3      	bne.n	8002f1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb2:	d11b      	bne.n	8002fec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e272      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8087 	beq.w	8003126 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003018:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b04      	cmp	r3, #4
 8003022:	d00c      	beq.n	800303e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003024:	4b8f      	ldr	r3, [pc, #572]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b08      	cmp	r3, #8
 800302e:	d112      	bne.n	8003056 <HAL_RCC_OscConfig+0x5e>
 8003030:	4b8c      	ldr	r3, [pc, #560]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d10b      	bne.n	8003056 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303e:	4b89      	ldr	r3, [pc, #548]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d06c      	beq.n	8003124 <HAL_RCC_OscConfig+0x12c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d168      	bne.n	8003124 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e24c      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x76>
 8003060:	4b80      	ldr	r3, [pc, #512]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a7f      	ldr	r2, [pc, #508]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	e02e      	b.n	80030cc <HAL_RCC_OscConfig+0xd4>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x98>
 8003076:	4b7b      	ldr	r3, [pc, #492]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7a      	ldr	r2, [pc, #488]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800307c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b78      	ldr	r3, [pc, #480]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a77      	ldr	r2, [pc, #476]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e01d      	b.n	80030cc <HAL_RCC_OscConfig+0xd4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0xbc>
 800309a:	4b72      	ldr	r3, [pc, #456]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a71      	ldr	r2, [pc, #452]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6e      	ldr	r2, [pc, #440]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e00b      	b.n	80030cc <HAL_RCC_OscConfig+0xd4>
 80030b4:	4b6b      	ldr	r3, [pc, #428]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b68      	ldr	r3, [pc, #416]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a67      	ldr	r2, [pc, #412]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe faec 	bl	80016b0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe fae8 	bl	80016b0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e200      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0xe4>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fad8 	bl	80016b0 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7fe fad4 	bl	80016b0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e1ec      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x10c>
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d063      	beq.n	80031fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003132:	4b4c      	ldr	r3, [pc, #304]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800313e:	4b49      	ldr	r3, [pc, #292]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b08      	cmp	r3, #8
 8003148:	d11c      	bne.n	8003184 <HAL_RCC_OscConfig+0x18c>
 800314a:	4b46      	ldr	r3, [pc, #280]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d116      	bne.n	8003184 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	4b43      	ldr	r3, [pc, #268]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x176>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e1c0      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4939      	ldr	r1, [pc, #228]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	e03a      	b.n	80031fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003192:	f7fe fa8d 	bl	80016b0 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319a:	f7fe fa89 	bl	80016b0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e1a1      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4927      	ldr	r1, [pc, #156]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_RCC_OscConfig+0x270>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fa6c 	bl	80016b0 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031dc:	f7fe fa68 	bl	80016b0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e180      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d03a      	beq.n	800327c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d019      	beq.n	8003242 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <HAL_RCC_OscConfig+0x274>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7fe fa4c 	bl	80016b0 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321c:	f7fe fa48 	bl	80016b0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e160      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_RCC_OscConfig+0x26c>)
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800323a:	2001      	movs	r0, #1
 800323c:	f000 fafe 	bl	800383c <RCC_Delay>
 8003240:	e01c      	b.n	800327c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_RCC_OscConfig+0x274>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7fe fa32 	bl	80016b0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324e:	e00f      	b.n	8003270 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe fa2e 	bl	80016b0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d908      	bls.n	8003270 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e146      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	42420000 	.word	0x42420000
 800326c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003270:	4b92      	ldr	r3, [pc, #584]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1e9      	bne.n	8003250 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a6 	beq.w	80033d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328e:	4b8b      	ldr	r3, [pc, #556]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	4b88      	ldr	r3, [pc, #544]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	4a87      	ldr	r2, [pc, #540]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	61d3      	str	r3, [r2, #28]
 80032a6:	4b85      	ldr	r3, [pc, #532]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	4b82      	ldr	r3, [pc, #520]	; (80034c0 <HAL_RCC_OscConfig+0x4c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c2:	4b7f      	ldr	r3, [pc, #508]	; (80034c0 <HAL_RCC_OscConfig+0x4c8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7e      	ldr	r2, [pc, #504]	; (80034c0 <HAL_RCC_OscConfig+0x4c8>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ce:	f7fe f9ef 	bl	80016b0 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fe f9eb 	bl	80016b0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b64      	cmp	r3, #100	; 0x64
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e103      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	4b75      	ldr	r3, [pc, #468]	; (80034c0 <HAL_RCC_OscConfig+0x4c8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d106      	bne.n	800330a <HAL_RCC_OscConfig+0x312>
 80032fc:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4a6e      	ldr	r2, [pc, #440]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6213      	str	r3, [r2, #32]
 8003308:	e02d      	b.n	8003366 <HAL_RCC_OscConfig+0x36e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x334>
 8003312:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	4a69      	ldr	r2, [pc, #420]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6213      	str	r3, [r2, #32]
 800331e:	4b67      	ldr	r3, [pc, #412]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4a66      	ldr	r2, [pc, #408]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	6213      	str	r3, [r2, #32]
 800332a:	e01c      	b.n	8003366 <HAL_RCC_OscConfig+0x36e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b05      	cmp	r3, #5
 8003332:	d10c      	bne.n	800334e <HAL_RCC_OscConfig+0x356>
 8003334:	4b61      	ldr	r3, [pc, #388]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4a60      	ldr	r2, [pc, #384]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 800333a:	f043 0304 	orr.w	r3, r3, #4
 800333e:	6213      	str	r3, [r2, #32]
 8003340:	4b5e      	ldr	r3, [pc, #376]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4a5d      	ldr	r2, [pc, #372]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	e00b      	b.n	8003366 <HAL_RCC_OscConfig+0x36e>
 800334e:	4b5b      	ldr	r3, [pc, #364]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4a5a      	ldr	r2, [pc, #360]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	6213      	str	r3, [r2, #32]
 800335a:	4b58      	ldr	r3, [pc, #352]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a57      	ldr	r2, [pc, #348]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d015      	beq.n	800339a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fe f99f 	bl	80016b0 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe f99b 	bl	80016b0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0b1      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ee      	beq.n	8003376 <HAL_RCC_OscConfig+0x37e>
 8003398:	e014      	b.n	80033c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7fe f989 	bl	80016b0 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe f985 	bl	80016b0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e09b      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b8:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ee      	bne.n	80033a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d105      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ca:	4b3c      	ldr	r3, [pc, #240]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	4a3b      	ldr	r2, [pc, #236]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8087 	beq.w	80034ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e0:	4b36      	ldr	r3, [pc, #216]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d061      	beq.n	80034b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d146      	bne.n	8003482 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f4:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_RCC_OscConfig+0x4cc>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe f959 	bl	80016b0 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe f955 	bl	80016b0 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e06d      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003414:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d108      	bne.n	800343c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800342a:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4921      	ldr	r1, [pc, #132]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800343c:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a19      	ldr	r1, [r3, #32]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	430b      	orrs	r3, r1
 800344e:	491b      	ldr	r1, [pc, #108]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_RCC_OscConfig+0x4cc>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe f929 	bl	80016b0 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7fe f925 	bl	80016b0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e03d      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x46a>
 8003480:	e035      	b.n	80034ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_RCC_OscConfig+0x4cc>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe f912 	bl	80016b0 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe f90e 	bl	80016b0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e026      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x498>
 80034ae:	e01e      	b.n	80034ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e019      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40007000 	.word	0x40007000
 80034c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_OscConfig+0x500>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000

080034fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0d0      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d910      	bls.n	8003540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b67      	ldr	r3, [pc, #412]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	4965      	ldr	r1, [pc, #404]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b63      	ldr	r3, [pc, #396]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0b8      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003558:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a58      	ldr	r2, [pc, #352]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003562:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a52      	ldr	r2, [pc, #328]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800357a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800357c:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	494d      	ldr	r1, [pc, #308]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d040      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d115      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e07f      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e073      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e06b      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4936      	ldr	r1, [pc, #216]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7fe f860 	bl	80016b0 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fe f85c 	bl	80016b0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e053      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d210      	bcs.n	800364c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	4922      	ldr	r1, [pc, #136]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e032      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4916      	ldr	r1, [pc, #88]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003676:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	490e      	ldr	r1, [pc, #56]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368a:	f000 f821 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 800368e:	4602      	mov	r2, r0
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	490a      	ldr	r1, [pc, #40]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	5ccb      	ldrb	r3, [r1, r3]
 800369e:	fa22 f303 	lsr.w	r3, r2, r3
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x1cc>)
 80036a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1d0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd fbb8 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40021000 	.word	0x40021000
 80036c4:	08007b20 	.word	0x08007b20
 80036c8:	20000004 	.word	0x20000004
 80036cc:	20000010 	.word	0x20000010

080036d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	2300      	movs	r3, #0
 80036e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036ea:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <HAL_RCC_GetSysClockFreq+0x94>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d002      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x30>
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d003      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x36>
 80036fe:	e027      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003700:	4b19      	ldr	r3, [pc, #100]	; (8003768 <HAL_RCC_GetSysClockFreq+0x98>)
 8003702:	613b      	str	r3, [r7, #16]
      break;
 8003704:	e027      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	0c9b      	lsrs	r3, r3, #18
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	4a17      	ldr	r2, [pc, #92]	; (800376c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003710:	5cd3      	ldrb	r3, [r2, r3]
 8003712:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_RCC_GetSysClockFreq+0x94>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	0c5b      	lsrs	r3, r3, #17
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	4a11      	ldr	r2, [pc, #68]	; (8003770 <HAL_RCC_GetSysClockFreq+0xa0>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_RCC_GetSysClockFreq+0x98>)
 8003732:	fb03 f202 	mul.w	r2, r3, r2
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e004      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a0c      	ldr	r2, [pc, #48]	; (8003774 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	613b      	str	r3, [r7, #16]
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetSysClockFreq+0x98>)
 8003752:	613b      	str	r3, [r7, #16]
      break;
 8003754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003756:	693b      	ldr	r3, [r7, #16]
}
 8003758:	4618      	mov	r0, r3
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	007a1200 	.word	0x007a1200
 800376c:	08008894 	.word	0x08008894
 8003770:	080088a4 	.word	0x080088a4
 8003774:	003d0900 	.word	0x003d0900

08003778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800377c:	4b02      	ldr	r3, [pc, #8]	; (8003788 <HAL_RCC_GetHCLKFreq+0x10>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	20000004 	.word	0x20000004

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003790:	f7ff fff2 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	08007b30 	.word	0x08007b30

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b8:	f7ff ffde 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	0adb      	lsrs	r3, r3, #11
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08007b30 	.word	0x08007b30

080037dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	220f      	movs	r2, #15
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCC_GetClockConfig+0x58>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_RCC_GetClockConfig+0x58>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_GetClockConfig+0x58>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_RCC_GetClockConfig+0x58>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0207 	and.w	r2, r3, #7
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40021000 	.word	0x40021000
 8003838:	40022000 	.word	0x40022000

0800383c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <RCC_Delay+0x34>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <RCC_Delay+0x38>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	0a5b      	lsrs	r3, r3, #9
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003858:	bf00      	nop
  }
  while (Delay --);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1e5a      	subs	r2, r3, #1
 800385e:	60fa      	str	r2, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f9      	bne.n	8003858 <RCC_Delay+0x1c>
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	20000004 	.word	0x20000004
 8003874:	10624dd3 	.word	0x10624dd3

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d07d      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003894:	2300      	movs	r3, #0
 8003896:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003898:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4a4b      	ldr	r2, [pc, #300]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ae:	61d3      	str	r3, [r2, #28]
 80038b0:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b46      	ldr	r3, [pc, #280]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d118      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038cc:	4b43      	ldr	r3, [pc, #268]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a42      	ldr	r2, [pc, #264]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d8:	f7fd feea 	bl	80016b0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	e008      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e0:	f7fd fee6 	bl	80016b0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e06d      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038fe:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02e      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	429a      	cmp	r2, r3
 800391a:	d027      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003924:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003926:	4b2e      	ldr	r3, [pc, #184]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392c:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003932:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d014      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fd feb5 	bl	80016b0 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fd feb1 	bl	80016b0 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e036      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ee      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4917      	ldr	r1, [pc, #92]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	4313      	orrs	r3, r2
 800397c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	490b      	ldr	r1, [pc, #44]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4904      	ldr	r1, [pc, #16]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	42420440 	.word	0x42420440

080039e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e041      	b.n	8003a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd f98a 	bl	8000d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f000 f9ee 	bl	8003e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d001      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e03a      	b.n	8003b12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_TIM_Base_Start_IT+0x98>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x58>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac6:	d009      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x58>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x58>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d010      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	e007      	b.n	8003b10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	40012c00 	.word	0x40012c00
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800

08003b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0202 	mvn.w	r2, #2
 8003b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f92f 	bl	8003dce <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f922 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f931 	bl	8003de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0204 	mvn.w	r2, #4
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f905 	bl	8003dce <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8f8 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f907 	bl	8003de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0208 	mvn.w	r2, #8
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2204      	movs	r2, #4
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f8db 	bl	8003dce <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8ce 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f8dd 	bl	8003de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0210 	mvn.w	r2, #16
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2208      	movs	r2, #8
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8b1 	bl	8003dce <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8a4 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f8b3 	bl	8003de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0201 	mvn.w	r2, #1
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fc fd1a 	bl	80006e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b80      	cmp	r3, #128	; 0x80
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	2b80      	cmp	r3, #128	; 0x80
 8003cc6:	d107      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa6d 	bl	80041b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	d10e      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d107      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f877 	bl	8003df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d10e      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d107      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0220 	mvn.w	r2, #32
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa38 	bl	80041a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e031      	b.n	8003db4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8b0 	bl	8003ec8 <TIM_SlaveTimer_SetConfig>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e018      	b.n	8003db4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d90:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003da0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <TIM_Base_SetConfig+0xb8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_Base_SetConfig+0x30>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e22:	d007      	beq.n	8003e34 <TIM_Base_SetConfig+0x30>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a26      	ldr	r2, [pc, #152]	; (8003ec0 <TIM_Base_SetConfig+0xbc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0x30>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <TIM_Base_SetConfig+0xc0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <TIM_Base_SetConfig+0xb8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00b      	beq.n	8003e66 <TIM_Base_SetConfig+0x62>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d007      	beq.n	8003e66 <TIM_Base_SetConfig+0x62>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <TIM_Base_SetConfig+0xbc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_Base_SetConfig+0x62>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <TIM_Base_SetConfig+0xc0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <TIM_Base_SetConfig+0xb8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800

08003ec8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f023 0307 	bic.w	r3, r3, #7
 8003ef6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b70      	cmp	r3, #112	; 0x70
 8003f10:	d01a      	beq.n	8003f48 <TIM_SlaveTimer_SetConfig+0x80>
 8003f12:	2b70      	cmp	r3, #112	; 0x70
 8003f14:	d860      	bhi.n	8003fd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f16:	2b60      	cmp	r3, #96	; 0x60
 8003f18:	d054      	beq.n	8003fc4 <TIM_SlaveTimer_SetConfig+0xfc>
 8003f1a:	2b60      	cmp	r3, #96	; 0x60
 8003f1c:	d85c      	bhi.n	8003fd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f1e:	2b50      	cmp	r3, #80	; 0x50
 8003f20:	d046      	beq.n	8003fb0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003f22:	2b50      	cmp	r3, #80	; 0x50
 8003f24:	d858      	bhi.n	8003fd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d019      	beq.n	8003f5e <TIM_SlaveTimer_SetConfig+0x96>
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d854      	bhi.n	8003fd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f2e:	2b30      	cmp	r3, #48	; 0x30
 8003f30:	d055      	beq.n	8003fde <TIM_SlaveTimer_SetConfig+0x116>
 8003f32:	2b30      	cmp	r3, #48	; 0x30
 8003f34:	d850      	bhi.n	8003fd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d051      	beq.n	8003fde <TIM_SlaveTimer_SetConfig+0x116>
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d84c      	bhi.n	8003fd8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04d      	beq.n	8003fde <TIM_SlaveTimer_SetConfig+0x116>
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d04b      	beq.n	8003fde <TIM_SlaveTimer_SetConfig+0x116>
 8003f46:	e047      	b.n	8003fd8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003f58:	f000 f8a4 	bl	80040a4 <TIM_ETR_SetConfig>
      break;
 8003f5c:	e040      	b.n	8003fe0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d101      	bne.n	8003f6a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e03b      	b.n	8003fe2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a1a      	ldr	r2, [r3, #32]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f90:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
      break;
 8003fae:	e017      	b.n	8003fe0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f000 f814 	bl	8003fea <TIM_TI1_ConfigInputStage>
      break;
 8003fc2:	e00d      	b.n	8003fe0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f000 f838 	bl	8004046 <TIM_TI2_ConfigInputStage>
      break;
 8003fd6:	e003      	b.n	8003fe0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
      break;
 8003fdc:	e000      	b.n	8003fe0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003fde:	bf00      	nop
  }

  return status;
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b087      	sub	sp, #28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f023 0201 	bic.w	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 030a 	bic.w	r3, r3, #10
 8004026:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004046:	b480      	push	{r7}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f023 0210 	bic.w	r2, r3, #16
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004070:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004082:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e046      	b.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d009      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a10      	ldr	r2, [pc, #64]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10c      	bne.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	4313      	orrs	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800

080041a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e042      	b.n	800425c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc fdbe 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	; 0x24
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f91d 	bl	8004448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800421c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800422c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800423c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	d16d      	bne.n	8004360 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_UART_Transmit+0x2c>
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e066      	b.n	8004362 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2221      	movs	r2, #33	; 0x21
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042a2:	f7fd fa05 	bl	80016b0 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	88fa      	ldrh	r2, [r7, #6]
 80042b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d108      	bne.n	80042d0 <HAL_UART_Transmit+0x6c>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d104      	bne.n	80042d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	e003      	b.n	80042d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d8:	e02a      	b.n	8004330 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2180      	movs	r1, #128	; 0x80
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f840 	bl	800436a <UART_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e036      	b.n	8004362 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	3302      	adds	r3, #2
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	e007      	b.n	8004322 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	3301      	adds	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1cf      	bne.n	80042da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f810 	bl	800436a <UART_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e006      	b.n	8004362 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b090      	sub	sp, #64	; 0x40
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437a:	e050      	b.n	800441e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d04c      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x30>
 800438a:	f7fd f991 	bl	80016b0 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004396:	429a      	cmp	r2, r3
 8004398:	d241      	bcs.n	800441e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ba:	637a      	str	r2, [r7, #52]	; 0x34
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e5      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	613b      	str	r3, [r7, #16]
   return(result);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ee:	623a      	str	r2, [r7, #32]
 80043f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	69f9      	ldr	r1, [r7, #28]
 80043f4:	6a3a      	ldr	r2, [r7, #32]
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e5      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e00f      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	429a      	cmp	r2, r3
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	429a      	cmp	r2, r3
 800443a:	d09f      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3740      	adds	r7, #64	; 0x40
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004482:	f023 030c 	bic.w	r3, r3, #12
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	430b      	orrs	r3, r1
 800448e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2c      	ldr	r2, [pc, #176]	; (800455c <UART_SetConfig+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d103      	bne.n	80044b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044b0:	f7ff f980 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	e002      	b.n	80044be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7ff f968 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 80044bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009a      	lsls	r2, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	4a22      	ldr	r2, [pc, #136]	; (8004560 <UART_SetConfig+0x118>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	0119      	lsls	r1, r3, #4
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009a      	lsls	r2, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <UART_SetConfig+0x118>)
 80044f6:	fba3 0302 	umull	r0, r3, r3, r2
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2064      	movs	r0, #100	; 0x64
 80044fe:	fb00 f303 	mul.w	r3, r0, r3
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	3332      	adds	r3, #50	; 0x32
 8004508:	4a15      	ldr	r2, [pc, #84]	; (8004560 <UART_SetConfig+0x118>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004514:	4419      	add	r1, r3
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	009a      	lsls	r2, r3, #2
 8004520:	441a      	add	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	fbb2 f2f3 	udiv	r2, r2, r3
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <UART_SetConfig+0x118>)
 800452e:	fba3 0302 	umull	r0, r3, r3, r2
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2064      	movs	r0, #100	; 0x64
 8004536:	fb00 f303 	mul.w	r3, r0, r3
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	3332      	adds	r3, #50	; 0x32
 8004540:	4a07      	ldr	r2, [pc, #28]	; (8004560 <UART_SetConfig+0x118>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	440a      	add	r2, r1
 8004552:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40013800 	.word	0x40013800
 8004560:	51eb851f 	.word	0x51eb851f

08004564 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f103 0208 	add.w	r2, r3, #8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f04f 32ff 	mov.w	r2, #4294967295
 800457c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f103 0208 	add.w	r2, r3, #8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f103 0208 	add.w	r2, r3, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d103      	bne.n	8004620 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	e00c      	b.n	800463a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3308      	adds	r3, #8
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e002      	b.n	800462e <vListInsert+0x2e>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	d2f6      	bcs.n	8004628 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6892      	ldr	r2, [r2, #8]
 8004686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6852      	ldr	r2, [r2, #4]
 8004690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d103      	bne.n	80046a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr
	...

080046c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046ee:	f001 fe75 	bl	80063dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	68f9      	ldr	r1, [r7, #12]
 80046fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	441a      	add	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	3b01      	subs	r3, #1
 8004720:	68f9      	ldr	r1, [r7, #12]
 8004722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	441a      	add	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	22ff      	movs	r2, #255	; 0xff
 8004732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d114      	bne.n	800476e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01a      	beq.n	8004782 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3310      	adds	r3, #16
 8004750:	4618      	mov	r0, r3
 8004752:	f001 f93f 	bl	80059d4 <xTaskRemoveFromEventList>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d012      	beq.n	8004782 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <xQueueGenericReset+0xcc>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	e009      	b.n	8004782 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3310      	adds	r3, #16
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fef6 	bl	8004564 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3324      	adds	r3, #36	; 0x24
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fef1 	bl	8004564 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004782:	f001 fe5b 	bl	800643c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004786:	2301      	movs	r3, #1
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	; 0x28
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	4613      	mov	r3, r2
 80047a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xQueueGenericCreate+0x2a>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	613b      	str	r3, [r7, #16]
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	e004      	b.n	80047d4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	3350      	adds	r3, #80	; 0x50
 80047d8:	4618      	mov	r0, r3
 80047da:	f001 fec1 	bl	8006560 <pvPortMalloc>
 80047de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00f      	beq.n	8004806 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3350      	adds	r3, #80	; 0x50
 80047ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047f4:	79fa      	ldrb	r2, [r7, #7]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f805 	bl	8004810 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004806:	69bb      	ldr	r3, [r7, #24]
	}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d103      	bne.n	800482c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e002      	b.n	8004832 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800483e:	2101      	movs	r1, #1
 8004840:	69b8      	ldr	r0, [r7, #24]
 8004842:	f7ff ff3f 	bl	80046c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08e      	sub	sp, #56	; 0x38
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004866:	2300      	movs	r3, #0
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xQueueGenericSend+0x32>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <xQueueGenericSend+0x40>
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <xQueueGenericSend+0x44>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <xQueueGenericSend+0x46>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <xQueueGenericSend+0x60>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d103      	bne.n	80048c6 <xQueueGenericSend+0x6e>
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <xQueueGenericSend+0x72>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <xQueueGenericSend+0x74>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	623b      	str	r3, [r7, #32]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048e6:	f001 fa71 	bl	8005dcc <xTaskGetSchedulerState>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <xQueueGenericSend+0x9e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <xQueueGenericSend+0xa2>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xQueueGenericSend+0xa4>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xQueueGenericSend+0xbe>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	61fb      	str	r3, [r7, #28]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004916:	f001 fd61 	bl	80063dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <xQueueGenericSend+0xd4>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d129      	bne.n	8004980 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004932:	f000 f96f 	bl	8004c14 <prvCopyDataToQueue>
 8004936:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	3324      	adds	r3, #36	; 0x24
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f845 	bl	80059d4 <xTaskRemoveFromEventList>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004950:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <xQueueGenericSend+0x1f8>)
 8004952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	e00a      	b.n	8004978 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004968:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <xQueueGenericSend+0x1f8>)
 800496a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004978:	f001 fd60 	bl	800643c <vPortExitCritical>
				return pdPASS;
 800497c:	2301      	movs	r3, #1
 800497e:	e063      	b.n	8004a48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d103      	bne.n	800498e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004986:	f001 fd59 	bl	800643c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800498a:	2300      	movs	r3, #0
 800498c:	e05c      	b.n	8004a48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800498e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	4618      	mov	r0, r3
 800499a:	f001 f87d 	bl	8005a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800499e:	2301      	movs	r3, #1
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049a2:	f001 fd4b 	bl	800643c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049a6:	f000 fdc5 	bl	8005534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049aa:	f001 fd17 	bl	80063dc <vPortEnterCritical>
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d103      	bne.n	80049c4 <xQueueGenericSend+0x16c>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ca:	b25b      	sxtb	r3, r3
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d103      	bne.n	80049da <xQueueGenericSend+0x182>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049da:	f001 fd2f 	bl	800643c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049de:	1d3a      	adds	r2, r7, #4
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 f86c 	bl	8005ac4 <xTaskCheckForTimeOut>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d124      	bne.n	8004a3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f4:	f000 fa06 	bl	8004e04 <prvIsQueueFull>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	3310      	adds	r3, #16
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ffc0 	bl	800598c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a0e:	f000 f991 	bl	8004d34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a12:	f000 fd9d 	bl	8005550 <xTaskResumeAll>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f47f af7c 	bne.w	8004916 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <xQueueGenericSend+0x1f8>)
 8004a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	e772      	b.n	8004916 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a32:	f000 f97f 	bl	8004d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a36:	f000 fd8b 	bl	8005550 <xTaskResumeAll>
 8004a3a:	e76c      	b.n	8004916 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a3e:	f000 f979 	bl	8004d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a42:	f000 fd85 	bl	8005550 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a46:	2300      	movs	r3, #0
		}
	}
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3738      	adds	r7, #56	; 0x38
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	; 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <xQueueReceive+0x30>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	623b      	str	r3, [r7, #32]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d103      	bne.n	8004a92 <xQueueReceive+0x3e>
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <xQueueReceive+0x42>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <xQueueReceive+0x44>
 8004a96:	2300      	movs	r3, #0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xQueueReceive+0x5e>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	61fb      	str	r3, [r7, #28]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ab2:	f001 f98b 	bl	8005dcc <xTaskGetSchedulerState>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <xQueueReceive+0x6e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <xQueueReceive+0x72>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <xQueueReceive+0x74>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <xQueueReceive+0x8e>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	61bb      	str	r3, [r7, #24]
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ae2:	f001 fc7b 	bl	80063dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01f      	beq.n	8004b32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af6:	f000 f8f7 	bl	8004ce8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	1e5a      	subs	r2, r3, #1
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00f      	beq.n	8004b2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	3310      	adds	r3, #16
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 ff60 	bl	80059d4 <xTaskRemoveFromEventList>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b1a:	4b3d      	ldr	r3, [pc, #244]	; (8004c10 <xQueueReceive+0x1bc>)
 8004b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b2a:	f001 fc87 	bl	800643c <vPortExitCritical>
				return pdPASS;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e069      	b.n	8004c06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b38:	f001 fc80 	bl	800643c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e062      	b.n	8004c06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b46:	f107 0310 	add.w	r3, r7, #16
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 ffa4 	bl	8005a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b54:	f001 fc72 	bl	800643c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b58:	f000 fcec 	bl	8005534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b5c:	f001 fc3e 	bl	80063dc <vPortEnterCritical>
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b66:	b25b      	sxtb	r3, r3
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d103      	bne.n	8004b76 <xQueueReceive+0x122>
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d103      	bne.n	8004b8c <xQueueReceive+0x138>
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b8c:	f001 fc56 	bl	800643c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b90:	1d3a      	adds	r2, r7, #4
 8004b92:	f107 0310 	add.w	r3, r7, #16
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 ff93 	bl	8005ac4 <xTaskCheckForTimeOut>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d123      	bne.n	8004bec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba6:	f000 f917 	bl	8004dd8 <prvIsQueueEmpty>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d017      	beq.n	8004be0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	3324      	adds	r3, #36	; 0x24
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fee7 	bl	800598c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc0:	f000 f8b8 	bl	8004d34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bc4:	f000 fcc4 	bl	8005550 <xTaskResumeAll>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d189      	bne.n	8004ae2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <xQueueReceive+0x1bc>)
 8004bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	e780      	b.n	8004ae2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be2:	f000 f8a7 	bl	8004d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004be6:	f000 fcb3 	bl	8005550 <xTaskResumeAll>
 8004bea:	e77a      	b.n	8004ae2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bee:	f000 f8a1 	bl	8004d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bf2:	f000 fcad 	bl	8005550 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf8:	f000 f8ee 	bl	8004dd8 <prvIsQueueEmpty>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f43f af6f 	beq.w	8004ae2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3730      	adds	r7, #48	; 0x30
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10d      	bne.n	8004c4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d14d      	bne.n	8004cd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 f8e2 	bl	8005e08 <xTaskPriorityDisinherit>
 8004c44:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	605a      	str	r2, [r3, #4]
 8004c4c:	e043      	b.n	8004cd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d119      	bne.n	8004c88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6898      	ldr	r0, [r3, #8]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	f002 f935 	bl	8006ece <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d32b      	bcc.n	8004cd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	609a      	str	r2, [r3, #8]
 8004c86:	e026      	b.n	8004cd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68d8      	ldr	r0, [r3, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	461a      	mov	r2, r3
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	f002 f91b 	bl	8006ece <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	425b      	negs	r3, r3
 8004ca2:	441a      	add	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d207      	bcs.n	8004cc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	425b      	negs	r3, r3
 8004cbe:	441a      	add	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d105      	bne.n	8004cd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cde:	697b      	ldr	r3, [r7, #20]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d018      	beq.n	8004d2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	441a      	add	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d303      	bcc.n	8004d1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68d9      	ldr	r1, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	461a      	mov	r2, r3
 8004d26:	6838      	ldr	r0, [r7, #0]
 8004d28:	f002 f8d1 	bl	8006ece <memcpy>
	}
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d3c:	f001 fb4e 	bl	80063dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d48:	e011      	b.n	8004d6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d012      	beq.n	8004d78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3324      	adds	r3, #36	; 0x24
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fe3c 	bl	80059d4 <xTaskRemoveFromEventList>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d62:	f000 ff11 	bl	8005b88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	dce9      	bgt.n	8004d4a <prvUnlockQueue+0x16>
 8004d76:	e000      	b.n	8004d7a <prvUnlockQueue+0x46>
					break;
 8004d78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d82:	f001 fb5b 	bl	800643c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d86:	f001 fb29 	bl	80063dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d92:	e011      	b.n	8004db8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d012      	beq.n	8004dc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3310      	adds	r3, #16
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fe17 	bl	80059d4 <xTaskRemoveFromEventList>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dac:	f000 feec 	bl	8005b88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	dce9      	bgt.n	8004d94 <prvUnlockQueue+0x60>
 8004dc0:	e000      	b.n	8004dc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	22ff      	movs	r2, #255	; 0xff
 8004dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004dcc:	f001 fb36 	bl	800643c <vPortExitCritical>
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004de0:	f001 fafc 	bl	80063dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dec:	2301      	movs	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e001      	b.n	8004df6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004df6:	f001 fb21 	bl	800643c <vPortExitCritical>

	return xReturn;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e0c:	f001 fae6 	bl	80063dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d102      	bne.n	8004e22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e001      	b.n	8004e26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e26:	f001 fb09 	bl	800643c <vPortExitCritical>

	return xReturn;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08e      	sub	sp, #56	; 0x38
 8004e38:	af04      	add	r7, sp, #16
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	623b      	str	r3, [r7, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xTaskCreateStatic+0x46>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	61fb      	str	r3, [r7, #28]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e7a:	23b0      	movs	r3, #176	; 0xb0
 8004e7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2bb0      	cmp	r3, #176	; 0xb0
 8004e82:	d00a      	beq.n	8004e9a <xTaskCreateStatic+0x66>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	61bb      	str	r3, [r7, #24]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01e      	beq.n	8004ede <xTaskCreateStatic+0xaa>
 8004ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01b      	beq.n	8004ede <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eb8:	2300      	movs	r3, #0
 8004eba:	9303      	str	r3, [sp, #12]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	f107 0314 	add.w	r3, r7, #20
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f851 	bl	8004f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ed8:	f000 f8f2 	bl	80050c0 <prvAddNewTaskToReadyList>
 8004edc:	e001      	b.n	8004ee2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ee2:	697b      	ldr	r3, [r7, #20]
	}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3728      	adds	r7, #40	; 0x28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	; 0x30
 8004ef0:	af04      	add	r7, sp, #16
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fb2d 	bl	8006560 <pvPortMalloc>
 8004f06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00e      	beq.n	8004f2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f0e:	20b0      	movs	r0, #176	; 0xb0
 8004f10:	f001 fb26 	bl	8006560 <pvPortMalloc>
 8004f14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
 8004f22:	e005      	b.n	8004f30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f24:	6978      	ldr	r0, [r7, #20]
 8004f26:	f001 fbe5 	bl	80066f4 <vPortFree>
 8004f2a:	e001      	b.n	8004f30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d017      	beq.n	8004f66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f3e:	88fa      	ldrh	r2, [r7, #6]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9303      	str	r3, [sp, #12]
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	9302      	str	r3, [sp, #8]
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	9301      	str	r3, [sp, #4]
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f80f 	bl	8004f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f5a:	69f8      	ldr	r0, [r7, #28]
 8004f5c:	f000 f8b0 	bl	80050c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f60:	2301      	movs	r3, #1
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	e002      	b.n	8004f6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f66:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
	}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	461a      	mov	r2, r3
 8004f90:	21a5      	movs	r1, #165	; 0xa5
 8004f92:	f001 fecb 	bl	8006d2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f023 0307 	bic.w	r3, r3, #7
 8004fae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	617b      	str	r3, [r7, #20]
}
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	e012      	b.n	8004ffc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	7819      	ldrb	r1, [r3, #0]
 8004fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3334      	adds	r3, #52	; 0x34
 8004fe6:	460a      	mov	r2, r1
 8004fe8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d006      	beq.n	8005004 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b0f      	cmp	r3, #15
 8005000:	d9e9      	bls.n	8004fd6 <prvInitialiseNewTask+0x5e>
 8005002:	e000      	b.n	8005006 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005004:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	2b06      	cmp	r3, #6
 8005012:	d901      	bls.n	8005018 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005014:	2306      	movs	r3, #6
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800501c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005022:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	2200      	movs	r2, #0
 8005028:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	3304      	adds	r3, #4
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fab7 	bl	80045a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	3318      	adds	r3, #24
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fab2 	bl	80045a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005042:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	f1c3 0207 	rsb	r2, r3, #7
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005052:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	2200      	movs	r2, #0
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	2200      	movs	r2, #0
 800505e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	2200      	movs	r2, #0
 8005064:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	2200      	movs	r2, #0
 800506c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	335c      	adds	r3, #92	; 0x5c
 8005074:	224c      	movs	r2, #76	; 0x4c
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f001 fe57 	bl	8006d2c <memset>
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <prvInitialiseNewTask+0x13c>)
 8005082:	661a      	str	r2, [r3, #96]	; 0x60
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <prvInitialiseNewTask+0x140>)
 8005088:	665a      	str	r2, [r3, #100]	; 0x64
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	4a0b      	ldr	r2, [pc, #44]	; (80050bc <prvInitialiseNewTask+0x144>)
 800508e:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	68f9      	ldr	r1, [r7, #12]
 8005094:	69b8      	ldr	r0, [r7, #24]
 8005096:	f001 f8ad 	bl	80061f4 <pxPortInitialiseStack>
 800509a:	4602      	mov	r2, r0
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <prvInitialiseNewTask+0x134>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ac:	bf00      	nop
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20001614 	.word	0x20001614
 80050b8:	2000167c 	.word	0x2000167c
 80050bc:	200016e4 	.word	0x200016e4

080050c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050c8:	f001 f988 	bl	80063dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050cc:	4b2c      	ldr	r3, [pc, #176]	; (8005180 <prvAddNewTaskToReadyList+0xc0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	4a2b      	ldr	r2, [pc, #172]	; (8005180 <prvAddNewTaskToReadyList+0xc0>)
 80050d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050d6:	4b2b      	ldr	r3, [pc, #172]	; (8005184 <prvAddNewTaskToReadyList+0xc4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050de:	4a29      	ldr	r2, [pc, #164]	; (8005184 <prvAddNewTaskToReadyList+0xc4>)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050e4:	4b26      	ldr	r3, [pc, #152]	; (8005180 <prvAddNewTaskToReadyList+0xc0>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d110      	bne.n	800510e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050ec:	f000 fd70 	bl	8005bd0 <prvInitialiseTaskLists>
 80050f0:	e00d      	b.n	800510e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050f2:	4b25      	ldr	r3, [pc, #148]	; (8005188 <prvAddNewTaskToReadyList+0xc8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050fa:	4b22      	ldr	r3, [pc, #136]	; (8005184 <prvAddNewTaskToReadyList+0xc4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	429a      	cmp	r2, r3
 8005106:	d802      	bhi.n	800510e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005108:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <prvAddNewTaskToReadyList+0xc4>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800510e:	4b1f      	ldr	r3, [pc, #124]	; (800518c <prvAddNewTaskToReadyList+0xcc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3301      	adds	r3, #1
 8005114:	4a1d      	ldr	r2, [pc, #116]	; (800518c <prvAddNewTaskToReadyList+0xcc>)
 8005116:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005118:	4b1c      	ldr	r3, [pc, #112]	; (800518c <prvAddNewTaskToReadyList+0xcc>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	2201      	movs	r2, #1
 8005126:	409a      	lsls	r2, r3
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <prvAddNewTaskToReadyList+0xd0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4313      	orrs	r3, r2
 800512e:	4a18      	ldr	r2, [pc, #96]	; (8005190 <prvAddNewTaskToReadyList+0xd0>)
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4a15      	ldr	r2, [pc, #84]	; (8005194 <prvAddNewTaskToReadyList+0xd4>)
 8005140:	441a      	add	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f7ff fa36 	bl	80045ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800514e:	f001 f975 	bl	800643c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <prvAddNewTaskToReadyList+0xc8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00e      	beq.n	8005178 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <prvAddNewTaskToReadyList+0xc4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	429a      	cmp	r2, r3
 8005166:	d207      	bcs.n	8005178 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <prvAddNewTaskToReadyList+0xd8>)
 800516a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	200009c0 	.word	0x200009c0
 8005184:	200008c0 	.word	0x200008c0
 8005188:	200009cc 	.word	0x200009cc
 800518c:	200009dc 	.word	0x200009dc
 8005190:	200009c8 	.word	0x200009c8
 8005194:	200008c4 	.word	0x200008c4
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	617b      	str	r3, [r7, #20]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <vTaskDelayUntil+0x46>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	613b      	str	r3, [r7, #16]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80051e2:	4b2a      	ldr	r3, [pc, #168]	; (800528c <vTaskDelayUntil+0xf0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <vTaskDelayUntil+0x64>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	60fb      	str	r3, [r7, #12]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005200:	f000 f998 	bl	8005534 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005204:	4b22      	ldr	r3, [pc, #136]	; (8005290 <vTaskDelayUntil+0xf4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	4413      	add	r3, r2
 8005212:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6a3a      	ldr	r2, [r7, #32]
 800521a:	429a      	cmp	r2, r3
 800521c:	d20b      	bcs.n	8005236 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	429a      	cmp	r2, r3
 8005226:	d211      	bcs.n	800524c <vTaskDelayUntil+0xb0>
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	429a      	cmp	r2, r3
 800522e:	d90d      	bls.n	800524c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005230:	2301      	movs	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
 8005234:	e00a      	b.n	800524c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	429a      	cmp	r2, r3
 800523e:	d303      	bcc.n	8005248 <vTaskDelayUntil+0xac>
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	429a      	cmp	r2, r3
 8005246:	d901      	bls.n	800524c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f000 ff61 	bl	8006128 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005266:	f000 f973 	bl	8005550 <xTaskResumeAll>
 800526a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d107      	bne.n	8005282 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005272:	4b08      	ldr	r3, [pc, #32]	; (8005294 <vTaskDelayUntil+0xf8>)
 8005274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005282:	bf00      	nop
 8005284:	3728      	adds	r7, #40	; 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	200009e8 	.word	0x200009e8
 8005290:	200009c4 	.word	0x200009c4
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d017      	beq.n	80052da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052aa:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <vTaskDelay+0x60>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <vTaskDelay+0x30>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	60bb      	str	r3, [r7, #8]
}
 80052c4:	bf00      	nop
 80052c6:	e7fe      	b.n	80052c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052c8:	f000 f934 	bl	8005534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052cc:	2100      	movs	r1, #0
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 ff2a 	bl	8006128 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052d4:	f000 f93c 	bl	8005550 <xTaskResumeAll>
 80052d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d107      	bne.n	80052f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <vTaskDelay+0x64>)
 80052e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	200009e8 	.word	0x200009e8
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b06      	cmp	r3, #6
 8005312:	d90a      	bls.n	800532a <vTaskPrioritySet+0x2a>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	60fb      	str	r3, [r7, #12]
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b06      	cmp	r3, #6
 800532e:	d901      	bls.n	8005334 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005330:	2306      	movs	r3, #6
 8005332:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005334:	f001 f852 	bl	80063dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <vTaskPrioritySet+0x44>
 800533e:	4b43      	ldr	r3, [pc, #268]	; (800544c <vTaskPrioritySet+0x14c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	e000      	b.n	8005346 <vTaskPrioritySet+0x46>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534c:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d074      	beq.n	8005440 <vTaskPrioritySet+0x140>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	429a      	cmp	r2, r3
 800535c:	d90d      	bls.n	800537a <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800535e:	4b3b      	ldr	r3, [pc, #236]	; (800544c <vTaskPrioritySet+0x14c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	429a      	cmp	r2, r3
 8005366:	d00f      	beq.n	8005388 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005368:	4b38      	ldr	r3, [pc, #224]	; (800544c <vTaskPrioritySet+0x14c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d309      	bcc.n	8005388 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e006      	b.n	8005388 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800537a:	4b34      	ldr	r3, [pc, #208]	; (800544c <vTaskPrioritySet+0x14c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	429a      	cmp	r2, r3
 8005382:	d101      	bne.n	8005388 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005384:	2301      	movs	r3, #1
 8005386:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	429a      	cmp	r2, r3
 8005398:	d102      	bne.n	80053a0 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	db04      	blt.n	80053b8 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f1c3 0207 	rsb	r2, r3, #7
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	6959      	ldr	r1, [r3, #20]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4a22      	ldr	r2, [pc, #136]	; (8005450 <vTaskPrioritySet+0x150>)
 80053c8:	4413      	add	r3, r2
 80053ca:	4299      	cmp	r1, r3
 80053cc:	d101      	bne.n	80053d2 <vTaskPrioritySet+0xd2>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <vTaskPrioritySet+0xd4>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d028      	beq.n	800542a <vTaskPrioritySet+0x12a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	3304      	adds	r3, #4
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff f947 	bl	8004670 <uxListRemove>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d109      	bne.n	80053fc <vTaskPrioritySet+0xfc>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80053e8:	2201      	movs	r2, #1
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43da      	mvns	r2, r3
 80053f2:	4b18      	ldr	r3, [pc, #96]	; (8005454 <vTaskPrioritySet+0x154>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4013      	ands	r3, r2
 80053f8:	4a16      	ldr	r2, [pc, #88]	; (8005454 <vTaskPrioritySet+0x154>)
 80053fa:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	2201      	movs	r2, #1
 8005402:	409a      	lsls	r2, r3
 8005404:	4b13      	ldr	r3, [pc, #76]	; (8005454 <vTaskPrioritySet+0x154>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4313      	orrs	r3, r2
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <vTaskPrioritySet+0x154>)
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <vTaskPrioritySet+0x150>)
 800541c:	441a      	add	r2, r3
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	3304      	adds	r3, #4
 8005422:	4619      	mov	r1, r3
 8005424:	4610      	mov	r0, r2
 8005426:	f7ff f8c8 	bl	80045ba <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <vTaskPrioritySet+0x140>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <vTaskPrioritySet+0x158>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005440:	f000 fffc 	bl	800643c <vPortExitCritical>
	}
 8005444:	bf00      	nop
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	200008c0 	.word	0x200008c0
 8005450:	200008c4 	.word	0x200008c4
 8005454:	200009c8 	.word	0x200009c8
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800546a:	463a      	mov	r2, r7
 800546c:	1d39      	adds	r1, r7, #4
 800546e:	f107 0308 	add.w	r3, r7, #8
 8005472:	4618      	mov	r0, r3
 8005474:	f7fa fe8a 	bl	800018c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	9202      	str	r2, [sp, #8]
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	460a      	mov	r2, r1
 800548a:	4922      	ldr	r1, [pc, #136]	; (8005514 <vTaskStartScheduler+0xb8>)
 800548c:	4822      	ldr	r0, [pc, #136]	; (8005518 <vTaskStartScheduler+0xbc>)
 800548e:	f7ff fcd1 	bl	8004e34 <xTaskCreateStatic>
 8005492:	4603      	mov	r3, r0
 8005494:	4a21      	ldr	r2, [pc, #132]	; (800551c <vTaskStartScheduler+0xc0>)
 8005496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005498:	4b20      	ldr	r3, [pc, #128]	; (800551c <vTaskStartScheduler+0xc0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054a0:	2301      	movs	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e001      	b.n	80054aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d11d      	bne.n	80054ec <vTaskStartScheduler+0x90>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054c4:	4b16      	ldr	r3, [pc, #88]	; (8005520 <vTaskStartScheduler+0xc4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	335c      	adds	r3, #92	; 0x5c
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <vTaskStartScheduler+0xc8>)
 80054cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <vTaskStartScheduler+0xcc>)
 80054d0:	f04f 32ff 	mov.w	r2, #4294967295
 80054d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <vTaskStartScheduler+0xd0>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054dc:	4b14      	ldr	r3, [pc, #80]	; (8005530 <vTaskStartScheduler+0xd4>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80054e2:	f7fa fe35 	bl	8000150 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054e6:	f000 ff07 	bl	80062f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054ea:	e00e      	b.n	800550a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d10a      	bne.n	800550a <vTaskStartScheduler+0xae>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	60fb      	str	r3, [r7, #12]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <vTaskStartScheduler+0xac>
}
 800550a:	bf00      	nop
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	08007af0 	.word	0x08007af0
 8005518:	08005ba1 	.word	0x08005ba1
 800551c:	200009e4 	.word	0x200009e4
 8005520:	200008c0 	.word	0x200008c0
 8005524:	20000074 	.word	0x20000074
 8005528:	200009e0 	.word	0x200009e0
 800552c:	200009cc 	.word	0x200009cc
 8005530:	200009c4 	.word	0x200009c4

08005534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005538:	4b04      	ldr	r3, [pc, #16]	; (800554c <vTaskSuspendAll+0x18>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	4a03      	ldr	r2, [pc, #12]	; (800554c <vTaskSuspendAll+0x18>)
 8005540:	6013      	str	r3, [r2, #0]
}
 8005542:	bf00      	nop
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	200009e8 	.word	0x200009e8

08005550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800555e:	4b41      	ldr	r3, [pc, #260]	; (8005664 <xTaskResumeAll+0x114>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <xTaskResumeAll+0x2c>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	603b      	str	r3, [r7, #0]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800557c:	f000 ff2e 	bl	80063dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005580:	4b38      	ldr	r3, [pc, #224]	; (8005664 <xTaskResumeAll+0x114>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3b01      	subs	r3, #1
 8005586:	4a37      	ldr	r2, [pc, #220]	; (8005664 <xTaskResumeAll+0x114>)
 8005588:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800558a:	4b36      	ldr	r3, [pc, #216]	; (8005664 <xTaskResumeAll+0x114>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d161      	bne.n	8005656 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005592:	4b35      	ldr	r3, [pc, #212]	; (8005668 <xTaskResumeAll+0x118>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d05d      	beq.n	8005656 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800559a:	e02e      	b.n	80055fa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800559c:	4b33      	ldr	r3, [pc, #204]	; (800566c <xTaskResumeAll+0x11c>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3318      	adds	r3, #24
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff f861 	bl	8004670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff f85c 	bl	8004670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	2201      	movs	r2, #1
 80055be:	409a      	lsls	r2, r3
 80055c0:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <xTaskResumeAll+0x120>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <xTaskResumeAll+0x120>)
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4a27      	ldr	r2, [pc, #156]	; (8005674 <xTaskResumeAll+0x124>)
 80055d8:	441a      	add	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3304      	adds	r3, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f7fe ffea 	bl	80045ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ea:	4b23      	ldr	r3, [pc, #140]	; (8005678 <xTaskResumeAll+0x128>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80055f4:	4b21      	ldr	r3, [pc, #132]	; (800567c <xTaskResumeAll+0x12c>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055fa:	4b1c      	ldr	r3, [pc, #112]	; (800566c <xTaskResumeAll+0x11c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1cc      	bne.n	800559c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005608:	f000 fbbc 	bl	8005d84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800560c:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <xTaskResumeAll+0x130>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d010      	beq.n	800563a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005618:	f000 f844 	bl	80056a4 <xTaskIncrementTick>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005622:	4b16      	ldr	r3, [pc, #88]	; (800567c <xTaskResumeAll+0x12c>)
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3b01      	subs	r3, #1
 800562c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f1      	bne.n	8005618 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005634:	4b12      	ldr	r3, [pc, #72]	; (8005680 <xTaskResumeAll+0x130>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <xTaskResumeAll+0x12c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005646:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <xTaskResumeAll+0x134>)
 8005648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005656:	f000 fef1 	bl	800643c <vPortExitCritical>

	return xAlreadyYielded;
 800565a:	68bb      	ldr	r3, [r7, #8]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	200009e8 	.word	0x200009e8
 8005668:	200009c0 	.word	0x200009c0
 800566c:	20000980 	.word	0x20000980
 8005670:	200009c8 	.word	0x200009c8
 8005674:	200008c4 	.word	0x200008c4
 8005678:	200008c0 	.word	0x200008c0
 800567c:	200009d4 	.word	0x200009d4
 8005680:	200009d0 	.word	0x200009d0
 8005684:	e000ed04 	.word	0xe000ed04

08005688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800568e:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <xTaskGetTickCount+0x18>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005694:	687b      	ldr	r3, [r7, #4]
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr
 80056a0:	200009c4 	.word	0x200009c4

080056a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ae:	4b51      	ldr	r3, [pc, #324]	; (80057f4 <xTaskIncrementTick+0x150>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 808d 	bne.w	80057d2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056b8:	4b4f      	ldr	r3, [pc, #316]	; (80057f8 <xTaskIncrementTick+0x154>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056c0:	4a4d      	ldr	r2, [pc, #308]	; (80057f8 <xTaskIncrementTick+0x154>)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d120      	bne.n	800570e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056cc:	4b4b      	ldr	r3, [pc, #300]	; (80057fc <xTaskIncrementTick+0x158>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <xTaskIncrementTick+0x48>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	603b      	str	r3, [r7, #0]
}
 80056e8:	bf00      	nop
 80056ea:	e7fe      	b.n	80056ea <xTaskIncrementTick+0x46>
 80056ec:	4b43      	ldr	r3, [pc, #268]	; (80057fc <xTaskIncrementTick+0x158>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	4b43      	ldr	r3, [pc, #268]	; (8005800 <xTaskIncrementTick+0x15c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a41      	ldr	r2, [pc, #260]	; (80057fc <xTaskIncrementTick+0x158>)
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4a41      	ldr	r2, [pc, #260]	; (8005800 <xTaskIncrementTick+0x15c>)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	4b40      	ldr	r3, [pc, #256]	; (8005804 <xTaskIncrementTick+0x160>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	4a3f      	ldr	r2, [pc, #252]	; (8005804 <xTaskIncrementTick+0x160>)
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	f000 fb3b 	bl	8005d84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800570e:	4b3e      	ldr	r3, [pc, #248]	; (8005808 <xTaskIncrementTick+0x164>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	d34d      	bcc.n	80057b4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005718:	4b38      	ldr	r3, [pc, #224]	; (80057fc <xTaskIncrementTick+0x158>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <xTaskIncrementTick+0x82>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <xTaskIncrementTick+0x84>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <xTaskIncrementTick+0x164>)
 800572e:	f04f 32ff 	mov.w	r2, #4294967295
 8005732:	601a      	str	r2, [r3, #0]
					break;
 8005734:	e03e      	b.n	80057b4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005736:	4b31      	ldr	r3, [pc, #196]	; (80057fc <xTaskIncrementTick+0x158>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	429a      	cmp	r2, r3
 800574c:	d203      	bcs.n	8005756 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800574e:	4a2e      	ldr	r2, [pc, #184]	; (8005808 <xTaskIncrementTick+0x164>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6013      	str	r3, [r2, #0]
						break;
 8005754:	e02e      	b.n	80057b4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	3304      	adds	r3, #4
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe ff88 	bl	8004670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	3318      	adds	r3, #24
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe ff7f 	bl	8004670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	2201      	movs	r2, #1
 8005778:	409a      	lsls	r2, r3
 800577a:	4b24      	ldr	r3, [pc, #144]	; (800580c <xTaskIncrementTick+0x168>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4313      	orrs	r3, r2
 8005780:	4a22      	ldr	r2, [pc, #136]	; (800580c <xTaskIncrementTick+0x168>)
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4a1f      	ldr	r2, [pc, #124]	; (8005810 <xTaskIncrementTick+0x16c>)
 8005792:	441a      	add	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f7fe ff0d 	bl	80045ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <xTaskIncrementTick+0x170>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3b4      	bcc.n	8005718 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b2:	e7b1      	b.n	8005718 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057b4:	4b17      	ldr	r3, [pc, #92]	; (8005814 <xTaskIncrementTick+0x170>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ba:	4915      	ldr	r1, [pc, #84]	; (8005810 <xTaskIncrementTick+0x16c>)
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d907      	bls.n	80057dc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e004      	b.n	80057dc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <xTaskIncrementTick+0x174>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	4a0f      	ldr	r2, [pc, #60]	; (8005818 <xTaskIncrementTick+0x174>)
 80057da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057dc:	4b0f      	ldr	r3, [pc, #60]	; (800581c <xTaskIncrementTick+0x178>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057e8:	697b      	ldr	r3, [r7, #20]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	200009e8 	.word	0x200009e8
 80057f8:	200009c4 	.word	0x200009c4
 80057fc:	20000978 	.word	0x20000978
 8005800:	2000097c 	.word	0x2000097c
 8005804:	200009d8 	.word	0x200009d8
 8005808:	200009e0 	.word	0x200009e0
 800580c:	200009c8 	.word	0x200009c8
 8005810:	200008c4 	.word	0x200008c4
 8005814:	200008c0 	.word	0x200008c0
 8005818:	200009d0 	.word	0x200009d0
 800581c:	200009d4 	.word	0x200009d4

08005820 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8005830:	4b08      	ldr	r3, [pc, #32]	; (8005854 <vTaskSetApplicationTaskTag+0x34>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e001      	b.n	800583c <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 800583c:	f000 fdce 	bl	80063dc <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
		taskEXIT_CRITICAL();
 8005846:	f000 fdf9 	bl	800643c <vPortExitCritical>
	}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	200008c0 	.word	0x200008c0

08005858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800585e:	4b43      	ldr	r3, [pc, #268]	; (800596c <vTaskSwitchContext+0x114>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005866:	4b42      	ldr	r3, [pc, #264]	; (8005970 <vTaskSwitchContext+0x118>)
 8005868:	2201      	movs	r2, #1
 800586a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800586c:	e07a      	b.n	8005964 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 800586e:	4b40      	ldr	r3, [pc, #256]	; (8005970 <vTaskSwitchContext+0x118>)
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8005874:	4b3f      	ldr	r3, [pc, #252]	; (8005974 <vTaskSwitchContext+0x11c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587a:	4618      	mov	r0, r3
 800587c:	f7fa fd16 	bl	80002ac <trace_off>
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005880:	f7fa fc6c 	bl	800015c <getRunTimeCounterValue>
 8005884:	4603      	mov	r3, r0
 8005886:	4a3c      	ldr	r2, [pc, #240]	; (8005978 <vTaskSwitchContext+0x120>)
 8005888:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800588a:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <vTaskSwitchContext+0x120>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b3b      	ldr	r3, [pc, #236]	; (800597c <vTaskSwitchContext+0x124>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d909      	bls.n	80058aa <vTaskSwitchContext+0x52>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005896:	4b37      	ldr	r3, [pc, #220]	; (8005974 <vTaskSwitchContext+0x11c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800589c:	4a36      	ldr	r2, [pc, #216]	; (8005978 <vTaskSwitchContext+0x120>)
 800589e:	6810      	ldr	r0, [r2, #0]
 80058a0:	4a36      	ldr	r2, [pc, #216]	; (800597c <vTaskSwitchContext+0x124>)
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	1a82      	subs	r2, r0, r2
 80058a6:	440a      	add	r2, r1
 80058a8:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80058aa:	4b33      	ldr	r3, [pc, #204]	; (8005978 <vTaskSwitchContext+0x120>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a33      	ldr	r2, [pc, #204]	; (800597c <vTaskSwitchContext+0x124>)
 80058b0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80058b2:	4b30      	ldr	r3, [pc, #192]	; (8005974 <vTaskSwitchContext+0x11c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4b2e      	ldr	r3, [pc, #184]	; (8005974 <vTaskSwitchContext+0x11c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	429a      	cmp	r2, r3
 80058c0:	d808      	bhi.n	80058d4 <vTaskSwitchContext+0x7c>
 80058c2:	4b2c      	ldr	r3, [pc, #176]	; (8005974 <vTaskSwitchContext+0x11c>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <vTaskSwitchContext+0x11c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3334      	adds	r3, #52	; 0x34
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7fa fc4b 	bl	800016a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058d4:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <vTaskSwitchContext+0x128>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	fab3 f383 	clz	r3, r3
 80058e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	f1c3 031f 	rsb	r3, r3, #31
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	4926      	ldr	r1, [pc, #152]	; (8005984 <vTaskSwitchContext+0x12c>)
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <vTaskSwitchContext+0xbc>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	607b      	str	r3, [r7, #4]
}
 8005910:	bf00      	nop
 8005912:	e7fe      	b.n	8005912 <vTaskSwitchContext+0xba>
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4a19      	ldr	r2, [pc, #100]	; (8005984 <vTaskSwitchContext+0x12c>)
 8005920:	4413      	add	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3308      	adds	r3, #8
 8005936:	429a      	cmp	r2, r3
 8005938:	d104      	bne.n	8005944 <vTaskSwitchContext+0xec>
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	605a      	str	r2, [r3, #4]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	4a0a      	ldr	r2, [pc, #40]	; (8005974 <vTaskSwitchContext+0x11c>)
 800594c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800594e:	4b09      	ldr	r3, [pc, #36]	; (8005974 <vTaskSwitchContext+0x11c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005954:	4618      	mov	r0, r3
 8005956:	f7fa fc81 	bl	800025c <trace_on>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <vTaskSwitchContext+0x11c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	335c      	adds	r3, #92	; 0x5c
 8005960:	4a09      	ldr	r2, [pc, #36]	; (8005988 <vTaskSwitchContext+0x130>)
 8005962:	6013      	str	r3, [r2, #0]
}
 8005964:	bf00      	nop
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200009e8 	.word	0x200009e8
 8005970:	200009d4 	.word	0x200009d4
 8005974:	200008c0 	.word	0x200008c0
 8005978:	200009f0 	.word	0x200009f0
 800597c:	200009ec 	.word	0x200009ec
 8005980:	200009c8 	.word	0x200009c8
 8005984:	200008c4 	.word	0x200008c4
 8005988:	20000074 	.word	0x20000074

0800598c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	60fb      	str	r3, [r7, #12]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059b2:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <vTaskPlaceOnEventList+0x44>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3318      	adds	r3, #24
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fe fe20 	bl	8004600 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059c0:	2101      	movs	r1, #1
 80059c2:	6838      	ldr	r0, [r7, #0]
 80059c4:	f000 fbb0 	bl	8006128 <prvAddCurrentTaskToDelayedList>
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	200008c0 	.word	0x200008c0

080059d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	60fb      	str	r3, [r7, #12]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	3318      	adds	r3, #24
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe fe33 	bl	8004670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <xTaskRemoveFromEventList+0xac>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d11c      	bne.n	8005a4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe fe2a 	bl	8004670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	2201      	movs	r2, #1
 8005a22:	409a      	lsls	r2, r3
 8005a24:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <xTaskRemoveFromEventList+0xb0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	4a16      	ldr	r2, [pc, #88]	; (8005a84 <xTaskRemoveFromEventList+0xb0>)
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4a13      	ldr	r2, [pc, #76]	; (8005a88 <xTaskRemoveFromEventList+0xb4>)
 8005a3c:	441a      	add	r2, r3
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f7fe fdb8 	bl	80045ba <vListInsertEnd>
 8005a4a:	e005      	b.n	8005a58 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	3318      	adds	r3, #24
 8005a50:	4619      	mov	r1, r3
 8005a52:	480e      	ldr	r0, [pc, #56]	; (8005a8c <xTaskRemoveFromEventList+0xb8>)
 8005a54:	f7fe fdb1 	bl	80045ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <xTaskRemoveFromEventList+0xbc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d905      	bls.n	8005a72 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a66:	2301      	movs	r3, #1
 8005a68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a6a:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <xTaskRemoveFromEventList+0xc0>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	e001      	b.n	8005a76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a76:	697b      	ldr	r3, [r7, #20]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	200009e8 	.word	0x200009e8
 8005a84:	200009c8 	.word	0x200009c8
 8005a88:	200008c4 	.word	0x200008c4
 8005a8c:	20000980 	.word	0x20000980
 8005a90:	200008c0 	.word	0x200008c0
 8005a94:	200009d4 	.word	0x200009d4

08005a98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <vTaskInternalSetTimeOutState+0x24>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <vTaskInternalSetTimeOutState+0x28>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	605a      	str	r2, [r3, #4]
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	200009d8 	.word	0x200009d8
 8005ac0:	200009c4 	.word	0x200009c4

08005ac4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	613b      	str	r3, [r7, #16]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b06:	f000 fc69 	bl	80063dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <xTaskCheckForTimeOut+0xbc>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d102      	bne.n	8005b2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	e023      	b.n	8005b72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <xTaskCheckForTimeOut+0xc0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d007      	beq.n	8005b46 <xTaskCheckForTimeOut+0x82>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e015      	b.n	8005b72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d20b      	bcs.n	8005b68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	1ad2      	subs	r2, r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ff9b 	bl	8005a98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e004      	b.n	8005b72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b72:	f000 fc63 	bl	800643c <vPortExitCritical>

	return xReturn;
 8005b76:	69fb      	ldr	r3, [r7, #28]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	200009c4 	.word	0x200009c4
 8005b84:	200009d8 	.word	0x200009d8

08005b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <vTaskMissedYield+0x14>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	200009d4 	.word	0x200009d4

08005ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ba8:	f000 f852 	bl	8005c50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <prvIdleTask+0x28>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d9f9      	bls.n	8005ba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <prvIdleTask+0x2c>)
 8005bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bc4:	e7f0      	b.n	8005ba8 <prvIdleTask+0x8>
 8005bc6:	bf00      	nop
 8005bc8:	200008c4 	.word	0x200008c4
 8005bcc:	e000ed04 	.word	0xe000ed04

08005bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	e00c      	b.n	8005bf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <prvInitialiseTaskLists+0x60>)
 8005be8:	4413      	add	r3, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fcba 	bl	8004564 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b06      	cmp	r3, #6
 8005bfa:	d9ef      	bls.n	8005bdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bfc:	480d      	ldr	r0, [pc, #52]	; (8005c34 <prvInitialiseTaskLists+0x64>)
 8005bfe:	f7fe fcb1 	bl	8004564 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c02:	480d      	ldr	r0, [pc, #52]	; (8005c38 <prvInitialiseTaskLists+0x68>)
 8005c04:	f7fe fcae 	bl	8004564 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c08:	480c      	ldr	r0, [pc, #48]	; (8005c3c <prvInitialiseTaskLists+0x6c>)
 8005c0a:	f7fe fcab 	bl	8004564 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c0e:	480c      	ldr	r0, [pc, #48]	; (8005c40 <prvInitialiseTaskLists+0x70>)
 8005c10:	f7fe fca8 	bl	8004564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c14:	480b      	ldr	r0, [pc, #44]	; (8005c44 <prvInitialiseTaskLists+0x74>)
 8005c16:	f7fe fca5 	bl	8004564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <prvInitialiseTaskLists+0x78>)
 8005c1c:	4a05      	ldr	r2, [pc, #20]	; (8005c34 <prvInitialiseTaskLists+0x64>)
 8005c1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <prvInitialiseTaskLists+0x7c>)
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <prvInitialiseTaskLists+0x68>)
 8005c24:	601a      	str	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200008c4 	.word	0x200008c4
 8005c34:	20000950 	.word	0x20000950
 8005c38:	20000964 	.word	0x20000964
 8005c3c:	20000980 	.word	0x20000980
 8005c40:	20000994 	.word	0x20000994
 8005c44:	200009ac 	.word	0x200009ac
 8005c48:	20000978 	.word	0x20000978
 8005c4c:	2000097c 	.word	0x2000097c

08005c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c56:	e019      	b.n	8005c8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c58:	f000 fbc0 	bl	80063dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c5c:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <prvCheckTasksWaitingTermination+0x50>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fe fd01 	bl	8004670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <prvCheckTasksWaitingTermination+0x54>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	4a0b      	ldr	r2, [pc, #44]	; (8005ca4 <prvCheckTasksWaitingTermination+0x54>)
 8005c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c78:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <prvCheckTasksWaitingTermination+0x58>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ca8 <prvCheckTasksWaitingTermination+0x58>)
 8005c80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c82:	f000 fbdb 	bl	800643c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f848 	bl	8005d1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <prvCheckTasksWaitingTermination+0x58>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e1      	bne.n	8005c58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000994 	.word	0x20000994
 8005ca4:	200009c0 	.word	0x200009c0
 8005ca8:	200009a8 	.word	0x200009a8

08005cac <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005cb8:	e005      	b.n	8005cc6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2ba5      	cmp	r3, #165	; 0xa5
 8005ccc:	d0f5      	beq.n	8005cba <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	089b      	lsrs	r3, r3, #2
 8005cd2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	b29b      	uxth	r3, r3
	}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
	...

08005ce4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <uxTaskGetStackHighWaterMark+0x14>
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <uxTaskGetStackHighWaterMark+0x34>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	e000      	b.n	8005cfa <uxTaskGetStackHighWaterMark+0x16>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005d02:	6938      	ldr	r0, [r7, #16]
 8005d04:	f7ff ffd2 	bl	8005cac <prvTaskCheckFreeStackSpace>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200008c0 	.word	0x200008c0

08005d1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	335c      	adds	r3, #92	; 0x5c
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 f817 	bl	8006d5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d108      	bne.n	8005d4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fcd9 	bl	80066f4 <vPortFree>
				vPortFree( pxTCB );
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fcd6 	bl	80066f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d48:	e018      	b.n	8005d7c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d103      	bne.n	8005d5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fccd 	bl	80066f4 <vPortFree>
	}
 8005d5a:	e00f      	b.n	8005d7c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d00a      	beq.n	8005d7c <prvDeleteTCB+0x60>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	60fb      	str	r3, [r7, #12]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <prvDeleteTCB+0x5e>
	}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d8a:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <prvResetNextTaskUnblockTime+0x40>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <prvResetNextTaskUnblockTime+0x14>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <prvResetNextTaskUnblockTime+0x16>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d004      	beq.n	8005da8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <prvResetNextTaskUnblockTime+0x44>)
 8005da0:	f04f 32ff 	mov.w	r2, #4294967295
 8005da4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005da6:	e008      	b.n	8005dba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <prvResetNextTaskUnblockTime+0x40>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	4a04      	ldr	r2, [pc, #16]	; (8005dc8 <prvResetNextTaskUnblockTime+0x44>)
 8005db8:	6013      	str	r3, [r2, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr
 8005dc4:	20000978 	.word	0x20000978
 8005dc8:	200009e0 	.word	0x200009e0

08005dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <xTaskGetSchedulerState+0x34>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	e008      	b.n	8005df2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de0:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <xTaskGetSchedulerState+0x38>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005de8:	2302      	movs	r3, #2
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	e001      	b.n	8005df2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dee:	2300      	movs	r3, #0
 8005df0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005df2:	687b      	ldr	r3, [r7, #4]
	}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	200009cc 	.word	0x200009cc
 8005e04:	200009e8 	.word	0x200009e8

08005e08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d06e      	beq.n	8005efc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e1e:	4b3a      	ldr	r3, [pc, #232]	; (8005f08 <xTaskPriorityDisinherit+0x100>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d00a      	beq.n	8005e3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	60fb      	str	r3, [r7, #12]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60bb      	str	r3, [r7, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e60:	1e5a      	subs	r2, r3, #1
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d044      	beq.n	8005efc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d140      	bne.n	8005efc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe fbf6 	bl	8004670 <uxListRemove>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d115      	bne.n	8005eb6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8e:	491f      	ldr	r1, [pc, #124]	; (8005f0c <xTaskPriorityDisinherit+0x104>)
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <xTaskPriorityDisinherit+0xae>
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43da      	mvns	r2, r3
 8005eac:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <xTaskPriorityDisinherit+0x108>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	4a17      	ldr	r2, [pc, #92]	; (8005f10 <xTaskPriorityDisinherit+0x108>)
 8005eb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	f1c3 0207 	rsb	r2, r3, #7
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	2201      	movs	r2, #1
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <xTaskPriorityDisinherit+0x108>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	4a0d      	ldr	r2, [pc, #52]	; (8005f10 <xTaskPriorityDisinherit+0x108>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <xTaskPriorityDisinherit+0x104>)
 8005eea:	441a      	add	r2, r3
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f7fe fb61 	bl	80045ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005efc:	697b      	ldr	r3, [r7, #20]
	}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200008c0 	.word	0x200008c0
 8005f0c:	200008c4 	.word	0x200008c4
 8005f10:	200009c8 	.word	0x200009c8

08005f14 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005f22:	f000 fa5b 	bl	80063dc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005f26:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <xTaskNotifyWait+0xb8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d01c      	beq.n	8005f6e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005f34:	4b25      	ldr	r3, [pc, #148]	; (8005fcc <xTaskNotifyWait+0xb8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	43d2      	mvns	r2, r2
 8005f40:	400a      	ands	r2, r1
 8005f42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005f46:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <xTaskNotifyWait+0xb8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f56:	2101      	movs	r1, #1
 8005f58:	6838      	ldr	r0, [r7, #0]
 8005f5a:	f000 f8e5 	bl	8006128 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005f5e:	4b1c      	ldr	r3, [pc, #112]	; (8005fd0 <xTaskNotifyWait+0xbc>)
 8005f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005f6e:	f000 fa65 	bl	800643c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005f72:	f000 fa33 	bl	80063dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <xTaskNotifyWait+0xb8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005f88:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <xTaskNotifyWait+0xb8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d002      	beq.n	8005f9c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e00a      	b.n	8005fb2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <xTaskNotifyWait+0xb8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	43d2      	mvns	r2, r2
 8005fa8:	400a      	ands	r2, r1
 8005faa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				xReturn = pdTRUE;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fb2:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <xTaskNotifyWait+0xb8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 8005fbc:	f000 fa3e 	bl	800643c <vPortExitCritical>

		return xReturn;
 8005fc0:	697b      	ldr	r3, [r7, #20]
	}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	200008c0 	.word	0x200008c0
 8005fd0:	e000ed04 	.word	0xe000ed04

08005fd4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <xTaskGenericNotify+0x30>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	61bb      	str	r3, [r7, #24]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006008:	f000 f9e8 	bl	80063dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006022:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	2b04      	cmp	r3, #4
 8006030:	d82d      	bhi.n	800608e <xTaskGenericNotify+0xba>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <xTaskGenericNotify+0x64>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	0800608f 	.word	0x0800608f
 800603c:	0800604d 	.word	0x0800604d
 8006040:	0800605f 	.word	0x0800605f
 8006044:	0800606f 	.word	0x0800606f
 8006048:	08006079 	.word	0x08006079
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	431a      	orrs	r2, r3
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800605c:	e017      	b.n	800608e <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800606c:	e00f      	b.n	800608e <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006076:	e00a      	b.n	800608e <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006078:	7ffb      	ldrb	r3, [r7, #31]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d004      	beq.n	8006088 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006086:	e001      	b.n	800608c <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8006088:	2300      	movs	r3, #0
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800608c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800608e:	7ffb      	ldrb	r3, [r7, #31]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d139      	bne.n	8006108 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	3304      	adds	r3, #4
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fae9 	bl	8004670 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	2201      	movs	r2, #1
 80060a4:	409a      	lsls	r2, r3
 80060a6:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <xTaskGenericNotify+0x144>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	4a1a      	ldr	r2, [pc, #104]	; (8006118 <xTaskGenericNotify+0x144>)
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4a17      	ldr	r2, [pc, #92]	; (800611c <xTaskGenericNotify+0x148>)
 80060be:	441a      	add	r2, r3
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7fe fa77 	bl	80045ba <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <xTaskGenericNotify+0x116>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	617b      	str	r3, [r7, #20]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <xTaskGenericNotify+0x14c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d907      	bls.n	8006108 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <xTaskGenericNotify+0x150>)
 80060fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006108:	f000 f998 	bl	800643c <vPortExitCritical>

		return xReturn;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800610e:	4618      	mov	r0, r3
 8006110:	3728      	adds	r7, #40	; 0x28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	200009c8 	.word	0x200009c8
 800611c:	200008c4 	.word	0x200008c4
 8006120:	200008c0 	.word	0x200008c0
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006132:	4b29      	ldr	r3, [pc, #164]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006138:	4b28      	ldr	r3, [pc, #160]	; (80061dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3304      	adds	r3, #4
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe fa96 	bl	8004670 <uxListRemove>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10b      	bne.n	8006162 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800614a:	4b24      	ldr	r3, [pc, #144]	; (80061dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	2201      	movs	r2, #1
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	43da      	mvns	r2, r3
 8006158:	4b21      	ldr	r3, [pc, #132]	; (80061e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4013      	ands	r3, r2
 800615e:	4a20      	ldr	r2, [pc, #128]	; (80061e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006160:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d10a      	bne.n	8006180 <prvAddCurrentTaskToDelayedList+0x58>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d007      	beq.n	8006180 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006170:	4b1a      	ldr	r3, [pc, #104]	; (80061dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3304      	adds	r3, #4
 8006176:	4619      	mov	r1, r3
 8006178:	481a      	ldr	r0, [pc, #104]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800617a:	f7fe fa1e 	bl	80045ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800617e:	e026      	b.n	80061ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006188:	4b14      	ldr	r3, [pc, #80]	; (80061dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d209      	bcs.n	80061ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006198:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f7fe fa2b 	bl	8004600 <vListInsert>
}
 80061aa:	e010      	b.n	80061ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4619      	mov	r1, r3
 80061b8:	4610      	mov	r0, r2
 80061ba:	f7fe fa21 	bl	8004600 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061be:	4b0c      	ldr	r3, [pc, #48]	; (80061f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d202      	bcs.n	80061ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061c8:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6013      	str	r3, [r2, #0]
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200009c4 	.word	0x200009c4
 80061dc:	200008c0 	.word	0x200008c0
 80061e0:	200009c8 	.word	0x200009c8
 80061e4:	200009ac 	.word	0x200009ac
 80061e8:	2000097c 	.word	0x2000097c
 80061ec:	20000978 	.word	0x20000978
 80061f0:	200009e0 	.word	0x200009e0

080061f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3b04      	subs	r3, #4
 8006204:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800620c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3b04      	subs	r3, #4
 8006212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b04      	subs	r3, #4
 8006222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006224:	4a08      	ldr	r2, [pc, #32]	; (8006248 <pxPortInitialiseStack+0x54>)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b14      	subs	r3, #20
 800622e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3b20      	subs	r3, #32
 800623a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800623c:	68fb      	ldr	r3, [r7, #12]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr
 8006248:	0800624d 	.word	0x0800624d

0800624c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006252:	2300      	movs	r3, #0
 8006254:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006256:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <prvTaskExitError+0x54>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625e:	d00a      	beq.n	8006276 <prvTaskExitError+0x2a>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	60fb      	str	r3, [r7, #12]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <prvTaskExitError+0x28>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	60bb      	str	r3, [r7, #8]
}
 8006288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800628a:	bf00      	nop
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0fc      	beq.n	800628c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000018 	.word	0x20000018
	...

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80062ce:	4770      	bx	lr

080062d0 <pxCurrentTCBConst2>:
 80062d0:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80062d8:	4806      	ldr	r0, [pc, #24]	; (80062f4 <prvPortStartFirstTask+0x1c>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	b662      	cpsie	i
 80062e4:	b661      	cpsie	f
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	df00      	svc	0
 80062f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062f2:	bf00      	nop
 80062f4:	e000ed08 	.word	0xe000ed08

080062f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062fe:	4b32      	ldr	r3, [pc, #200]	; (80063c8 <xPortStartScheduler+0xd0>)
 8006300:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	; 0xff
 800630e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006320:	b2da      	uxtb	r2, r3
 8006322:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <xPortStartScheduler+0xd4>)
 8006324:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006326:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006328:	2207      	movs	r2, #7
 800632a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800632c:	e009      	b.n	8006342 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800632e:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3b01      	subs	r3, #1
 8006334:	4a26      	ldr	r2, [pc, #152]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006336:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	d0ef      	beq.n	800632e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800634e:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1c3 0307 	rsb	r3, r3, #7
 8006356:	2b04      	cmp	r3, #4
 8006358:	d00a      	beq.n	8006370 <xPortStartScheduler+0x78>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	60bb      	str	r3, [r7, #8]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006370:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006378:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800637a:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <xPortStartScheduler+0xd8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006382:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006384:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <xPortStartScheduler+0xdc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <xPortStartScheduler+0xdc>)
 8006394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800639a:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <xPortStartScheduler+0xdc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <xPortStartScheduler+0xdc>)
 80063a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063a6:	f000 f8b9 	bl	800651c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <xPortStartScheduler+0xe0>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063b0:	f7ff ff92 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063b4:	f7ff fa50 	bl	8005858 <vTaskSwitchContext>
	prvTaskExitError();
 80063b8:	f7ff ff48 	bl	800624c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	e000e400 	.word	0xe000e400
 80063cc:	200009f4 	.word	0x200009f4
 80063d0:	200009f8 	.word	0x200009f8
 80063d4:	e000ed20 	.word	0xe000ed20
 80063d8:	20000018 	.word	0x20000018

080063dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	607b      	str	r3, [r7, #4]
}
 80063f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063f6:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <vPortEnterCritical+0x58>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3301      	adds	r3, #1
 80063fc:	4a0d      	ldr	r2, [pc, #52]	; (8006434 <vPortEnterCritical+0x58>)
 80063fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <vPortEnterCritical+0x58>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d10f      	bne.n	8006428 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <vPortEnterCritical+0x5c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <vPortEnterCritical+0x4c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	603b      	str	r3, [r7, #0]
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <vPortEnterCritical+0x4a>
	}
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000018 	.word	0x20000018
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006442:	4b11      	ldr	r3, [pc, #68]	; (8006488 <vPortExitCritical+0x4c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <vPortExitCritical+0x24>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <vPortExitCritical+0x4c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3b01      	subs	r3, #1
 8006466:	4a08      	ldr	r2, [pc, #32]	; (8006488 <vPortExitCritical+0x4c>)
 8006468:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <vPortExitCritical+0x4c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d105      	bne.n	800647e <vPortExitCritical+0x42>
 8006472:	2300      	movs	r3, #0
 8006474:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800647c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	20000018 	.word	0x20000018
 800648c:	00000000 	.word	0x00000000

08006490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006490:	f3ef 8009 	mrs	r0, PSP
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <pxCurrentTCBConst>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064a0:	6010      	str	r0, [r2, #0]
 80064a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80064a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064aa:	f380 8811 	msr	BASEPRI, r0
 80064ae:	f7ff f9d3 	bl	8005858 <vTaskSwitchContext>
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8811 	msr	BASEPRI, r0
 80064ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	6808      	ldr	r0, [r1, #0]
 80064c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064c6:	f380 8809 	msr	PSP, r0
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	4770      	bx	lr

080064d0 <pxCurrentTCBConst>:
 80064d0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop

080064d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	607b      	str	r3, [r7, #4]
}
 80064f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064f2:	f7ff f8d7 	bl	80056a4 <xTaskIncrementTick>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <SysTick_Handler+0x40>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f383 8811 	msr	BASEPRI, r3
}
 800650e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <vPortSetupTimerInterrupt+0x30>)
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <vPortSetupTimerInterrupt+0x34>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800652c:	4b09      	ldr	r3, [pc, #36]	; (8006554 <vPortSetupTimerInterrupt+0x38>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a09      	ldr	r2, [pc, #36]	; (8006558 <vPortSetupTimerInterrupt+0x3c>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	099b      	lsrs	r3, r3, #6
 8006538:	4a08      	ldr	r2, [pc, #32]	; (800655c <vPortSetupTimerInterrupt+0x40>)
 800653a:	3b01      	subs	r3, #1
 800653c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <vPortSetupTimerInterrupt+0x30>)
 8006540:	2207      	movs	r2, #7
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	bf00      	nop
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr
 800654c:	e000e010 	.word	0xe000e010
 8006550:	e000e018 	.word	0xe000e018
 8006554:	20000004 	.word	0x20000004
 8006558:	10624dd3 	.word	0x10624dd3
 800655c:	e000e014 	.word	0xe000e014

08006560 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800656c:	f7fe ffe2 	bl	8005534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006570:	4b5b      	ldr	r3, [pc, #364]	; (80066e0 <pvPortMalloc+0x180>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006578:	f000 f916 	bl	80067a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800657c:	4b59      	ldr	r3, [pc, #356]	; (80066e4 <pvPortMalloc+0x184>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 808e 	bne.w	80066a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01d      	beq.n	80065cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006590:	2208      	movs	r2, #8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d014      	beq.n	80065cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f023 0307 	bic.w	r3, r3, #7
 80065a8:	3308      	adds	r3, #8
 80065aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <pvPortMalloc+0x6c>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	617b      	str	r3, [r7, #20]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d069      	beq.n	80066a6 <pvPortMalloc+0x146>
 80065d2:	4b45      	ldr	r3, [pc, #276]	; (80066e8 <pvPortMalloc+0x188>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d864      	bhi.n	80066a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065dc:	4b43      	ldr	r3, [pc, #268]	; (80066ec <pvPortMalloc+0x18c>)
 80065de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065e0:	4b42      	ldr	r3, [pc, #264]	; (80066ec <pvPortMalloc+0x18c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065e6:	e004      	b.n	80065f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d903      	bls.n	8006604 <pvPortMalloc+0xa4>
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f1      	bne.n	80065e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006604:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <pvPortMalloc+0x180>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	429a      	cmp	r2, r3
 800660c:	d04b      	beq.n	80066a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2208      	movs	r2, #8
 8006614:	4413      	add	r3, r2
 8006616:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	2308      	movs	r3, #8
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	429a      	cmp	r2, r3
 800662e:	d91f      	bls.n	8006670 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4413      	add	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <pvPortMalloc+0xf8>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	613b      	str	r3, [r7, #16]
}
 8006654:	bf00      	nop
 8006656:	e7fe      	b.n	8006656 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800666a:	69b8      	ldr	r0, [r7, #24]
 800666c:	f000 f8fe 	bl	800686c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006670:	4b1d      	ldr	r3, [pc, #116]	; (80066e8 <pvPortMalloc+0x188>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	4a1b      	ldr	r2, [pc, #108]	; (80066e8 <pvPortMalloc+0x188>)
 800667c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800667e:	4b1a      	ldr	r3, [pc, #104]	; (80066e8 <pvPortMalloc+0x188>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <pvPortMalloc+0x190>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d203      	bcs.n	8006692 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800668a:	4b17      	ldr	r3, [pc, #92]	; (80066e8 <pvPortMalloc+0x188>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <pvPortMalloc+0x190>)
 8006690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <pvPortMalloc+0x184>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	431a      	orrs	r2, r3
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066a6:	f7fe ff53 	bl	8005550 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80066b0:	f7f9 fd65 	bl	800017e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <pvPortMalloc+0x174>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	60fb      	str	r3, [r7, #12]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <pvPortMalloc+0x172>
	return pvReturn;
 80066d4:	69fb      	ldr	r3, [r7, #28]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3728      	adds	r7, #40	; 0x28
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20001604 	.word	0x20001604
 80066e4:	20001610 	.word	0x20001610
 80066e8:	20001608 	.word	0x20001608
 80066ec:	200015fc 	.word	0x200015fc
 80066f0:	2000160c 	.word	0x2000160c

080066f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d048      	beq.n	8006798 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006706:	2308      	movs	r3, #8
 8006708:	425b      	negs	r3, r3
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4413      	add	r3, r2
 800670e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	4b21      	ldr	r3, [pc, #132]	; (80067a0 <vPortFree+0xac>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <vPortFree+0x44>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	60fb      	str	r3, [r7, #12]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <vPortFree+0x62>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60bb      	str	r3, [r7, #8]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	4b11      	ldr	r3, [pc, #68]	; (80067a0 <vPortFree+0xac>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d019      	beq.n	8006798 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d115      	bne.n	8006798 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <vPortFree+0xac>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	43db      	mvns	r3, r3
 8006776:	401a      	ands	r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800677c:	f7fe feda 	bl	8005534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <vPortFree+0xb0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4413      	add	r3, r2
 800678a:	4a06      	ldr	r2, [pc, #24]	; (80067a4 <vPortFree+0xb0>)
 800678c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800678e:	6938      	ldr	r0, [r7, #16]
 8006790:	f000 f86c 	bl	800686c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006794:	f7fe fedc 	bl	8005550 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006798:	bf00      	nop
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20001610 	.word	0x20001610
 80067a4:	20001608 	.word	0x20001608

080067a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80067b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067b4:	4b27      	ldr	r3, [pc, #156]	; (8006854 <prvHeapInit+0xac>)
 80067b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00c      	beq.n	80067dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3307      	adds	r3, #7
 80067c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0307 	bic.w	r3, r3, #7
 80067ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <prvHeapInit+0xac>)
 80067d8:	4413      	add	r3, r2
 80067da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067e0:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <prvHeapInit+0xb0>)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067e6:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <prvHeapInit+0xb0>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	4413      	add	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067f4:	2208      	movs	r2, #8
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0307 	bic.w	r3, r3, #7
 8006802:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4a15      	ldr	r2, [pc, #84]	; (800685c <prvHeapInit+0xb4>)
 8006808:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800680a:	4b14      	ldr	r3, [pc, #80]	; (800685c <prvHeapInit+0xb4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2200      	movs	r2, #0
 8006810:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <prvHeapInit+0xb4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	1ad2      	subs	r2, r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006828:	4b0c      	ldr	r3, [pc, #48]	; (800685c <prvHeapInit+0xb4>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <prvHeapInit+0xb8>)
 8006836:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4a09      	ldr	r2, [pc, #36]	; (8006864 <prvHeapInit+0xbc>)
 800683e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <prvHeapInit+0xc0>)
 8006842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006846:	601a      	str	r2, [r3, #0]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	200009fc 	.word	0x200009fc
 8006858:	200015fc 	.word	0x200015fc
 800685c:	20001604 	.word	0x20001604
 8006860:	2000160c 	.word	0x2000160c
 8006864:	20001608 	.word	0x20001608
 8006868:	20001610 	.word	0x20001610

0800686c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006874:	4b27      	ldr	r3, [pc, #156]	; (8006914 <prvInsertBlockIntoFreeList+0xa8>)
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e002      	b.n	8006880 <prvInsertBlockIntoFreeList+0x14>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	429a      	cmp	r2, r3
 8006888:	d8f7      	bhi.n	800687a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	4413      	add	r3, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	429a      	cmp	r2, r3
 800689a:	d108      	bne.n	80068ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	441a      	add	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	441a      	add	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d118      	bne.n	80068f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <prvInsertBlockIntoFreeList+0xac>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d00d      	beq.n	80068ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	441a      	add	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	e008      	b.n	80068fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068ea:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <prvInsertBlockIntoFreeList+0xac>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e003      	b.n	80068fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d002      	beq.n	800690a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr
 8006914:	200015fc 	.word	0x200015fc
 8006918:	20001604 	.word	0x20001604

0800691c <std>:
 800691c:	2300      	movs	r3, #0
 800691e:	b510      	push	{r4, lr}
 8006920:	4604      	mov	r4, r0
 8006922:	e9c0 3300 	strd	r3, r3, [r0]
 8006926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800692a:	6083      	str	r3, [r0, #8]
 800692c:	8181      	strh	r1, [r0, #12]
 800692e:	6643      	str	r3, [r0, #100]	; 0x64
 8006930:	81c2      	strh	r2, [r0, #14]
 8006932:	6183      	str	r3, [r0, #24]
 8006934:	4619      	mov	r1, r3
 8006936:	2208      	movs	r2, #8
 8006938:	305c      	adds	r0, #92	; 0x5c
 800693a:	f000 f9f7 	bl	8006d2c <memset>
 800693e:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <std+0x58>)
 8006940:	6224      	str	r4, [r4, #32]
 8006942:	6263      	str	r3, [r4, #36]	; 0x24
 8006944:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <std+0x5c>)
 8006946:	62a3      	str	r3, [r4, #40]	; 0x28
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <std+0x60>)
 800694a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <std+0x64>)
 800694e:	6323      	str	r3, [r4, #48]	; 0x30
 8006950:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <std+0x68>)
 8006952:	429c      	cmp	r4, r3
 8006954:	d006      	beq.n	8006964 <std+0x48>
 8006956:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800695a:	4294      	cmp	r4, r2
 800695c:	d002      	beq.n	8006964 <std+0x48>
 800695e:	33d0      	adds	r3, #208	; 0xd0
 8006960:	429c      	cmp	r4, r3
 8006962:	d105      	bne.n	8006970 <std+0x54>
 8006964:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800696c:	f000 baac 	b.w	8006ec8 <__retarget_lock_init_recursive>
 8006970:	bd10      	pop	{r4, pc}
 8006972:	bf00      	nop
 8006974:	08006b7d 	.word	0x08006b7d
 8006978:	08006b9f 	.word	0x08006b9f
 800697c:	08006bd7 	.word	0x08006bd7
 8006980:	08006bfb 	.word	0x08006bfb
 8006984:	20001614 	.word	0x20001614

08006988 <stdio_exit_handler>:
 8006988:	4a02      	ldr	r2, [pc, #8]	; (8006994 <stdio_exit_handler+0xc>)
 800698a:	4903      	ldr	r1, [pc, #12]	; (8006998 <stdio_exit_handler+0x10>)
 800698c:	4803      	ldr	r0, [pc, #12]	; (800699c <stdio_exit_handler+0x14>)
 800698e:	f000 b869 	b.w	8006a64 <_fwalk_sglue>
 8006992:	bf00      	nop
 8006994:	2000001c 	.word	0x2000001c
 8006998:	08007785 	.word	0x08007785
 800699c:	20000028 	.word	0x20000028

080069a0 <cleanup_stdio>:
 80069a0:	6841      	ldr	r1, [r0, #4]
 80069a2:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <cleanup_stdio+0x34>)
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4299      	cmp	r1, r3
 80069a8:	4604      	mov	r4, r0
 80069aa:	d001      	beq.n	80069b0 <cleanup_stdio+0x10>
 80069ac:	f000 feea 	bl	8007784 <_fflush_r>
 80069b0:	68a1      	ldr	r1, [r4, #8]
 80069b2:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <cleanup_stdio+0x38>)
 80069b4:	4299      	cmp	r1, r3
 80069b6:	d002      	beq.n	80069be <cleanup_stdio+0x1e>
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fee3 	bl	8007784 <_fflush_r>
 80069be:	68e1      	ldr	r1, [r4, #12]
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <cleanup_stdio+0x3c>)
 80069c2:	4299      	cmp	r1, r3
 80069c4:	d004      	beq.n	80069d0 <cleanup_stdio+0x30>
 80069c6:	4620      	mov	r0, r4
 80069c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069cc:	f000 beda 	b.w	8007784 <_fflush_r>
 80069d0:	bd10      	pop	{r4, pc}
 80069d2:	bf00      	nop
 80069d4:	20001614 	.word	0x20001614
 80069d8:	2000167c 	.word	0x2000167c
 80069dc:	200016e4 	.word	0x200016e4

080069e0 <global_stdio_init.part.0>:
 80069e0:	b510      	push	{r4, lr}
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <global_stdio_init.part.0+0x30>)
 80069e4:	4c0b      	ldr	r4, [pc, #44]	; (8006a14 <global_stdio_init.part.0+0x34>)
 80069e6:	4a0c      	ldr	r2, [pc, #48]	; (8006a18 <global_stdio_init.part.0+0x38>)
 80069e8:	4620      	mov	r0, r4
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	2104      	movs	r1, #4
 80069ee:	2200      	movs	r2, #0
 80069f0:	f7ff ff94 	bl	800691c <std>
 80069f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80069f8:	2201      	movs	r2, #1
 80069fa:	2109      	movs	r1, #9
 80069fc:	f7ff ff8e 	bl	800691c <std>
 8006a00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a04:	2202      	movs	r2, #2
 8006a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a0a:	2112      	movs	r1, #18
 8006a0c:	f7ff bf86 	b.w	800691c <std>
 8006a10:	2000174c 	.word	0x2000174c
 8006a14:	20001614 	.word	0x20001614
 8006a18:	08006989 	.word	0x08006989

08006a1c <__sfp_lock_acquire>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	; (8006a24 <__sfp_lock_acquire+0x8>)
 8006a1e:	f000 ba54 	b.w	8006eca <__retarget_lock_acquire_recursive>
 8006a22:	bf00      	nop
 8006a24:	20001755 	.word	0x20001755

08006a28 <__sfp_lock_release>:
 8006a28:	4801      	ldr	r0, [pc, #4]	; (8006a30 <__sfp_lock_release+0x8>)
 8006a2a:	f000 ba4f 	b.w	8006ecc <__retarget_lock_release_recursive>
 8006a2e:	bf00      	nop
 8006a30:	20001755 	.word	0x20001755

08006a34 <__sinit>:
 8006a34:	b510      	push	{r4, lr}
 8006a36:	4604      	mov	r4, r0
 8006a38:	f7ff fff0 	bl	8006a1c <__sfp_lock_acquire>
 8006a3c:	6a23      	ldr	r3, [r4, #32]
 8006a3e:	b11b      	cbz	r3, 8006a48 <__sinit+0x14>
 8006a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a44:	f7ff bff0 	b.w	8006a28 <__sfp_lock_release>
 8006a48:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <__sinit+0x28>)
 8006a4a:	6223      	str	r3, [r4, #32]
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <__sinit+0x2c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1f5      	bne.n	8006a40 <__sinit+0xc>
 8006a54:	f7ff ffc4 	bl	80069e0 <global_stdio_init.part.0>
 8006a58:	e7f2      	b.n	8006a40 <__sinit+0xc>
 8006a5a:	bf00      	nop
 8006a5c:	080069a1 	.word	0x080069a1
 8006a60:	2000174c 	.word	0x2000174c

08006a64 <_fwalk_sglue>:
 8006a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a68:	4607      	mov	r7, r0
 8006a6a:	4688      	mov	r8, r1
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	2600      	movs	r6, #0
 8006a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a74:	f1b9 0901 	subs.w	r9, r9, #1
 8006a78:	d505      	bpl.n	8006a86 <_fwalk_sglue+0x22>
 8006a7a:	6824      	ldr	r4, [r4, #0]
 8006a7c:	2c00      	cmp	r4, #0
 8006a7e:	d1f7      	bne.n	8006a70 <_fwalk_sglue+0xc>
 8006a80:	4630      	mov	r0, r6
 8006a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a86:	89ab      	ldrh	r3, [r5, #12]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d907      	bls.n	8006a9c <_fwalk_sglue+0x38>
 8006a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a90:	3301      	adds	r3, #1
 8006a92:	d003      	beq.n	8006a9c <_fwalk_sglue+0x38>
 8006a94:	4629      	mov	r1, r5
 8006a96:	4638      	mov	r0, r7
 8006a98:	47c0      	blx	r8
 8006a9a:	4306      	orrs	r6, r0
 8006a9c:	3568      	adds	r5, #104	; 0x68
 8006a9e:	e7e9      	b.n	8006a74 <_fwalk_sglue+0x10>

08006aa0 <iprintf>:
 8006aa0:	b40f      	push	{r0, r1, r2, r3}
 8006aa2:	b507      	push	{r0, r1, r2, lr}
 8006aa4:	4906      	ldr	r1, [pc, #24]	; (8006ac0 <iprintf+0x20>)
 8006aa6:	ab04      	add	r3, sp, #16
 8006aa8:	6808      	ldr	r0, [r1, #0]
 8006aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aae:	6881      	ldr	r1, [r0, #8]
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	f000 fb37 	bl	8007124 <_vfiprintf_r>
 8006ab6:	b003      	add	sp, #12
 8006ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006abc:	b004      	add	sp, #16
 8006abe:	4770      	bx	lr
 8006ac0:	20000074 	.word	0x20000074

08006ac4 <_puts_r>:
 8006ac4:	6a03      	ldr	r3, [r0, #32]
 8006ac6:	b570      	push	{r4, r5, r6, lr}
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460e      	mov	r6, r1
 8006acc:	6884      	ldr	r4, [r0, #8]
 8006ace:	b90b      	cbnz	r3, 8006ad4 <_puts_r+0x10>
 8006ad0:	f7ff ffb0 	bl	8006a34 <__sinit>
 8006ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ad6:	07db      	lsls	r3, r3, #31
 8006ad8:	d405      	bmi.n	8006ae6 <_puts_r+0x22>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	0598      	lsls	r0, r3, #22
 8006ade:	d402      	bmi.n	8006ae6 <_puts_r+0x22>
 8006ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae2:	f000 f9f2 	bl	8006eca <__retarget_lock_acquire_recursive>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	0719      	lsls	r1, r3, #28
 8006aea:	d513      	bpl.n	8006b14 <_puts_r+0x50>
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	b18b      	cbz	r3, 8006b14 <_puts_r+0x50>
 8006af0:	3e01      	subs	r6, #1
 8006af2:	68a3      	ldr	r3, [r4, #8]
 8006af4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006af8:	3b01      	subs	r3, #1
 8006afa:	60a3      	str	r3, [r4, #8]
 8006afc:	b9e9      	cbnz	r1, 8006b3a <_puts_r+0x76>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da2e      	bge.n	8006b60 <_puts_r+0x9c>
 8006b02:	4622      	mov	r2, r4
 8006b04:	210a      	movs	r1, #10
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 f87b 	bl	8006c02 <__swbuf_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d007      	beq.n	8006b20 <_puts_r+0x5c>
 8006b10:	250a      	movs	r5, #10
 8006b12:	e007      	b.n	8006b24 <_puts_r+0x60>
 8006b14:	4621      	mov	r1, r4
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 f8b0 	bl	8006c7c <__swsetup_r>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d0e7      	beq.n	8006af0 <_puts_r+0x2c>
 8006b20:	f04f 35ff 	mov.w	r5, #4294967295
 8006b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b26:	07da      	lsls	r2, r3, #31
 8006b28:	d405      	bmi.n	8006b36 <_puts_r+0x72>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	059b      	lsls	r3, r3, #22
 8006b2e:	d402      	bmi.n	8006b36 <_puts_r+0x72>
 8006b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b32:	f000 f9cb 	bl	8006ecc <__retarget_lock_release_recursive>
 8006b36:	4628      	mov	r0, r5
 8006b38:	bd70      	pop	{r4, r5, r6, pc}
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	da04      	bge.n	8006b48 <_puts_r+0x84>
 8006b3e:	69a2      	ldr	r2, [r4, #24]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	dc06      	bgt.n	8006b52 <_puts_r+0x8e>
 8006b44:	290a      	cmp	r1, #10
 8006b46:	d004      	beq.n	8006b52 <_puts_r+0x8e>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	6022      	str	r2, [r4, #0]
 8006b4e:	7019      	strb	r1, [r3, #0]
 8006b50:	e7cf      	b.n	8006af2 <_puts_r+0x2e>
 8006b52:	4622      	mov	r2, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 f854 	bl	8006c02 <__swbuf_r>
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d1c9      	bne.n	8006af2 <_puts_r+0x2e>
 8006b5e:	e7df      	b.n	8006b20 <_puts_r+0x5c>
 8006b60:	250a      	movs	r5, #10
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	701d      	strb	r5, [r3, #0]
 8006b6a:	e7db      	b.n	8006b24 <_puts_r+0x60>

08006b6c <puts>:
 8006b6c:	4b02      	ldr	r3, [pc, #8]	; (8006b78 <puts+0xc>)
 8006b6e:	4601      	mov	r1, r0
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	f7ff bfa7 	b.w	8006ac4 <_puts_r>
 8006b76:	bf00      	nop
 8006b78:	20000074 	.word	0x20000074

08006b7c <__sread>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	460c      	mov	r4, r1
 8006b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b84:	f000 f952 	bl	8006e2c <_read_r>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	bfab      	itete	ge
 8006b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b90:	181b      	addge	r3, r3, r0
 8006b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b96:	bfac      	ite	ge
 8006b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b9a:	81a3      	strhlt	r3, [r4, #12]
 8006b9c:	bd10      	pop	{r4, pc}

08006b9e <__swrite>:
 8006b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba2:	461f      	mov	r7, r3
 8006ba4:	898b      	ldrh	r3, [r1, #12]
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	05db      	lsls	r3, r3, #23
 8006baa:	460c      	mov	r4, r1
 8006bac:	4616      	mov	r6, r2
 8006bae:	d505      	bpl.n	8006bbc <__swrite+0x1e>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb8:	f000 f926 	bl	8006e08 <_lseek_r>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	4632      	mov	r2, r6
 8006bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc4:	81a3      	strh	r3, [r4, #12]
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	463b      	mov	r3, r7
 8006bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd2:	f000 b93d 	b.w	8006e50 <_write_r>

08006bd6 <__sseek>:
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	460c      	mov	r4, r1
 8006bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bde:	f000 f913 	bl	8006e08 <_lseek_r>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	bf15      	itete	ne
 8006be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bf2:	81a3      	strheq	r3, [r4, #12]
 8006bf4:	bf18      	it	ne
 8006bf6:	81a3      	strhne	r3, [r4, #12]
 8006bf8:	bd10      	pop	{r4, pc}

08006bfa <__sclose>:
 8006bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfe:	f000 b89d 	b.w	8006d3c <_close_r>

08006c02 <__swbuf_r>:
 8006c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c04:	460e      	mov	r6, r1
 8006c06:	4614      	mov	r4, r2
 8006c08:	4605      	mov	r5, r0
 8006c0a:	b118      	cbz	r0, 8006c14 <__swbuf_r+0x12>
 8006c0c:	6a03      	ldr	r3, [r0, #32]
 8006c0e:	b90b      	cbnz	r3, 8006c14 <__swbuf_r+0x12>
 8006c10:	f7ff ff10 	bl	8006a34 <__sinit>
 8006c14:	69a3      	ldr	r3, [r4, #24]
 8006c16:	60a3      	str	r3, [r4, #8]
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	071a      	lsls	r2, r3, #28
 8006c1c:	d525      	bpl.n	8006c6a <__swbuf_r+0x68>
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	b31b      	cbz	r3, 8006c6a <__swbuf_r+0x68>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	b2f6      	uxtb	r6, r6
 8006c28:	1a98      	subs	r0, r3, r2
 8006c2a:	6963      	ldr	r3, [r4, #20]
 8006c2c:	4637      	mov	r7, r6
 8006c2e:	4283      	cmp	r3, r0
 8006c30:	dc04      	bgt.n	8006c3c <__swbuf_r+0x3a>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 fda5 	bl	8007784 <_fflush_r>
 8006c3a:	b9e0      	cbnz	r0, 8006c76 <__swbuf_r+0x74>
 8006c3c:	68a3      	ldr	r3, [r4, #8]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	60a3      	str	r3, [r4, #8]
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	6022      	str	r2, [r4, #0]
 8006c48:	701e      	strb	r6, [r3, #0]
 8006c4a:	6962      	ldr	r2, [r4, #20]
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d004      	beq.n	8006c5c <__swbuf_r+0x5a>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	07db      	lsls	r3, r3, #31
 8006c56:	d506      	bpl.n	8006c66 <__swbuf_r+0x64>
 8006c58:	2e0a      	cmp	r6, #10
 8006c5a:	d104      	bne.n	8006c66 <__swbuf_r+0x64>
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fd90 	bl	8007784 <_fflush_r>
 8006c64:	b938      	cbnz	r0, 8006c76 <__swbuf_r+0x74>
 8006c66:	4638      	mov	r0, r7
 8006c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 f805 	bl	8006c7c <__swsetup_r>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d0d5      	beq.n	8006c22 <__swbuf_r+0x20>
 8006c76:	f04f 37ff 	mov.w	r7, #4294967295
 8006c7a:	e7f4      	b.n	8006c66 <__swbuf_r+0x64>

08006c7c <__swsetup_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4b2a      	ldr	r3, [pc, #168]	; (8006d28 <__swsetup_r+0xac>)
 8006c80:	4605      	mov	r5, r0
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	460c      	mov	r4, r1
 8006c86:	b118      	cbz	r0, 8006c90 <__swsetup_r+0x14>
 8006c88:	6a03      	ldr	r3, [r0, #32]
 8006c8a:	b90b      	cbnz	r3, 8006c90 <__swsetup_r+0x14>
 8006c8c:	f7ff fed2 	bl	8006a34 <__sinit>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c96:	0718      	lsls	r0, r3, #28
 8006c98:	d422      	bmi.n	8006ce0 <__swsetup_r+0x64>
 8006c9a:	06d9      	lsls	r1, r3, #27
 8006c9c:	d407      	bmi.n	8006cae <__swsetup_r+0x32>
 8006c9e:	2309      	movs	r3, #9
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	e034      	b.n	8006d18 <__swsetup_r+0x9c>
 8006cae:	0758      	lsls	r0, r3, #29
 8006cb0:	d512      	bpl.n	8006cd8 <__swsetup_r+0x5c>
 8006cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb4:	b141      	cbz	r1, 8006cc8 <__swsetup_r+0x4c>
 8006cb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cba:	4299      	cmp	r1, r3
 8006cbc:	d002      	beq.n	8006cc4 <__swsetup_r+0x48>
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 f914 	bl	8006eec <_free_r>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6363      	str	r3, [r4, #52]	; 0x34
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	6063      	str	r3, [r4, #4]
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f043 0308 	orr.w	r3, r3, #8
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	b94b      	cbnz	r3, 8006cf8 <__swsetup_r+0x7c>
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cee:	d003      	beq.n	8006cf8 <__swsetup_r+0x7c>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 fd93 	bl	800781e <__smakebuf_r>
 8006cf8:	89a0      	ldrh	r0, [r4, #12]
 8006cfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cfe:	f010 0301 	ands.w	r3, r0, #1
 8006d02:	d00a      	beq.n	8006d1a <__swsetup_r+0x9e>
 8006d04:	2300      	movs	r3, #0
 8006d06:	60a3      	str	r3, [r4, #8]
 8006d08:	6963      	ldr	r3, [r4, #20]
 8006d0a:	425b      	negs	r3, r3
 8006d0c:	61a3      	str	r3, [r4, #24]
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	b943      	cbnz	r3, 8006d24 <__swsetup_r+0xa8>
 8006d12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d16:	d1c4      	bne.n	8006ca2 <__swsetup_r+0x26>
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	0781      	lsls	r1, r0, #30
 8006d1c:	bf58      	it	pl
 8006d1e:	6963      	ldrpl	r3, [r4, #20]
 8006d20:	60a3      	str	r3, [r4, #8]
 8006d22:	e7f4      	b.n	8006d0e <__swsetup_r+0x92>
 8006d24:	2000      	movs	r0, #0
 8006d26:	e7f7      	b.n	8006d18 <__swsetup_r+0x9c>
 8006d28:	20000074 	.word	0x20000074

08006d2c <memset>:
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4402      	add	r2, r0
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d100      	bne.n	8006d36 <memset+0xa>
 8006d34:	4770      	bx	lr
 8006d36:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3a:	e7f9      	b.n	8006d30 <memset+0x4>

08006d3c <_close_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4d05      	ldr	r5, [pc, #20]	; (8006d58 <_close_r+0x1c>)
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	f7fa f92f 	bl	8000faa <_close>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d102      	bne.n	8006d56 <_close_r+0x1a>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	b103      	cbz	r3, 8006d56 <_close_r+0x1a>
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	20001750 	.word	0x20001750

08006d5c <_reclaim_reent>:
 8006d5c:	4b29      	ldr	r3, [pc, #164]	; (8006e04 <_reclaim_reent+0xa8>)
 8006d5e:	b570      	push	{r4, r5, r6, lr}
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4604      	mov	r4, r0
 8006d64:	4283      	cmp	r3, r0
 8006d66:	d04b      	beq.n	8006e00 <_reclaim_reent+0xa4>
 8006d68:	69c3      	ldr	r3, [r0, #28]
 8006d6a:	b143      	cbz	r3, 8006d7e <_reclaim_reent+0x22>
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d144      	bne.n	8006dfc <_reclaim_reent+0xa0>
 8006d72:	69e3      	ldr	r3, [r4, #28]
 8006d74:	6819      	ldr	r1, [r3, #0]
 8006d76:	b111      	cbz	r1, 8006d7e <_reclaim_reent+0x22>
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 f8b7 	bl	8006eec <_free_r>
 8006d7e:	6961      	ldr	r1, [r4, #20]
 8006d80:	b111      	cbz	r1, 8006d88 <_reclaim_reent+0x2c>
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 f8b2 	bl	8006eec <_free_r>
 8006d88:	69e1      	ldr	r1, [r4, #28]
 8006d8a:	b111      	cbz	r1, 8006d92 <_reclaim_reent+0x36>
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 f8ad 	bl	8006eec <_free_r>
 8006d92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d94:	b111      	cbz	r1, 8006d9c <_reclaim_reent+0x40>
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 f8a8 	bl	8006eec <_free_r>
 8006d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d9e:	b111      	cbz	r1, 8006da6 <_reclaim_reent+0x4a>
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 f8a3 	bl	8006eec <_free_r>
 8006da6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006da8:	b111      	cbz	r1, 8006db0 <_reclaim_reent+0x54>
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f89e 	bl	8006eec <_free_r>
 8006db0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006db2:	b111      	cbz	r1, 8006dba <_reclaim_reent+0x5e>
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 f899 	bl	8006eec <_free_r>
 8006dba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006dbc:	b111      	cbz	r1, 8006dc4 <_reclaim_reent+0x68>
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 f894 	bl	8006eec <_free_r>
 8006dc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006dc6:	b111      	cbz	r1, 8006dce <_reclaim_reent+0x72>
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 f88f 	bl	8006eec <_free_r>
 8006dce:	6a23      	ldr	r3, [r4, #32]
 8006dd0:	b1b3      	cbz	r3, 8006e00 <_reclaim_reent+0xa4>
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dd8:	4718      	bx	r3
 8006dda:	5949      	ldr	r1, [r1, r5]
 8006ddc:	b941      	cbnz	r1, 8006df0 <_reclaim_reent+0x94>
 8006dde:	3504      	adds	r5, #4
 8006de0:	69e3      	ldr	r3, [r4, #28]
 8006de2:	2d80      	cmp	r5, #128	; 0x80
 8006de4:	68d9      	ldr	r1, [r3, #12]
 8006de6:	d1f8      	bne.n	8006dda <_reclaim_reent+0x7e>
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 f87f 	bl	8006eec <_free_r>
 8006dee:	e7c0      	b.n	8006d72 <_reclaim_reent+0x16>
 8006df0:	680e      	ldr	r6, [r1, #0]
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 f87a 	bl	8006eec <_free_r>
 8006df8:	4631      	mov	r1, r6
 8006dfa:	e7ef      	b.n	8006ddc <_reclaim_reent+0x80>
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	e7ef      	b.n	8006de0 <_reclaim_reent+0x84>
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	bf00      	nop
 8006e04:	20000074 	.word	0x20000074

08006e08 <_lseek_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	2200      	movs	r2, #0
 8006e12:	4d05      	ldr	r5, [pc, #20]	; (8006e28 <_lseek_r+0x20>)
 8006e14:	602a      	str	r2, [r5, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f7fa f8eb 	bl	8000ff2 <_lseek>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_lseek_r+0x1e>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_lseek_r+0x1e>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20001750 	.word	0x20001750

08006e2c <_read_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4604      	mov	r4, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	4611      	mov	r1, r2
 8006e34:	2200      	movs	r2, #0
 8006e36:	4d05      	ldr	r5, [pc, #20]	; (8006e4c <_read_r+0x20>)
 8006e38:	602a      	str	r2, [r5, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f7fa f898 	bl	8000f70 <_read>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_read_r+0x1e>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_read_r+0x1e>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	20001750 	.word	0x20001750

08006e50 <_write_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	4611      	mov	r1, r2
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4d05      	ldr	r5, [pc, #20]	; (8006e70 <_write_r+0x20>)
 8006e5c:	602a      	str	r2, [r5, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f7f9 f9ac 	bl	80001bc <_write>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_write_r+0x1e>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_write_r+0x1e>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20001750 	.word	0x20001750

08006e74 <__errno>:
 8006e74:	4b01      	ldr	r3, [pc, #4]	; (8006e7c <__errno+0x8>)
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000074 	.word	0x20000074

08006e80 <__libc_init_array>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	2600      	movs	r6, #0
 8006e84:	4d0c      	ldr	r5, [pc, #48]	; (8006eb8 <__libc_init_array+0x38>)
 8006e86:	4c0d      	ldr	r4, [pc, #52]	; (8006ebc <__libc_init_array+0x3c>)
 8006e88:	1b64      	subs	r4, r4, r5
 8006e8a:	10a4      	asrs	r4, r4, #2
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	d109      	bne.n	8006ea4 <__libc_init_array+0x24>
 8006e90:	f000 fd42 	bl	8007918 <_init>
 8006e94:	2600      	movs	r6, #0
 8006e96:	4d0a      	ldr	r5, [pc, #40]	; (8006ec0 <__libc_init_array+0x40>)
 8006e98:	4c0a      	ldr	r4, [pc, #40]	; (8006ec4 <__libc_init_array+0x44>)
 8006e9a:	1b64      	subs	r4, r4, r5
 8006e9c:	10a4      	asrs	r4, r4, #2
 8006e9e:	42a6      	cmp	r6, r4
 8006ea0:	d105      	bne.n	8006eae <__libc_init_array+0x2e>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea8:	4798      	blx	r3
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7ee      	b.n	8006e8c <__libc_init_array+0xc>
 8006eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb2:	4798      	blx	r3
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	e7f2      	b.n	8006e9e <__libc_init_array+0x1e>
 8006eb8:	080088dc 	.word	0x080088dc
 8006ebc:	080088dc 	.word	0x080088dc
 8006ec0:	080088dc 	.word	0x080088dc
 8006ec4:	080088e0 	.word	0x080088e0

08006ec8 <__retarget_lock_init_recursive>:
 8006ec8:	4770      	bx	lr

08006eca <__retarget_lock_acquire_recursive>:
 8006eca:	4770      	bx	lr

08006ecc <__retarget_lock_release_recursive>:
 8006ecc:	4770      	bx	lr

08006ece <memcpy>:
 8006ece:	440a      	add	r2, r1
 8006ed0:	4291      	cmp	r1, r2
 8006ed2:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed6:	d100      	bne.n	8006eda <memcpy+0xc>
 8006ed8:	4770      	bx	lr
 8006eda:	b510      	push	{r4, lr}
 8006edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee0:	4291      	cmp	r1, r2
 8006ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee6:	d1f9      	bne.n	8006edc <memcpy+0xe>
 8006ee8:	bd10      	pop	{r4, pc}
	...

08006eec <_free_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4605      	mov	r5, r0
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	d040      	beq.n	8006f76 <_free_r+0x8a>
 8006ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef8:	1f0c      	subs	r4, r1, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bfb8      	it	lt
 8006efe:	18e4      	addlt	r4, r4, r3
 8006f00:	f000 f8dc 	bl	80070bc <__malloc_lock>
 8006f04:	4a1c      	ldr	r2, [pc, #112]	; (8006f78 <_free_r+0x8c>)
 8006f06:	6813      	ldr	r3, [r2, #0]
 8006f08:	b933      	cbnz	r3, 8006f18 <_free_r+0x2c>
 8006f0a:	6063      	str	r3, [r4, #4]
 8006f0c:	6014      	str	r4, [r2, #0]
 8006f0e:	4628      	mov	r0, r5
 8006f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f14:	f000 b8d8 	b.w	80070c8 <__malloc_unlock>
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d908      	bls.n	8006f2e <_free_r+0x42>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf01      	itttt	eq
 8006f24:	6819      	ldreq	r1, [r3, #0]
 8006f26:	685b      	ldreq	r3, [r3, #4]
 8006f28:	1809      	addeq	r1, r1, r0
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	e7ed      	b.n	8006f0a <_free_r+0x1e>
 8006f2e:	461a      	mov	r2, r3
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b10b      	cbz	r3, 8006f38 <_free_r+0x4c>
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	d9fa      	bls.n	8006f2e <_free_r+0x42>
 8006f38:	6811      	ldr	r1, [r2, #0]
 8006f3a:	1850      	adds	r0, r2, r1
 8006f3c:	42a0      	cmp	r0, r4
 8006f3e:	d10b      	bne.n	8006f58 <_free_r+0x6c>
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	4401      	add	r1, r0
 8006f44:	1850      	adds	r0, r2, r1
 8006f46:	4283      	cmp	r3, r0
 8006f48:	6011      	str	r1, [r2, #0]
 8006f4a:	d1e0      	bne.n	8006f0e <_free_r+0x22>
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	4408      	add	r0, r1
 8006f52:	6010      	str	r0, [r2, #0]
 8006f54:	6053      	str	r3, [r2, #4]
 8006f56:	e7da      	b.n	8006f0e <_free_r+0x22>
 8006f58:	d902      	bls.n	8006f60 <_free_r+0x74>
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	602b      	str	r3, [r5, #0]
 8006f5e:	e7d6      	b.n	8006f0e <_free_r+0x22>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	1821      	adds	r1, r4, r0
 8006f64:	428b      	cmp	r3, r1
 8006f66:	bf01      	itttt	eq
 8006f68:	6819      	ldreq	r1, [r3, #0]
 8006f6a:	685b      	ldreq	r3, [r3, #4]
 8006f6c:	1809      	addeq	r1, r1, r0
 8006f6e:	6021      	streq	r1, [r4, #0]
 8006f70:	6063      	str	r3, [r4, #4]
 8006f72:	6054      	str	r4, [r2, #4]
 8006f74:	e7cb      	b.n	8006f0e <_free_r+0x22>
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
 8006f78:	20001758 	.word	0x20001758

08006f7c <sbrk_aligned>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	4e0e      	ldr	r6, [pc, #56]	; (8006fb8 <sbrk_aligned+0x3c>)
 8006f80:	460c      	mov	r4, r1
 8006f82:	6831      	ldr	r1, [r6, #0]
 8006f84:	4605      	mov	r5, r0
 8006f86:	b911      	cbnz	r1, 8006f8e <sbrk_aligned+0x12>
 8006f88:	f000 fca8 	bl	80078dc <_sbrk_r>
 8006f8c:	6030      	str	r0, [r6, #0]
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 fca3 	bl	80078dc <_sbrk_r>
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	d00a      	beq.n	8006fb0 <sbrk_aligned+0x34>
 8006f9a:	1cc4      	adds	r4, r0, #3
 8006f9c:	f024 0403 	bic.w	r4, r4, #3
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d007      	beq.n	8006fb4 <sbrk_aligned+0x38>
 8006fa4:	1a21      	subs	r1, r4, r0
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 fc98 	bl	80078dc <_sbrk_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	d101      	bne.n	8006fb4 <sbrk_aligned+0x38>
 8006fb0:	f04f 34ff 	mov.w	r4, #4294967295
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	2000175c 	.word	0x2000175c

08006fbc <_malloc_r>:
 8006fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc0:	1ccd      	adds	r5, r1, #3
 8006fc2:	f025 0503 	bic.w	r5, r5, #3
 8006fc6:	3508      	adds	r5, #8
 8006fc8:	2d0c      	cmp	r5, #12
 8006fca:	bf38      	it	cc
 8006fcc:	250c      	movcc	r5, #12
 8006fce:	2d00      	cmp	r5, #0
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	db01      	blt.n	8006fd8 <_malloc_r+0x1c>
 8006fd4:	42a9      	cmp	r1, r5
 8006fd6:	d905      	bls.n	8006fe4 <_malloc_r+0x28>
 8006fd8:	230c      	movs	r3, #12
 8006fda:	2600      	movs	r6, #0
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4630      	mov	r0, r6
 8006fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070b8 <_malloc_r+0xfc>
 8006fe8:	f000 f868 	bl	80070bc <__malloc_lock>
 8006fec:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff0:	461c      	mov	r4, r3
 8006ff2:	bb5c      	cbnz	r4, 800704c <_malloc_r+0x90>
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	f7ff ffc0 	bl	8006f7c <sbrk_aligned>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	4604      	mov	r4, r0
 8007000:	d155      	bne.n	80070ae <_malloc_r+0xf2>
 8007002:	f8d8 4000 	ldr.w	r4, [r8]
 8007006:	4626      	mov	r6, r4
 8007008:	2e00      	cmp	r6, #0
 800700a:	d145      	bne.n	8007098 <_malloc_r+0xdc>
 800700c:	2c00      	cmp	r4, #0
 800700e:	d048      	beq.n	80070a2 <_malloc_r+0xe6>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	4631      	mov	r1, r6
 8007014:	4638      	mov	r0, r7
 8007016:	eb04 0903 	add.w	r9, r4, r3
 800701a:	f000 fc5f 	bl	80078dc <_sbrk_r>
 800701e:	4581      	cmp	r9, r0
 8007020:	d13f      	bne.n	80070a2 <_malloc_r+0xe6>
 8007022:	6821      	ldr	r1, [r4, #0]
 8007024:	4638      	mov	r0, r7
 8007026:	1a6d      	subs	r5, r5, r1
 8007028:	4629      	mov	r1, r5
 800702a:	f7ff ffa7 	bl	8006f7c <sbrk_aligned>
 800702e:	3001      	adds	r0, #1
 8007030:	d037      	beq.n	80070a2 <_malloc_r+0xe6>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	442b      	add	r3, r5
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	f8d8 3000 	ldr.w	r3, [r8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d038      	beq.n	80070b2 <_malloc_r+0xf6>
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	42a2      	cmp	r2, r4
 8007044:	d12b      	bne.n	800709e <_malloc_r+0xe2>
 8007046:	2200      	movs	r2, #0
 8007048:	605a      	str	r2, [r3, #4]
 800704a:	e00f      	b.n	800706c <_malloc_r+0xb0>
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	1b52      	subs	r2, r2, r5
 8007050:	d41f      	bmi.n	8007092 <_malloc_r+0xd6>
 8007052:	2a0b      	cmp	r2, #11
 8007054:	d917      	bls.n	8007086 <_malloc_r+0xca>
 8007056:	1961      	adds	r1, r4, r5
 8007058:	42a3      	cmp	r3, r4
 800705a:	6025      	str	r5, [r4, #0]
 800705c:	bf18      	it	ne
 800705e:	6059      	strne	r1, [r3, #4]
 8007060:	6863      	ldr	r3, [r4, #4]
 8007062:	bf08      	it	eq
 8007064:	f8c8 1000 	streq.w	r1, [r8]
 8007068:	5162      	str	r2, [r4, r5]
 800706a:	604b      	str	r3, [r1, #4]
 800706c:	4638      	mov	r0, r7
 800706e:	f104 060b 	add.w	r6, r4, #11
 8007072:	f000 f829 	bl	80070c8 <__malloc_unlock>
 8007076:	f026 0607 	bic.w	r6, r6, #7
 800707a:	1d23      	adds	r3, r4, #4
 800707c:	1af2      	subs	r2, r6, r3
 800707e:	d0ae      	beq.n	8006fde <_malloc_r+0x22>
 8007080:	1b9b      	subs	r3, r3, r6
 8007082:	50a3      	str	r3, [r4, r2]
 8007084:	e7ab      	b.n	8006fde <_malloc_r+0x22>
 8007086:	42a3      	cmp	r3, r4
 8007088:	6862      	ldr	r2, [r4, #4]
 800708a:	d1dd      	bne.n	8007048 <_malloc_r+0x8c>
 800708c:	f8c8 2000 	str.w	r2, [r8]
 8007090:	e7ec      	b.n	800706c <_malloc_r+0xb0>
 8007092:	4623      	mov	r3, r4
 8007094:	6864      	ldr	r4, [r4, #4]
 8007096:	e7ac      	b.n	8006ff2 <_malloc_r+0x36>
 8007098:	4634      	mov	r4, r6
 800709a:	6876      	ldr	r6, [r6, #4]
 800709c:	e7b4      	b.n	8007008 <_malloc_r+0x4c>
 800709e:	4613      	mov	r3, r2
 80070a0:	e7cc      	b.n	800703c <_malloc_r+0x80>
 80070a2:	230c      	movs	r3, #12
 80070a4:	4638      	mov	r0, r7
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	f000 f80e 	bl	80070c8 <__malloc_unlock>
 80070ac:	e797      	b.n	8006fde <_malloc_r+0x22>
 80070ae:	6025      	str	r5, [r4, #0]
 80070b0:	e7dc      	b.n	800706c <_malloc_r+0xb0>
 80070b2:	605b      	str	r3, [r3, #4]
 80070b4:	deff      	udf	#255	; 0xff
 80070b6:	bf00      	nop
 80070b8:	20001758 	.word	0x20001758

080070bc <__malloc_lock>:
 80070bc:	4801      	ldr	r0, [pc, #4]	; (80070c4 <__malloc_lock+0x8>)
 80070be:	f7ff bf04 	b.w	8006eca <__retarget_lock_acquire_recursive>
 80070c2:	bf00      	nop
 80070c4:	20001754 	.word	0x20001754

080070c8 <__malloc_unlock>:
 80070c8:	4801      	ldr	r0, [pc, #4]	; (80070d0 <__malloc_unlock+0x8>)
 80070ca:	f7ff beff 	b.w	8006ecc <__retarget_lock_release_recursive>
 80070ce:	bf00      	nop
 80070d0:	20001754 	.word	0x20001754

080070d4 <__sfputc_r>:
 80070d4:	6893      	ldr	r3, [r2, #8]
 80070d6:	b410      	push	{r4}
 80070d8:	3b01      	subs	r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	6093      	str	r3, [r2, #8]
 80070de:	da07      	bge.n	80070f0 <__sfputc_r+0x1c>
 80070e0:	6994      	ldr	r4, [r2, #24]
 80070e2:	42a3      	cmp	r3, r4
 80070e4:	db01      	blt.n	80070ea <__sfputc_r+0x16>
 80070e6:	290a      	cmp	r1, #10
 80070e8:	d102      	bne.n	80070f0 <__sfputc_r+0x1c>
 80070ea:	bc10      	pop	{r4}
 80070ec:	f7ff bd89 	b.w	8006c02 <__swbuf_r>
 80070f0:	6813      	ldr	r3, [r2, #0]
 80070f2:	1c58      	adds	r0, r3, #1
 80070f4:	6010      	str	r0, [r2, #0]
 80070f6:	7019      	strb	r1, [r3, #0]
 80070f8:	4608      	mov	r0, r1
 80070fa:	bc10      	pop	{r4}
 80070fc:	4770      	bx	lr

080070fe <__sfputs_r>:
 80070fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007100:	4606      	mov	r6, r0
 8007102:	460f      	mov	r7, r1
 8007104:	4614      	mov	r4, r2
 8007106:	18d5      	adds	r5, r2, r3
 8007108:	42ac      	cmp	r4, r5
 800710a:	d101      	bne.n	8007110 <__sfputs_r+0x12>
 800710c:	2000      	movs	r0, #0
 800710e:	e007      	b.n	8007120 <__sfputs_r+0x22>
 8007110:	463a      	mov	r2, r7
 8007112:	4630      	mov	r0, r6
 8007114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007118:	f7ff ffdc 	bl	80070d4 <__sfputc_r>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d1f3      	bne.n	8007108 <__sfputs_r+0xa>
 8007120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007124 <_vfiprintf_r>:
 8007124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	460d      	mov	r5, r1
 800712a:	4614      	mov	r4, r2
 800712c:	4698      	mov	r8, r3
 800712e:	4606      	mov	r6, r0
 8007130:	b09d      	sub	sp, #116	; 0x74
 8007132:	b118      	cbz	r0, 800713c <_vfiprintf_r+0x18>
 8007134:	6a03      	ldr	r3, [r0, #32]
 8007136:	b90b      	cbnz	r3, 800713c <_vfiprintf_r+0x18>
 8007138:	f7ff fc7c 	bl	8006a34 <__sinit>
 800713c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800713e:	07d9      	lsls	r1, r3, #31
 8007140:	d405      	bmi.n	800714e <_vfiprintf_r+0x2a>
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	059a      	lsls	r2, r3, #22
 8007146:	d402      	bmi.n	800714e <_vfiprintf_r+0x2a>
 8007148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800714a:	f7ff febe 	bl	8006eca <__retarget_lock_acquire_recursive>
 800714e:	89ab      	ldrh	r3, [r5, #12]
 8007150:	071b      	lsls	r3, r3, #28
 8007152:	d501      	bpl.n	8007158 <_vfiprintf_r+0x34>
 8007154:	692b      	ldr	r3, [r5, #16]
 8007156:	b99b      	cbnz	r3, 8007180 <_vfiprintf_r+0x5c>
 8007158:	4629      	mov	r1, r5
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff fd8e 	bl	8006c7c <__swsetup_r>
 8007160:	b170      	cbz	r0, 8007180 <_vfiprintf_r+0x5c>
 8007162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007164:	07dc      	lsls	r4, r3, #31
 8007166:	d504      	bpl.n	8007172 <_vfiprintf_r+0x4e>
 8007168:	f04f 30ff 	mov.w	r0, #4294967295
 800716c:	b01d      	add	sp, #116	; 0x74
 800716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007172:	89ab      	ldrh	r3, [r5, #12]
 8007174:	0598      	lsls	r0, r3, #22
 8007176:	d4f7      	bmi.n	8007168 <_vfiprintf_r+0x44>
 8007178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800717a:	f7ff fea7 	bl	8006ecc <__retarget_lock_release_recursive>
 800717e:	e7f3      	b.n	8007168 <_vfiprintf_r+0x44>
 8007180:	2300      	movs	r3, #0
 8007182:	9309      	str	r3, [sp, #36]	; 0x24
 8007184:	2320      	movs	r3, #32
 8007186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718a:	2330      	movs	r3, #48	; 0x30
 800718c:	f04f 0901 	mov.w	r9, #1
 8007190:	f8cd 800c 	str.w	r8, [sp, #12]
 8007194:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007344 <_vfiprintf_r+0x220>
 8007198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800719c:	4623      	mov	r3, r4
 800719e:	469a      	mov	sl, r3
 80071a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a4:	b10a      	cbz	r2, 80071aa <_vfiprintf_r+0x86>
 80071a6:	2a25      	cmp	r2, #37	; 0x25
 80071a8:	d1f9      	bne.n	800719e <_vfiprintf_r+0x7a>
 80071aa:	ebba 0b04 	subs.w	fp, sl, r4
 80071ae:	d00b      	beq.n	80071c8 <_vfiprintf_r+0xa4>
 80071b0:	465b      	mov	r3, fp
 80071b2:	4622      	mov	r2, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff ffa1 	bl	80070fe <__sfputs_r>
 80071bc:	3001      	adds	r0, #1
 80071be:	f000 80a9 	beq.w	8007314 <_vfiprintf_r+0x1f0>
 80071c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c4:	445a      	add	r2, fp
 80071c6:	9209      	str	r2, [sp, #36]	; 0x24
 80071c8:	f89a 3000 	ldrb.w	r3, [sl]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80a1 	beq.w	8007314 <_vfiprintf_r+0x1f0>
 80071d2:	2300      	movs	r3, #0
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071dc:	f10a 0a01 	add.w	sl, sl, #1
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	9307      	str	r3, [sp, #28]
 80071e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071e8:	931a      	str	r3, [sp, #104]	; 0x68
 80071ea:	4654      	mov	r4, sl
 80071ec:	2205      	movs	r2, #5
 80071ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f2:	4854      	ldr	r0, [pc, #336]	; (8007344 <_vfiprintf_r+0x220>)
 80071f4:	f000 fb82 	bl	80078fc <memchr>
 80071f8:	9a04      	ldr	r2, [sp, #16]
 80071fa:	b9d8      	cbnz	r0, 8007234 <_vfiprintf_r+0x110>
 80071fc:	06d1      	lsls	r1, r2, #27
 80071fe:	bf44      	itt	mi
 8007200:	2320      	movmi	r3, #32
 8007202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007206:	0713      	lsls	r3, r2, #28
 8007208:	bf44      	itt	mi
 800720a:	232b      	movmi	r3, #43	; 0x2b
 800720c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007210:	f89a 3000 	ldrb.w	r3, [sl]
 8007214:	2b2a      	cmp	r3, #42	; 0x2a
 8007216:	d015      	beq.n	8007244 <_vfiprintf_r+0x120>
 8007218:	4654      	mov	r4, sl
 800721a:	2000      	movs	r0, #0
 800721c:	f04f 0c0a 	mov.w	ip, #10
 8007220:	9a07      	ldr	r2, [sp, #28]
 8007222:	4621      	mov	r1, r4
 8007224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007228:	3b30      	subs	r3, #48	; 0x30
 800722a:	2b09      	cmp	r3, #9
 800722c:	d94d      	bls.n	80072ca <_vfiprintf_r+0x1a6>
 800722e:	b1b0      	cbz	r0, 800725e <_vfiprintf_r+0x13a>
 8007230:	9207      	str	r2, [sp, #28]
 8007232:	e014      	b.n	800725e <_vfiprintf_r+0x13a>
 8007234:	eba0 0308 	sub.w	r3, r0, r8
 8007238:	fa09 f303 	lsl.w	r3, r9, r3
 800723c:	4313      	orrs	r3, r2
 800723e:	46a2      	mov	sl, r4
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	e7d2      	b.n	80071ea <_vfiprintf_r+0xc6>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	1d19      	adds	r1, r3, #4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	9103      	str	r1, [sp, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	bfbb      	ittet	lt
 8007250:	425b      	neglt	r3, r3
 8007252:	f042 0202 	orrlt.w	r2, r2, #2
 8007256:	9307      	strge	r3, [sp, #28]
 8007258:	9307      	strlt	r3, [sp, #28]
 800725a:	bfb8      	it	lt
 800725c:	9204      	strlt	r2, [sp, #16]
 800725e:	7823      	ldrb	r3, [r4, #0]
 8007260:	2b2e      	cmp	r3, #46	; 0x2e
 8007262:	d10c      	bne.n	800727e <_vfiprintf_r+0x15a>
 8007264:	7863      	ldrb	r3, [r4, #1]
 8007266:	2b2a      	cmp	r3, #42	; 0x2a
 8007268:	d134      	bne.n	80072d4 <_vfiprintf_r+0x1b0>
 800726a:	9b03      	ldr	r3, [sp, #12]
 800726c:	3402      	adds	r4, #2
 800726e:	1d1a      	adds	r2, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	9203      	str	r2, [sp, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfb8      	it	lt
 8007278:	f04f 33ff 	movlt.w	r3, #4294967295
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007348 <_vfiprintf_r+0x224>
 8007282:	2203      	movs	r2, #3
 8007284:	4650      	mov	r0, sl
 8007286:	7821      	ldrb	r1, [r4, #0]
 8007288:	f000 fb38 	bl	80078fc <memchr>
 800728c:	b138      	cbz	r0, 800729e <_vfiprintf_r+0x17a>
 800728e:	2240      	movs	r2, #64	; 0x40
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	eba0 000a 	sub.w	r0, r0, sl
 8007296:	4082      	lsls	r2, r0
 8007298:	4313      	orrs	r3, r2
 800729a:	3401      	adds	r4, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a2:	2206      	movs	r2, #6
 80072a4:	4829      	ldr	r0, [pc, #164]	; (800734c <_vfiprintf_r+0x228>)
 80072a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072aa:	f000 fb27 	bl	80078fc <memchr>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d03f      	beq.n	8007332 <_vfiprintf_r+0x20e>
 80072b2:	4b27      	ldr	r3, [pc, #156]	; (8007350 <_vfiprintf_r+0x22c>)
 80072b4:	bb1b      	cbnz	r3, 80072fe <_vfiprintf_r+0x1da>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	3307      	adds	r3, #7
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	3308      	adds	r3, #8
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c4:	443b      	add	r3, r7
 80072c6:	9309      	str	r3, [sp, #36]	; 0x24
 80072c8:	e768      	b.n	800719c <_vfiprintf_r+0x78>
 80072ca:	460c      	mov	r4, r1
 80072cc:	2001      	movs	r0, #1
 80072ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d2:	e7a6      	b.n	8007222 <_vfiprintf_r+0xfe>
 80072d4:	2300      	movs	r3, #0
 80072d6:	f04f 0c0a 	mov.w	ip, #10
 80072da:	4619      	mov	r1, r3
 80072dc:	3401      	adds	r4, #1
 80072de:	9305      	str	r3, [sp, #20]
 80072e0:	4620      	mov	r0, r4
 80072e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e6:	3a30      	subs	r2, #48	; 0x30
 80072e8:	2a09      	cmp	r2, #9
 80072ea:	d903      	bls.n	80072f4 <_vfiprintf_r+0x1d0>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0c6      	beq.n	800727e <_vfiprintf_r+0x15a>
 80072f0:	9105      	str	r1, [sp, #20]
 80072f2:	e7c4      	b.n	800727e <_vfiprintf_r+0x15a>
 80072f4:	4604      	mov	r4, r0
 80072f6:	2301      	movs	r3, #1
 80072f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fc:	e7f0      	b.n	80072e0 <_vfiprintf_r+0x1bc>
 80072fe:	ab03      	add	r3, sp, #12
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	462a      	mov	r2, r5
 8007304:	4630      	mov	r0, r6
 8007306:	4b13      	ldr	r3, [pc, #76]	; (8007354 <_vfiprintf_r+0x230>)
 8007308:	a904      	add	r1, sp, #16
 800730a:	f3af 8000 	nop.w
 800730e:	4607      	mov	r7, r0
 8007310:	1c78      	adds	r0, r7, #1
 8007312:	d1d6      	bne.n	80072c2 <_vfiprintf_r+0x19e>
 8007314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007316:	07d9      	lsls	r1, r3, #31
 8007318:	d405      	bmi.n	8007326 <_vfiprintf_r+0x202>
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	059a      	lsls	r2, r3, #22
 800731e:	d402      	bmi.n	8007326 <_vfiprintf_r+0x202>
 8007320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007322:	f7ff fdd3 	bl	8006ecc <__retarget_lock_release_recursive>
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	065b      	lsls	r3, r3, #25
 800732a:	f53f af1d 	bmi.w	8007168 <_vfiprintf_r+0x44>
 800732e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007330:	e71c      	b.n	800716c <_vfiprintf_r+0x48>
 8007332:	ab03      	add	r3, sp, #12
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	462a      	mov	r2, r5
 8007338:	4630      	mov	r0, r6
 800733a:	4b06      	ldr	r3, [pc, #24]	; (8007354 <_vfiprintf_r+0x230>)
 800733c:	a904      	add	r1, sp, #16
 800733e:	f000 f87d 	bl	800743c <_printf_i>
 8007342:	e7e4      	b.n	800730e <_vfiprintf_r+0x1ea>
 8007344:	080088a6 	.word	0x080088a6
 8007348:	080088ac 	.word	0x080088ac
 800734c:	080088b0 	.word	0x080088b0
 8007350:	00000000 	.word	0x00000000
 8007354:	080070ff 	.word	0x080070ff

08007358 <_printf_common>:
 8007358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800735c:	4616      	mov	r6, r2
 800735e:	4699      	mov	r9, r3
 8007360:	688a      	ldr	r2, [r1, #8]
 8007362:	690b      	ldr	r3, [r1, #16]
 8007364:	4607      	mov	r7, r0
 8007366:	4293      	cmp	r3, r2
 8007368:	bfb8      	it	lt
 800736a:	4613      	movlt	r3, r2
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007372:	460c      	mov	r4, r1
 8007374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007378:	b10a      	cbz	r2, 800737e <_printf_common+0x26>
 800737a:	3301      	adds	r3, #1
 800737c:	6033      	str	r3, [r6, #0]
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	0699      	lsls	r1, r3, #26
 8007382:	bf42      	ittt	mi
 8007384:	6833      	ldrmi	r3, [r6, #0]
 8007386:	3302      	addmi	r3, #2
 8007388:	6033      	strmi	r3, [r6, #0]
 800738a:	6825      	ldr	r5, [r4, #0]
 800738c:	f015 0506 	ands.w	r5, r5, #6
 8007390:	d106      	bne.n	80073a0 <_printf_common+0x48>
 8007392:	f104 0a19 	add.w	sl, r4, #25
 8007396:	68e3      	ldr	r3, [r4, #12]
 8007398:	6832      	ldr	r2, [r6, #0]
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	42ab      	cmp	r3, r5
 800739e:	dc2b      	bgt.n	80073f8 <_printf_common+0xa0>
 80073a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073a4:	1e13      	subs	r3, r2, #0
 80073a6:	6822      	ldr	r2, [r4, #0]
 80073a8:	bf18      	it	ne
 80073aa:	2301      	movne	r3, #1
 80073ac:	0692      	lsls	r2, r2, #26
 80073ae:	d430      	bmi.n	8007412 <_printf_common+0xba>
 80073b0:	4649      	mov	r1, r9
 80073b2:	4638      	mov	r0, r7
 80073b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073b8:	47c0      	blx	r8
 80073ba:	3001      	adds	r0, #1
 80073bc:	d023      	beq.n	8007406 <_printf_common+0xae>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	f003 0306 	and.w	r3, r3, #6
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	bf14      	ite	ne
 80073ca:	2500      	movne	r5, #0
 80073cc:	6833      	ldreq	r3, [r6, #0]
 80073ce:	f04f 0600 	mov.w	r6, #0
 80073d2:	bf08      	it	eq
 80073d4:	68e5      	ldreq	r5, [r4, #12]
 80073d6:	f104 041a 	add.w	r4, r4, #26
 80073da:	bf08      	it	eq
 80073dc:	1aed      	subeq	r5, r5, r3
 80073de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80073e2:	bf08      	it	eq
 80073e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073e8:	4293      	cmp	r3, r2
 80073ea:	bfc4      	itt	gt
 80073ec:	1a9b      	subgt	r3, r3, r2
 80073ee:	18ed      	addgt	r5, r5, r3
 80073f0:	42b5      	cmp	r5, r6
 80073f2:	d11a      	bne.n	800742a <_printf_common+0xd2>
 80073f4:	2000      	movs	r0, #0
 80073f6:	e008      	b.n	800740a <_printf_common+0xb2>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4652      	mov	r2, sl
 80073fc:	4649      	mov	r1, r9
 80073fe:	4638      	mov	r0, r7
 8007400:	47c0      	blx	r8
 8007402:	3001      	adds	r0, #1
 8007404:	d103      	bne.n	800740e <_printf_common+0xb6>
 8007406:	f04f 30ff 	mov.w	r0, #4294967295
 800740a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800740e:	3501      	adds	r5, #1
 8007410:	e7c1      	b.n	8007396 <_printf_common+0x3e>
 8007412:	2030      	movs	r0, #48	; 0x30
 8007414:	18e1      	adds	r1, r4, r3
 8007416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007420:	4422      	add	r2, r4
 8007422:	3302      	adds	r3, #2
 8007424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007428:	e7c2      	b.n	80073b0 <_printf_common+0x58>
 800742a:	2301      	movs	r3, #1
 800742c:	4622      	mov	r2, r4
 800742e:	4649      	mov	r1, r9
 8007430:	4638      	mov	r0, r7
 8007432:	47c0      	blx	r8
 8007434:	3001      	adds	r0, #1
 8007436:	d0e6      	beq.n	8007406 <_printf_common+0xae>
 8007438:	3601      	adds	r6, #1
 800743a:	e7d9      	b.n	80073f0 <_printf_common+0x98>

0800743c <_printf_i>:
 800743c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	7e0f      	ldrb	r7, [r1, #24]
 8007442:	4691      	mov	r9, r2
 8007444:	2f78      	cmp	r7, #120	; 0x78
 8007446:	4680      	mov	r8, r0
 8007448:	460c      	mov	r4, r1
 800744a:	469a      	mov	sl, r3
 800744c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800744e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007452:	d807      	bhi.n	8007464 <_printf_i+0x28>
 8007454:	2f62      	cmp	r7, #98	; 0x62
 8007456:	d80a      	bhi.n	800746e <_printf_i+0x32>
 8007458:	2f00      	cmp	r7, #0
 800745a:	f000 80d5 	beq.w	8007608 <_printf_i+0x1cc>
 800745e:	2f58      	cmp	r7, #88	; 0x58
 8007460:	f000 80c1 	beq.w	80075e6 <_printf_i+0x1aa>
 8007464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800746c:	e03a      	b.n	80074e4 <_printf_i+0xa8>
 800746e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007472:	2b15      	cmp	r3, #21
 8007474:	d8f6      	bhi.n	8007464 <_printf_i+0x28>
 8007476:	a101      	add	r1, pc, #4	; (adr r1, 800747c <_printf_i+0x40>)
 8007478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800747c:	080074d5 	.word	0x080074d5
 8007480:	080074e9 	.word	0x080074e9
 8007484:	08007465 	.word	0x08007465
 8007488:	08007465 	.word	0x08007465
 800748c:	08007465 	.word	0x08007465
 8007490:	08007465 	.word	0x08007465
 8007494:	080074e9 	.word	0x080074e9
 8007498:	08007465 	.word	0x08007465
 800749c:	08007465 	.word	0x08007465
 80074a0:	08007465 	.word	0x08007465
 80074a4:	08007465 	.word	0x08007465
 80074a8:	080075ef 	.word	0x080075ef
 80074ac:	08007515 	.word	0x08007515
 80074b0:	080075a9 	.word	0x080075a9
 80074b4:	08007465 	.word	0x08007465
 80074b8:	08007465 	.word	0x08007465
 80074bc:	08007611 	.word	0x08007611
 80074c0:	08007465 	.word	0x08007465
 80074c4:	08007515 	.word	0x08007515
 80074c8:	08007465 	.word	0x08007465
 80074cc:	08007465 	.word	0x08007465
 80074d0:	080075b1 	.word	0x080075b1
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	1d1a      	adds	r2, r3, #4
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	602a      	str	r2, [r5, #0]
 80074dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0a0      	b.n	800762a <_printf_i+0x1ee>
 80074e8:	6820      	ldr	r0, [r4, #0]
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	0607      	lsls	r7, r0, #24
 80074ee:	f103 0104 	add.w	r1, r3, #4
 80074f2:	6029      	str	r1, [r5, #0]
 80074f4:	d501      	bpl.n	80074fa <_printf_i+0xbe>
 80074f6:	681e      	ldr	r6, [r3, #0]
 80074f8:	e003      	b.n	8007502 <_printf_i+0xc6>
 80074fa:	0646      	lsls	r6, r0, #25
 80074fc:	d5fb      	bpl.n	80074f6 <_printf_i+0xba>
 80074fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007502:	2e00      	cmp	r6, #0
 8007504:	da03      	bge.n	800750e <_printf_i+0xd2>
 8007506:	232d      	movs	r3, #45	; 0x2d
 8007508:	4276      	negs	r6, r6
 800750a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750e:	230a      	movs	r3, #10
 8007510:	4859      	ldr	r0, [pc, #356]	; (8007678 <_printf_i+0x23c>)
 8007512:	e012      	b.n	800753a <_printf_i+0xfe>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	1d19      	adds	r1, r3, #4
 800751a:	6029      	str	r1, [r5, #0]
 800751c:	0605      	lsls	r5, r0, #24
 800751e:	d501      	bpl.n	8007524 <_printf_i+0xe8>
 8007520:	681e      	ldr	r6, [r3, #0]
 8007522:	e002      	b.n	800752a <_printf_i+0xee>
 8007524:	0641      	lsls	r1, r0, #25
 8007526:	d5fb      	bpl.n	8007520 <_printf_i+0xe4>
 8007528:	881e      	ldrh	r6, [r3, #0]
 800752a:	2f6f      	cmp	r7, #111	; 0x6f
 800752c:	bf0c      	ite	eq
 800752e:	2308      	moveq	r3, #8
 8007530:	230a      	movne	r3, #10
 8007532:	4851      	ldr	r0, [pc, #324]	; (8007678 <_printf_i+0x23c>)
 8007534:	2100      	movs	r1, #0
 8007536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800753a:	6865      	ldr	r5, [r4, #4]
 800753c:	2d00      	cmp	r5, #0
 800753e:	bfa8      	it	ge
 8007540:	6821      	ldrge	r1, [r4, #0]
 8007542:	60a5      	str	r5, [r4, #8]
 8007544:	bfa4      	itt	ge
 8007546:	f021 0104 	bicge.w	r1, r1, #4
 800754a:	6021      	strge	r1, [r4, #0]
 800754c:	b90e      	cbnz	r6, 8007552 <_printf_i+0x116>
 800754e:	2d00      	cmp	r5, #0
 8007550:	d04b      	beq.n	80075ea <_printf_i+0x1ae>
 8007552:	4615      	mov	r5, r2
 8007554:	fbb6 f1f3 	udiv	r1, r6, r3
 8007558:	fb03 6711 	mls	r7, r3, r1, r6
 800755c:	5dc7      	ldrb	r7, [r0, r7]
 800755e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007562:	4637      	mov	r7, r6
 8007564:	42bb      	cmp	r3, r7
 8007566:	460e      	mov	r6, r1
 8007568:	d9f4      	bls.n	8007554 <_printf_i+0x118>
 800756a:	2b08      	cmp	r3, #8
 800756c:	d10b      	bne.n	8007586 <_printf_i+0x14a>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	07de      	lsls	r6, r3, #31
 8007572:	d508      	bpl.n	8007586 <_printf_i+0x14a>
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	6861      	ldr	r1, [r4, #4]
 8007578:	4299      	cmp	r1, r3
 800757a:	bfde      	ittt	le
 800757c:	2330      	movle	r3, #48	; 0x30
 800757e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007582:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007586:	1b52      	subs	r2, r2, r5
 8007588:	6122      	str	r2, [r4, #16]
 800758a:	464b      	mov	r3, r9
 800758c:	4621      	mov	r1, r4
 800758e:	4640      	mov	r0, r8
 8007590:	f8cd a000 	str.w	sl, [sp]
 8007594:	aa03      	add	r2, sp, #12
 8007596:	f7ff fedf 	bl	8007358 <_printf_common>
 800759a:	3001      	adds	r0, #1
 800759c:	d14a      	bne.n	8007634 <_printf_i+0x1f8>
 800759e:	f04f 30ff 	mov.w	r0, #4294967295
 80075a2:	b004      	add	sp, #16
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	f043 0320 	orr.w	r3, r3, #32
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	2778      	movs	r7, #120	; 0x78
 80075b2:	4832      	ldr	r0, [pc, #200]	; (800767c <_printf_i+0x240>)
 80075b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	6829      	ldr	r1, [r5, #0]
 80075bc:	061f      	lsls	r7, r3, #24
 80075be:	f851 6b04 	ldr.w	r6, [r1], #4
 80075c2:	d402      	bmi.n	80075ca <_printf_i+0x18e>
 80075c4:	065f      	lsls	r7, r3, #25
 80075c6:	bf48      	it	mi
 80075c8:	b2b6      	uxthmi	r6, r6
 80075ca:	07df      	lsls	r7, r3, #31
 80075cc:	bf48      	it	mi
 80075ce:	f043 0320 	orrmi.w	r3, r3, #32
 80075d2:	6029      	str	r1, [r5, #0]
 80075d4:	bf48      	it	mi
 80075d6:	6023      	strmi	r3, [r4, #0]
 80075d8:	b91e      	cbnz	r6, 80075e2 <_printf_i+0x1a6>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	f023 0320 	bic.w	r3, r3, #32
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	2310      	movs	r3, #16
 80075e4:	e7a6      	b.n	8007534 <_printf_i+0xf8>
 80075e6:	4824      	ldr	r0, [pc, #144]	; (8007678 <_printf_i+0x23c>)
 80075e8:	e7e4      	b.n	80075b4 <_printf_i+0x178>
 80075ea:	4615      	mov	r5, r2
 80075ec:	e7bd      	b.n	800756a <_printf_i+0x12e>
 80075ee:	682b      	ldr	r3, [r5, #0]
 80075f0:	6826      	ldr	r6, [r4, #0]
 80075f2:	1d18      	adds	r0, r3, #4
 80075f4:	6961      	ldr	r1, [r4, #20]
 80075f6:	6028      	str	r0, [r5, #0]
 80075f8:	0635      	lsls	r5, r6, #24
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	d501      	bpl.n	8007602 <_printf_i+0x1c6>
 80075fe:	6019      	str	r1, [r3, #0]
 8007600:	e002      	b.n	8007608 <_printf_i+0x1cc>
 8007602:	0670      	lsls	r0, r6, #25
 8007604:	d5fb      	bpl.n	80075fe <_printf_i+0x1c2>
 8007606:	8019      	strh	r1, [r3, #0]
 8007608:	2300      	movs	r3, #0
 800760a:	4615      	mov	r5, r2
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	e7bc      	b.n	800758a <_printf_i+0x14e>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	2100      	movs	r1, #0
 8007614:	1d1a      	adds	r2, r3, #4
 8007616:	602a      	str	r2, [r5, #0]
 8007618:	681d      	ldr	r5, [r3, #0]
 800761a:	6862      	ldr	r2, [r4, #4]
 800761c:	4628      	mov	r0, r5
 800761e:	f000 f96d 	bl	80078fc <memchr>
 8007622:	b108      	cbz	r0, 8007628 <_printf_i+0x1ec>
 8007624:	1b40      	subs	r0, r0, r5
 8007626:	6060      	str	r0, [r4, #4]
 8007628:	6863      	ldr	r3, [r4, #4]
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	2300      	movs	r3, #0
 800762e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007632:	e7aa      	b.n	800758a <_printf_i+0x14e>
 8007634:	462a      	mov	r2, r5
 8007636:	4649      	mov	r1, r9
 8007638:	4640      	mov	r0, r8
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	47d0      	blx	sl
 800763e:	3001      	adds	r0, #1
 8007640:	d0ad      	beq.n	800759e <_printf_i+0x162>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	079b      	lsls	r3, r3, #30
 8007646:	d413      	bmi.n	8007670 <_printf_i+0x234>
 8007648:	68e0      	ldr	r0, [r4, #12]
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	4298      	cmp	r0, r3
 800764e:	bfb8      	it	lt
 8007650:	4618      	movlt	r0, r3
 8007652:	e7a6      	b.n	80075a2 <_printf_i+0x166>
 8007654:	2301      	movs	r3, #1
 8007656:	4632      	mov	r2, r6
 8007658:	4649      	mov	r1, r9
 800765a:	4640      	mov	r0, r8
 800765c:	47d0      	blx	sl
 800765e:	3001      	adds	r0, #1
 8007660:	d09d      	beq.n	800759e <_printf_i+0x162>
 8007662:	3501      	adds	r5, #1
 8007664:	68e3      	ldr	r3, [r4, #12]
 8007666:	9903      	ldr	r1, [sp, #12]
 8007668:	1a5b      	subs	r3, r3, r1
 800766a:	42ab      	cmp	r3, r5
 800766c:	dcf2      	bgt.n	8007654 <_printf_i+0x218>
 800766e:	e7eb      	b.n	8007648 <_printf_i+0x20c>
 8007670:	2500      	movs	r5, #0
 8007672:	f104 0619 	add.w	r6, r4, #25
 8007676:	e7f5      	b.n	8007664 <_printf_i+0x228>
 8007678:	080088b7 	.word	0x080088b7
 800767c:	080088c8 	.word	0x080088c8

08007680 <__sflush_r>:
 8007680:	898a      	ldrh	r2, [r1, #12]
 8007682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007684:	4605      	mov	r5, r0
 8007686:	0710      	lsls	r0, r2, #28
 8007688:	460c      	mov	r4, r1
 800768a:	d457      	bmi.n	800773c <__sflush_r+0xbc>
 800768c:	684b      	ldr	r3, [r1, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	dc04      	bgt.n	800769c <__sflush_r+0x1c>
 8007692:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	dc01      	bgt.n	800769c <__sflush_r+0x1c>
 8007698:	2000      	movs	r0, #0
 800769a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800769c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800769e:	2e00      	cmp	r6, #0
 80076a0:	d0fa      	beq.n	8007698 <__sflush_r+0x18>
 80076a2:	2300      	movs	r3, #0
 80076a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076a8:	682f      	ldr	r7, [r5, #0]
 80076aa:	6a21      	ldr	r1, [r4, #32]
 80076ac:	602b      	str	r3, [r5, #0]
 80076ae:	d032      	beq.n	8007716 <__sflush_r+0x96>
 80076b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	075a      	lsls	r2, r3, #29
 80076b6:	d505      	bpl.n	80076c4 <__sflush_r+0x44>
 80076b8:	6863      	ldr	r3, [r4, #4]
 80076ba:	1ac0      	subs	r0, r0, r3
 80076bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076be:	b10b      	cbz	r3, 80076c4 <__sflush_r+0x44>
 80076c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076c2:	1ac0      	subs	r0, r0, r3
 80076c4:	2300      	movs	r3, #0
 80076c6:	4602      	mov	r2, r0
 80076c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ca:	4628      	mov	r0, r5
 80076cc:	6a21      	ldr	r1, [r4, #32]
 80076ce:	47b0      	blx	r6
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	d106      	bne.n	80076e4 <__sflush_r+0x64>
 80076d6:	6829      	ldr	r1, [r5, #0]
 80076d8:	291d      	cmp	r1, #29
 80076da:	d82b      	bhi.n	8007734 <__sflush_r+0xb4>
 80076dc:	4a28      	ldr	r2, [pc, #160]	; (8007780 <__sflush_r+0x100>)
 80076de:	410a      	asrs	r2, r1
 80076e0:	07d6      	lsls	r6, r2, #31
 80076e2:	d427      	bmi.n	8007734 <__sflush_r+0xb4>
 80076e4:	2200      	movs	r2, #0
 80076e6:	6062      	str	r2, [r4, #4]
 80076e8:	6922      	ldr	r2, [r4, #16]
 80076ea:	04d9      	lsls	r1, r3, #19
 80076ec:	6022      	str	r2, [r4, #0]
 80076ee:	d504      	bpl.n	80076fa <__sflush_r+0x7a>
 80076f0:	1c42      	adds	r2, r0, #1
 80076f2:	d101      	bne.n	80076f8 <__sflush_r+0x78>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b903      	cbnz	r3, 80076fa <__sflush_r+0x7a>
 80076f8:	6560      	str	r0, [r4, #84]	; 0x54
 80076fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076fc:	602f      	str	r7, [r5, #0]
 80076fe:	2900      	cmp	r1, #0
 8007700:	d0ca      	beq.n	8007698 <__sflush_r+0x18>
 8007702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007706:	4299      	cmp	r1, r3
 8007708:	d002      	beq.n	8007710 <__sflush_r+0x90>
 800770a:	4628      	mov	r0, r5
 800770c:	f7ff fbee 	bl	8006eec <_free_r>
 8007710:	2000      	movs	r0, #0
 8007712:	6360      	str	r0, [r4, #52]	; 0x34
 8007714:	e7c1      	b.n	800769a <__sflush_r+0x1a>
 8007716:	2301      	movs	r3, #1
 8007718:	4628      	mov	r0, r5
 800771a:	47b0      	blx	r6
 800771c:	1c41      	adds	r1, r0, #1
 800771e:	d1c8      	bne.n	80076b2 <__sflush_r+0x32>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0c5      	beq.n	80076b2 <__sflush_r+0x32>
 8007726:	2b1d      	cmp	r3, #29
 8007728:	d001      	beq.n	800772e <__sflush_r+0xae>
 800772a:	2b16      	cmp	r3, #22
 800772c:	d101      	bne.n	8007732 <__sflush_r+0xb2>
 800772e:	602f      	str	r7, [r5, #0]
 8007730:	e7b2      	b.n	8007698 <__sflush_r+0x18>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007738:	81a3      	strh	r3, [r4, #12]
 800773a:	e7ae      	b.n	800769a <__sflush_r+0x1a>
 800773c:	690f      	ldr	r7, [r1, #16]
 800773e:	2f00      	cmp	r7, #0
 8007740:	d0aa      	beq.n	8007698 <__sflush_r+0x18>
 8007742:	0793      	lsls	r3, r2, #30
 8007744:	bf18      	it	ne
 8007746:	2300      	movne	r3, #0
 8007748:	680e      	ldr	r6, [r1, #0]
 800774a:	bf08      	it	eq
 800774c:	694b      	ldreq	r3, [r1, #20]
 800774e:	1bf6      	subs	r6, r6, r7
 8007750:	600f      	str	r7, [r1, #0]
 8007752:	608b      	str	r3, [r1, #8]
 8007754:	2e00      	cmp	r6, #0
 8007756:	dd9f      	ble.n	8007698 <__sflush_r+0x18>
 8007758:	4633      	mov	r3, r6
 800775a:	463a      	mov	r2, r7
 800775c:	4628      	mov	r0, r5
 800775e:	6a21      	ldr	r1, [r4, #32]
 8007760:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007764:	47e0      	blx	ip
 8007766:	2800      	cmp	r0, #0
 8007768:	dc06      	bgt.n	8007778 <__sflush_r+0xf8>
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	e790      	b.n	800769a <__sflush_r+0x1a>
 8007778:	4407      	add	r7, r0
 800777a:	1a36      	subs	r6, r6, r0
 800777c:	e7ea      	b.n	8007754 <__sflush_r+0xd4>
 800777e:	bf00      	nop
 8007780:	dfbffffe 	.word	0xdfbffffe

08007784 <_fflush_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	690b      	ldr	r3, [r1, #16]
 8007788:	4605      	mov	r5, r0
 800778a:	460c      	mov	r4, r1
 800778c:	b913      	cbnz	r3, 8007794 <_fflush_r+0x10>
 800778e:	2500      	movs	r5, #0
 8007790:	4628      	mov	r0, r5
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	b118      	cbz	r0, 800779e <_fflush_r+0x1a>
 8007796:	6a03      	ldr	r3, [r0, #32]
 8007798:	b90b      	cbnz	r3, 800779e <_fflush_r+0x1a>
 800779a:	f7ff f94b 	bl	8006a34 <__sinit>
 800779e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0f3      	beq.n	800778e <_fflush_r+0xa>
 80077a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077a8:	07d0      	lsls	r0, r2, #31
 80077aa:	d404      	bmi.n	80077b6 <_fflush_r+0x32>
 80077ac:	0599      	lsls	r1, r3, #22
 80077ae:	d402      	bmi.n	80077b6 <_fflush_r+0x32>
 80077b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b2:	f7ff fb8a 	bl	8006eca <__retarget_lock_acquire_recursive>
 80077b6:	4628      	mov	r0, r5
 80077b8:	4621      	mov	r1, r4
 80077ba:	f7ff ff61 	bl	8007680 <__sflush_r>
 80077be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c0:	4605      	mov	r5, r0
 80077c2:	07da      	lsls	r2, r3, #31
 80077c4:	d4e4      	bmi.n	8007790 <_fflush_r+0xc>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	059b      	lsls	r3, r3, #22
 80077ca:	d4e1      	bmi.n	8007790 <_fflush_r+0xc>
 80077cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ce:	f7ff fb7d 	bl	8006ecc <__retarget_lock_release_recursive>
 80077d2:	e7dd      	b.n	8007790 <_fflush_r+0xc>

080077d4 <__swhatbuf_r>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	4615      	mov	r5, r2
 80077de:	2900      	cmp	r1, #0
 80077e0:	461e      	mov	r6, r3
 80077e2:	b096      	sub	sp, #88	; 0x58
 80077e4:	da0c      	bge.n	8007800 <__swhatbuf_r+0x2c>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	2100      	movs	r1, #0
 80077ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80077ee:	bf0c      	ite	eq
 80077f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80077f4:	2340      	movne	r3, #64	; 0x40
 80077f6:	2000      	movs	r0, #0
 80077f8:	6031      	str	r1, [r6, #0]
 80077fa:	602b      	str	r3, [r5, #0]
 80077fc:	b016      	add	sp, #88	; 0x58
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	466a      	mov	r2, sp
 8007802:	f000 f849 	bl	8007898 <_fstat_r>
 8007806:	2800      	cmp	r0, #0
 8007808:	dbed      	blt.n	80077e6 <__swhatbuf_r+0x12>
 800780a:	9901      	ldr	r1, [sp, #4]
 800780c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007810:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007814:	4259      	negs	r1, r3
 8007816:	4159      	adcs	r1, r3
 8007818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800781c:	e7eb      	b.n	80077f6 <__swhatbuf_r+0x22>

0800781e <__smakebuf_r>:
 800781e:	898b      	ldrh	r3, [r1, #12]
 8007820:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007822:	079d      	lsls	r5, r3, #30
 8007824:	4606      	mov	r6, r0
 8007826:	460c      	mov	r4, r1
 8007828:	d507      	bpl.n	800783a <__smakebuf_r+0x1c>
 800782a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	6123      	str	r3, [r4, #16]
 8007832:	2301      	movs	r3, #1
 8007834:	6163      	str	r3, [r4, #20]
 8007836:	b002      	add	sp, #8
 8007838:	bd70      	pop	{r4, r5, r6, pc}
 800783a:	466a      	mov	r2, sp
 800783c:	ab01      	add	r3, sp, #4
 800783e:	f7ff ffc9 	bl	80077d4 <__swhatbuf_r>
 8007842:	9900      	ldr	r1, [sp, #0]
 8007844:	4605      	mov	r5, r0
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff fbb8 	bl	8006fbc <_malloc_r>
 800784c:	b948      	cbnz	r0, 8007862 <__smakebuf_r+0x44>
 800784e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007852:	059a      	lsls	r2, r3, #22
 8007854:	d4ef      	bmi.n	8007836 <__smakebuf_r+0x18>
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	f043 0302 	orr.w	r3, r3, #2
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	e7e3      	b.n	800782a <__smakebuf_r+0xc>
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	6020      	str	r0, [r4, #0]
 8007866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	9b00      	ldr	r3, [sp, #0]
 800786e:	6120      	str	r0, [r4, #16]
 8007870:	6163      	str	r3, [r4, #20]
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	b15b      	cbz	r3, 800788e <__smakebuf_r+0x70>
 8007876:	4630      	mov	r0, r6
 8007878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787c:	f000 f81e 	bl	80078bc <_isatty_r>
 8007880:	b128      	cbz	r0, 800788e <__smakebuf_r+0x70>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f023 0303 	bic.w	r3, r3, #3
 8007888:	f043 0301 	orr.w	r3, r3, #1
 800788c:	81a3      	strh	r3, [r4, #12]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	431d      	orrs	r5, r3
 8007892:	81a5      	strh	r5, [r4, #12]
 8007894:	e7cf      	b.n	8007836 <__smakebuf_r+0x18>
	...

08007898 <_fstat_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	2300      	movs	r3, #0
 800789c:	4d06      	ldr	r5, [pc, #24]	; (80078b8 <_fstat_r+0x20>)
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f7f9 fb8b 	bl	8000fc0 <_fstat>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d102      	bne.n	80078b4 <_fstat_r+0x1c>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	b103      	cbz	r3, 80078b4 <_fstat_r+0x1c>
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20001750 	.word	0x20001750

080078bc <_isatty_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	2300      	movs	r3, #0
 80078c0:	4d05      	ldr	r5, [pc, #20]	; (80078d8 <_isatty_r+0x1c>)
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	f7f9 fb89 	bl	8000fde <_isatty>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_isatty_r+0x1a>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_isatty_r+0x1a>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	20001750 	.word	0x20001750

080078dc <_sbrk_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	2300      	movs	r3, #0
 80078e0:	4d05      	ldr	r5, [pc, #20]	; (80078f8 <_sbrk_r+0x1c>)
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	f7f9 fb90 	bl	800100c <_sbrk>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_sbrk_r+0x1a>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_sbrk_r+0x1a>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	20001750 	.word	0x20001750

080078fc <memchr>:
 80078fc:	4603      	mov	r3, r0
 80078fe:	b510      	push	{r4, lr}
 8007900:	b2c9      	uxtb	r1, r1
 8007902:	4402      	add	r2, r0
 8007904:	4293      	cmp	r3, r2
 8007906:	4618      	mov	r0, r3
 8007908:	d101      	bne.n	800790e <memchr+0x12>
 800790a:	2000      	movs	r0, #0
 800790c:	e003      	b.n	8007916 <memchr+0x1a>
 800790e:	7804      	ldrb	r4, [r0, #0]
 8007910:	3301      	adds	r3, #1
 8007912:	428c      	cmp	r4, r1
 8007914:	d1f6      	bne.n	8007904 <memchr+0x8>
 8007916:	bd10      	pop	{r4, pc}

08007918 <_init>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr

08007924 <_fini>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	bf00      	nop
 8007928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792a:	bc08      	pop	{r3}
 800792c:	469e      	mov	lr, r3
 800792e:	4770      	bx	lr
