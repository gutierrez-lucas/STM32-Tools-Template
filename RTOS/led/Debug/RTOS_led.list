
RTOS_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db4  08003db4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003db4  08003db4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003db4  08003db4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a4  2000006c  08003e28  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001210  08003e28  00021210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec24  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271d  00000000  00000000  0002ecfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00031420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bde  00000000  00000000  00032370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a208  00000000  00000000  00032f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001188b  00000000  00000000  0004d156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094150  00000000  00000000  0005e9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044f8  00000000  00000000  000f2b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000f702c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cc4 	.word	0x08003cc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08003cc4 	.word	0x08003cc4

08000150 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <vApplicationGetIdleTaskMemory+0x28>)
 800018c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800018e:	68bb      	ldr	r3, [r7, #8]
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000192:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2280      	movs	r2, #128	; 0x80
 8000198:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000088 	.word	0x20000088
 80001a8:	200000e0 	.word	0x200000e0

080001ac <_write>:
#include <errno.h>
#include <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

UART_HandleTypeDef huart1;

int _write(int file, char *data, int len){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	60b9      	str	r1, [r7, #8]
 80001b6:	607a      	str	r2, [r7, #4]
         if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)){
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d00a      	beq.n	80001d4 <_write+0x28>
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	2b02      	cmp	r3, #2
 80001c2:	d007      	beq.n	80001d4 <_write+0x28>
                        errno = EBADF;
 80001c4:	f003 fb1e 	bl	8003804 <__errno>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2209      	movs	r2, #9
 80001cc:	601a      	str	r2, [r3, #0]
                        return -1;
 80001ce:	f04f 33ff 	mov.w	r3, #4294967295
 80001d2:	e00f      	b.n	80001f4 <_write+0x48>
         }
         HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001dc:	68b9      	ldr	r1, [r7, #8]
 80001de:	4807      	ldr	r0, [pc, #28]	; (80001fc <_write+0x50>)
 80001e0:	f001 fd24 	bl	8001c2c <HAL_UART_Transmit>
 80001e4:	4603      	mov	r3, r0
 80001e6:	75fb      	strb	r3, [r7, #23]

         return (status == HAL_OK ? len : 0);
 80001e8:	7dfb      	ldrb	r3, [r7, #23]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d101      	bne.n	80001f2 <_write+0x46>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	e000      	b.n	80001f4 <_write+0x48>
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3718      	adds	r7, #24
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200002e0 	.word	0x200002e0

08000200 <trace_toggle>:

void trace_toggle(int tag){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	if(tag == 1){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b01      	cmp	r3, #1
 800020c:	d105      	bne.n	800021a <trace_toggle+0x1a>
		HAL_GPIO_TogglePin(trace_1_GPIO_Port, trace_1_Pin);
 800020e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000212:	480c      	ldr	r0, [pc, #48]	; (8000244 <trace_toggle+0x44>)
 8000214:	f000 fe16 	bl	8000e44 <HAL_GPIO_TogglePin>
	}else if(tag == 2){
		HAL_GPIO_TogglePin(trace_2_GPIO_Port, trace_2_Pin);
	}else if(tag == 3){
		HAL_GPIO_TogglePin(trace_3_GPIO_Port, trace_3_Pin);
	}
}
 8000218:	e010      	b.n	800023c <trace_toggle+0x3c>
	}else if(tag == 2){
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2b02      	cmp	r3, #2
 800021e:	d105      	bne.n	800022c <trace_toggle+0x2c>
		HAL_GPIO_TogglePin(trace_2_GPIO_Port, trace_2_Pin);
 8000220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000224:	4807      	ldr	r0, [pc, #28]	; (8000244 <trace_toggle+0x44>)
 8000226:	f000 fe0d 	bl	8000e44 <HAL_GPIO_TogglePin>
}
 800022a:	e007      	b.n	800023c <trace_toggle+0x3c>
	}else if(tag == 3){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b03      	cmp	r3, #3
 8000230:	d104      	bne.n	800023c <trace_toggle+0x3c>
		HAL_GPIO_TogglePin(trace_3_GPIO_Port, trace_3_Pin);
 8000232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000236:	4803      	ldr	r0, [pc, #12]	; (8000244 <trace_toggle+0x44>)
 8000238:	f000 fe04 	bl	8000e44 <HAL_GPIO_TogglePin>
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010800 	.word	0x40010800

08000248 <trace_off>:
	}else if(tag == 3){
		HAL_GPIO_WritePin(trace_3_GPIO_Port, trace_3_Pin, GPIO_PIN_SET);
	}
}

void trace_off(int tag){
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	if(tag == 1){
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d106      	bne.n	8000264 <trace_off+0x1c>
		HAL_GPIO_WritePin(trace_1_GPIO_Port, trace_1_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <trace_off+0x4c>)
 800025e:	f000 fdd9 	bl	8000e14 <HAL_GPIO_WritePin>
	}else if(tag == 2){
		HAL_GPIO_WritePin(trace_2_GPIO_Port, trace_2_Pin, GPIO_PIN_RESET);
	}else if(tag == 3){
		HAL_GPIO_WritePin(trace_3_GPIO_Port, trace_3_Pin, GPIO_PIN_RESET);
	}
}
 8000262:	e012      	b.n	800028a <trace_off+0x42>
	}else if(tag == 2){
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b02      	cmp	r3, #2
 8000268:	d106      	bne.n	8000278 <trace_off+0x30>
		HAL_GPIO_WritePin(trace_2_GPIO_Port, trace_2_Pin, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000270:	4808      	ldr	r0, [pc, #32]	; (8000294 <trace_off+0x4c>)
 8000272:	f000 fdcf 	bl	8000e14 <HAL_GPIO_WritePin>
}
 8000276:	e008      	b.n	800028a <trace_off+0x42>
	}else if(tag == 3){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b03      	cmp	r3, #3
 800027c:	d105      	bne.n	800028a <trace_off+0x42>
		HAL_GPIO_WritePin(trace_3_GPIO_Port, trace_3_Pin, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <trace_off+0x4c>)
 8000286:	f000 fdc5 	bl	8000e14 <HAL_GPIO_WritePin>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010800 	.word	0x40010800

08000298 <main>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);

int main(void){
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af02      	add	r7, sp, #8

	HAL_Init();
 800029e:	f000 fb23 	bl	80008e8 <HAL_Init>
	SystemClock_Config();
 80002a2:	f000 f863 	bl	800036c <SystemClock_Config>

	MX_GPIO_Init();
 80002a6:	f000 f8d1 	bl	800044c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80002aa:	f000 f8a5 	bl	80003f8 <MX_USART1_UART_Init>

	printf("Led test\r\n");
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <main+0x4c>)
 80002b0:	f003 f97a 	bl	80035a8 <puts>

	xTaskCreate(led_task_1, "led_task_1", 128, NULL, tskIDLE_PRIORITY+1, NULL);
 80002b4:	2300      	movs	r3, #0
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2301      	movs	r3, #1
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2300      	movs	r3, #0
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	4909      	ldr	r1, [pc, #36]	; (80002e8 <main+0x50>)
 80002c2:	480a      	ldr	r0, [pc, #40]	; (80002ec <main+0x54>)
 80002c4:	f001 ff3d 	bl	8002142 <xTaskCreate>
	xTaskCreate(led_task_2, "led_task_2", 128, NULL, tskIDLE_PRIORITY+2, NULL);
 80002c8:	2300      	movs	r3, #0
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	2302      	movs	r3, #2
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2300      	movs	r3, #0
 80002d2:	2280      	movs	r2, #128	; 0x80
 80002d4:	4906      	ldr	r1, [pc, #24]	; (80002f0 <main+0x58>)
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <main+0x5c>)
 80002d8:	f001 ff33 	bl	8002142 <xTaskCreate>
	vTaskStartScheduler();
 80002dc:	f002 f914 	bl	8002508 <vTaskStartScheduler>

	while (1){
 80002e0:	e7fe      	b.n	80002e0 <main+0x48>
 80002e2:	bf00      	nop
 80002e4:	08003cdc 	.word	0x08003cdc
 80002e8:	08003ce8 	.word	0x08003ce8
 80002ec:	080002f9 	.word	0x080002f9
 80002f0:	08003cf4 	.word	0x08003cf4
 80002f4:	08000339 	.word	0x08000339

080002f8 <led_task_1>:
	}
}

void led_task_1(void *pvParameters){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
 8000300:	2101      	movs	r1, #1
 8000302:	2000      	movs	r0, #0
 8000304:	f002 fad6 	bl	80028b4 <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000308:	f002 fa08 	bl	800271c <xTaskGetTickCount>
 800030c:	4603      	mov	r3, r0
 800030e:	60fb      	str	r3, [r7, #12]

	while(1){
		printf("Task 2ooasdkljahskjdhakjshdkajhsdkjhaskdhakshjdkajhsdkjahskdjhaksjdhkajhsdkjahskjdhakjsdhkajshdkjahsdkjahskdjhaskdjhaksjdhaksj\r\n");
 8000310:	4807      	ldr	r0, [pc, #28]	; (8000330 <led_task_1+0x38>)
 8000312:	f003 f949 	bl	80035a8 <puts>
		HAL_GPIO_TogglePin(main_led_GPIO_Port, main_led_Pin);
 8000316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800031a:	4806      	ldr	r0, [pc, #24]	; (8000334 <led_task_1+0x3c>)
 800031c:	f000 fd92 	bl	8000e44 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(500));
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000328:	4618      	mov	r0, r3
 800032a:	f002 f83b 	bl	80023a4 <vTaskDelayUntil>
	while(1){
 800032e:	e7ef      	b.n	8000310 <led_task_1+0x18>
 8000330:	08003d00 	.word	0x08003d00
 8000334:	40010c00 	.word	0x40010c00

08000338 <led_task_2>:
	}
}

void led_task_2(void *pvParameters){
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
 8000340:	2102      	movs	r1, #2
 8000342:	2000      	movs	r0, #0
 8000344:	f002 fab6 	bl	80028b4 <vTaskSetApplicationTaskTag>
	while(1){
		printf("Task 2ooasdkljahskjdhakjshdkajhsdkjhaskdhakshjdkajhsdkjahskdjhaksjdhkajhsdkjahskjdhakjsdhkajshdkjahsdkjahskdjhaskdjhaksjdhaksj\r\n");
 8000348:	4806      	ldr	r0, [pc, #24]	; (8000364 <led_task_2+0x2c>)
 800034a:	f003 f92d 	bl	80035a8 <puts>
		HAL_GPIO_TogglePin(sec_led_GPIO_Port, sec_led_Pin);
 800034e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <led_task_2+0x30>)
 8000354:	f000 fd76 	bl	8000e44 <HAL_GPIO_TogglePin>
		vTaskDelay(550 / portTICK_PERIOD_MS);
 8000358:	f240 2026 	movw	r0, #550	; 0x226
 800035c:	f002 f8a0 	bl	80024a0 <vTaskDelay>
	while(1){
 8000360:	e7f2      	b.n	8000348 <led_task_2+0x10>
 8000362:	bf00      	nop
 8000364:	08003d00 	.word	0x08003d00
 8000368:	40010c00 	.word	0x40010c00

0800036c <SystemClock_Config>:
	}
}
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b090      	sub	sp, #64	; 0x40
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f003 f9f4 	bl	8003768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038e:	2301      	movs	r3, #1
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039c:	2301      	movs	r3, #1
 800039e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b0:	f107 0318 	add.w	r3, r7, #24
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fd5f 	bl	8000e78 <HAL_RCC_OscConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x58>
  {
   Error_Handler();
 80003c0:	f000 f8b8 	bl	8000534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c4:	230f      	movs	r3, #15
 80003c6:	607b      	str	r3, [r7, #4]
					   |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c8:	2302      	movs	r3, #2
 80003ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 ffcc 	bl	800137c <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x82>
  {
   Error_Handler();
 80003ea:	f000 f8a3 	bl	8000534 <Error_Handler>
  }
}
 80003ee:	bf00      	nop
 80003f0:	3740      	adds	r7, #64	; 0x40
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 80003fe:	4a12      	ldr	r2, [pc, #72]	; (8000448 <MX_USART1_UART_Init+0x50>)
 8000400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042e:	4805      	ldr	r0, [pc, #20]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000430:	f001 fbac 	bl	8001b8c <HAL_UART_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_USART1_UART_Init+0x46>
  {
   Error_Handler();
 800043a:	f000 f87b 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	200002e0 	.word	0x200002e0
 8000448:	40013800 	.word	0x40013800

0800044c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000460:	4b28      	ldr	r3, [pc, #160]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a27      	ldr	r2, [pc, #156]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000466:	f043 0320 	orr.w	r3, r3, #32
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b25      	ldr	r3, [pc, #148]	; (8000504 <MX_GPIO_Init+0xb8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0320 	and.w	r3, r3, #32
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b22      	ldr	r3, [pc, #136]	; (8000504 <MX_GPIO_Init+0xb8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a21      	ldr	r2, [pc, #132]	; (8000504 <MX_GPIO_Init+0xb8>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0308 	and.w	r3, r3, #8
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <MX_GPIO_Init+0xb8>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, sec_led_Pin|main_led_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80004ae:	4816      	ldr	r0, [pc, #88]	; (8000508 <MX_GPIO_Init+0xbc>)
 80004b0:	f000 fcb0 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, trace_1_Pin|trace_2_Pin|trace_3_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80004ba:	4814      	ldr	r0, [pc, #80]	; (800050c <MX_GPIO_Init+0xc0>)
 80004bc:	f000 fcaa 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : sec_led_Pin main_led_Pin */
  GPIO_InitStruct.Pin = sec_led_Pin|main_led_Pin;
 80004c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2302      	movs	r3, #2
 80004d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	4619      	mov	r1, r3
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <MX_GPIO_Init+0xbc>)
 80004da:	f000 fb17 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : trace_1_Pin trace_2_Pin trace_3_Pin */
  GPIO_InitStruct.Pin = trace_1_Pin|trace_2_Pin|trace_3_Pin;
 80004de:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80004e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004e8:	2302      	movs	r3, #2
 80004ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2302      	movs	r3, #2
 80004ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_GPIO_Init+0xc0>)
 80004f8:	f000 fb08 	bl	8000b0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fc:	bf00      	nop
 80004fe:	3720      	adds	r7, #32
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	40010c00 	.word	0x40010c00
 800050c:	40010800 	.word	0x40010800

08000510 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d101      	bne.n	8000526 <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 8000522:	f000 f9f7 	bl	8000914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40012c00 	.word	0x40012c00

08000534 <Error_Handler>:

void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_MspInit+0x68>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <HAL_MspInit+0x68>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <HAL_MspInit+0x68>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_MspInit+0x68>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <HAL_MspInit+0x68>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x68>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	210f      	movs	r1, #15
 800057a:	f06f 0001 	mvn.w	r0, #1
 800057e:	f000 fa9a 	bl	8000ab6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_MspInit+0x6c>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_MspInit+0x6c>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010000 	.word	0x40010000

080005b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a22      	ldr	r2, [pc, #136]	; (8000654 <HAL_UART_MspInit+0xa4>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d13d      	bne.n	800064c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <HAL_UART_MspInit+0xa8>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <HAL_UART_MspInit+0xa8>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <HAL_UART_MspInit+0xa8>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <HAL_UART_MspInit+0xa8>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <HAL_UART_MspInit+0xa8>)
 80005ee:	f043 0308 	orr.w	r3, r3, #8
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_UART_MspInit+0xa8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000600:	2340      	movs	r3, #64	; 0x40
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <HAL_UART_MspInit+0xac>)
 8000614:	f000 fa7a 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <HAL_UART_MspInit+0xac>)
 800062c:	f000 fa6e 	bl	8000b0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_UART_MspInit+0xb0>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000638:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
 8000646:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_UART_MspInit+0xb0>)
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40013800 	.word	0x40013800
 8000658:	40021000 	.word	0x40021000
 800065c:	40010c00 	.word	0x40010c00
 8000660:	40010000 	.word	0x40010000

08000664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800066c:	2300      	movs	r3, #0
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000674:	2300      	movs	r3, #0
 8000676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800067a:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <HAL_InitTick+0xd0>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a2d      	ldr	r2, [pc, #180]	; (8000734 <HAL_InitTick+0xd0>)
 8000680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <HAL_InitTick+0xd0>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000692:	f107 020c 	add.w	r2, r7, #12
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 ffdd 	bl	800165c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006a2:	f000 ffc7 	bl	8001634 <HAL_RCC_GetPCLK2Freq>
 80006a6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <HAL_InitTick+0xd4>)
 80006ac:	fba2 2303 	umull	r2, r3, r2, r3
 80006b0:	0c9b      	lsrs	r3, r3, #18
 80006b2:	3b01      	subs	r3, #1
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <HAL_InitTick+0xd8>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <HAL_InitTick+0xdc>)
 80006ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <HAL_InitTick+0xd8>)
 80006be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006c2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006c4:	4a1d      	ldr	r2, [pc, #116]	; (800073c <HAL_InitTick+0xd8>)
 80006c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_InitTick+0xd8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <HAL_InitTick+0xd8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <HAL_InitTick+0xd8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80006dc:	4817      	ldr	r0, [pc, #92]	; (800073c <HAL_InitTick+0xd8>)
 80006de:	f001 f80b 	bl	80016f8 <HAL_TIM_Base_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80006e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d11b      	bne.n	8000728 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80006f0:	4812      	ldr	r0, [pc, #72]	; (800073c <HAL_InitTick+0xd8>)
 80006f2:	f001 f859 	bl	80017a8 <HAL_TIM_Base_Start_IT>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80006fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000700:	2b00      	cmp	r3, #0
 8000702:	d111      	bne.n	8000728 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000704:	2019      	movs	r0, #25
 8000706:	f000 f9f2 	bl	8000aee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d808      	bhi.n	8000722 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000710:	2200      	movs	r2, #0
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	2019      	movs	r0, #25
 8000716:	f000 f9ce 	bl	8000ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_InitTick+0xe0>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	e002      	b.n	8000728 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800072c:	4618      	mov	r0, r3
 800072e:	3730      	adds	r7, #48	; 0x30
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000
 8000738:	431bde83 	.word	0x431bde83
 800073c:	20000328 	.word	0x20000328
 8000740:	40012c00 	.word	0x40012c00
 8000744:	20000004 	.word	0x20000004

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
	...

08000774 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <TIM1_UP_IRQHandler+0x10>)
 800077a:	f001 f867 	bl	800184c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000328 	.word	0x20000328

08000788 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e00a      	b.n	80007b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800079a:	f3af 8000 	nop.w
 800079e:	4601      	mov	r1, r0
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	60ba      	str	r2, [r7, #8]
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dbf0      	blt.n	800079a <_read+0x12>
  }

  return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007e8:	605a      	str	r2, [r3, #4]
  return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <_isatty>:

int _isatty(int file)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800080a:	b480      	push	{r7}
 800080c:	b085      	sub	sp, #20
 800080e:	af00      	add	r7, sp, #0
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
	...

08000824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <_sbrk+0x5c>)
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <_sbrk+0x60>)
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <_sbrk+0x64>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <_sbrk+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	429a      	cmp	r2, r3
 8000852:	d207      	bcs.n	8000864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000854:	f002 ffd6 	bl	8003804 <__errno>
 8000858:	4603      	mov	r3, r0
 800085a:	220c      	movs	r2, #12
 800085c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	e009      	b.n	8000878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <_sbrk+0x64>)
 8000874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20005000 	.word	0x20005000
 8000884:	00000400 	.word	0x00000400
 8000888:	20000370 	.word	0x20000370
 800088c:	20001210 	.word	0x20001210

08000890 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800089c:	f7ff fff8 	bl	8000890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008a2:	490c      	ldr	r1, [pc, #48]	; (80008d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a09      	ldr	r2, [pc, #36]	; (80008dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b8:	4c09      	ldr	r4, [pc, #36]	; (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f002 ffa3 	bl	8003810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fce5 	bl	8000298 <main>
  bx lr
 80008ce:	4770      	bx	lr
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008d8:	08003dbc 	.word	0x08003dbc
  ldr r2, =_sbss
 80008dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008e0:	20001210 	.word	0x20001210

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f8d1 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	200f      	movs	r0, #15
 8000900:	f7ff feb0 	bl	8000664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fe1c 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	20000374 	.word	0x20000374

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000374 	.word	0x20000374

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4906      	ldr	r1, [pc, #24]	; (80009e4 <__NVIC_EnableIRQ+0x34>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff4f 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff64 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ffb2 	bl	8000a3c <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff81 	bl	80009e8 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff57 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	e169      	b.n	8000df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b20:	2201      	movs	r2, #1
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8158 	bne.w	8000dee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a9a      	ldr	r2, [pc, #616]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d05e      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b48:	4a98      	ldr	r2, [pc, #608]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d875      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b4e:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d058      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b54:	4a96      	ldr	r2, [pc, #600]	; (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d86f      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b5a:	4a96      	ldr	r2, [pc, #600]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d052      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b60:	4a94      	ldr	r2, [pc, #592]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d869      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b66:	4a94      	ldr	r2, [pc, #592]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d04c      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a92      	ldr	r2, [pc, #584]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d863      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b72:	4a92      	ldr	r2, [pc, #584]	; (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d046      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b78:	4a90      	ldr	r2, [pc, #576]	; (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d85d      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d82a      	bhi.n	8000bd8 <HAL_GPIO_Init+0xcc>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d859      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_Init+0x80>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000be1 	.word	0x08000be1
 8000b94:	08000bf3 	.word	0x08000bf3
 8000b98:	08000c35 	.word	0x08000c35
 8000b9c:	08000c3b 	.word	0x08000c3b
 8000ba0:	08000c3b 	.word	0x08000c3b
 8000ba4:	08000c3b 	.word	0x08000c3b
 8000ba8:	08000c3b 	.word	0x08000c3b
 8000bac:	08000c3b 	.word	0x08000c3b
 8000bb0:	08000c3b 	.word	0x08000c3b
 8000bb4:	08000c3b 	.word	0x08000c3b
 8000bb8:	08000c3b 	.word	0x08000c3b
 8000bbc:	08000c3b 	.word	0x08000c3b
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c3b 	.word	0x08000c3b
 8000bc8:	08000c3b 	.word	0x08000c3b
 8000bcc:	08000c3b 	.word	0x08000c3b
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000bfd 	.word	0x08000bfd
 8000bd8:	4a79      	ldr	r2, [pc, #484]	; (8000dc0 <HAL_GPIO_Init+0x2b4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bde:	e02c      	b.n	8000c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e029      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	3304      	adds	r3, #4
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e024      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e01f      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	330c      	adds	r3, #12
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e01a      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e013      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	611a      	str	r2, [r3, #16]
          break;
 8000c26:	e009      	b.n	8000c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	615a      	str	r2, [r3, #20]
          break;
 8000c32:	e003      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          break;
 8000c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2bff      	cmp	r3, #255	; 0xff
 8000c40:	d801      	bhi.n	8000c46 <HAL_GPIO_Init+0x13a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	e001      	b.n	8000c4a <HAL_GPIO_Init+0x13e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d802      	bhi.n	8000c58 <HAL_GPIO_Init+0x14c>
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x152>
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	3b08      	subs	r3, #8
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	210f      	movs	r1, #15
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	6a39      	ldr	r1, [r7, #32]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80b1 	beq.w	8000dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8c:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a4c      	ldr	r2, [pc, #304]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca4:	4a48      	ldr	r2, [pc, #288]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a40      	ldr	r2, [pc, #256]	; (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d013      	beq.n	8000cf8 <HAL_GPIO_Init+0x1ec>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3f      	ldr	r2, [pc, #252]	; (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e8>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x1e4>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_GPIO_Init+0x1e0>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e006      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cec:	2304      	movs	r3, #4
 8000cee:	e004      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e002      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cfc:	f002 0203 	and.w	r2, r2, #3
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	4093      	lsls	r3, r2
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d0a:	492f      	ldr	r1, [pc, #188]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	492c      	ldr	r1, [pc, #176]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	608b      	str	r3, [r1, #8]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4928      	ldr	r1, [pc, #160]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	4922      	ldr	r1, [pc, #136]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60cb      	str	r3, [r1, #12]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	491e      	ldr	r1, [pc, #120]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	4918      	ldr	r1, [pc, #96]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4914      	ldr	r1, [pc, #80]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d021      	beq.n	8000de0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	490e      	ldr	r1, [pc, #56]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	e021      	b.n	8000dee <HAL_GPIO_Init+0x2e2>
 8000daa:	bf00      	nop
 8000dac:	10320000 	.word	0x10320000
 8000db0:	10310000 	.word	0x10310000
 8000db4:	10220000 	.word	0x10220000
 8000db8:	10210000 	.word	0x10210000
 8000dbc:	10120000 	.word	0x10120000
 8000dc0:	10110000 	.word	0x10110000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40011400 	.word	0x40011400
 8000ddc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_GPIO_Init+0x304>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	4909      	ldr	r1, [pc, #36]	; (8000e10 <HAL_GPIO_Init+0x304>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	3301      	adds	r3, #1
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f47f ae8e 	bne.w	8000b20 <HAL_GPIO_Init+0x14>
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	372c      	adds	r7, #44	; 0x2c
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e30:	e003      	b.n	8000e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	041a      	lsls	r2, r3, #16
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	611a      	str	r2, [r3, #16]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	041a      	lsls	r2, r3, #16
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43d9      	mvns	r1, r3
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	400b      	ands	r3, r1
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	611a      	str	r2, [r3, #16]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
	...

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e272      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8087 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e98:	4b92      	ldr	r3, [pc, #584]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 030c 	and.w	r3, r3, #12
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	d00c      	beq.n	8000ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea4:	4b8f      	ldr	r3, [pc, #572]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	d112      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
 8000eb0:	4b8c      	ldr	r3, [pc, #560]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebe:	4b89      	ldr	r3, [pc, #548]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d06c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d168      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e24c      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x76>
 8000ee0:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a7f      	ldr	r2, [pc, #508]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e02e      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x98>
 8000ef6:	4b7b      	ldr	r3, [pc, #492]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7a      	ldr	r2, [pc, #488]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b78      	ldr	r3, [pc, #480]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a77      	ldr	r2, [pc, #476]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e01d      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0xbc>
 8000f1a:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a71      	ldr	r2, [pc, #452]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a6e      	ldr	r2, [pc, #440]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f34:	4b6b      	ldr	r3, [pc, #428]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a6a      	ldr	r2, [pc, #424]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a67      	ldr	r2, [pc, #412]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fcf0 	bl	8000938 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fcec 	bl	8000938 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e200      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0xe4>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fcdc 	bl	8000938 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fcd8 	bl	8000938 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e1ec      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x10c>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d063      	beq.n	800107a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d11c      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d116      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d001      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e1c0      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4939      	ldr	r1, [pc, #228]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	e03a      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d020      	beq.n	800104e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fc91 	bl	8000938 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fc8d 	bl	8000938 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e1a1      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e015      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fc70 	bl	8000938 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105c:	f7ff fc6c 	bl	8000938 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e180      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d03a      	beq.n	80010fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d019      	beq.n	80010c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fc50 	bl	8000938 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff fc4c 	bl	8000938 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e160      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 fafe 	bl	80016bc <RCC_Delay>
 80010c0:	e01c      	b.n	80010fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fc36 	bl	8000938 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ce:	e00f      	b.n	80010f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d0:	f7ff fc32 	bl	8000938 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d908      	bls.n	80010f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e146      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	42420000 	.word	0x42420000
 80010ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	4b92      	ldr	r3, [pc, #584]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e9      	bne.n	80010d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80a6 	beq.w	8001256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110e:	4b8b      	ldr	r3, [pc, #556]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10d      	bne.n	8001136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b88      	ldr	r3, [pc, #544]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a87      	ldr	r2, [pc, #540]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b85      	ldr	r3, [pc, #532]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001132:	2301      	movs	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	4b82      	ldr	r3, [pc, #520]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d118      	bne.n	8001174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001142:	4b7f      	ldr	r3, [pc, #508]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a7e      	ldr	r2, [pc, #504]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114e:	f7ff fbf3 	bl	8000938 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001156:	f7ff fbef 	bl	8000938 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b64      	cmp	r3, #100	; 0x64
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e103      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	4b75      	ldr	r3, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x312>
 800117c:	4b6f      	ldr	r3, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a6e      	ldr	r2, [pc, #440]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	e02d      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x334>
 8001192:	4b6a      	ldr	r3, [pc, #424]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a69      	ldr	r2, [pc, #420]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b67      	ldr	r3, [pc, #412]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a66      	ldr	r2, [pc, #408]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	e01c      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d10c      	bne.n	80011ce <HAL_RCC_OscConfig+0x356>
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a60      	ldr	r2, [pc, #384]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6213      	str	r3, [r2, #32]
 80011c0:	4b5e      	ldr	r3, [pc, #376]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a5d      	ldr	r2, [pc, #372]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6213      	str	r3, [r2, #32]
 80011cc:	e00b      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a5a      	ldr	r2, [pc, #360]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	4b58      	ldr	r3, [pc, #352]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4a57      	ldr	r2, [pc, #348]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d015      	beq.n	800121a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fba3 	bl	8000938 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fb9f 	bl	8000938 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0b1      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	4b4b      	ldr	r3, [pc, #300]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0ee      	beq.n	80011f6 <HAL_RCC_OscConfig+0x37e>
 8001218:	e014      	b.n	8001244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fb8d 	bl	8000938 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fb89 	bl	8000938 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e09b      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	4b40      	ldr	r3, [pc, #256]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ee      	bne.n	8001222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d105      	bne.n	8001256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a3b      	ldr	r2, [pc, #236]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8087 	beq.w	800136e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d061      	beq.n	8001330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d146      	bne.n	8001302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_RCC_OscConfig+0x4cc>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fb5d 	bl	8000938 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff fb59 	bl	8000938 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e06d      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d108      	bne.n	80012bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4921      	ldr	r1, [pc, #132]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a19      	ldr	r1, [r3, #32]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	430b      	orrs	r3, r1
 80012ce:	491b      	ldr	r1, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_RCC_OscConfig+0x4cc>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fb2d 	bl	8000938 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff fb29 	bl	8000938 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e03d      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x46a>
 8001300:	e035      	b.n	800136e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_RCC_OscConfig+0x4cc>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fb16 	bl	8000938 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fb12 	bl	8000938 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e026      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x498>
 800132e:	e01e      	b.n	800136e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d107      	bne.n	8001348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e019      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
 800133c:	40021000 	.word	0x40021000
 8001340:	40007000 	.word	0x40007000
 8001344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_OscConfig+0x500>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	429a      	cmp	r2, r3
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0d0      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d910      	bls.n	80013c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 0207 	bic.w	r2, r3, #7
 80013a6:	4965      	ldr	r1, [pc, #404]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0b8      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d8:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a58      	ldr	r2, [pc, #352]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f0:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a52      	ldr	r2, [pc, #328]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fc:	4b50      	ldr	r3, [pc, #320]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	494d      	ldr	r1, [pc, #308]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d040      	beq.n	800149c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d115      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e07f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	4b41      	ldr	r3, [pc, #260]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e073      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e06b      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145a:	4b39      	ldr	r3, [pc, #228]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f023 0203 	bic.w	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4936      	ldr	r1, [pc, #216]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800146c:	f7ff fa64 	bl	8000938 <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001472:	e00a      	b.n	800148a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001474:	f7ff fa60 	bl	8000938 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e053      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 020c 	and.w	r2, r3, #12
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	429a      	cmp	r2, r3
 800149a:	d1eb      	bne.n	8001474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d210      	bcs.n	80014cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 0207 	bic.w	r2, r3, #7
 80014b2:	4922      	ldr	r1, [pc, #136]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e032      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4916      	ldr	r1, [pc, #88]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	490e      	ldr	r1, [pc, #56]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150a:	f000 f821 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 800150e:	4602      	mov	r2, r0
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	490a      	ldr	r1, [pc, #40]	; (8001544 <HAL_RCC_ClockConfig+0x1c8>)
 800151c:	5ccb      	ldrb	r3, [r1, r3]
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1cc>)
 8001524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1d0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f89a 	bl	8000664 <HAL_InitTick>

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40022000 	.word	0x40022000
 8001540:	40021000 	.word	0x40021000
 8001544:	08003d88 	.word	0x08003d88
 8001548:	20000000 	.word	0x20000000
 800154c:	20000004 	.word	0x20000004

08001550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b04      	cmp	r3, #4
 8001578:	d002      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x30>
 800157a:	2b08      	cmp	r3, #8
 800157c:	d003      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x36>
 800157e:	e027      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001582:	613b      	str	r3, [r7, #16]
      break;
 8001584:	e027      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	0c5b      	lsrs	r3, r3, #17
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015b2:	fb03 f202 	mul.w	r2, r3, r2
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e004      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	613b      	str	r3, [r7, #16]
      break;
 80015ce:	e002      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015d2:	613b      	str	r3, [r7, #16]
      break;
 80015d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d6:	693b      	ldr	r3, [r7, #16]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	007a1200 	.word	0x007a1200
 80015ec:	08003da0 	.word	0x08003da0
 80015f0:	08003db0 	.word	0x08003db0
 80015f4:	003d0900 	.word	0x003d0900

080015f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_RCC_GetHCLKFreq+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000000 	.word	0x20000000

0800160c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001610:	f7ff fff2 	bl	80015f8 <HAL_RCC_GetHCLKFreq>
 8001614:	4602      	mov	r2, r0
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	4903      	ldr	r1, [pc, #12]	; (8001630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	08003d98 	.word	0x08003d98

08001634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001638:	f7ff ffde 	bl	80015f8 <HAL_RCC_GetHCLKFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0adb      	lsrs	r3, r3, #11
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	08003d98 	.word	0x08003d98

0800165c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	220f      	movs	r2, #15
 800166a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_RCC_GetClockConfig+0x58>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_RCC_GetClockConfig+0x58>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_GetClockConfig+0x58>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_RCC_GetClockConfig+0x58>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	08db      	lsrs	r3, r3, #3
 8001696:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_RCC_GetClockConfig+0x5c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0207 	and.w	r2, r3, #7
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40022000 	.word	0x40022000

080016bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <RCC_Delay+0x34>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <RCC_Delay+0x38>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0a5b      	lsrs	r3, r3, #9
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016d8:	bf00      	nop
  }
  while (Delay --);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1e5a      	subs	r2, r3, #1
 80016de:	60fa      	str	r2, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f9      	bne.n	80016d8 <RCC_Delay+0x1c>
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000000 	.word	0x20000000
 80016f4:	10624dd3 	.word	0x10624dd3

080016f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e041      	b.n	800178e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f839 	bl	8001796 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3304      	adds	r3, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4610      	mov	r0, r2
 8001738:	f000 f9b4 	bl	8001aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d001      	beq.n	80017c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e03a      	b.n	8001836 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a18      	ldr	r2, [pc, #96]	; (8001840 <HAL_TIM_Base_Start_IT+0x98>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00e      	beq.n	8001800 <HAL_TIM_Base_Start_IT+0x58>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ea:	d009      	beq.n	8001800 <HAL_TIM_Base_Start_IT+0x58>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_TIM_Base_Start_IT+0x9c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d004      	beq.n	8001800 <HAL_TIM_Base_Start_IT+0x58>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a13      	ldr	r2, [pc, #76]	; (8001848 <HAL_TIM_Base_Start_IT+0xa0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d111      	bne.n	8001824 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b06      	cmp	r3, #6
 8001810:	d010      	beq.n	8001834 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0201 	orr.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001822:	e007      	b.n	8001834 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40012c00 	.word	0x40012c00
 8001844:	40000400 	.word	0x40000400
 8001848:	40000800 	.word	0x40000800

0800184c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d122      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b02      	cmp	r3, #2
 800186e:	d11b      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0202 	mvn.w	r2, #2
 8001878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f8ed 	bl	8001a6e <HAL_TIM_IC_CaptureCallback>
 8001894:	e005      	b.n	80018a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f8e0 	bl	8001a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f8ef 	bl	8001a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d122      	bne.n	80018fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d11b      	bne.n	80018fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0204 	mvn.w	r2, #4
 80018cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8c3 	bl	8001a6e <HAL_TIM_IC_CaptureCallback>
 80018e8:	e005      	b.n	80018f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f8b6 	bl	8001a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f8c5 	bl	8001a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b08      	cmp	r3, #8
 8001908:	d122      	bne.n	8001950 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b08      	cmp	r3, #8
 8001916:	d11b      	bne.n	8001950 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0208 	mvn.w	r2, #8
 8001920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2204      	movs	r2, #4
 8001926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f899 	bl	8001a6e <HAL_TIM_IC_CaptureCallback>
 800193c:	e005      	b.n	800194a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f88c 	bl	8001a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f89b 	bl	8001a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b10      	cmp	r3, #16
 800195c:	d122      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b10      	cmp	r3, #16
 800196a:	d11b      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0210 	mvn.w	r2, #16
 8001974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2208      	movs	r2, #8
 800197a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f86f 	bl	8001a6e <HAL_TIM_IC_CaptureCallback>
 8001990:	e005      	b.n	800199e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f862 	bl	8001a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f871 	bl	8001a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d10e      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d107      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f06f 0201 	mvn.w	r2, #1
 80019c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7fe fda0 	bl	8000510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	2b80      	cmp	r3, #128	; 0x80
 80019dc:	d10e      	bne.n	80019fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e8:	2b80      	cmp	r3, #128	; 0x80
 80019ea:	d107      	bne.n	80019fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f8bf 	bl	8001b7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	2b40      	cmp	r3, #64	; 0x40
 8001a08:	d10e      	bne.n	8001a28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a14:	2b40      	cmp	r3, #64	; 0x40
 8001a16:	d107      	bne.n	8001a28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f835 	bl	8001a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d10e      	bne.n	8001a54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d107      	bne.n	8001a54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0220 	mvn.w	r2, #32
 8001a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f88a 	bl	8001b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a29      	ldr	r2, [pc, #164]	; (8001b5c <TIM_Base_SetConfig+0xb8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00b      	beq.n	8001ad4 <TIM_Base_SetConfig+0x30>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac2:	d007      	beq.n	8001ad4 <TIM_Base_SetConfig+0x30>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <TIM_Base_SetConfig+0xbc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d003      	beq.n	8001ad4 <TIM_Base_SetConfig+0x30>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a25      	ldr	r2, [pc, #148]	; (8001b64 <TIM_Base_SetConfig+0xc0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d108      	bne.n	8001ae6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <TIM_Base_SetConfig+0xb8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00b      	beq.n	8001b06 <TIM_Base_SetConfig+0x62>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af4:	d007      	beq.n	8001b06 <TIM_Base_SetConfig+0x62>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <TIM_Base_SetConfig+0xbc>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d003      	beq.n	8001b06 <TIM_Base_SetConfig+0x62>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <TIM_Base_SetConfig+0xc0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d108      	bne.n	8001b18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <TIM_Base_SetConfig+0xb8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d103      	bne.n	8001b4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	615a      	str	r2, [r3, #20]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40000800 	.word	0x40000800

08001b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e042      	b.n	8001c24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fcfc 	bl	80005b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2224      	movs	r2, #36	; 0x24
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f91d 	bl	8001e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d16d      	bne.n	8001d28 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HAL_UART_Transmit+0x2c>
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e066      	b.n	8001d2a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2221      	movs	r2, #33	; 0x21
 8001c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c6a:	f7fe fe65 	bl	8000938 <HAL_GetTick>
 8001c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	88fa      	ldrh	r2, [r7, #6]
 8001c74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c84:	d108      	bne.n	8001c98 <HAL_UART_Transmit+0x6c>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d104      	bne.n	8001c98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	e003      	b.n	8001ca0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ca0:	e02a      	b.n	8001cf8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f840 	bl	8001d32 <UART_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e036      	b.n	8001d2a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10b      	bne.n	8001cda <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	e007      	b.n	8001cea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1cf      	bne.n	8001ca2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2140      	movs	r1, #64	; 0x40
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f810 	bl	8001d32 <UART_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e006      	b.n	8001d2a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e000      	b.n	8001d2a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
  }
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b090      	sub	sp, #64	; 0x40
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d42:	e050      	b.n	8001de6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4a:	d04c      	beq.n	8001de6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d52:	f7fe fdf1 	bl	8000938 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d241      	bcs.n	8001de6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	330c      	adds	r3, #12
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	e853 3f00 	ldrex	r3, [r3]
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	330c      	adds	r3, #12
 8001d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d82:	637a      	str	r2, [r7, #52]	; 0x34
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d8a:	e841 2300 	strex	r3, r2, [r1]
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e5      	bne.n	8001d62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3314      	adds	r3, #20
 8001d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	e853 3f00 	ldrex	r3, [r3]
 8001da4:	613b      	str	r3, [r7, #16]
   return(result);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3314      	adds	r3, #20
 8001db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001db6:	623a      	str	r2, [r7, #32]
 8001db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dba:	69f9      	ldr	r1, [r7, #28]
 8001dbc:	6a3a      	ldr	r2, [r7, #32]
 8001dbe:	e841 2300 	strex	r3, r2, [r1]
 8001dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1e5      	bne.n	8001d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e00f      	b.n	8001e06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4013      	ands	r3, r2
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d09f      	beq.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3740      	adds	r7, #64	; 0x40
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e4a:	f023 030c 	bic.w	r3, r3, #12
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	430b      	orrs	r3, r1
 8001e56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2c      	ldr	r2, [pc, #176]	; (8001f24 <UART_SetConfig+0x114>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d103      	bne.n	8001e80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e78:	f7ff fbdc 	bl	8001634 <HAL_RCC_GetPCLK2Freq>
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	e002      	b.n	8001e86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e80:	f7ff fbc4 	bl	800160c <HAL_RCC_GetPCLK1Freq>
 8001e84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009a      	lsls	r2, r3, #2
 8001e90:	441a      	add	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <UART_SetConfig+0x118>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	0119      	lsls	r1, r3, #4
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <UART_SetConfig+0x118>)
 8001ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2064      	movs	r0, #100	; 0x64
 8001ec6:	fb00 f303 	mul.w	r3, r0, r3
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	3332      	adds	r3, #50	; 0x32
 8001ed0:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <UART_SetConfig+0x118>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001edc:	4419      	add	r1, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009a      	lsls	r2, r3, #2
 8001ee8:	441a      	add	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <UART_SetConfig+0x118>)
 8001ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2064      	movs	r0, #100	; 0x64
 8001efe:	fb00 f303 	mul.w	r3, r0, r3
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	3332      	adds	r3, #50	; 0x32
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <UART_SetConfig+0x118>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	440a      	add	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40013800 	.word	0x40013800
 8001f28:	51eb851f 	.word	0x51eb851f

08001f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f103 0208 	add.w	r2, r3, #8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f103 0208 	add.w	r2, r3, #8
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f103 0208 	add.w	r2, r3, #8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d103      	bne.n	8001fe8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e00c      	b.n	8002002 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3308      	adds	r3, #8
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e002      	b.n	8001ff6 <vListInsert+0x2e>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d2f6      	bcs.n	8001ff0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6892      	ldr	r2, [r2, #8]
 800204e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6852      	ldr	r2, [r2, #4]
 8002058:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	d103      	bne.n	800206c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800208a:	b580      	push	{r7, lr}
 800208c:	b08e      	sub	sp, #56	; 0x38
 800208e:	af04      	add	r7, sp, #16
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10a      	bne.n	80020b4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020b0:	bf00      	nop
 80020b2:	e7fe      	b.n	80020b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80020b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10a      	bne.n	80020d0 <xTaskCreateStatic+0x46>
	__asm volatile
 80020ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020be:	f383 8811 	msr	BASEPRI, r3
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	61fb      	str	r3, [r7, #28]
}
 80020cc:	bf00      	nop
 80020ce:	e7fe      	b.n	80020ce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80020d0:	2358      	movs	r3, #88	; 0x58
 80020d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b58      	cmp	r3, #88	; 0x58
 80020d8:	d00a      	beq.n	80020f0 <xTaskCreateStatic+0x66>
	__asm volatile
 80020da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	61bb      	str	r3, [r7, #24]
}
 80020ec:	bf00      	nop
 80020ee:	e7fe      	b.n	80020ee <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01e      	beq.n	8002134 <xTaskCreateStatic+0xaa>
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002104:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	2202      	movs	r2, #2
 800210a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800210e:	2300      	movs	r3, #0
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f850 	bl	80021cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800212c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800212e:	f000 f8cf 	bl	80022d0 <prvAddNewTaskToReadyList>
 8002132:	e001      	b.n	8002138 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002138:	697b      	ldr	r3, [r7, #20]
	}
 800213a:	4618      	mov	r0, r3
 800213c:	3728      	adds	r7, #40	; 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002142:	b580      	push	{r7, lr}
 8002144:	b08c      	sub	sp, #48	; 0x30
 8002146:	af04      	add	r7, sp, #16
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4618      	mov	r0, r3
 8002158:	f000 ff32 	bl	8002fc0 <pvPortMalloc>
 800215c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00e      	beq.n	8002182 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002164:	2058      	movs	r0, #88	; 0x58
 8002166:	f000 ff2b 	bl	8002fc0 <pvPortMalloc>
 800216a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
 8002178:	e005      	b.n	8002186 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f000 ffea 	bl	8003154 <vPortFree>
 8002180:	e001      	b.n	8002186 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d017      	beq.n	80021bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	2300      	movs	r3, #0
 8002198:	9303      	str	r3, [sp, #12]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f80e 	bl	80021cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021b0:	69f8      	ldr	r0, [r7, #28]
 80021b2:	f000 f88d 	bl	80022d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80021b6:	2301      	movs	r3, #1
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	e002      	b.n	80021c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
 80021c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80021c2:	69bb      	ldr	r3, [r7, #24]
	}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021e4:	3b01      	subs	r3, #1
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f023 0307 	bic.w	r3, r3, #7
 80021f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <prvInitialiseNewTask+0x48>
	__asm volatile
 80021fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002202:	f383 8811 	msr	BASEPRI, r3
 8002206:	f3bf 8f6f 	isb	sy
 800220a:	f3bf 8f4f 	dsb	sy
 800220e:	617b      	str	r3, [r7, #20]
}
 8002210:	bf00      	nop
 8002212:	e7fe      	b.n	8002212 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	e012      	b.n	8002240 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4413      	add	r3, r2
 8002220:	7819      	ldrb	r1, [r3, #0]
 8002222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4413      	add	r3, r2
 8002228:	3334      	adds	r3, #52	; 0x34
 800222a:	460a      	mov	r2, r1
 800222c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3301      	adds	r3, #1
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b0f      	cmp	r3, #15
 8002244:	d9e9      	bls.n	800221a <prvInitialiseNewTask+0x4e>
 8002246:	e000      	b.n	800224a <prvInitialiseNewTask+0x7e>
		{
			break;
 8002248:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	2b06      	cmp	r3, #6
 8002256:	d901      	bls.n	800225c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002258:	2306      	movs	r3, #6
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002266:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	2200      	movs	r2, #0
 800226c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	3304      	adds	r3, #4
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fe79 	bl	8001f6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	3318      	adds	r3, #24
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fe74 	bl	8001f6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002286:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	f1c3 0207 	rsb	r2, r3, #7
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	2200      	movs	r2, #0
 800229c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	2200      	movs	r2, #0
 80022a2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	69b8      	ldr	r0, [r7, #24]
 80022b2:	f000 fcd3 	bl	8002c5c <pxPortInitialiseStack>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <prvInitialiseNewTask+0xfc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022d8:	f000 fdb0 	bl	8002e3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <prvAddNewTaskToReadyList+0xb8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	4a29      	ldr	r2, [pc, #164]	; (8002388 <prvAddNewTaskToReadyList+0xb8>)
 80022e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <prvAddNewTaskToReadyList+0xbc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022ee:	4a27      	ldr	r2, [pc, #156]	; (800238c <prvAddNewTaskToReadyList+0xbc>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <prvAddNewTaskToReadyList+0xb8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d110      	bne.n	800231e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022fc:	f000 fb86 	bl	8002a0c <prvInitialiseTaskLists>
 8002300:	e00d      	b.n	800231e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002302:	4b23      	ldr	r3, [pc, #140]	; (8002390 <prvAddNewTaskToReadyList+0xc0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <prvAddNewTaskToReadyList+0xbc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	429a      	cmp	r2, r3
 8002316:	d802      	bhi.n	800231e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002318:	4a1c      	ldr	r2, [pc, #112]	; (800238c <prvAddNewTaskToReadyList+0xbc>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <prvAddNewTaskToReadyList+0xc4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <prvAddNewTaskToReadyList+0xc4>)
 8002326:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <prvAddNewTaskToReadyList+0xc8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4313      	orrs	r3, r2
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <prvAddNewTaskToReadyList+0xc8>)
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <prvAddNewTaskToReadyList+0xcc>)
 8002348:	441a      	add	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7ff fe16 	bl	8001f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002356:	f000 fda1 	bl	8002e9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <prvAddNewTaskToReadyList+0xc0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00e      	beq.n	8002380 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <prvAddNewTaskToReadyList+0xbc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <prvAddNewTaskToReadyList+0xd0>)
 8002372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000478 	.word	0x20000478
 800238c:	20000378 	.word	0x20000378
 8002390:	20000484 	.word	0x20000484
 8002394:	20000494 	.word	0x20000494
 8002398:	20000480 	.word	0x20000480
 800239c:	2000037c 	.word	0x2000037c
 80023a0:	e000ed04 	.word	0xe000ed04

080023a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <vTaskDelayUntil+0x2a>
	__asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	617b      	str	r3, [r7, #20]
}
 80023ca:	bf00      	nop
 80023cc:	e7fe      	b.n	80023cc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <vTaskDelayUntil+0x46>
	__asm volatile
 80023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	613b      	str	r3, [r7, #16]
}
 80023e6:	bf00      	nop
 80023e8:	e7fe      	b.n	80023e8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <vTaskDelayUntil+0xf0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <vTaskDelayUntil+0x64>
	__asm volatile
 80023f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	60fb      	str	r3, [r7, #12]
}
 8002404:	bf00      	nop
 8002406:	e7fe      	b.n	8002406 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8002408:	f000 f8de 	bl	80025c8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800240c:	4b22      	ldr	r3, [pc, #136]	; (8002498 <vTaskDelayUntil+0xf4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	4413      	add	r3, r2
 800241a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a3a      	ldr	r2, [r7, #32]
 8002422:	429a      	cmp	r2, r3
 8002424:	d20b      	bcs.n	800243e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	429a      	cmp	r2, r3
 800242e:	d211      	bcs.n	8002454 <vTaskDelayUntil+0xb0>
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	429a      	cmp	r2, r3
 8002436:	d90d      	bls.n	8002454 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002438:	2301      	movs	r3, #1
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
 800243c:	e00a      	b.n	8002454 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	429a      	cmp	r2, r3
 8002446:	d303      	bcc.n	8002450 <vTaskDelayUntil+0xac>
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	429a      	cmp	r2, r3
 800244e:	d901      	bls.n	8002454 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002450:	2301      	movs	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fb91 	bl	8002b90 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800246e:	f000 f8b9 	bl	80025e4 <xTaskResumeAll>
 8002472:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d107      	bne.n	800248a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <vTaskDelayUntil+0xf8>)
 800247c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800248a:	bf00      	nop
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200004a0 	.word	0x200004a0
 8002498:	2000047c 	.word	0x2000047c
 800249c:	e000ed04 	.word	0xe000ed04

080024a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d017      	beq.n	80024e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <vTaskDelay+0x60>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <vTaskDelay+0x30>
	__asm volatile
 80024ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	60bb      	str	r3, [r7, #8]
}
 80024cc:	bf00      	nop
 80024ce:	e7fe      	b.n	80024ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80024d0:	f000 f87a 	bl	80025c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80024d4:	2100      	movs	r1, #0
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fb5a 	bl	8002b90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80024dc:	f000 f882 	bl	80025e4 <xTaskResumeAll>
 80024e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <vTaskDelay+0x64>)
 80024ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200004a0 	.word	0x200004a0
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002516:	463a      	mov	r2, r7
 8002518:	1d39      	adds	r1, r7, #4
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd fe2c 	bl	800017c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002524:	6839      	ldr	r1, [r7, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	9202      	str	r2, [sp, #8]
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	2300      	movs	r3, #0
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2300      	movs	r3, #0
 8002534:	460a      	mov	r2, r1
 8002536:	491e      	ldr	r1, [pc, #120]	; (80025b0 <vTaskStartScheduler+0xa8>)
 8002538:	481e      	ldr	r0, [pc, #120]	; (80025b4 <vTaskStartScheduler+0xac>)
 800253a:	f7ff fda6 	bl	800208a <xTaskCreateStatic>
 800253e:	4603      	mov	r3, r0
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <vTaskStartScheduler+0xb0>)
 8002542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <vTaskStartScheduler+0xb0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800254c:	2301      	movs	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	e001      	b.n	8002556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d116      	bne.n	800258a <vTaskStartScheduler+0x82>
	__asm volatile
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	613b      	str	r3, [r7, #16]
}
 800256e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <vTaskStartScheduler+0xb4>)
 8002572:	f04f 32ff 	mov.w	r2, #4294967295
 8002576:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <vTaskStartScheduler+0xb8>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <vTaskStartScheduler+0xbc>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002584:	f000 fbe8 	bl	8002d58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002588:	e00e      	b.n	80025a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d10a      	bne.n	80025a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002596:	f383 8811 	msr	BASEPRI, r3
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	60fb      	str	r3, [r7, #12]
}
 80025a4:	bf00      	nop
 80025a6:	e7fe      	b.n	80025a6 <vTaskStartScheduler+0x9e>
}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	08003d80 	.word	0x08003d80
 80025b4:	080029d9 	.word	0x080029d9
 80025b8:	2000049c 	.word	0x2000049c
 80025bc:	20000498 	.word	0x20000498
 80025c0:	20000484 	.word	0x20000484
 80025c4:	2000047c 	.word	0x2000047c

080025c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <vTaskSuspendAll+0x18>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	4a03      	ldr	r2, [pc, #12]	; (80025e0 <vTaskSuspendAll+0x18>)
 80025d4:	6013      	str	r3, [r2, #0]
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	200004a0 	.word	0x200004a0

080025e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80025f2:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <xTaskResumeAll+0x114>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <xTaskResumeAll+0x2c>
	__asm volatile
 80025fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	603b      	str	r3, [r7, #0]
}
 800260c:	bf00      	nop
 800260e:	e7fe      	b.n	800260e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002610:	f000 fc14 	bl	8002e3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002614:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <xTaskResumeAll+0x114>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3b01      	subs	r3, #1
 800261a:	4a37      	ldr	r2, [pc, #220]	; (80026f8 <xTaskResumeAll+0x114>)
 800261c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800261e:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <xTaskResumeAll+0x114>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d161      	bne.n	80026ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002626:	4b35      	ldr	r3, [pc, #212]	; (80026fc <xTaskResumeAll+0x118>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d05d      	beq.n	80026ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800262e:	e02e      	b.n	800268e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <xTaskResumeAll+0x11c>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3318      	adds	r3, #24
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fcfb 	bl	8002038 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3304      	adds	r3, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fcf6 	bl	8002038 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	2201      	movs	r2, #1
 8002652:	409a      	lsls	r2, r3
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <xTaskResumeAll+0x120>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4313      	orrs	r3, r2
 800265a:	4a2a      	ldr	r2, [pc, #168]	; (8002704 <xTaskResumeAll+0x120>)
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4a27      	ldr	r2, [pc, #156]	; (8002708 <xTaskResumeAll+0x124>)
 800266c:	441a      	add	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3304      	adds	r3, #4
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f7ff fc84 	bl	8001f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <xTaskResumeAll+0x128>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	429a      	cmp	r2, r3
 8002686:	d302      	bcc.n	800268e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <xTaskResumeAll+0x12c>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <xTaskResumeAll+0x11c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1cc      	bne.n	8002630 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800269c:	f000 fa54 	bl	8002b48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <xTaskResumeAll+0x130>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80026ac:	f000 f844 	bl	8002738 <xTaskIncrementTick>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <xTaskResumeAll+0x12c>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f1      	bne.n	80026ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <xTaskResumeAll+0x130>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <xTaskResumeAll+0x12c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80026d6:	2301      	movs	r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <xTaskResumeAll+0x134>)
 80026dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80026ea:	f000 fbd7 	bl	8002e9c <vPortExitCritical>

	return xAlreadyYielded;
 80026ee:	68bb      	ldr	r3, [r7, #8]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	200004a0 	.word	0x200004a0
 80026fc:	20000478 	.word	0x20000478
 8002700:	20000438 	.word	0x20000438
 8002704:	20000480 	.word	0x20000480
 8002708:	2000037c 	.word	0x2000037c
 800270c:	20000378 	.word	0x20000378
 8002710:	2000048c 	.word	0x2000048c
 8002714:	20000488 	.word	0x20000488
 8002718:	e000ed04 	.word	0xe000ed04

0800271c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002722:	4b04      	ldr	r3, [pc, #16]	; (8002734 <xTaskGetTickCount+0x18>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002728:	687b      	ldr	r3, [r7, #4]
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	2000047c 	.word	0x2000047c

08002738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002742:	4b51      	ldr	r3, [pc, #324]	; (8002888 <xTaskIncrementTick+0x150>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 808d 	bne.w	8002866 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <xTaskIncrementTick+0x154>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002754:	4a4d      	ldr	r2, [pc, #308]	; (800288c <xTaskIncrementTick+0x154>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d120      	bne.n	80027a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002760:	4b4b      	ldr	r3, [pc, #300]	; (8002890 <xTaskIncrementTick+0x158>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <xTaskIncrementTick+0x48>
	__asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	603b      	str	r3, [r7, #0]
}
 800277c:	bf00      	nop
 800277e:	e7fe      	b.n	800277e <xTaskIncrementTick+0x46>
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <xTaskIncrementTick+0x158>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <xTaskIncrementTick+0x15c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a41      	ldr	r2, [pc, #260]	; (8002890 <xTaskIncrementTick+0x158>)
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4a41      	ldr	r2, [pc, #260]	; (8002894 <xTaskIncrementTick+0x15c>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b40      	ldr	r3, [pc, #256]	; (8002898 <xTaskIncrementTick+0x160>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	4a3f      	ldr	r2, [pc, #252]	; (8002898 <xTaskIncrementTick+0x160>)
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	f000 f9d3 	bl	8002b48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <xTaskIncrementTick+0x164>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d34d      	bcc.n	8002848 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ac:	4b38      	ldr	r3, [pc, #224]	; (8002890 <xTaskIncrementTick+0x158>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <xTaskIncrementTick+0x82>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <xTaskIncrementTick+0x84>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d004      	beq.n	80027ca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c0:	4b36      	ldr	r3, [pc, #216]	; (800289c <xTaskIncrementTick+0x164>)
 80027c2:	f04f 32ff 	mov.w	r2, #4294967295
 80027c6:	601a      	str	r2, [r3, #0]
					break;
 80027c8:	e03e      	b.n	8002848 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <xTaskIncrementTick+0x158>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d203      	bcs.n	80027ea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80027e2:	4a2e      	ldr	r2, [pc, #184]	; (800289c <xTaskIncrementTick+0x164>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6013      	str	r3, [r2, #0]
						break;
 80027e8:	e02e      	b.n	8002848 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3304      	adds	r3, #4
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fc22 	bl	8002038 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	3318      	adds	r3, #24
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fc19 	bl	8002038 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	2201      	movs	r2, #1
 800280c:	409a      	lsls	r2, r3
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <xTaskIncrementTick+0x168>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <xTaskIncrementTick+0x168>)
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <xTaskIncrementTick+0x16c>)
 8002826:	441a      	add	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3304      	adds	r3, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f7ff fba7 	bl	8001f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <xTaskIncrementTick+0x170>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	429a      	cmp	r2, r3
 8002840:	d3b4      	bcc.n	80027ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002842:	2301      	movs	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002846:	e7b1      	b.n	80027ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002848:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <xTaskIncrementTick+0x170>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284e:	4915      	ldr	r1, [pc, #84]	; (80028a4 <xTaskIncrementTick+0x16c>)
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d907      	bls.n	8002870 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002860:	2301      	movs	r3, #1
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e004      	b.n	8002870 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <xTaskIncrementTick+0x174>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <xTaskIncrementTick+0x174>)
 800286e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <xTaskIncrementTick+0x178>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002878:	2301      	movs	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800287c:	697b      	ldr	r3, [r7, #20]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200004a0 	.word	0x200004a0
 800288c:	2000047c 	.word	0x2000047c
 8002890:	20000430 	.word	0x20000430
 8002894:	20000434 	.word	0x20000434
 8002898:	20000490 	.word	0x20000490
 800289c:	20000498 	.word	0x20000498
 80028a0:	20000480 	.word	0x20000480
 80028a4:	2000037c 	.word	0x2000037c
 80028a8:	20000378 	.word	0x20000378
 80028ac:	20000488 	.word	0x20000488
 80028b0:	2000048c 	.word	0x2000048c

080028b4 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <vTaskSetApplicationTaskTag+0x34>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e001      	b.n	80028d0 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80028d0:	f000 fab4 	bl	8002e3c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 80028da:	f000 fadf 	bl	8002e9c <vPortExitCritical>
	}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000378 	.word	0x20000378

080028ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <vTaskSwitchContext+0xd8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028fa:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <vTaskSwitchContext+0xdc>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002900:	e05c      	b.n	80029bc <vTaskSwitchContext+0xd0>
		xYieldPending = pdFALSE;
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <vTaskSwitchContext+0xdc>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8002908:	4b30      	ldr	r3, [pc, #192]	; (80029cc <vTaskSwitchContext+0xe0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fc9a 	bl	8000248 <trace_off>
		taskCHECK_FOR_STACK_OVERFLOW();
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <vTaskSwitchContext+0xe0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <vTaskSwitchContext+0xe0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	429a      	cmp	r2, r3
 8002922:	d808      	bhi.n	8002936 <vTaskSwitchContext+0x4a>
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <vTaskSwitchContext+0xe0>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <vTaskSwitchContext+0xe0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3334      	adds	r3, #52	; 0x34
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f7fd fc13 	bl	800015c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <vTaskSwitchContext+0xe4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002944:	7afb      	ldrb	r3, [r7, #11]
 8002946:	f1c3 031f 	rsb	r3, r3, #31
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	4921      	ldr	r1, [pc, #132]	; (80029d4 <vTaskSwitchContext+0xe8>)
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <vTaskSwitchContext+0x8a>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	607b      	str	r3, [r7, #4]
}
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <vTaskSwitchContext+0x88>
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <vTaskSwitchContext+0xe8>)
 8002982:	4413      	add	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	3308      	adds	r3, #8
 8002998:	429a      	cmp	r2, r3
 800299a:	d104      	bne.n	80029a6 <vTaskSwitchContext+0xba>
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a07      	ldr	r2, [pc, #28]	; (80029cc <vTaskSwitchContext+0xe0>)
 80029ae:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <vTaskSwitchContext+0xe0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fc22 	bl	8000200 <trace_toggle>
}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	200004a0 	.word	0x200004a0
 80029c8:	2000048c 	.word	0x2000048c
 80029cc:	20000378 	.word	0x20000378
 80029d0:	20000480 	.word	0x20000480
 80029d4:	2000037c 	.word	0x2000037c

080029d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80029e0:	f000 f854 	bl	8002a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <prvIdleTask+0x2c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d907      	bls.n	80029fc <prvIdleTask+0x24>
			{
				taskYIELD();
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <prvIdleTask+0x30>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80029fc:	f7fd fba8 	bl	8000150 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002a00:	e7ee      	b.n	80029e0 <prvIdleTask+0x8>
 8002a02:	bf00      	nop
 8002a04:	2000037c 	.word	0x2000037c
 8002a08:	e000ed04 	.word	0xe000ed04

08002a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	e00c      	b.n	8002a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <prvInitialiseTaskLists+0x60>)
 8002a24:	4413      	add	r3, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fa80 	bl	8001f2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b06      	cmp	r3, #6
 8002a36:	d9ef      	bls.n	8002a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a38:	480d      	ldr	r0, [pc, #52]	; (8002a70 <prvInitialiseTaskLists+0x64>)
 8002a3a:	f7ff fa77 	bl	8001f2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <prvInitialiseTaskLists+0x68>)
 8002a40:	f7ff fa74 	bl	8001f2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <prvInitialiseTaskLists+0x6c>)
 8002a46:	f7ff fa71 	bl	8001f2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <prvInitialiseTaskLists+0x70>)
 8002a4c:	f7ff fa6e 	bl	8001f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <prvInitialiseTaskLists+0x74>)
 8002a52:	f7ff fa6b 	bl	8001f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <prvInitialiseTaskLists+0x78>)
 8002a58:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <prvInitialiseTaskLists+0x64>)
 8002a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <prvInitialiseTaskLists+0x7c>)
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <prvInitialiseTaskLists+0x68>)
 8002a60:	601a      	str	r2, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000037c 	.word	0x2000037c
 8002a70:	20000408 	.word	0x20000408
 8002a74:	2000041c 	.word	0x2000041c
 8002a78:	20000438 	.word	0x20000438
 8002a7c:	2000044c 	.word	0x2000044c
 8002a80:	20000464 	.word	0x20000464
 8002a84:	20000430 	.word	0x20000430
 8002a88:	20000434 	.word	0x20000434

08002a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a92:	e019      	b.n	8002ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a94:	f000 f9d2 	bl	8002e3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002a98:	4b10      	ldr	r3, [pc, #64]	; (8002adc <prvCheckTasksWaitingTermination+0x50>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fac7 	bl	8002038 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <prvCheckTasksWaitingTermination+0x54>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <prvCheckTasksWaitingTermination+0x54>)
 8002ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <prvCheckTasksWaitingTermination+0x58>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <prvCheckTasksWaitingTermination+0x58>)
 8002abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002abe:	f000 f9ed 	bl	8002e9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f810 	bl	8002ae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <prvCheckTasksWaitingTermination+0x58>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e1      	bne.n	8002a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000044c 	.word	0x2000044c
 8002ae0:	20000478 	.word	0x20000478
 8002ae4:	20000460 	.word	0x20000460

08002ae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d108      	bne.n	8002b0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fb28 	bl	8003154 <vPortFree>
				vPortFree( pxTCB );
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fb25 	bl	8003154 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b0a:	e018      	b.n	8002b3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d103      	bne.n	8002b1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fb1c 	bl	8003154 <vPortFree>
	}
 8002b1c:	e00f      	b.n	8002b3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d00a      	beq.n	8002b3e <prvDeleteTCB+0x56>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	60fb      	str	r3, [r7, #12]
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <prvDeleteTCB+0x54>
	}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <prvResetNextTaskUnblockTime+0x40>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <prvResetNextTaskUnblockTime+0x14>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <prvResetNextTaskUnblockTime+0x16>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d004      	beq.n	8002b6c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <prvResetNextTaskUnblockTime+0x44>)
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b6a:	e008      	b.n	8002b7e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <prvResetNextTaskUnblockTime+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <prvResetNextTaskUnblockTime+0x44>)
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	20000430 	.word	0x20000430
 8002b8c:	20000498 	.word	0x20000498

08002b90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fa46 	bl	8002038 <uxListRemove>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	2201      	movs	r2, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d10a      	bne.n	8002be8 <prvAddCurrentTaskToDelayedList+0x58>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d007      	beq.n	8002be8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	481a      	ldr	r0, [pc, #104]	; (8002c4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002be2:	f7ff f9ce 	bl	8001f82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002be6:	e026      	b.n	8002c36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d209      	bcs.n	8002c14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f7ff f9db 	bl	8001fc8 <vListInsert>
}
 8002c12:	e010      	b.n	8002c36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4610      	mov	r0, r2
 8002c22:	f7ff f9d1 	bl	8001fc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d202      	bcs.n	8002c36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002c30:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000047c 	.word	0x2000047c
 8002c44:	20000378 	.word	0x20000378
 8002c48:	20000480 	.word	0x20000480
 8002c4c:	20000464 	.word	0x20000464
 8002c50:	20000434 	.word	0x20000434
 8002c54:	20000430 	.word	0x20000430
 8002c58:	20000498 	.word	0x20000498

08002c5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3b04      	subs	r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3b04      	subs	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c8c:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <pxPortInitialiseStack+0x54>)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3b14      	subs	r3, #20
 8002c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b20      	subs	r3, #32
 8002ca2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	08002cb5 	.word	0x08002cb5

08002cb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <prvTaskExitError+0x54>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	d00a      	beq.n	8002cde <prvTaskExitError+0x2a>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	60fb      	str	r3, [r7, #12]
}
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <prvTaskExitError+0x28>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	60bb      	str	r3, [r7, #8]
}
 8002cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002cf2:	bf00      	nop
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0fc      	beq.n	8002cf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	2000000c 	.word	0x2000000c
 8002d0c:	00000000 	.word	0x00000000

08002d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <pxCurrentTCBConst2>)
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	6808      	ldr	r0, [r1, #0]
 8002d16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d1a:	f380 8809 	msr	PSP, r0
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f380 8811 	msr	BASEPRI, r0
 8002d2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002d2e:	4770      	bx	lr

08002d30 <pxCurrentTCBConst2>:
 8002d30:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop

08002d38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002d38:	4806      	ldr	r0, [pc, #24]	; (8002d54 <prvPortStartFirstTask+0x1c>)
 8002d3a:	6800      	ldr	r0, [r0, #0]
 8002d3c:	6800      	ldr	r0, [r0, #0]
 8002d3e:	f380 8808 	msr	MSP, r0
 8002d42:	b662      	cpsie	i
 8002d44:	b661      	cpsie	f
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	df00      	svc	0
 8002d50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d52:	bf00      	nop
 8002d54:	e000ed08 	.word	0xe000ed08

08002d58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <xPortStartScheduler+0xd0>)
 8002d60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	22ff      	movs	r2, #255	; 0xff
 8002d6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <xPortStartScheduler+0xd4>)
 8002d84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <xPortStartScheduler+0xd8>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d8c:	e009      	b.n	8002da2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <xPortStartScheduler+0xd8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <xPortStartScheduler+0xd8>)
 8002d96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d0ef      	beq.n	8002d8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <xPortStartScheduler+0xd8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d00a      	beq.n	8002dd0 <xPortStartScheduler+0x78>
	__asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	60bb      	str	r3, [r7, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	e7fe      	b.n	8002dce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <xPortStartScheduler+0xd8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <xPortStartScheduler+0xd8>)
 8002dd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <xPortStartScheduler+0xd8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002de2:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <xPortStartScheduler+0xd8>)
 8002de4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <xPortStartScheduler+0xdc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <xPortStartScheduler+0xdc>)
 8002df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <xPortStartScheduler+0xdc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <xPortStartScheduler+0xdc>)
 8002e00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e06:	f000 f8b9 	bl	8002f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <xPortStartScheduler+0xe0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e10:	f7ff ff92 	bl	8002d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e14:	f7ff fd6a 	bl	80028ec <vTaskSwitchContext>
	prvTaskExitError();
 8002e18:	f7ff ff4c 	bl	8002cb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000e400 	.word	0xe000e400
 8002e2c:	200004a4 	.word	0x200004a4
 8002e30:	200004a8 	.word	0x200004a8
 8002e34:	e000ed20 	.word	0xe000ed20
 8002e38:	2000000c 	.word	0x2000000c

08002e3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	607b      	str	r3, [r7, #4]
}
 8002e54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <vPortEnterCritical+0x58>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <vPortEnterCritical+0x58>)
 8002e5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <vPortEnterCritical+0x58>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d10f      	bne.n	8002e88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <vPortEnterCritical+0x5c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <vPortEnterCritical+0x4c>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	603b      	str	r3, [r7, #0]
}
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <vPortEnterCritical+0x4a>
	}
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	2000000c 	.word	0x2000000c
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <vPortExitCritical+0x4c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <vPortExitCritical+0x24>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	607b      	str	r3, [r7, #4]
}
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <vPortExitCritical+0x4c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <vPortExitCritical+0x4c>)
 8002ec8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <vPortExitCritical+0x4c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <vPortExitCritical+0x42>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002edc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	2000000c 	.word	0x2000000c
 8002eec:	00000000 	.word	0x00000000

08002ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ef0:	f3ef 8009 	mrs	r0, PSP
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <pxCurrentTCBConst>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f00:	6010      	str	r0, [r2, #0]
 8002f02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002f06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f0a:	f380 8811 	msr	BASEPRI, r0
 8002f0e:	f7ff fced 	bl	80028ec <vTaskSwitchContext>
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f380 8811 	msr	BASEPRI, r0
 8002f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002f1e:	6819      	ldr	r1, [r3, #0]
 8002f20:	6808      	ldr	r0, [r1, #0]
 8002f22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f26:	f380 8809 	msr	PSP, r0
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	4770      	bx	lr

08002f30 <pxCurrentTCBConst>:
 8002f30:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop

08002f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	607b      	str	r3, [r7, #4]
}
 8002f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002f52:	f7ff fbf1 	bl	8002738 <xTaskIncrementTick>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <SysTick_Handler+0x40>)
 8002f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f383 8811 	msr	BASEPRI, r3
}
 8002f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	e000ed04 	.word	0xe000ed04

08002f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <vPortSetupTimerInterrupt+0x30>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <vPortSetupTimerInterrupt+0x34>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <vPortSetupTimerInterrupt+0x38>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <vPortSetupTimerInterrupt+0x3c>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <vPortSetupTimerInterrupt+0x40>)
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f9e:	4b03      	ldr	r3, [pc, #12]	; (8002fac <vPortSetupTimerInterrupt+0x30>)
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	601a      	str	r2, [r3, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	e000e010 	.word	0xe000e010
 8002fb0:	e000e018 	.word	0xe000e018
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	10624dd3 	.word	0x10624dd3
 8002fbc:	e000e014 	.word	0xe000e014

08002fc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002fcc:	f7ff fafc 	bl	80025c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002fd0:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <pvPortMalloc+0x180>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002fd8:	f000 f916 	bl	8003208 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <pvPortMalloc+0x184>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 808e 	bne.w	8003106 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01d      	beq.n	800302c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d014      	beq.n	800302c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f023 0307 	bic.w	r3, r3, #7
 8003008:	3308      	adds	r3, #8
 800300a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <pvPortMalloc+0x6c>
	__asm volatile
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	617b      	str	r3, [r7, #20]
}
 8003028:	bf00      	nop
 800302a:	e7fe      	b.n	800302a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d069      	beq.n	8003106 <pvPortMalloc+0x146>
 8003032:	4b45      	ldr	r3, [pc, #276]	; (8003148 <pvPortMalloc+0x188>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d864      	bhi.n	8003106 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800303c:	4b43      	ldr	r3, [pc, #268]	; (800314c <pvPortMalloc+0x18c>)
 800303e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003040:	4b42      	ldr	r3, [pc, #264]	; (800314c <pvPortMalloc+0x18c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003046:	e004      	b.n	8003052 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d903      	bls.n	8003064 <pvPortMalloc+0xa4>
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f1      	bne.n	8003048 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <pvPortMalloc+0x180>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306a:	429a      	cmp	r2, r3
 800306c:	d04b      	beq.n	8003106 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2208      	movs	r2, #8
 8003074:	4413      	add	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	1ad2      	subs	r2, r2, r3
 8003088:	2308      	movs	r3, #8
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	429a      	cmp	r2, r3
 800308e:	d91f      	bls.n	80030d0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <pvPortMalloc+0xf8>
	__asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	613b      	str	r3, [r7, #16]
}
 80030b4:	bf00      	nop
 80030b6:	e7fe      	b.n	80030b6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	1ad2      	subs	r2, r2, r3
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030ca:	69b8      	ldr	r0, [r7, #24]
 80030cc:	f000 f8fe 	bl	80032cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <pvPortMalloc+0x188>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <pvPortMalloc+0x188>)
 80030dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030de:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <pvPortMalloc+0x188>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <pvPortMalloc+0x190>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d203      	bcs.n	80030f2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <pvPortMalloc+0x188>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a18      	ldr	r2, [pc, #96]	; (8003150 <pvPortMalloc+0x190>)
 80030f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <pvPortMalloc+0x184>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003106:	f7ff fa6d 	bl	80025e4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003110:	f7fd f82e 	bl	8000170 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <pvPortMalloc+0x174>
	__asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	60fb      	str	r3, [r7, #12]
}
 8003130:	bf00      	nop
 8003132:	e7fe      	b.n	8003132 <pvPortMalloc+0x172>
	return pvReturn;
 8003134:	69fb      	ldr	r3, [r7, #28]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3728      	adds	r7, #40	; 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200010b4 	.word	0x200010b4
 8003144:	200010c0 	.word	0x200010c0
 8003148:	200010b8 	.word	0x200010b8
 800314c:	200010ac 	.word	0x200010ac
 8003150:	200010bc 	.word	0x200010bc

08003154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d048      	beq.n	80031f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003166:	2308      	movs	r3, #8
 8003168:	425b      	negs	r3, r3
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4413      	add	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	4b21      	ldr	r3, [pc, #132]	; (8003200 <vPortFree+0xac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <vPortFree+0x44>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	60fb      	str	r3, [r7, #12]
}
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <vPortFree+0x62>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	60bb      	str	r3, [r7, #8]
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <vPortFree+0xac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d019      	beq.n	80031f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d115      	bne.n	80031f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <vPortFree+0xac>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	401a      	ands	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80031dc:	f7ff f9f4 	bl	80025c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <vPortFree+0xb0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4413      	add	r3, r2
 80031ea:	4a06      	ldr	r2, [pc, #24]	; (8003204 <vPortFree+0xb0>)
 80031ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031ee:	6938      	ldr	r0, [r7, #16]
 80031f0:	f000 f86c 	bl	80032cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80031f4:	f7ff f9f6 	bl	80025e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80031f8:	bf00      	nop
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	200010c0 	.word	0x200010c0
 8003204:	200010b8 	.word	0x200010b8

08003208 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800320e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003212:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <prvHeapInit+0xac>)
 8003216:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00c      	beq.n	800323c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3307      	adds	r3, #7
 8003226:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0307 	bic.w	r3, r3, #7
 800322e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <prvHeapInit+0xac>)
 8003238:	4413      	add	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003240:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <prvHeapInit+0xb0>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003246:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <prvHeapInit+0xb0>)
 8003248:	2200      	movs	r2, #0
 800324a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	4413      	add	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003254:	2208      	movs	r2, #8
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0307 	bic.w	r3, r3, #7
 8003262:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <prvHeapInit+0xb4>)
 8003268:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <prvHeapInit+0xb4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <prvHeapInit+0xb4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <prvHeapInit+0xb4>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <prvHeapInit+0xb8>)
 8003296:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <prvHeapInit+0xbc>)
 800329e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <prvHeapInit+0xc0>)
 80032a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032a6:	601a      	str	r2, [r3, #0]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	200004ac 	.word	0x200004ac
 80032b8:	200010ac 	.word	0x200010ac
 80032bc:	200010b4 	.word	0x200010b4
 80032c0:	200010bc 	.word	0x200010bc
 80032c4:	200010b8 	.word	0x200010b8
 80032c8:	200010c0 	.word	0x200010c0

080032cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032d4:	4b27      	ldr	r3, [pc, #156]	; (8003374 <prvInsertBlockIntoFreeList+0xa8>)
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e002      	b.n	80032e0 <prvInsertBlockIntoFreeList+0x14>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d8f7      	bhi.n	80032da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	4413      	add	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d108      	bne.n	800330e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	441a      	add	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	441a      	add	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d118      	bne.n	8003354 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <prvInsertBlockIntoFreeList+0xac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d00d      	beq.n	800334a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e008      	b.n	800335c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <prvInsertBlockIntoFreeList+0xac>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e003      	b.n	800335c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d002      	beq.n	800336a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	200010ac 	.word	0x200010ac
 8003378:	200010b4 	.word	0x200010b4

0800337c <std>:
 800337c:	2300      	movs	r3, #0
 800337e:	b510      	push	{r4, lr}
 8003380:	4604      	mov	r4, r0
 8003382:	e9c0 3300 	strd	r3, r3, [r0]
 8003386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800338a:	6083      	str	r3, [r0, #8]
 800338c:	8181      	strh	r1, [r0, #12]
 800338e:	6643      	str	r3, [r0, #100]	; 0x64
 8003390:	81c2      	strh	r2, [r0, #14]
 8003392:	6183      	str	r3, [r0, #24]
 8003394:	4619      	mov	r1, r3
 8003396:	2208      	movs	r2, #8
 8003398:	305c      	adds	r0, #92	; 0x5c
 800339a:	f000 f9e5 	bl	8003768 <memset>
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <std+0x58>)
 80033a0:	6224      	str	r4, [r4, #32]
 80033a2:	6263      	str	r3, [r4, #36]	; 0x24
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <std+0x5c>)
 80033a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <std+0x60>)
 80033aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <std+0x64>)
 80033ae:	6323      	str	r3, [r4, #48]	; 0x30
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <std+0x68>)
 80033b2:	429c      	cmp	r4, r3
 80033b4:	d006      	beq.n	80033c4 <std+0x48>
 80033b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80033ba:	4294      	cmp	r4, r2
 80033bc:	d002      	beq.n	80033c4 <std+0x48>
 80033be:	33d0      	adds	r3, #208	; 0xd0
 80033c0:	429c      	cmp	r4, r3
 80033c2:	d105      	bne.n	80033d0 <std+0x54>
 80033c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033cc:	f000 ba44 	b.w	8003858 <__retarget_lock_init_recursive>
 80033d0:	bd10      	pop	{r4, pc}
 80033d2:	bf00      	nop
 80033d4:	080035b9 	.word	0x080035b9
 80033d8:	080035db 	.word	0x080035db
 80033dc:	08003613 	.word	0x08003613
 80033e0:	08003637 	.word	0x08003637
 80033e4:	200010c4 	.word	0x200010c4

080033e8 <stdio_exit_handler>:
 80033e8:	4a02      	ldr	r2, [pc, #8]	; (80033f4 <stdio_exit_handler+0xc>)
 80033ea:	4903      	ldr	r1, [pc, #12]	; (80033f8 <stdio_exit_handler+0x10>)
 80033ec:	4803      	ldr	r0, [pc, #12]	; (80033fc <stdio_exit_handler+0x14>)
 80033ee:	f000 b869 	b.w	80034c4 <_fwalk_sglue>
 80033f2:	bf00      	nop
 80033f4:	20000010 	.word	0x20000010
 80033f8:	08003b4d 	.word	0x08003b4d
 80033fc:	2000001c 	.word	0x2000001c

08003400 <cleanup_stdio>:
 8003400:	6841      	ldr	r1, [r0, #4]
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <cleanup_stdio+0x34>)
 8003404:	b510      	push	{r4, lr}
 8003406:	4299      	cmp	r1, r3
 8003408:	4604      	mov	r4, r0
 800340a:	d001      	beq.n	8003410 <cleanup_stdio+0x10>
 800340c:	f000 fb9e 	bl	8003b4c <_fflush_r>
 8003410:	68a1      	ldr	r1, [r4, #8]
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <cleanup_stdio+0x38>)
 8003414:	4299      	cmp	r1, r3
 8003416:	d002      	beq.n	800341e <cleanup_stdio+0x1e>
 8003418:	4620      	mov	r0, r4
 800341a:	f000 fb97 	bl	8003b4c <_fflush_r>
 800341e:	68e1      	ldr	r1, [r4, #12]
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <cleanup_stdio+0x3c>)
 8003422:	4299      	cmp	r1, r3
 8003424:	d004      	beq.n	8003430 <cleanup_stdio+0x30>
 8003426:	4620      	mov	r0, r4
 8003428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800342c:	f000 bb8e 	b.w	8003b4c <_fflush_r>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	bf00      	nop
 8003434:	200010c4 	.word	0x200010c4
 8003438:	2000112c 	.word	0x2000112c
 800343c:	20001194 	.word	0x20001194

08003440 <global_stdio_init.part.0>:
 8003440:	b510      	push	{r4, lr}
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <global_stdio_init.part.0+0x30>)
 8003444:	4c0b      	ldr	r4, [pc, #44]	; (8003474 <global_stdio_init.part.0+0x34>)
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <global_stdio_init.part.0+0x38>)
 8003448:	4620      	mov	r0, r4
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	2104      	movs	r1, #4
 800344e:	2200      	movs	r2, #0
 8003450:	f7ff ff94 	bl	800337c <std>
 8003454:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003458:	2201      	movs	r2, #1
 800345a:	2109      	movs	r1, #9
 800345c:	f7ff ff8e 	bl	800337c <std>
 8003460:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003464:	2202      	movs	r2, #2
 8003466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800346a:	2112      	movs	r1, #18
 800346c:	f7ff bf86 	b.w	800337c <std>
 8003470:	200011fc 	.word	0x200011fc
 8003474:	200010c4 	.word	0x200010c4
 8003478:	080033e9 	.word	0x080033e9

0800347c <__sfp_lock_acquire>:
 800347c:	4801      	ldr	r0, [pc, #4]	; (8003484 <__sfp_lock_acquire+0x8>)
 800347e:	f000 b9ec 	b.w	800385a <__retarget_lock_acquire_recursive>
 8003482:	bf00      	nop
 8003484:	20001205 	.word	0x20001205

08003488 <__sfp_lock_release>:
 8003488:	4801      	ldr	r0, [pc, #4]	; (8003490 <__sfp_lock_release+0x8>)
 800348a:	f000 b9e7 	b.w	800385c <__retarget_lock_release_recursive>
 800348e:	bf00      	nop
 8003490:	20001205 	.word	0x20001205

08003494 <__sinit>:
 8003494:	b510      	push	{r4, lr}
 8003496:	4604      	mov	r4, r0
 8003498:	f7ff fff0 	bl	800347c <__sfp_lock_acquire>
 800349c:	6a23      	ldr	r3, [r4, #32]
 800349e:	b11b      	cbz	r3, 80034a8 <__sinit+0x14>
 80034a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a4:	f7ff bff0 	b.w	8003488 <__sfp_lock_release>
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <__sinit+0x28>)
 80034aa:	6223      	str	r3, [r4, #32]
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <__sinit+0x2c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f5      	bne.n	80034a0 <__sinit+0xc>
 80034b4:	f7ff ffc4 	bl	8003440 <global_stdio_init.part.0>
 80034b8:	e7f2      	b.n	80034a0 <__sinit+0xc>
 80034ba:	bf00      	nop
 80034bc:	08003401 	.word	0x08003401
 80034c0:	200011fc 	.word	0x200011fc

080034c4 <_fwalk_sglue>:
 80034c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c8:	4607      	mov	r7, r0
 80034ca:	4688      	mov	r8, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	2600      	movs	r6, #0
 80034d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034d4:	f1b9 0901 	subs.w	r9, r9, #1
 80034d8:	d505      	bpl.n	80034e6 <_fwalk_sglue+0x22>
 80034da:	6824      	ldr	r4, [r4, #0]
 80034dc:	2c00      	cmp	r4, #0
 80034de:	d1f7      	bne.n	80034d0 <_fwalk_sglue+0xc>
 80034e0:	4630      	mov	r0, r6
 80034e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e6:	89ab      	ldrh	r3, [r5, #12]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d907      	bls.n	80034fc <_fwalk_sglue+0x38>
 80034ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034f0:	3301      	adds	r3, #1
 80034f2:	d003      	beq.n	80034fc <_fwalk_sglue+0x38>
 80034f4:	4629      	mov	r1, r5
 80034f6:	4638      	mov	r0, r7
 80034f8:	47c0      	blx	r8
 80034fa:	4306      	orrs	r6, r0
 80034fc:	3568      	adds	r5, #104	; 0x68
 80034fe:	e7e9      	b.n	80034d4 <_fwalk_sglue+0x10>

08003500 <_puts_r>:
 8003500:	6a03      	ldr	r3, [r0, #32]
 8003502:	b570      	push	{r4, r5, r6, lr}
 8003504:	4605      	mov	r5, r0
 8003506:	460e      	mov	r6, r1
 8003508:	6884      	ldr	r4, [r0, #8]
 800350a:	b90b      	cbnz	r3, 8003510 <_puts_r+0x10>
 800350c:	f7ff ffc2 	bl	8003494 <__sinit>
 8003510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003512:	07db      	lsls	r3, r3, #31
 8003514:	d405      	bmi.n	8003522 <_puts_r+0x22>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	0598      	lsls	r0, r3, #22
 800351a:	d402      	bmi.n	8003522 <_puts_r+0x22>
 800351c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800351e:	f000 f99c 	bl	800385a <__retarget_lock_acquire_recursive>
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	0719      	lsls	r1, r3, #28
 8003526:	d513      	bpl.n	8003550 <_puts_r+0x50>
 8003528:	6923      	ldr	r3, [r4, #16]
 800352a:	b18b      	cbz	r3, 8003550 <_puts_r+0x50>
 800352c:	3e01      	subs	r6, #1
 800352e:	68a3      	ldr	r3, [r4, #8]
 8003530:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003534:	3b01      	subs	r3, #1
 8003536:	60a3      	str	r3, [r4, #8]
 8003538:	b9e9      	cbnz	r1, 8003576 <_puts_r+0x76>
 800353a:	2b00      	cmp	r3, #0
 800353c:	da2e      	bge.n	800359c <_puts_r+0x9c>
 800353e:	4622      	mov	r2, r4
 8003540:	210a      	movs	r1, #10
 8003542:	4628      	mov	r0, r5
 8003544:	f000 f87b 	bl	800363e <__swbuf_r>
 8003548:	3001      	adds	r0, #1
 800354a:	d007      	beq.n	800355c <_puts_r+0x5c>
 800354c:	250a      	movs	r5, #10
 800354e:	e007      	b.n	8003560 <_puts_r+0x60>
 8003550:	4621      	mov	r1, r4
 8003552:	4628      	mov	r0, r5
 8003554:	f000 f8b0 	bl	80036b8 <__swsetup_r>
 8003558:	2800      	cmp	r0, #0
 800355a:	d0e7      	beq.n	800352c <_puts_r+0x2c>
 800355c:	f04f 35ff 	mov.w	r5, #4294967295
 8003560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003562:	07da      	lsls	r2, r3, #31
 8003564:	d405      	bmi.n	8003572 <_puts_r+0x72>
 8003566:	89a3      	ldrh	r3, [r4, #12]
 8003568:	059b      	lsls	r3, r3, #22
 800356a:	d402      	bmi.n	8003572 <_puts_r+0x72>
 800356c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800356e:	f000 f975 	bl	800385c <__retarget_lock_release_recursive>
 8003572:	4628      	mov	r0, r5
 8003574:	bd70      	pop	{r4, r5, r6, pc}
 8003576:	2b00      	cmp	r3, #0
 8003578:	da04      	bge.n	8003584 <_puts_r+0x84>
 800357a:	69a2      	ldr	r2, [r4, #24]
 800357c:	429a      	cmp	r2, r3
 800357e:	dc06      	bgt.n	800358e <_puts_r+0x8e>
 8003580:	290a      	cmp	r1, #10
 8003582:	d004      	beq.n	800358e <_puts_r+0x8e>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	6022      	str	r2, [r4, #0]
 800358a:	7019      	strb	r1, [r3, #0]
 800358c:	e7cf      	b.n	800352e <_puts_r+0x2e>
 800358e:	4622      	mov	r2, r4
 8003590:	4628      	mov	r0, r5
 8003592:	f000 f854 	bl	800363e <__swbuf_r>
 8003596:	3001      	adds	r0, #1
 8003598:	d1c9      	bne.n	800352e <_puts_r+0x2e>
 800359a:	e7df      	b.n	800355c <_puts_r+0x5c>
 800359c:	250a      	movs	r5, #10
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	6022      	str	r2, [r4, #0]
 80035a4:	701d      	strb	r5, [r3, #0]
 80035a6:	e7db      	b.n	8003560 <_puts_r+0x60>

080035a8 <puts>:
 80035a8:	4b02      	ldr	r3, [pc, #8]	; (80035b4 <puts+0xc>)
 80035aa:	4601      	mov	r1, r0
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f7ff bfa7 	b.w	8003500 <_puts_r>
 80035b2:	bf00      	nop
 80035b4:	20000068 	.word	0x20000068

080035b8 <__sread>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	460c      	mov	r4, r1
 80035bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c0:	f000 f8fc 	bl	80037bc <_read_r>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	bfab      	itete	ge
 80035c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035ca:	89a3      	ldrhlt	r3, [r4, #12]
 80035cc:	181b      	addge	r3, r3, r0
 80035ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035d2:	bfac      	ite	ge
 80035d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80035d6:	81a3      	strhlt	r3, [r4, #12]
 80035d8:	bd10      	pop	{r4, pc}

080035da <__swrite>:
 80035da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035de:	461f      	mov	r7, r3
 80035e0:	898b      	ldrh	r3, [r1, #12]
 80035e2:	4605      	mov	r5, r0
 80035e4:	05db      	lsls	r3, r3, #23
 80035e6:	460c      	mov	r4, r1
 80035e8:	4616      	mov	r6, r2
 80035ea:	d505      	bpl.n	80035f8 <__swrite+0x1e>
 80035ec:	2302      	movs	r3, #2
 80035ee:	2200      	movs	r2, #0
 80035f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f4:	f000 f8d0 	bl	8003798 <_lseek_r>
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	4632      	mov	r2, r6
 80035fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003600:	81a3      	strh	r3, [r4, #12]
 8003602:	4628      	mov	r0, r5
 8003604:	463b      	mov	r3, r7
 8003606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800360a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800360e:	f000 b8e7 	b.w	80037e0 <_write_r>

08003612 <__sseek>:
 8003612:	b510      	push	{r4, lr}
 8003614:	460c      	mov	r4, r1
 8003616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800361a:	f000 f8bd 	bl	8003798 <_lseek_r>
 800361e:	1c43      	adds	r3, r0, #1
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	bf15      	itete	ne
 8003624:	6560      	strne	r0, [r4, #84]	; 0x54
 8003626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800362a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800362e:	81a3      	strheq	r3, [r4, #12]
 8003630:	bf18      	it	ne
 8003632:	81a3      	strhne	r3, [r4, #12]
 8003634:	bd10      	pop	{r4, pc}

08003636 <__sclose>:
 8003636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800363a:	f000 b89d 	b.w	8003778 <_close_r>

0800363e <__swbuf_r>:
 800363e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003640:	460e      	mov	r6, r1
 8003642:	4614      	mov	r4, r2
 8003644:	4605      	mov	r5, r0
 8003646:	b118      	cbz	r0, 8003650 <__swbuf_r+0x12>
 8003648:	6a03      	ldr	r3, [r0, #32]
 800364a:	b90b      	cbnz	r3, 8003650 <__swbuf_r+0x12>
 800364c:	f7ff ff22 	bl	8003494 <__sinit>
 8003650:	69a3      	ldr	r3, [r4, #24]
 8003652:	60a3      	str	r3, [r4, #8]
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	071a      	lsls	r2, r3, #28
 8003658:	d525      	bpl.n	80036a6 <__swbuf_r+0x68>
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	b31b      	cbz	r3, 80036a6 <__swbuf_r+0x68>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	6922      	ldr	r2, [r4, #16]
 8003662:	b2f6      	uxtb	r6, r6
 8003664:	1a98      	subs	r0, r3, r2
 8003666:	6963      	ldr	r3, [r4, #20]
 8003668:	4637      	mov	r7, r6
 800366a:	4283      	cmp	r3, r0
 800366c:	dc04      	bgt.n	8003678 <__swbuf_r+0x3a>
 800366e:	4621      	mov	r1, r4
 8003670:	4628      	mov	r0, r5
 8003672:	f000 fa6b 	bl	8003b4c <_fflush_r>
 8003676:	b9e0      	cbnz	r0, 80036b2 <__swbuf_r+0x74>
 8003678:	68a3      	ldr	r3, [r4, #8]
 800367a:	3b01      	subs	r3, #1
 800367c:	60a3      	str	r3, [r4, #8]
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	6022      	str	r2, [r4, #0]
 8003684:	701e      	strb	r6, [r3, #0]
 8003686:	6962      	ldr	r2, [r4, #20]
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	429a      	cmp	r2, r3
 800368c:	d004      	beq.n	8003698 <__swbuf_r+0x5a>
 800368e:	89a3      	ldrh	r3, [r4, #12]
 8003690:	07db      	lsls	r3, r3, #31
 8003692:	d506      	bpl.n	80036a2 <__swbuf_r+0x64>
 8003694:	2e0a      	cmp	r6, #10
 8003696:	d104      	bne.n	80036a2 <__swbuf_r+0x64>
 8003698:	4621      	mov	r1, r4
 800369a:	4628      	mov	r0, r5
 800369c:	f000 fa56 	bl	8003b4c <_fflush_r>
 80036a0:	b938      	cbnz	r0, 80036b2 <__swbuf_r+0x74>
 80036a2:	4638      	mov	r0, r7
 80036a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a6:	4621      	mov	r1, r4
 80036a8:	4628      	mov	r0, r5
 80036aa:	f000 f805 	bl	80036b8 <__swsetup_r>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d0d5      	beq.n	800365e <__swbuf_r+0x20>
 80036b2:	f04f 37ff 	mov.w	r7, #4294967295
 80036b6:	e7f4      	b.n	80036a2 <__swbuf_r+0x64>

080036b8 <__swsetup_r>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <__swsetup_r+0xac>)
 80036bc:	4605      	mov	r5, r0
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	460c      	mov	r4, r1
 80036c2:	b118      	cbz	r0, 80036cc <__swsetup_r+0x14>
 80036c4:	6a03      	ldr	r3, [r0, #32]
 80036c6:	b90b      	cbnz	r3, 80036cc <__swsetup_r+0x14>
 80036c8:	f7ff fee4 	bl	8003494 <__sinit>
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036d2:	0718      	lsls	r0, r3, #28
 80036d4:	d422      	bmi.n	800371c <__swsetup_r+0x64>
 80036d6:	06d9      	lsls	r1, r3, #27
 80036d8:	d407      	bmi.n	80036ea <__swsetup_r+0x32>
 80036da:	2309      	movs	r3, #9
 80036dc:	602b      	str	r3, [r5, #0]
 80036de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036e2:	f04f 30ff 	mov.w	r0, #4294967295
 80036e6:	81a3      	strh	r3, [r4, #12]
 80036e8:	e034      	b.n	8003754 <__swsetup_r+0x9c>
 80036ea:	0758      	lsls	r0, r3, #29
 80036ec:	d512      	bpl.n	8003714 <__swsetup_r+0x5c>
 80036ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036f0:	b141      	cbz	r1, 8003704 <__swsetup_r+0x4c>
 80036f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036f6:	4299      	cmp	r1, r3
 80036f8:	d002      	beq.n	8003700 <__swsetup_r+0x48>
 80036fa:	4628      	mov	r0, r5
 80036fc:	f000 f8b0 	bl	8003860 <_free_r>
 8003700:	2300      	movs	r3, #0
 8003702:	6363      	str	r3, [r4, #52]	; 0x34
 8003704:	89a3      	ldrh	r3, [r4, #12]
 8003706:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800370a:	81a3      	strh	r3, [r4, #12]
 800370c:	2300      	movs	r3, #0
 800370e:	6063      	str	r3, [r4, #4]
 8003710:	6923      	ldr	r3, [r4, #16]
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	81a3      	strh	r3, [r4, #12]
 800371c:	6923      	ldr	r3, [r4, #16]
 800371e:	b94b      	cbnz	r3, 8003734 <__swsetup_r+0x7c>
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372a:	d003      	beq.n	8003734 <__swsetup_r+0x7c>
 800372c:	4621      	mov	r1, r4
 800372e:	4628      	mov	r0, r5
 8003730:	f000 fa59 	bl	8003be6 <__smakebuf_r>
 8003734:	89a0      	ldrh	r0, [r4, #12]
 8003736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800373a:	f010 0301 	ands.w	r3, r0, #1
 800373e:	d00a      	beq.n	8003756 <__swsetup_r+0x9e>
 8003740:	2300      	movs	r3, #0
 8003742:	60a3      	str	r3, [r4, #8]
 8003744:	6963      	ldr	r3, [r4, #20]
 8003746:	425b      	negs	r3, r3
 8003748:	61a3      	str	r3, [r4, #24]
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	b943      	cbnz	r3, 8003760 <__swsetup_r+0xa8>
 800374e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003752:	d1c4      	bne.n	80036de <__swsetup_r+0x26>
 8003754:	bd38      	pop	{r3, r4, r5, pc}
 8003756:	0781      	lsls	r1, r0, #30
 8003758:	bf58      	it	pl
 800375a:	6963      	ldrpl	r3, [r4, #20]
 800375c:	60a3      	str	r3, [r4, #8]
 800375e:	e7f4      	b.n	800374a <__swsetup_r+0x92>
 8003760:	2000      	movs	r0, #0
 8003762:	e7f7      	b.n	8003754 <__swsetup_r+0x9c>
 8003764:	20000068 	.word	0x20000068

08003768 <memset>:
 8003768:	4603      	mov	r3, r0
 800376a:	4402      	add	r2, r0
 800376c:	4293      	cmp	r3, r2
 800376e:	d100      	bne.n	8003772 <memset+0xa>
 8003770:	4770      	bx	lr
 8003772:	f803 1b01 	strb.w	r1, [r3], #1
 8003776:	e7f9      	b.n	800376c <memset+0x4>

08003778 <_close_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	2300      	movs	r3, #0
 800377c:	4d05      	ldr	r5, [pc, #20]	; (8003794 <_close_r+0x1c>)
 800377e:	4604      	mov	r4, r0
 8003780:	4608      	mov	r0, r1
 8003782:	602b      	str	r3, [r5, #0]
 8003784:	f7fd f81d 	bl	80007c2 <_close>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d102      	bne.n	8003792 <_close_r+0x1a>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	b103      	cbz	r3, 8003792 <_close_r+0x1a>
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	20001200 	.word	0x20001200

08003798 <_lseek_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4604      	mov	r4, r0
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	2200      	movs	r2, #0
 80037a2:	4d05      	ldr	r5, [pc, #20]	; (80037b8 <_lseek_r+0x20>)
 80037a4:	602a      	str	r2, [r5, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f7fd f82f 	bl	800080a <_lseek>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_lseek_r+0x1e>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_lseek_r+0x1e>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	20001200 	.word	0x20001200

080037bc <_read_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4604      	mov	r4, r0
 80037c0:	4608      	mov	r0, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	2200      	movs	r2, #0
 80037c6:	4d05      	ldr	r5, [pc, #20]	; (80037dc <_read_r+0x20>)
 80037c8:	602a      	str	r2, [r5, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f7fc ffdc 	bl	8000788 <_read>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_read_r+0x1e>
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	b103      	cbz	r3, 80037da <_read_r+0x1e>
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	20001200 	.word	0x20001200

080037e0 <_write_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	2200      	movs	r2, #0
 80037ea:	4d05      	ldr	r5, [pc, #20]	; (8003800 <_write_r+0x20>)
 80037ec:	602a      	str	r2, [r5, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f7fc fcdc 	bl	80001ac <_write>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d102      	bne.n	80037fe <_write_r+0x1e>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	b103      	cbz	r3, 80037fe <_write_r+0x1e>
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	20001200 	.word	0x20001200

08003804 <__errno>:
 8003804:	4b01      	ldr	r3, [pc, #4]	; (800380c <__errno+0x8>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000068 	.word	0x20000068

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	2600      	movs	r6, #0
 8003814:	4d0c      	ldr	r5, [pc, #48]	; (8003848 <__libc_init_array+0x38>)
 8003816:	4c0d      	ldr	r4, [pc, #52]	; (800384c <__libc_init_array+0x3c>)
 8003818:	1b64      	subs	r4, r4, r5
 800381a:	10a4      	asrs	r4, r4, #2
 800381c:	42a6      	cmp	r6, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	f000 fa50 	bl	8003cc4 <_init>
 8003824:	2600      	movs	r6, #0
 8003826:	4d0a      	ldr	r5, [pc, #40]	; (8003850 <__libc_init_array+0x40>)
 8003828:	4c0a      	ldr	r4, [pc, #40]	; (8003854 <__libc_init_array+0x44>)
 800382a:	1b64      	subs	r4, r4, r5
 800382c:	10a4      	asrs	r4, r4, #2
 800382e:	42a6      	cmp	r6, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	f855 3b04 	ldr.w	r3, [r5], #4
 8003838:	4798      	blx	r3
 800383a:	3601      	adds	r6, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003842:	4798      	blx	r3
 8003844:	3601      	adds	r6, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	08003db4 	.word	0x08003db4
 800384c:	08003db4 	.word	0x08003db4
 8003850:	08003db4 	.word	0x08003db4
 8003854:	08003db8 	.word	0x08003db8

08003858 <__retarget_lock_init_recursive>:
 8003858:	4770      	bx	lr

0800385a <__retarget_lock_acquire_recursive>:
 800385a:	4770      	bx	lr

0800385c <__retarget_lock_release_recursive>:
 800385c:	4770      	bx	lr
	...

08003860 <_free_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4605      	mov	r5, r0
 8003864:	2900      	cmp	r1, #0
 8003866:	d040      	beq.n	80038ea <_free_r+0x8a>
 8003868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800386c:	1f0c      	subs	r4, r1, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	bfb8      	it	lt
 8003872:	18e4      	addlt	r4, r4, r3
 8003874:	f000 f8dc 	bl	8003a30 <__malloc_lock>
 8003878:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <_free_r+0x8c>)
 800387a:	6813      	ldr	r3, [r2, #0]
 800387c:	b933      	cbnz	r3, 800388c <_free_r+0x2c>
 800387e:	6063      	str	r3, [r4, #4]
 8003880:	6014      	str	r4, [r2, #0]
 8003882:	4628      	mov	r0, r5
 8003884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003888:	f000 b8d8 	b.w	8003a3c <__malloc_unlock>
 800388c:	42a3      	cmp	r3, r4
 800388e:	d908      	bls.n	80038a2 <_free_r+0x42>
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	1821      	adds	r1, r4, r0
 8003894:	428b      	cmp	r3, r1
 8003896:	bf01      	itttt	eq
 8003898:	6819      	ldreq	r1, [r3, #0]
 800389a:	685b      	ldreq	r3, [r3, #4]
 800389c:	1809      	addeq	r1, r1, r0
 800389e:	6021      	streq	r1, [r4, #0]
 80038a0:	e7ed      	b.n	800387e <_free_r+0x1e>
 80038a2:	461a      	mov	r2, r3
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	b10b      	cbz	r3, 80038ac <_free_r+0x4c>
 80038a8:	42a3      	cmp	r3, r4
 80038aa:	d9fa      	bls.n	80038a2 <_free_r+0x42>
 80038ac:	6811      	ldr	r1, [r2, #0]
 80038ae:	1850      	adds	r0, r2, r1
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d10b      	bne.n	80038cc <_free_r+0x6c>
 80038b4:	6820      	ldr	r0, [r4, #0]
 80038b6:	4401      	add	r1, r0
 80038b8:	1850      	adds	r0, r2, r1
 80038ba:	4283      	cmp	r3, r0
 80038bc:	6011      	str	r1, [r2, #0]
 80038be:	d1e0      	bne.n	8003882 <_free_r+0x22>
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4408      	add	r0, r1
 80038c6:	6010      	str	r0, [r2, #0]
 80038c8:	6053      	str	r3, [r2, #4]
 80038ca:	e7da      	b.n	8003882 <_free_r+0x22>
 80038cc:	d902      	bls.n	80038d4 <_free_r+0x74>
 80038ce:	230c      	movs	r3, #12
 80038d0:	602b      	str	r3, [r5, #0]
 80038d2:	e7d6      	b.n	8003882 <_free_r+0x22>
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	1821      	adds	r1, r4, r0
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf01      	itttt	eq
 80038dc:	6819      	ldreq	r1, [r3, #0]
 80038de:	685b      	ldreq	r3, [r3, #4]
 80038e0:	1809      	addeq	r1, r1, r0
 80038e2:	6021      	streq	r1, [r4, #0]
 80038e4:	6063      	str	r3, [r4, #4]
 80038e6:	6054      	str	r4, [r2, #4]
 80038e8:	e7cb      	b.n	8003882 <_free_r+0x22>
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	20001208 	.word	0x20001208

080038f0 <sbrk_aligned>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	4e0e      	ldr	r6, [pc, #56]	; (800392c <sbrk_aligned+0x3c>)
 80038f4:	460c      	mov	r4, r1
 80038f6:	6831      	ldr	r1, [r6, #0]
 80038f8:	4605      	mov	r5, r0
 80038fa:	b911      	cbnz	r1, 8003902 <sbrk_aligned+0x12>
 80038fc:	f000 f9d2 	bl	8003ca4 <_sbrk_r>
 8003900:	6030      	str	r0, [r6, #0]
 8003902:	4621      	mov	r1, r4
 8003904:	4628      	mov	r0, r5
 8003906:	f000 f9cd 	bl	8003ca4 <_sbrk_r>
 800390a:	1c43      	adds	r3, r0, #1
 800390c:	d00a      	beq.n	8003924 <sbrk_aligned+0x34>
 800390e:	1cc4      	adds	r4, r0, #3
 8003910:	f024 0403 	bic.w	r4, r4, #3
 8003914:	42a0      	cmp	r0, r4
 8003916:	d007      	beq.n	8003928 <sbrk_aligned+0x38>
 8003918:	1a21      	subs	r1, r4, r0
 800391a:	4628      	mov	r0, r5
 800391c:	f000 f9c2 	bl	8003ca4 <_sbrk_r>
 8003920:	3001      	adds	r0, #1
 8003922:	d101      	bne.n	8003928 <sbrk_aligned+0x38>
 8003924:	f04f 34ff 	mov.w	r4, #4294967295
 8003928:	4620      	mov	r0, r4
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	2000120c 	.word	0x2000120c

08003930 <_malloc_r>:
 8003930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003934:	1ccd      	adds	r5, r1, #3
 8003936:	f025 0503 	bic.w	r5, r5, #3
 800393a:	3508      	adds	r5, #8
 800393c:	2d0c      	cmp	r5, #12
 800393e:	bf38      	it	cc
 8003940:	250c      	movcc	r5, #12
 8003942:	2d00      	cmp	r5, #0
 8003944:	4607      	mov	r7, r0
 8003946:	db01      	blt.n	800394c <_malloc_r+0x1c>
 8003948:	42a9      	cmp	r1, r5
 800394a:	d905      	bls.n	8003958 <_malloc_r+0x28>
 800394c:	230c      	movs	r3, #12
 800394e:	2600      	movs	r6, #0
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	4630      	mov	r0, r6
 8003954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003958:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a2c <_malloc_r+0xfc>
 800395c:	f000 f868 	bl	8003a30 <__malloc_lock>
 8003960:	f8d8 3000 	ldr.w	r3, [r8]
 8003964:	461c      	mov	r4, r3
 8003966:	bb5c      	cbnz	r4, 80039c0 <_malloc_r+0x90>
 8003968:	4629      	mov	r1, r5
 800396a:	4638      	mov	r0, r7
 800396c:	f7ff ffc0 	bl	80038f0 <sbrk_aligned>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	4604      	mov	r4, r0
 8003974:	d155      	bne.n	8003a22 <_malloc_r+0xf2>
 8003976:	f8d8 4000 	ldr.w	r4, [r8]
 800397a:	4626      	mov	r6, r4
 800397c:	2e00      	cmp	r6, #0
 800397e:	d145      	bne.n	8003a0c <_malloc_r+0xdc>
 8003980:	2c00      	cmp	r4, #0
 8003982:	d048      	beq.n	8003a16 <_malloc_r+0xe6>
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	4631      	mov	r1, r6
 8003988:	4638      	mov	r0, r7
 800398a:	eb04 0903 	add.w	r9, r4, r3
 800398e:	f000 f989 	bl	8003ca4 <_sbrk_r>
 8003992:	4581      	cmp	r9, r0
 8003994:	d13f      	bne.n	8003a16 <_malloc_r+0xe6>
 8003996:	6821      	ldr	r1, [r4, #0]
 8003998:	4638      	mov	r0, r7
 800399a:	1a6d      	subs	r5, r5, r1
 800399c:	4629      	mov	r1, r5
 800399e:	f7ff ffa7 	bl	80038f0 <sbrk_aligned>
 80039a2:	3001      	adds	r0, #1
 80039a4:	d037      	beq.n	8003a16 <_malloc_r+0xe6>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	442b      	add	r3, r5
 80039aa:	6023      	str	r3, [r4, #0]
 80039ac:	f8d8 3000 	ldr.w	r3, [r8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d038      	beq.n	8003a26 <_malloc_r+0xf6>
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	42a2      	cmp	r2, r4
 80039b8:	d12b      	bne.n	8003a12 <_malloc_r+0xe2>
 80039ba:	2200      	movs	r2, #0
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	e00f      	b.n	80039e0 <_malloc_r+0xb0>
 80039c0:	6822      	ldr	r2, [r4, #0]
 80039c2:	1b52      	subs	r2, r2, r5
 80039c4:	d41f      	bmi.n	8003a06 <_malloc_r+0xd6>
 80039c6:	2a0b      	cmp	r2, #11
 80039c8:	d917      	bls.n	80039fa <_malloc_r+0xca>
 80039ca:	1961      	adds	r1, r4, r5
 80039cc:	42a3      	cmp	r3, r4
 80039ce:	6025      	str	r5, [r4, #0]
 80039d0:	bf18      	it	ne
 80039d2:	6059      	strne	r1, [r3, #4]
 80039d4:	6863      	ldr	r3, [r4, #4]
 80039d6:	bf08      	it	eq
 80039d8:	f8c8 1000 	streq.w	r1, [r8]
 80039dc:	5162      	str	r2, [r4, r5]
 80039de:	604b      	str	r3, [r1, #4]
 80039e0:	4638      	mov	r0, r7
 80039e2:	f104 060b 	add.w	r6, r4, #11
 80039e6:	f000 f829 	bl	8003a3c <__malloc_unlock>
 80039ea:	f026 0607 	bic.w	r6, r6, #7
 80039ee:	1d23      	adds	r3, r4, #4
 80039f0:	1af2      	subs	r2, r6, r3
 80039f2:	d0ae      	beq.n	8003952 <_malloc_r+0x22>
 80039f4:	1b9b      	subs	r3, r3, r6
 80039f6:	50a3      	str	r3, [r4, r2]
 80039f8:	e7ab      	b.n	8003952 <_malloc_r+0x22>
 80039fa:	42a3      	cmp	r3, r4
 80039fc:	6862      	ldr	r2, [r4, #4]
 80039fe:	d1dd      	bne.n	80039bc <_malloc_r+0x8c>
 8003a00:	f8c8 2000 	str.w	r2, [r8]
 8003a04:	e7ec      	b.n	80039e0 <_malloc_r+0xb0>
 8003a06:	4623      	mov	r3, r4
 8003a08:	6864      	ldr	r4, [r4, #4]
 8003a0a:	e7ac      	b.n	8003966 <_malloc_r+0x36>
 8003a0c:	4634      	mov	r4, r6
 8003a0e:	6876      	ldr	r6, [r6, #4]
 8003a10:	e7b4      	b.n	800397c <_malloc_r+0x4c>
 8003a12:	4613      	mov	r3, r2
 8003a14:	e7cc      	b.n	80039b0 <_malloc_r+0x80>
 8003a16:	230c      	movs	r3, #12
 8003a18:	4638      	mov	r0, r7
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	f000 f80e 	bl	8003a3c <__malloc_unlock>
 8003a20:	e797      	b.n	8003952 <_malloc_r+0x22>
 8003a22:	6025      	str	r5, [r4, #0]
 8003a24:	e7dc      	b.n	80039e0 <_malloc_r+0xb0>
 8003a26:	605b      	str	r3, [r3, #4]
 8003a28:	deff      	udf	#255	; 0xff
 8003a2a:	bf00      	nop
 8003a2c:	20001208 	.word	0x20001208

08003a30 <__malloc_lock>:
 8003a30:	4801      	ldr	r0, [pc, #4]	; (8003a38 <__malloc_lock+0x8>)
 8003a32:	f7ff bf12 	b.w	800385a <__retarget_lock_acquire_recursive>
 8003a36:	bf00      	nop
 8003a38:	20001204 	.word	0x20001204

08003a3c <__malloc_unlock>:
 8003a3c:	4801      	ldr	r0, [pc, #4]	; (8003a44 <__malloc_unlock+0x8>)
 8003a3e:	f7ff bf0d 	b.w	800385c <__retarget_lock_release_recursive>
 8003a42:	bf00      	nop
 8003a44:	20001204 	.word	0x20001204

08003a48 <__sflush_r>:
 8003a48:	898a      	ldrh	r2, [r1, #12]
 8003a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	0710      	lsls	r0, r2, #28
 8003a50:	460c      	mov	r4, r1
 8003a52:	d457      	bmi.n	8003b04 <__sflush_r+0xbc>
 8003a54:	684b      	ldr	r3, [r1, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	dc04      	bgt.n	8003a64 <__sflush_r+0x1c>
 8003a5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	dc01      	bgt.n	8003a64 <__sflush_r+0x1c>
 8003a60:	2000      	movs	r0, #0
 8003a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a66:	2e00      	cmp	r6, #0
 8003a68:	d0fa      	beq.n	8003a60 <__sflush_r+0x18>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a70:	682f      	ldr	r7, [r5, #0]
 8003a72:	6a21      	ldr	r1, [r4, #32]
 8003a74:	602b      	str	r3, [r5, #0]
 8003a76:	d032      	beq.n	8003ade <__sflush_r+0x96>
 8003a78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	075a      	lsls	r2, r3, #29
 8003a7e:	d505      	bpl.n	8003a8c <__sflush_r+0x44>
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	1ac0      	subs	r0, r0, r3
 8003a84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a86:	b10b      	cbz	r3, 8003a8c <__sflush_r+0x44>
 8003a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a8a:	1ac0      	subs	r0, r0, r3
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a92:	4628      	mov	r0, r5
 8003a94:	6a21      	ldr	r1, [r4, #32]
 8003a96:	47b0      	blx	r6
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	89a3      	ldrh	r3, [r4, #12]
 8003a9c:	d106      	bne.n	8003aac <__sflush_r+0x64>
 8003a9e:	6829      	ldr	r1, [r5, #0]
 8003aa0:	291d      	cmp	r1, #29
 8003aa2:	d82b      	bhi.n	8003afc <__sflush_r+0xb4>
 8003aa4:	4a28      	ldr	r2, [pc, #160]	; (8003b48 <__sflush_r+0x100>)
 8003aa6:	410a      	asrs	r2, r1
 8003aa8:	07d6      	lsls	r6, r2, #31
 8003aaa:	d427      	bmi.n	8003afc <__sflush_r+0xb4>
 8003aac:	2200      	movs	r2, #0
 8003aae:	6062      	str	r2, [r4, #4]
 8003ab0:	6922      	ldr	r2, [r4, #16]
 8003ab2:	04d9      	lsls	r1, r3, #19
 8003ab4:	6022      	str	r2, [r4, #0]
 8003ab6:	d504      	bpl.n	8003ac2 <__sflush_r+0x7a>
 8003ab8:	1c42      	adds	r2, r0, #1
 8003aba:	d101      	bne.n	8003ac0 <__sflush_r+0x78>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	b903      	cbnz	r3, 8003ac2 <__sflush_r+0x7a>
 8003ac0:	6560      	str	r0, [r4, #84]	; 0x54
 8003ac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac4:	602f      	str	r7, [r5, #0]
 8003ac6:	2900      	cmp	r1, #0
 8003ac8:	d0ca      	beq.n	8003a60 <__sflush_r+0x18>
 8003aca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ace:	4299      	cmp	r1, r3
 8003ad0:	d002      	beq.n	8003ad8 <__sflush_r+0x90>
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f7ff fec4 	bl	8003860 <_free_r>
 8003ad8:	2000      	movs	r0, #0
 8003ada:	6360      	str	r0, [r4, #52]	; 0x34
 8003adc:	e7c1      	b.n	8003a62 <__sflush_r+0x1a>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b0      	blx	r6
 8003ae4:	1c41      	adds	r1, r0, #1
 8003ae6:	d1c8      	bne.n	8003a7a <__sflush_r+0x32>
 8003ae8:	682b      	ldr	r3, [r5, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0c5      	beq.n	8003a7a <__sflush_r+0x32>
 8003aee:	2b1d      	cmp	r3, #29
 8003af0:	d001      	beq.n	8003af6 <__sflush_r+0xae>
 8003af2:	2b16      	cmp	r3, #22
 8003af4:	d101      	bne.n	8003afa <__sflush_r+0xb2>
 8003af6:	602f      	str	r7, [r5, #0]
 8003af8:	e7b2      	b.n	8003a60 <__sflush_r+0x18>
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	e7ae      	b.n	8003a62 <__sflush_r+0x1a>
 8003b04:	690f      	ldr	r7, [r1, #16]
 8003b06:	2f00      	cmp	r7, #0
 8003b08:	d0aa      	beq.n	8003a60 <__sflush_r+0x18>
 8003b0a:	0793      	lsls	r3, r2, #30
 8003b0c:	bf18      	it	ne
 8003b0e:	2300      	movne	r3, #0
 8003b10:	680e      	ldr	r6, [r1, #0]
 8003b12:	bf08      	it	eq
 8003b14:	694b      	ldreq	r3, [r1, #20]
 8003b16:	1bf6      	subs	r6, r6, r7
 8003b18:	600f      	str	r7, [r1, #0]
 8003b1a:	608b      	str	r3, [r1, #8]
 8003b1c:	2e00      	cmp	r6, #0
 8003b1e:	dd9f      	ble.n	8003a60 <__sflush_r+0x18>
 8003b20:	4633      	mov	r3, r6
 8003b22:	463a      	mov	r2, r7
 8003b24:	4628      	mov	r0, r5
 8003b26:	6a21      	ldr	r1, [r4, #32]
 8003b28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003b2c:	47e0      	blx	ip
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	dc06      	bgt.n	8003b40 <__sflush_r+0xf8>
 8003b32:	89a3      	ldrh	r3, [r4, #12]
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b3c:	81a3      	strh	r3, [r4, #12]
 8003b3e:	e790      	b.n	8003a62 <__sflush_r+0x1a>
 8003b40:	4407      	add	r7, r0
 8003b42:	1a36      	subs	r6, r6, r0
 8003b44:	e7ea      	b.n	8003b1c <__sflush_r+0xd4>
 8003b46:	bf00      	nop
 8003b48:	dfbffffe 	.word	0xdfbffffe

08003b4c <_fflush_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	690b      	ldr	r3, [r1, #16]
 8003b50:	4605      	mov	r5, r0
 8003b52:	460c      	mov	r4, r1
 8003b54:	b913      	cbnz	r3, 8003b5c <_fflush_r+0x10>
 8003b56:	2500      	movs	r5, #0
 8003b58:	4628      	mov	r0, r5
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	b118      	cbz	r0, 8003b66 <_fflush_r+0x1a>
 8003b5e:	6a03      	ldr	r3, [r0, #32]
 8003b60:	b90b      	cbnz	r3, 8003b66 <_fflush_r+0x1a>
 8003b62:	f7ff fc97 	bl	8003494 <__sinit>
 8003b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f3      	beq.n	8003b56 <_fflush_r+0xa>
 8003b6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b70:	07d0      	lsls	r0, r2, #31
 8003b72:	d404      	bmi.n	8003b7e <_fflush_r+0x32>
 8003b74:	0599      	lsls	r1, r3, #22
 8003b76:	d402      	bmi.n	8003b7e <_fflush_r+0x32>
 8003b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b7a:	f7ff fe6e 	bl	800385a <__retarget_lock_acquire_recursive>
 8003b7e:	4628      	mov	r0, r5
 8003b80:	4621      	mov	r1, r4
 8003b82:	f7ff ff61 	bl	8003a48 <__sflush_r>
 8003b86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b88:	4605      	mov	r5, r0
 8003b8a:	07da      	lsls	r2, r3, #31
 8003b8c:	d4e4      	bmi.n	8003b58 <_fflush_r+0xc>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	059b      	lsls	r3, r3, #22
 8003b92:	d4e1      	bmi.n	8003b58 <_fflush_r+0xc>
 8003b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b96:	f7ff fe61 	bl	800385c <__retarget_lock_release_recursive>
 8003b9a:	e7dd      	b.n	8003b58 <_fflush_r+0xc>

08003b9c <__swhatbuf_r>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba4:	4615      	mov	r5, r2
 8003ba6:	2900      	cmp	r1, #0
 8003ba8:	461e      	mov	r6, r3
 8003baa:	b096      	sub	sp, #88	; 0x58
 8003bac:	da0c      	bge.n	8003bc8 <__swhatbuf_r+0x2c>
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003bb6:	bf0c      	ite	eq
 8003bb8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003bbc:	2340      	movne	r3, #64	; 0x40
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	6031      	str	r1, [r6, #0]
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	b016      	add	sp, #88	; 0x58
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	466a      	mov	r2, sp
 8003bca:	f000 f849 	bl	8003c60 <_fstat_r>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	dbed      	blt.n	8003bae <__swhatbuf_r+0x12>
 8003bd2:	9901      	ldr	r1, [sp, #4]
 8003bd4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003bd8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003bdc:	4259      	negs	r1, r3
 8003bde:	4159      	adcs	r1, r3
 8003be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be4:	e7eb      	b.n	8003bbe <__swhatbuf_r+0x22>

08003be6 <__smakebuf_r>:
 8003be6:	898b      	ldrh	r3, [r1, #12]
 8003be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bea:	079d      	lsls	r5, r3, #30
 8003bec:	4606      	mov	r6, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	d507      	bpl.n	8003c02 <__smakebuf_r+0x1c>
 8003bf2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bf6:	6023      	str	r3, [r4, #0]
 8003bf8:	6123      	str	r3, [r4, #16]
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	6163      	str	r3, [r4, #20]
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
 8003c02:	466a      	mov	r2, sp
 8003c04:	ab01      	add	r3, sp, #4
 8003c06:	f7ff ffc9 	bl	8003b9c <__swhatbuf_r>
 8003c0a:	9900      	ldr	r1, [sp, #0]
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f7ff fe8e 	bl	8003930 <_malloc_r>
 8003c14:	b948      	cbnz	r0, 8003c2a <__smakebuf_r+0x44>
 8003c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c1a:	059a      	lsls	r2, r3, #22
 8003c1c:	d4ef      	bmi.n	8003bfe <__smakebuf_r+0x18>
 8003c1e:	f023 0303 	bic.w	r3, r3, #3
 8003c22:	f043 0302 	orr.w	r3, r3, #2
 8003c26:	81a3      	strh	r3, [r4, #12]
 8003c28:	e7e3      	b.n	8003bf2 <__smakebuf_r+0xc>
 8003c2a:	89a3      	ldrh	r3, [r4, #12]
 8003c2c:	6020      	str	r0, [r4, #0]
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c32:	81a3      	strh	r3, [r4, #12]
 8003c34:	9b00      	ldr	r3, [sp, #0]
 8003c36:	6120      	str	r0, [r4, #16]
 8003c38:	6163      	str	r3, [r4, #20]
 8003c3a:	9b01      	ldr	r3, [sp, #4]
 8003c3c:	b15b      	cbz	r3, 8003c56 <__smakebuf_r+0x70>
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c44:	f000 f81e 	bl	8003c84 <_isatty_r>
 8003c48:	b128      	cbz	r0, 8003c56 <__smakebuf_r+0x70>
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	f023 0303 	bic.w	r3, r3, #3
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	431d      	orrs	r5, r3
 8003c5a:	81a5      	strh	r5, [r4, #12]
 8003c5c:	e7cf      	b.n	8003bfe <__smakebuf_r+0x18>
	...

08003c60 <_fstat_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	2300      	movs	r3, #0
 8003c64:	4d06      	ldr	r5, [pc, #24]	; (8003c80 <_fstat_r+0x20>)
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	602b      	str	r3, [r5, #0]
 8003c6e:	f7fc fdb3 	bl	80007d8 <_fstat>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	d102      	bne.n	8003c7c <_fstat_r+0x1c>
 8003c76:	682b      	ldr	r3, [r5, #0]
 8003c78:	b103      	cbz	r3, 8003c7c <_fstat_r+0x1c>
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	bd38      	pop	{r3, r4, r5, pc}
 8003c7e:	bf00      	nop
 8003c80:	20001200 	.word	0x20001200

08003c84 <_isatty_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	2300      	movs	r3, #0
 8003c88:	4d05      	ldr	r5, [pc, #20]	; (8003ca0 <_isatty_r+0x1c>)
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	f7fc fdb1 	bl	80007f6 <_isatty>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d102      	bne.n	8003c9e <_isatty_r+0x1a>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	b103      	cbz	r3, 8003c9e <_isatty_r+0x1a>
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	20001200 	.word	0x20001200

08003ca4 <_sbrk_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4d05      	ldr	r5, [pc, #20]	; (8003cc0 <_sbrk_r+0x1c>)
 8003caa:	4604      	mov	r4, r0
 8003cac:	4608      	mov	r0, r1
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	f7fc fdb8 	bl	8000824 <_sbrk>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_sbrk_r+0x1a>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_sbrk_r+0x1a>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	20001200 	.word	0x20001200

08003cc4 <_init>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr

08003cd0 <_fini>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr
