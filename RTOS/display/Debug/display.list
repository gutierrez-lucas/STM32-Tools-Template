
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005388  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062fc  080062fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080062fc  080062fc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062fc  080062fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001604  20000074  08006378  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001678  08006378  00021678  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b19  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e2d  00000000  00000000  00032bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  00035a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f09  00000000  00000000  00036d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae53  00000000  00000000  00037c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016efa  00000000  00000000  00052ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096e6b  00000000  00000000  000699ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057f4  00000000  00000000  0010081c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00106010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005480 	.word	0x08005480

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005480 	.word	0x08005480

08000150 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr

08000164 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	4a06      	ldr	r2, [pc, #24]	; (8000198 <vApplicationGetIdleTaskMemory+0x28>)
 8000180:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000182:	68bb      	ldr	r3, [r7, #8]
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <vApplicationGetIdleTaskMemory+0x2c>)
 8000186:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2280      	movs	r2, #128	; 0x80
 800018c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800018e:	bf00      	nop
 8000190:	3714      	adds	r7, #20
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000090 	.word	0x20000090
 800019c:	200000e8 	.word	0x200000e8

080001a0 <_write>:
#include "../display/ssd1306.h"

I2C_HandleTypeDef hi2c2;
UART_HandleTypeDef huart1;

int _write(int file, char *data, int len){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	60f8      	str	r0, [r7, #12]
 80001a8:	60b9      	str	r1, [r7, #8]
 80001aa:	607a      	str	r2, [r7, #4]
		 if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)){
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d00a      	beq.n	80001c8 <_write+0x28>
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	d007      	beq.n	80001c8 <_write+0x28>
						errno = EBADF;
 80001b8:	f004 fc1e 	bl	80049f8 <__errno>
 80001bc:	4603      	mov	r3, r0
 80001be:	2209      	movs	r2, #9
 80001c0:	601a      	str	r2, [r3, #0]
						return -1;
 80001c2:	f04f 33ff 	mov.w	r3, #4294967295
 80001c6:	e00f      	b.n	80001e8 <_write+0x48>
		 }
		 HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d0:	68b9      	ldr	r1, [r7, #8]
 80001d2:	4807      	ldr	r0, [pc, #28]	; (80001f0 <_write+0x50>)
 80001d4:	f002 fe16 	bl	8002e04 <HAL_UART_Transmit>
 80001d8:	4603      	mov	r3, r0
 80001da:	75fb      	strb	r3, [r7, #23]

		 return (status == HAL_OK ? len : 0);
 80001dc:	7dfb      	ldrb	r3, [r7, #23]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d101      	bne.n	80001e6 <_write+0x46>
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	e000      	b.n	80001e8 <_write+0x48>
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3718      	adds	r7, #24
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	2000033c 	.word	0x2000033c

080001f4 <main>:
static void MX_I2C2_Init(void);
static void MX_USART1_UART_Init(void);


int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af02      	add	r7, sp, #8

	HAL_Init();
 80001fa:	f000 fe97 	bl	8000f2c <HAL_Init>
	SystemClock_Config();
 80001fe:	f000 f8a3 	bl	8000348 <SystemClock_Config>

	MX_GPIO_Init();
 8000202:	f000 f93f 	bl	8000484 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000206:	f000 f8e5 	bl	80003d4 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 800020a:	f000 f911 	bl	8000430 <MX_USART1_UART_Init>

	printf("\r\n\r\nDisplay Test\r\n");
 800020e:	480d      	ldr	r0, [pc, #52]	; (8000244 <main+0x50>)
 8000210:	f004 fac4 	bl	800479c <puts>
// SSD1306_GotoXY (10,10); // goto 10, 10 
// SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello 
// SSD1306_GotoXY (10, 30); 
// SSD1306_Puts ("WORLD !!", &Font_11x18, 1); 
// SSD1306_UpdateScreen(); // update screen
	xTaskCreate(led_task_1, "led_task_1", 128, NULL, tskIDLE_PRIORITY+1, NULL);
 8000214:	2300      	movs	r3, #0
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	2301      	movs	r3, #1
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2300      	movs	r3, #0
 800021e:	2280      	movs	r2, #128	; 0x80
 8000220:	4909      	ldr	r1, [pc, #36]	; (8000248 <main+0x54>)
 8000222:	480a      	ldr	r0, [pc, #40]	; (800024c <main+0x58>)
 8000224:	f003 f879 	bl	800331a <xTaskCreate>
	xTaskCreate(led_task_2, "led_task_2", 128, NULL, tskIDLE_PRIORITY+2, NULL);
 8000228:	2300      	movs	r3, #0
 800022a:	9301      	str	r3, [sp, #4]
 800022c:	2302      	movs	r3, #2
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	2300      	movs	r3, #0
 8000232:	2280      	movs	r2, #128	; 0x80
 8000234:	4906      	ldr	r1, [pc, #24]	; (8000250 <main+0x5c>)
 8000236:	4807      	ldr	r0, [pc, #28]	; (8000254 <main+0x60>)
 8000238:	f003 f86f 	bl	800331a <xTaskCreate>

	vTaskStartScheduler();
 800023c:	f003 fa58 	bl	80036f0 <vTaskStartScheduler>

	while (1){
 8000240:	e7fe      	b.n	8000240 <main+0x4c>
 8000242:	bf00      	nop
 8000244:	08005498 	.word	0x08005498
 8000248:	080054ac 	.word	0x080054ac
 800024c:	08000259 	.word	0x08000259
 8000250:	080054b8 	.word	0x080054b8
 8000254:	08000315 	.word	0x08000315

08000258 <led_task_1>:
	}
}


void led_task_1(void *pvParameters){
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
 8000260:	2101      	movs	r1, #1
 8000262:	2000      	movs	r0, #0
 8000264:	f003 fc1a 	bl	8003a9c <vTaskSetApplicationTaskTag>
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000268:	f003 fb4c 	bl	8003904 <xTaskGetTickCount>
 800026c:	4603      	mov	r3, r0
 800026e:	60fb      	str	r3, [r7, #12]
	static int connected = 0;
	HAL_StatusTypeDef res;
	int i = 0 ;
 8000270:	2300      	movs	r3, #0
 8000272:	617b      	str	r3, [r7, #20]

	while(1){
		if(connected == 0){
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <led_task_1+0xa0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d136      	bne.n	80002ea <led_task_1+0x92>
			res = SSD1306_Init(0x78); 
 800027c:	2078      	movs	r0, #120	; 0x78
 800027e:	f000 fb95 	bl	80009ac <SSD1306_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	74fb      	strb	r3, [r7, #19]
			if( res != HAL_OK){
 8000286:	7cfb      	ldrb	r3, [r7, #19]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d006      	beq.n	800029a <led_task_1+0x42>
				printf("Display connection err: %d, with addr 0x%02X  \r\n", res, i);
 800028c:	7cfb      	ldrb	r3, [r7, #19]
 800028e:	697a      	ldr	r2, [r7, #20]
 8000290:	4619      	mov	r1, r3
 8000292:	481a      	ldr	r0, [pc, #104]	; (80002fc <led_task_1+0xa4>)
 8000294:	f004 fa1c 	bl	80046d0 <iprintf>
 8000298:	e020      	b.n	80002dc <led_task_1+0x84>
			}else{
				HAL_GPIO_WritePin(main_led_GPIO_Port, main_led_Pin, SET);
 800029a:	2201      	movs	r2, #1
 800029c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a0:	4817      	ldr	r0, [pc, #92]	; (8000300 <led_task_1+0xa8>)
 80002a2:	f001 f8d9 	bl	8001458 <HAL_GPIO_WritePin>
				connected = 1;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <led_task_1+0xa0>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	601a      	str	r2, [r3, #0]
				printf("Display connected with addr 0x%02X \\r\n", i);
 80002ac:	6979      	ldr	r1, [r7, #20]
 80002ae:	4815      	ldr	r0, [pc, #84]	; (8000304 <led_task_1+0xac>)
 80002b0:	f004 fa0e 	bl	80046d0 <iprintf>

				SSD1306_GotoXY (10,10); // goto 10, 10 
 80002b4:	210a      	movs	r1, #10
 80002b6:	200a      	movs	r0, #10
 80002b8:	f000 fce4 	bl	8000c84 <SSD1306_GotoXY>
				SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello 
 80002bc:	2201      	movs	r2, #1
 80002be:	4912      	ldr	r1, [pc, #72]	; (8000308 <led_task_1+0xb0>)
 80002c0:	4812      	ldr	r0, [pc, #72]	; (800030c <led_task_1+0xb4>)
 80002c2:	f000 fd75 	bl	8000db0 <SSD1306_Puts>
				SSD1306_GotoXY (10, 30); 
 80002c6:	211e      	movs	r1, #30
 80002c8:	200a      	movs	r0, #10
 80002ca:	f000 fcdb 	bl	8000c84 <SSD1306_GotoXY>
				SSD1306_Puts ("WORLD !!", &Font_11x18, 1); 
 80002ce:	2201      	movs	r2, #1
 80002d0:	490d      	ldr	r1, [pc, #52]	; (8000308 <led_task_1+0xb0>)
 80002d2:	480f      	ldr	r0, [pc, #60]	; (8000310 <led_task_1+0xb8>)
 80002d4:	f000 fd6c 	bl	8000db0 <SSD1306_Puts>
				SSD1306_UpdateScreen(); // update screen
 80002d8:	f000 fc30 	bl	8000b3c <SSD1306_UpdateScreen>

			}
			vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(250));
 80002dc:	f107 030c 	add.w	r3, r7, #12
 80002e0:	21fa      	movs	r1, #250	; 0xfa
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 f952 	bl	800358c <vTaskDelayUntil>
 80002e8:	e7c4      	b.n	8000274 <led_task_1+0x1c>
		}else{
			vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(250));
 80002ea:	f107 030c 	add.w	r3, r7, #12
 80002ee:	21fa      	movs	r1, #250	; 0xfa
 80002f0:	4618      	mov	r0, r3
 80002f2:	f003 f94b 	bl	800358c <vTaskDelayUntil>
		if(connected == 0){
 80002f6:	e7bd      	b.n	8000274 <led_task_1+0x1c>
 80002f8:	20000384 	.word	0x20000384
 80002fc:	080054c4 	.word	0x080054c4
 8000300:	40010c00 	.word	0x40010c00
 8000304:	080054f8 	.word	0x080054f8
 8000308:	20000004 	.word	0x20000004
 800030c:	08005520 	.word	0x08005520
 8000310:	08005528 	.word	0x08005528

08000314 <led_task_2>:
	}
	printf("Destroying task 1 \r\n");
	vTaskDelete(NULL);
}

void led_task_2(void *pvParameters){
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
 800031c:	2102      	movs	r1, #2
 800031e:	2000      	movs	r0, #0
 8000320:	f003 fbbc 	bl	8003a9c <vTaskSetApplicationTaskTag>
	while(1){
		HAL_GPIO_TogglePin(sec_led_GPIO_Port, sec_led_Pin);
 8000324:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000328:	4805      	ldr	r0, [pc, #20]	; (8000340 <led_task_2+0x2c>)
 800032a:	f001 f8ad 	bl	8001488 <HAL_GPIO_TogglePin>
		printf("1\r\n");
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <led_task_2+0x30>)
 8000330:	f004 fa34 	bl	800479c <puts>
		vTaskDelay(550 / portTICK_PERIOD_MS);
 8000334:	f240 2026 	movw	r0, #550	; 0x226
 8000338:	f003 f9a6 	bl	8003688 <vTaskDelay>
		HAL_GPIO_TogglePin(sec_led_GPIO_Port, sec_led_Pin);
 800033c:	e7f2      	b.n	8000324 <led_task_2+0x10>
 800033e:	bf00      	nop
 8000340:	40010c00 	.word	0x40010c00
 8000344:	08005534 	.word	0x08005534

08000348 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	; 0x40
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	2228      	movs	r2, #40	; 0x28
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f004 fb00 	bl	800495c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800036a:	2301      	movs	r3, #1
 800036c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000372:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000378:	2301      	movs	r3, #1
 800037a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037c:	2302      	movs	r3, #2
 800037e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000384:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000386:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800038a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038c:	f107 0318 	add.w	r3, r7, #24
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fe5d 	bl	8002050 <HAL_RCC_OscConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x58>
  {
	Error_Handler();
 800039c:	f000 f8ec 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a0:	230f      	movs	r3, #15
 80003a2:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a4:	2302      	movs	r3, #2
 80003a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2102      	movs	r1, #2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 f8ca 	bl	8002554 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x82>
  {
	Error_Handler();
 80003c6:	f000 f8d7 	bl	8000578 <Error_Handler>
  }
}
 80003ca:	bf00      	nop
 80003cc:	3740      	adds	r7, #64	; 0x40
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <MX_I2C2_Init+0x50>)
 80003da:	4a13      	ldr	r2, [pc, #76]	; (8000428 <MX_I2C2_Init+0x54>)
 80003dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_I2C2_Init+0x50>)
 80003e0:	4a12      	ldr	r2, [pc, #72]	; (800042c <MX_I2C2_Init+0x58>)
 80003e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_I2C2_Init+0x50>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_I2C2_Init+0x50>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_I2C2_Init+0x50>)
 80003f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <MX_I2C2_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_I2C2_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000404:	4b07      	ldr	r3, [pc, #28]	; (8000424 <MX_I2C2_Init+0x50>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_I2C2_Init+0x50>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <MX_I2C2_Init+0x50>)
 8000412:	f001 f853 	bl	80014bc <HAL_I2C_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800041c:	f000 f8ac 	bl	8000578 <Error_Handler>
  }
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200002e8 	.word	0x200002e8
 8000428:	40005800 	.word	0x40005800
 800042c:	000186a0 	.word	0x000186a0

08000430 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <MX_USART1_UART_Init+0x50>)
 8000438:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_USART1_UART_Init+0x4c>)
 800043c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000440:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_USART1_UART_Init+0x4c>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000456:	220c      	movs	r2, #12
 8000458:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_USART1_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK){
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000468:	f002 fc7c 	bl	8002d64 <HAL_UART_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_USART1_UART_Init+0x46>
	Error_Handler();
 8000472:	f000 f881 	bl	8000578 <Error_Handler>
  }

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	2000033c 	.word	0x2000033c
 8000480:	40013800 	.word	0x40013800

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000498:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <MX_GPIO_Init+0xc4>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a2a      	ldr	r2, [pc, #168]	; (8000548 <MX_GPIO_Init+0xc4>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b28      	ldr	r3, [pc, #160]	; (8000548 <MX_GPIO_Init+0xc4>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b0:	4b25      	ldr	r3, [pc, #148]	; (8000548 <MX_GPIO_Init+0xc4>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a24      	ldr	r2, [pc, #144]	; (8000548 <MX_GPIO_Init+0xc4>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b22      	ldr	r3, [pc, #136]	; (8000548 <MX_GPIO_Init+0xc4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0308 	and.w	r3, r3, #8
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <MX_GPIO_Init+0xc4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a1e      	ldr	r2, [pc, #120]	; (8000548 <MX_GPIO_Init+0xc4>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <MX_GPIO_Init+0xc4>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, main_led_Pin|sec_led_Pin|trace_3_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80004e6:	4819      	ldr	r0, [pc, #100]	; (800054c <MX_GPIO_Init+0xc8>)
 80004e8:	f000 ffb6 	bl	8001458 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, trace_3_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f2:	4816      	ldr	r0, [pc, #88]	; (800054c <MX_GPIO_Init+0xc8>)
 80004f4:	f000 ffb0 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, trace_1_Pin|trace_2_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80004fe:	4814      	ldr	r0, [pc, #80]	; (8000550 <MX_GPIO_Init+0xcc>)
 8000500:	f000 ffaa 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : main_led_Pin sec_led_Pin trace_3_Pin */
  GPIO_InitStruct.Pin = main_led_Pin|sec_led_Pin|trace_3_Pin;
 8000504:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800050e:	2302      	movs	r3, #2
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2302      	movs	r3, #2
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <MX_GPIO_Init+0xc8>)
 800051e:	f000 fe17 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : trace_1_Pin trace_2_Pin */
  GPIO_InitStruct.Pin = trace_1_Pin|trace_2_Pin;
 8000522:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800052c:	2302      	movs	r3, #2
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2302      	movs	r3, #2
 8000532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_GPIO_Init+0xcc>)
 800053c:	f000 fe08 	bl	8001150 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	40010c00 	.word	0x40010c00
 8000550:	40010800 	.word	0x40010800

08000554 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d101      	bne.n	800056a <HAL_TIM_PeriodElapsedCallback+0x16>
	HAL_IncTick();
 8000566:	f000 fcf7 	bl	8000f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40012c00 	.word	0x40012c00

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	e7fe      	b.n	8000580 <Error_Handler+0x8>
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_MspInit+0x68>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a17      	ldr	r2, [pc, #92]	; (80005ec <HAL_MspInit+0x68>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_MspInit+0x68>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_MspInit+0x68>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a11      	ldr	r2, [pc, #68]	; (80005ec <HAL_MspInit+0x68>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x68>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	210f      	movs	r1, #15
 80005be:	f06f 0001 	mvn.w	r0, #1
 80005c2:	f000 fd9a 	bl	80010fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_MspInit+0x6c>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_MspInit+0x6c>)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010000 	.word	0x40010000

080005f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <HAL_I2C_MspInit+0x74>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d124      	bne.n	800065e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_I2C_MspInit+0x78>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a14      	ldr	r2, [pc, #80]	; (800066c <HAL_I2C_MspInit+0x78>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_I2C_MspInit+0x78>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800062c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000632:	2312      	movs	r3, #18
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000636:	2303      	movs	r3, #3
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <HAL_I2C_MspInit+0x7c>)
 8000642:	f000 fd85 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_I2C_MspInit+0x78>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_I2C_MspInit+0x78>)
 800064c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_I2C_MspInit+0x78>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800065e:	bf00      	nop
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40005800 	.word	0x40005800
 800066c:	40021000 	.word	0x40021000
 8000670:	40010c00 	.word	0x40010c00

08000674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <HAL_UART_MspInit+0xa4>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d13d      	bne.n	8000710 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <HAL_UART_MspInit+0xa8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a20      	ldr	r2, [pc, #128]	; (800071c <HAL_UART_MspInit+0xa8>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <HAL_UART_MspInit+0xa8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <HAL_UART_MspInit+0xa8>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a1a      	ldr	r2, [pc, #104]	; (800071c <HAL_UART_MspInit+0xa8>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_UART_MspInit+0xa8>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006c4:	2340      	movs	r3, #64	; 0x40
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	4812      	ldr	r0, [pc, #72]	; (8000720 <HAL_UART_MspInit+0xac>)
 80006d8:	f000 fd3a 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <HAL_UART_MspInit+0xac>)
 80006f0:	f000 fd2e 	bl	8001150 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <HAL_UART_MspInit+0xb0>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <HAL_UART_MspInit+0xb0>)
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40013800 	.word	0x40013800
 800071c:	40021000 	.word	0x40021000
 8000720:	40010c00 	.word	0x40010c00
 8000724:	40010000 	.word	0x40010000

08000728 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <HAL_InitTick+0xd0>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a2d      	ldr	r2, [pc, #180]	; (80007f8 <HAL_InitTick+0xd0>)
 8000744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <HAL_InitTick+0xd0>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000756:	f107 020c 	add.w	r2, r7, #12
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f002 f867 	bl	8002834 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000766:	f002 f851 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 800076a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800076c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076e:	4a23      	ldr	r2, [pc, #140]	; (80007fc <HAL_InitTick+0xd4>)
 8000770:	fba2 2303 	umull	r2, r3, r2, r3
 8000774:	0c9b      	lsrs	r3, r3, #18
 8000776:	3b01      	subs	r3, #1
 8000778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_InitTick+0xd8>)
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <HAL_InitTick+0xdc>)
 800077e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <HAL_InitTick+0xd8>)
 8000782:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000786:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000788:	4a1d      	ldr	r2, [pc, #116]	; (8000800 <HAL_InitTick+0xd8>)
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <HAL_InitTick+0xd8>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <HAL_InitTick+0xd8>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_InitTick+0xd8>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80007a0:	4817      	ldr	r0, [pc, #92]	; (8000800 <HAL_InitTick+0xd8>)
 80007a2:	f002 f895 	bl	80028d0 <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d11b      	bne.n	80007ec <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007b4:	4812      	ldr	r0, [pc, #72]	; (8000800 <HAL_InitTick+0xd8>)
 80007b6:	f002 f8e3 	bl	8002980 <HAL_TIM_Base_Start_IT>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d111      	bne.n	80007ec <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007c8:	2019      	movs	r0, #25
 80007ca:	f000 fcb2 	bl	8001132 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d808      	bhi.n	80007e6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2019      	movs	r0, #25
 80007da:	f000 fc8e 	bl	80010fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_InitTick+0xe0>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	e002      	b.n	80007ec <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3730      	adds	r7, #48	; 0x30
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	431bde83 	.word	0x431bde83
 8000800:	20000388 	.word	0x20000388
 8000804:	40012c00 	.word	0x40012c00
 8000808:	2000000c 	.word	0x2000000c

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
	...

08000838 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <TIM1_UP_IRQHandler+0x10>)
 800083e:	f002 f8f1 	bl	8002a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000388 	.word	0x20000388

0800084c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e00a      	b.n	8000874 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800085e:	f3af 8000 	nop.w
 8000862:	4601      	mov	r1, r0
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf0      	blt.n	800085e <_read+0x12>
  }

  return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ac:	605a      	str	r2, [r3, #4]
  return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <_isatty>:

int _isatty(int file)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b085      	sub	sp, #20
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
	...

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f004 f86e 	bl	80049f8 <__errno>
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20005000 	.word	0x20005000
 8000948:	00000400 	.word	0x00000400
 800094c:	200003d0 	.word	0x200003d0
 8000950:	20001678 	.word	0x20001678

08000954 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000960:	f7ff fff8 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000966:	490c      	ldr	r1, [pc, #48]	; (8000998 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <LoopFillZerobss+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800097c:	4c09      	ldr	r4, [pc, #36]	; (80009a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098a:	f004 f83b 	bl	8004a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff fc31 	bl	80001f4 <main>
  bx lr
 8000992:	4770      	bx	lr
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800099c:	08006304 	.word	0x08006304
  ldr r2, =_sbss
 80009a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009a4:	20001678 	.word	0x20001678

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>
	...

080009ac <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

HAL_StatusTypeDef SSD1306_Init(int addr) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	/* Init I2C */
	ssd1306_I2C_Init();
 80009b4:	f000 fa22 	bl	8000dfc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	HAL_StatusTypeDef res = HAL_I2C_IsDeviceReady(&hi2c2, addr, 1, 2000);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	b299      	uxth	r1, r3
 80009bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009c0:	2201      	movs	r2, #1
 80009c2:	485c      	ldr	r0, [pc, #368]	; (8000b34 <SSD1306_Init+0x188>)
 80009c4:	f000 ffbc 	bl	8001940 <HAL_I2C_IsDeviceReady>
 80009c8:	4603      	mov	r3, r0
 80009ca:	72fb      	strb	r3, [r7, #11]
	if ( res != HAL_OK) {
 80009cc:	7afb      	ldrb	r3, [r7, #11]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SSD1306_Init+0x2a>
		/* Return false */
		return res;
 80009d2:	7afb      	ldrb	r3, [r7, #11]
 80009d4:	e0a9      	b.n	8000b2a <SSD1306_Init+0x17e>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80009d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80009da:	60fb      	str	r3, [r7, #12]
	while(p>0)
 80009dc:	e002      	b.n	80009e4 <SSD1306_Init+0x38>
		p--;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
	while(p>0)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1f9      	bne.n	80009de <SSD1306_Init+0x32>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80009ea:	22ae      	movs	r2, #174	; 0xae
 80009ec:	2100      	movs	r1, #0
 80009ee:	2078      	movs	r0, #120	; 0x78
 80009f0:	f000 fa7e 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80009f4:	2220      	movs	r2, #32
 80009f6:	2100      	movs	r1, #0
 80009f8:	2078      	movs	r0, #120	; 0x78
 80009fa:	f000 fa79 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009fe:	2210      	movs	r2, #16
 8000a00:	2100      	movs	r1, #0
 8000a02:	2078      	movs	r0, #120	; 0x78
 8000a04:	f000 fa74 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a08:	22b0      	movs	r2, #176	; 0xb0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2078      	movs	r0, #120	; 0x78
 8000a0e:	f000 fa6f 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a12:	22c8      	movs	r2, #200	; 0xc8
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	; 0x78
 8000a18:	f000 fa6a 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2078      	movs	r0, #120	; 0x78
 8000a22:	f000 fa65 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a26:	2210      	movs	r2, #16
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2078      	movs	r0, #120	; 0x78
 8000a2c:	f000 fa60 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a30:	2240      	movs	r2, #64	; 0x40
 8000a32:	2100      	movs	r1, #0
 8000a34:	2078      	movs	r0, #120	; 0x78
 8000a36:	f000 fa5b 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a3a:	2281      	movs	r2, #129	; 0x81
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2078      	movs	r0, #120	; 0x78
 8000a40:	f000 fa56 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a44:	22ff      	movs	r2, #255	; 0xff
 8000a46:	2100      	movs	r1, #0
 8000a48:	2078      	movs	r0, #120	; 0x78
 8000a4a:	f000 fa51 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a4e:	22a1      	movs	r2, #161	; 0xa1
 8000a50:	2100      	movs	r1, #0
 8000a52:	2078      	movs	r0, #120	; 0x78
 8000a54:	f000 fa4c 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a58:	22a6      	movs	r2, #166	; 0xa6
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2078      	movs	r0, #120	; 0x78
 8000a5e:	f000 fa47 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a62:	22a8      	movs	r2, #168	; 0xa8
 8000a64:	2100      	movs	r1, #0
 8000a66:	2078      	movs	r0, #120	; 0x78
 8000a68:	f000 fa42 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a6c:	223f      	movs	r2, #63	; 0x3f
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2078      	movs	r0, #120	; 0x78
 8000a72:	f000 fa3d 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a76:	22a4      	movs	r2, #164	; 0xa4
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2078      	movs	r0, #120	; 0x78
 8000a7c:	f000 fa38 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000a80:	22d3      	movs	r2, #211	; 0xd3
 8000a82:	2100      	movs	r1, #0
 8000a84:	2078      	movs	r0, #120	; 0x78
 8000a86:	f000 fa33 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2078      	movs	r0, #120	; 0x78
 8000a90:	f000 fa2e 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a94:	22d5      	movs	r2, #213	; 0xd5
 8000a96:	2100      	movs	r1, #0
 8000a98:	2078      	movs	r0, #120	; 0x78
 8000a9a:	f000 fa29 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000a9e:	22f0      	movs	r2, #240	; 0xf0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2078      	movs	r0, #120	; 0x78
 8000aa4:	f000 fa24 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000aa8:	22d9      	movs	r2, #217	; 0xd9
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2078      	movs	r0, #120	; 0x78
 8000aae:	f000 fa1f 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000ab2:	2222      	movs	r2, #34	; 0x22
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2078      	movs	r0, #120	; 0x78
 8000ab8:	f000 fa1a 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000abc:	22da      	movs	r2, #218	; 0xda
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2078      	movs	r0, #120	; 0x78
 8000ac2:	f000 fa15 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ac6:	2212      	movs	r2, #18
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2078      	movs	r0, #120	; 0x78
 8000acc:	f000 fa10 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ad0:	22db      	movs	r2, #219	; 0xdb
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2078      	movs	r0, #120	; 0x78
 8000ad6:	f000 fa0b 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000ada:	2220      	movs	r2, #32
 8000adc:	2100      	movs	r1, #0
 8000ade:	2078      	movs	r0, #120	; 0x78
 8000ae0:	f000 fa06 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ae4:	228d      	movs	r2, #141	; 0x8d
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2078      	movs	r0, #120	; 0x78
 8000aea:	f000 fa01 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000aee:	2214      	movs	r2, #20
 8000af0:	2100      	movs	r1, #0
 8000af2:	2078      	movs	r0, #120	; 0x78
 8000af4:	f000 f9fc 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000af8:	22af      	movs	r2, #175	; 0xaf
 8000afa:	2100      	movs	r1, #0
 8000afc:	2078      	movs	r0, #120	; 0x78
 8000afe:	f000 f9f7 	bl	8000ef0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b02:	222e      	movs	r2, #46	; 0x2e
 8000b04:	2100      	movs	r1, #0
 8000b06:	2078      	movs	r0, #120	; 0x78
 8000b08:	f000 f9f2 	bl	8000ef0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 f843 	bl	8000b98 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000b12:	f000 f813 	bl	8000b3c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <SSD1306_Init+0x18c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SSD1306_Init+0x18c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SSD1306_Init+0x18c>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200002e8 	.word	0x200002e8
 8000b38:	200007d4 	.word	0x200007d4

08000b3c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e01d      	b.n	8000b84 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	3b50      	subs	r3, #80	; 0x50
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	2078      	movs	r0, #120	; 0x78
 8000b54:	f000 f9cc 	bl	8000ef0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2078      	movs	r0, #120	; 0x78
 8000b5e:	f000 f9c7 	bl	8000ef0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b62:	2210      	movs	r2, #16
 8000b64:	2100      	movs	r1, #0
 8000b66:	2078      	movs	r0, #120	; 0x78
 8000b68:	f000 f9c2 	bl	8000ef0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	01db      	lsls	r3, r3, #7
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <SSD1306_UpdateScreen+0x58>)
 8000b72:	441a      	add	r2, r3
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	2078      	movs	r0, #120	; 0x78
 8000b7a:	f000 f953 	bl	8000e24 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	3301      	adds	r3, #1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	d9de      	bls.n	8000b48 <SSD1306_UpdateScreen+0xc>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200003d4 	.word	0x200003d4

08000b98 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <SSD1306_Fill+0x14>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e000      	b.n	8000bae <SSD1306_Fill+0x16>
 8000bac:	23ff      	movs	r3, #255	; 0xff
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <SSD1306_Fill+0x2c>)
 8000bb6:	f003 fed1 	bl	800495c <memset>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200003d4 	.word	0x200003d4

08000bc8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	80bb      	strh	r3, [r7, #4]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	70fb      	strb	r3, [r7, #3]
	if (
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8000bde:	d848      	bhi.n	8000c72 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000be0:	88bb      	ldrh	r3, [r7, #4]
 8000be2:	2b3f      	cmp	r3, #63	; 0x3f
 8000be4:	d845      	bhi.n	8000c72 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <SSD1306_DrawPixel+0xb4>)
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf0c      	ite	eq
 8000bf4:	2301      	moveq	r3, #1
 8000bf6:	2300      	movne	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d11a      	bne.n	8000c38 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c02:	88fa      	ldrh	r2, [r7, #6]
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	b298      	uxth	r0, r3
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	01db      	lsls	r3, r3, #7
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <SSD1306_DrawPixel+0xb8>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	b25a      	sxtb	r2, r3
 8000c16:	88bb      	ldrh	r3, [r7, #4]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b259      	sxtb	r1, r3
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	01db      	lsls	r3, r3, #7
 8000c2e:	4413      	add	r3, r2
 8000c30:	b2c9      	uxtb	r1, r1
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <SSD1306_DrawPixel+0xb8>)
 8000c34:	54d1      	strb	r1, [r2, r3]
 8000c36:	e01d      	b.n	8000c74 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	88bb      	ldrh	r3, [r7, #4]
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	b298      	uxth	r0, r3
 8000c40:	4603      	mov	r3, r0
 8000c42:	01db      	lsls	r3, r3, #7
 8000c44:	4413      	add	r3, r2
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <SSD1306_DrawPixel+0xb8>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	b25a      	sxtb	r2, r3
 8000c4c:	88bb      	ldrh	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	4013      	ands	r3, r2
 8000c60:	b259      	sxtb	r1, r3
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	4603      	mov	r3, r0
 8000c66:	01db      	lsls	r3, r3, #7
 8000c68:	4413      	add	r3, r2
 8000c6a:	b2c9      	uxtb	r1, r1
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <SSD1306_DrawPixel+0xb8>)
 8000c6e:	54d1      	strb	r1, [r2, r3]
 8000c70:	e000      	b.n	8000c74 <SSD1306_DrawPixel+0xac>
		return;
 8000c72:	bf00      	nop
	}
}
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	200007d4 	.word	0x200007d4
 8000c80:	200003d4 	.word	0x200003d4

08000c84 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	80fb      	strh	r3, [r7, #6]
 8000c90:	4613      	mov	r3, r2
 8000c92:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SSD1306_GotoXY+0x28>)
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <SSD1306_GotoXY+0x28>)
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	8053      	strh	r3, [r2, #2]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200007d4 	.word	0x200007d4

08000cb0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <SSD1306_Putc+0xfc>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
	if (
 8000ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8000cce:	dc07      	bgt.n	8000ce0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000cd0:	4b36      	ldr	r3, [pc, #216]	; (8000dac <SSD1306_Putc+0xfc>)
 8000cd2:	885b      	ldrh	r3, [r3, #2]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cdc:	2b3f      	cmp	r3, #63	; 0x3f
 8000cde:	dd01      	ble.n	8000ce4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e05e      	b.n	8000da2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e04b      	b.n	8000d82 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	3b20      	subs	r3, #32
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	7849      	ldrb	r1, [r1, #1]
 8000cf6:	fb01 f303 	mul.w	r3, r1, r3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	440b      	add	r3, r1
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	e030      	b.n	8000d70 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d010      	beq.n	8000d40 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <SSD1306_Putc+0xfc>)
 8000d20:	881a      	ldrh	r2, [r3, #0]
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	4413      	add	r3, r2
 8000d28:	b298      	uxth	r0, r3
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <SSD1306_Putc+0xfc>)
 8000d2c:	885a      	ldrh	r2, [r3, #2]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4413      	add	r3, r2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	79ba      	ldrb	r2, [r7, #6]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff ff45 	bl	8000bc8 <SSD1306_DrawPixel>
 8000d3e:	e014      	b.n	8000d6a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <SSD1306_Putc+0xfc>)
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b298      	uxth	r0, r3
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <SSD1306_Putc+0xfc>)
 8000d4e:	885a      	ldrh	r2, [r3, #2]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	b299      	uxth	r1, r3
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	f7ff ff2f 	bl	8000bc8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d3c8      	bcc.n	8000d0e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	785b      	ldrb	r3, [r3, #1]
 8000d86:	461a      	mov	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d3ad      	bcc.n	8000cea <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <SSD1306_Putc+0xfc>)
 8000d90:	881a      	ldrh	r2, [r3, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4413      	add	r3, r2
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <SSD1306_Putc+0xfc>)
 8000d9e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200007d4 	.word	0x200007d4

08000db0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000dbe:	e012      	b.n	8000de6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	79fa      	ldrb	r2, [r7, #7]
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff71 	bl	8000cb0 <SSD1306_Putc>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d002      	beq.n	8000de0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	e008      	b.n	8000df2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1e8      	bne.n	8000dc0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	781b      	ldrb	r3, [r3, #0]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <ssd1306_I2C_Init+0x24>)
 8000e04:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e06:	e002      	b.n	8000e0e <ssd1306_I2C_Init+0x12>
		p--;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f9      	bne.n	8000e08 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	0003d090 	.word	0x0003d090

08000e24 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b0c7      	sub	sp, #284	; 0x11c
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000e32:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000e36:	600a      	str	r2, [r1, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e3e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000e42:	4622      	mov	r2, r4
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e4a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000e4e:	4602      	mov	r2, r0
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e5a:	460a      	mov	r2, r1
 8000e5c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000e5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e66:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e6a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000e78:	e015      	b.n	8000ea6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000e7a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e7e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e82:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	441a      	add	r2, r3
 8000e8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e8e:	3301      	adds	r3, #1
 8000e90:	7811      	ldrb	r1, [r2, #0]
 8000e92:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e96:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000e9a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e9c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ea6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000eb0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000eb4:	8812      	ldrh	r2, [r2, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d8df      	bhi.n	8000e7a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8000eba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ebe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	200a      	movs	r0, #10
 8000eda:	9000      	str	r0, [sp, #0]
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <ssd1306_I2C_WriteMulti+0xc8>)
 8000ede:	f000 fc31 	bl	8001744 <HAL_I2C_Master_Transmit>
}
 8000ee2:	bf00      	nop
 8000ee4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	200002e8 	.word	0x200002e8

08000ef0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	460b      	mov	r3, r1
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	4613      	mov	r3, r2
 8000f00:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f06:	797b      	ldrb	r3, [r7, #5]
 8000f08:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	230a      	movs	r3, #10
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2302      	movs	r3, #2
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <ssd1306_I2C_Write+0x38>)
 8000f1a:	f000 fc13 	bl	8001744 <HAL_I2C_Master_Transmit>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200002e8 	.word	0x200002e8

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x28>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f8d1 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f7ff fbf0 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fb1c 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x1c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x20>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <HAL_IncTick+0x20>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	20000010 	.word	0x20000010
 8000f78:	200007dc 	.word	0x200007dc

08000f7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <HAL_GetTick+0x10>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	200007dc 	.word	0x200007dc

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4906      	ldr	r1, [pc, #24]	; (8001028 <__NVIC_EnableIRQ+0x34>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff4f 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff64 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ffb2 	bl	8001080 <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff81 	bl	800102c <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff57 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b08b      	sub	sp, #44	; 0x2c
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001162:	e169      	b.n	8001438 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001164:	2201      	movs	r2, #1
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 8158 	bne.w	8001432 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4a9a      	ldr	r2, [pc, #616]	; (80013f0 <HAL_GPIO_Init+0x2a0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d05e      	beq.n	800124a <HAL_GPIO_Init+0xfa>
 800118c:	4a98      	ldr	r2, [pc, #608]	; (80013f0 <HAL_GPIO_Init+0x2a0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d875      	bhi.n	800127e <HAL_GPIO_Init+0x12e>
 8001192:	4a98      	ldr	r2, [pc, #608]	; (80013f4 <HAL_GPIO_Init+0x2a4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d058      	beq.n	800124a <HAL_GPIO_Init+0xfa>
 8001198:	4a96      	ldr	r2, [pc, #600]	; (80013f4 <HAL_GPIO_Init+0x2a4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d86f      	bhi.n	800127e <HAL_GPIO_Init+0x12e>
 800119e:	4a96      	ldr	r2, [pc, #600]	; (80013f8 <HAL_GPIO_Init+0x2a8>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d052      	beq.n	800124a <HAL_GPIO_Init+0xfa>
 80011a4:	4a94      	ldr	r2, [pc, #592]	; (80013f8 <HAL_GPIO_Init+0x2a8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d869      	bhi.n	800127e <HAL_GPIO_Init+0x12e>
 80011aa:	4a94      	ldr	r2, [pc, #592]	; (80013fc <HAL_GPIO_Init+0x2ac>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d04c      	beq.n	800124a <HAL_GPIO_Init+0xfa>
 80011b0:	4a92      	ldr	r2, [pc, #584]	; (80013fc <HAL_GPIO_Init+0x2ac>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d863      	bhi.n	800127e <HAL_GPIO_Init+0x12e>
 80011b6:	4a92      	ldr	r2, [pc, #584]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d046      	beq.n	800124a <HAL_GPIO_Init+0xfa>
 80011bc:	4a90      	ldr	r2, [pc, #576]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d85d      	bhi.n	800127e <HAL_GPIO_Init+0x12e>
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d82a      	bhi.n	800121c <HAL_GPIO_Init+0xcc>
 80011c6:	2b12      	cmp	r3, #18
 80011c8:	d859      	bhi.n	800127e <HAL_GPIO_Init+0x12e>
 80011ca:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <HAL_GPIO_Init+0x80>)
 80011cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d0:	0800124b 	.word	0x0800124b
 80011d4:	08001225 	.word	0x08001225
 80011d8:	08001237 	.word	0x08001237
 80011dc:	08001279 	.word	0x08001279
 80011e0:	0800127f 	.word	0x0800127f
 80011e4:	0800127f 	.word	0x0800127f
 80011e8:	0800127f 	.word	0x0800127f
 80011ec:	0800127f 	.word	0x0800127f
 80011f0:	0800127f 	.word	0x0800127f
 80011f4:	0800127f 	.word	0x0800127f
 80011f8:	0800127f 	.word	0x0800127f
 80011fc:	0800127f 	.word	0x0800127f
 8001200:	0800127f 	.word	0x0800127f
 8001204:	0800127f 	.word	0x0800127f
 8001208:	0800127f 	.word	0x0800127f
 800120c:	0800127f 	.word	0x0800127f
 8001210:	0800127f 	.word	0x0800127f
 8001214:	0800122d 	.word	0x0800122d
 8001218:	08001241 	.word	0x08001241
 800121c:	4a79      	ldr	r2, [pc, #484]	; (8001404 <HAL_GPIO_Init+0x2b4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001222:	e02c      	b.n	800127e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	623b      	str	r3, [r7, #32]
          break;
 800122a:	e029      	b.n	8001280 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	3304      	adds	r3, #4
 8001232:	623b      	str	r3, [r7, #32]
          break;
 8001234:	e024      	b.n	8001280 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	3308      	adds	r3, #8
 800123c:	623b      	str	r3, [r7, #32]
          break;
 800123e:	e01f      	b.n	8001280 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	330c      	adds	r3, #12
 8001246:	623b      	str	r3, [r7, #32]
          break;
 8001248:	e01a      	b.n	8001280 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001252:	2304      	movs	r3, #4
 8001254:	623b      	str	r3, [r7, #32]
          break;
 8001256:	e013      	b.n	8001280 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d105      	bne.n	800126c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001260:	2308      	movs	r3, #8
 8001262:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	611a      	str	r2, [r3, #16]
          break;
 800126a:	e009      	b.n	8001280 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800126c:	2308      	movs	r3, #8
 800126e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	615a      	str	r2, [r3, #20]
          break;
 8001276:	e003      	b.n	8001280 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
          break;
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x130>
          break;
 800127e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2bff      	cmp	r3, #255	; 0xff
 8001284:	d801      	bhi.n	800128a <HAL_GPIO_Init+0x13a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e001      	b.n	800128e <HAL_GPIO_Init+0x13e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3304      	adds	r3, #4
 800128e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2bff      	cmp	r3, #255	; 0xff
 8001294:	d802      	bhi.n	800129c <HAL_GPIO_Init+0x14c>
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	e002      	b.n	80012a2 <HAL_GPIO_Init+0x152>
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	3b08      	subs	r3, #8
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	210f      	movs	r1, #15
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	401a      	ands	r2, r3
 80012b4:	6a39      	ldr	r1, [r7, #32]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	431a      	orrs	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 80b1 	beq.w	8001432 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012d0:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b4a      	ldr	r3, [pc, #296]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e8:	4a48      	ldr	r2, [pc, #288]	; (800140c <HAL_GPIO_Init+0x2bc>)
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3302      	adds	r3, #2
 80012f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a40      	ldr	r2, [pc, #256]	; (8001410 <HAL_GPIO_Init+0x2c0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d013      	beq.n	800133c <HAL_GPIO_Init+0x1ec>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a3f      	ldr	r2, [pc, #252]	; (8001414 <HAL_GPIO_Init+0x2c4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d00d      	beq.n	8001338 <HAL_GPIO_Init+0x1e8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3e      	ldr	r2, [pc, #248]	; (8001418 <HAL_GPIO_Init+0x2c8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d007      	beq.n	8001334 <HAL_GPIO_Init+0x1e4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a3d      	ldr	r2, [pc, #244]	; (800141c <HAL_GPIO_Init+0x2cc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d101      	bne.n	8001330 <HAL_GPIO_Init+0x1e0>
 800132c:	2303      	movs	r3, #3
 800132e:	e006      	b.n	800133e <HAL_GPIO_Init+0x1ee>
 8001330:	2304      	movs	r3, #4
 8001332:	e004      	b.n	800133e <HAL_GPIO_Init+0x1ee>
 8001334:	2302      	movs	r3, #2
 8001336:	e002      	b.n	800133e <HAL_GPIO_Init+0x1ee>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <HAL_GPIO_Init+0x1ee>
 800133c:	2300      	movs	r3, #0
 800133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001340:	f002 0203 	and.w	r2, r2, #3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4093      	lsls	r3, r2
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800134e:	492f      	ldr	r1, [pc, #188]	; (800140c <HAL_GPIO_Init+0x2bc>)
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	492c      	ldr	r1, [pc, #176]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	608b      	str	r3, [r1, #8]
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	43db      	mvns	r3, r3
 800137e:	4928      	ldr	r1, [pc, #160]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 8001380:	4013      	ands	r3, r2
 8001382:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	4922      	ldr	r1, [pc, #136]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	60cb      	str	r3, [r1, #12]
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	491e      	ldr	r1, [pc, #120]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4918      	ldr	r1, [pc, #96]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4914      	ldr	r1, [pc, #80]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d021      	beq.n	8001424 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	490e      	ldr	r1, [pc, #56]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e021      	b.n	8001432 <HAL_GPIO_Init+0x2e2>
 80013ee:	bf00      	nop
 80013f0:	10320000 	.word	0x10320000
 80013f4:	10310000 	.word	0x10310000
 80013f8:	10220000 	.word	0x10220000
 80013fc:	10210000 	.word	0x10210000
 8001400:	10120000 	.word	0x10120000
 8001404:	10110000 	.word	0x10110000
 8001408:	40021000 	.word	0x40021000
 800140c:	40010000 	.word	0x40010000
 8001410:	40010800 	.word	0x40010800
 8001414:	40010c00 	.word	0x40010c00
 8001418:	40011000 	.word	0x40011000
 800141c:	40011400 	.word	0x40011400
 8001420:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_GPIO_Init+0x304>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	43db      	mvns	r3, r3
 800142c:	4909      	ldr	r1, [pc, #36]	; (8001454 <HAL_GPIO_Init+0x304>)
 800142e:	4013      	ands	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	3301      	adds	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	fa22 f303 	lsr.w	r3, r2, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	f47f ae8e 	bne.w	8001164 <HAL_GPIO_Init+0x14>
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	372c      	adds	r7, #44	; 0x2c
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001474:	e003      	b.n	800147e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	041a      	lsls	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43d9      	mvns	r1, r3
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	400b      	ands	r3, r1
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	611a      	str	r2, [r3, #16]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e12b      	b.n	8001726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff f886 	bl	80005f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800150e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800151e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001520:	f001 f960 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8001524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a81      	ldr	r2, [pc, #516]	; (8001730 <HAL_I2C_Init+0x274>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d807      	bhi.n	8001540 <HAL_I2C_Init+0x84>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4a80      	ldr	r2, [pc, #512]	; (8001734 <HAL_I2C_Init+0x278>)
 8001534:	4293      	cmp	r3, r2
 8001536:	bf94      	ite	ls
 8001538:	2301      	movls	r3, #1
 800153a:	2300      	movhi	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	e006      	b.n	800154e <HAL_I2C_Init+0x92>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4a7d      	ldr	r2, [pc, #500]	; (8001738 <HAL_I2C_Init+0x27c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	bf94      	ite	ls
 8001548:	2301      	movls	r3, #1
 800154a:	2300      	movhi	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0e7      	b.n	8001726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4a78      	ldr	r2, [pc, #480]	; (800173c <HAL_I2C_Init+0x280>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	430a      	orrs	r2, r1
 8001574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a6a      	ldr	r2, [pc, #424]	; (8001730 <HAL_I2C_Init+0x274>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d802      	bhi.n	8001590 <HAL_I2C_Init+0xd4>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	e009      	b.n	80015a4 <HAL_I2C_Init+0xe8>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a69      	ldr	r2, [pc, #420]	; (8001740 <HAL_I2C_Init+0x284>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	3301      	adds	r3, #1
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	495c      	ldr	r1, [pc, #368]	; (8001730 <HAL_I2C_Init+0x274>)
 80015c0:	428b      	cmp	r3, r1
 80015c2:	d819      	bhi.n	80015f8 <HAL_I2C_Init+0x13c>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e59      	subs	r1, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d2:	1c59      	adds	r1, r3, #1
 80015d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015d8:	400b      	ands	r3, r1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00a      	beq.n	80015f4 <HAL_I2C_Init+0x138>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e59      	subs	r1, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f2:	e051      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 80015f4:	2304      	movs	r3, #4
 80015f6:	e04f      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_I2C_Init+0x168>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1e58      	subs	r0, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	440b      	add	r3, r1
 800160e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001612:	3301      	adds	r3, #1
 8001614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	e012      	b.n	800164a <HAL_I2C_Init+0x18e>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1e58      	subs	r0, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	0099      	lsls	r1, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	fbb0 f3f3 	udiv	r3, r0, r3
 800163a:	3301      	adds	r3, #1
 800163c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Init+0x196>
 800164e:	2301      	movs	r3, #1
 8001650:	e022      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10e      	bne.n	8001678 <HAL_I2C_Init+0x1bc>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1e58      	subs	r0, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	440b      	add	r3, r1
 8001668:	fbb0 f3f3 	udiv	r3, r0, r3
 800166c:	3301      	adds	r3, #1
 800166e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001676:	e00f      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	0099      	lsls	r1, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	6809      	ldr	r1, [r1, #0]
 800169c:	4313      	orrs	r3, r2
 800169e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6911      	ldr	r1, [r2, #16]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68d2      	ldr	r2, [r2, #12]
 80016d2:	4311      	orrs	r1, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	430b      	orrs	r3, r1
 80016da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2220      	movs	r2, #32
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	000186a0 	.word	0x000186a0
 8001734:	001e847f 	.word	0x001e847f
 8001738:	003d08ff 	.word	0x003d08ff
 800173c:	431bde83 	.word	0x431bde83
 8001740:	10624dd3 	.word	0x10624dd3

08001744 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	461a      	mov	r2, r3
 8001750:	460b      	mov	r3, r1
 8001752:	817b      	strh	r3, [r7, #10]
 8001754:	4613      	mov	r3, r2
 8001756:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff fc10 	bl	8000f7c <HAL_GetTick>
 800175c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b20      	cmp	r3, #32
 8001768:	f040 80e0 	bne.w	800192c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2319      	movs	r3, #25
 8001772:	2201      	movs	r2, #1
 8001774:	4970      	ldr	r1, [pc, #448]	; (8001938 <HAL_I2C_Master_Transmit+0x1f4>)
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 fa92 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001782:	2302      	movs	r3, #2
 8001784:	e0d3      	b.n	800192e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_I2C_Master_Transmit+0x50>
 8001790:	2302      	movs	r3, #2
 8001792:	e0cc      	b.n	800192e <HAL_I2C_Master_Transmit+0x1ea>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d007      	beq.n	80017ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0201 	orr.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2221      	movs	r2, #33	; 0x21
 80017ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2210      	movs	r2, #16
 80017d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	893a      	ldrh	r2, [r7, #8]
 80017ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4a50      	ldr	r2, [pc, #320]	; (800193c <HAL_I2C_Master_Transmit+0x1f8>)
 80017fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017fc:	8979      	ldrh	r1, [r7, #10]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	6a3a      	ldr	r2, [r7, #32]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f9ca 	bl	8001b9c <I2C_MasterRequestWrite>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e08d      	b.n	800192e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001828:	e066      	b.n	80018f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	6a39      	ldr	r1, [r7, #32]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 fb50 	bl	8001ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00d      	beq.n	8001856 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	2b04      	cmp	r3, #4
 8001840:	d107      	bne.n	8001852 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001850:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06b      	b.n	800192e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b04      	cmp	r3, #4
 8001892:	d11b      	bne.n	80018cc <HAL_I2C_Master_Transmit+0x188>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d017      	beq.n	80018cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	6a39      	ldr	r1, [r7, #32]
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fb47 	bl	8001f64 <I2C_WaitOnBTFFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00d      	beq.n	80018f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d107      	bne.n	80018f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e01a      	b.n	800192e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d194      	bne.n	800182a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e000      	b.n	800192e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800192c:	2302      	movs	r3, #2
  }
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	00100002 	.word	0x00100002
 800193c:	ffff0000 	.word	0xffff0000

08001940 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af02      	add	r7, sp, #8
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	460b      	mov	r3, r1
 800194e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff fb14 	bl	8000f7c <HAL_GetTick>
 8001954:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b20      	cmp	r3, #32
 8001964:	f040 8111 	bne.w	8001b8a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2319      	movs	r3, #25
 800196e:	2201      	movs	r2, #1
 8001970:	4988      	ldr	r1, [pc, #544]	; (8001b94 <HAL_I2C_IsDeviceReady+0x254>)
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f994 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800197e:	2302      	movs	r3, #2
 8001980:	e104      	b.n	8001b8c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_I2C_IsDeviceReady+0x50>
 800198c:	2302      	movs	r3, #2
 800198e:	e0fd      	b.n	8001b8c <HAL_I2C_IsDeviceReady+0x24c>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d007      	beq.n	80019b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2224      	movs	r2, #36	; 0x24
 80019ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a70      	ldr	r2, [pc, #448]	; (8001b98 <HAL_I2C_IsDeviceReady+0x258>)
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f952 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a10:	d103      	bne.n	8001a1a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0b6      	b.n	8001b8c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a1e:	897b      	ldrh	r3, [r7, #10]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a2c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff faa5 	bl	8000f7c <HAL_GetTick>
 8001a32:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	bf0c      	ite	eq
 8001a42:	2301      	moveq	r3, #1
 8001a44:	2300      	movne	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a58:	bf0c      	ite	eq
 8001a5a:	2301      	moveq	r3, #1
 8001a5c:	2300      	movne	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a62:	e025      	b.n	8001ab0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a64:	f7ff fa8a 	bl	8000f7c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d302      	bcc.n	8001a7a <HAL_I2C_IsDeviceReady+0x13a>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	22a0      	movs	r2, #160	; 0xa0
 8001a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2ba0      	cmp	r3, #160	; 0xa0
 8001aba:	d005      	beq.n	8001ac8 <HAL_I2C_IsDeviceReady+0x188>
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_I2C_IsDeviceReady+0x188>
 8001ac2:	7dbb      	ldrb	r3, [r7, #22]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0cd      	beq.n	8001a64 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d129      	bne.n	8001b32 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2319      	movs	r3, #25
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4921      	ldr	r1, [pc, #132]	; (8001b94 <HAL_I2C_IsDeviceReady+0x254>)
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f8c6 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e036      	b.n	8001b8c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e02c      	b.n	8001b8c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b40:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b4a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2319      	movs	r3, #25
 8001b52:	2201      	movs	r2, #1
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <HAL_I2C_IsDeviceReady+0x254>)
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f8a2 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e012      	b.n	8001b8c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f4ff af32 	bcc.w	80019da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
  }
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	00100002 	.word	0x00100002
 8001b98:	ffff0000 	.word	0xffff0000

08001b9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d006      	beq.n	8001bc6 <I2C_MasterRequestWrite+0x2a>
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d003      	beq.n	8001bc6 <I2C_MasterRequestWrite+0x2a>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bc4:	d108      	bne.n	8001bd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e00b      	b.n	8001bf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	2b12      	cmp	r3, #18
 8001bde:	d107      	bne.n	8001bf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f84f 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c16:	d103      	bne.n	8001c20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e035      	b.n	8001c90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c2c:	d108      	bne.n	8001c40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c2e:	897b      	ldrh	r3, [r7, #10]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c3c:	611a      	str	r2, [r3, #16]
 8001c3e:	e01b      	b.n	8001c78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c40:	897b      	ldrh	r3, [r7, #10]
 8001c42:	11db      	asrs	r3, r3, #7
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f003 0306 	and.w	r3, r3, #6
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f063 030f 	orn	r3, r3, #15
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	490e      	ldr	r1, [pc, #56]	; (8001c98 <I2C_MasterRequestWrite+0xfc>)
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f898 	bl	8001d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e010      	b.n	8001c90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c6e:	897b      	ldrh	r3, [r7, #10]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4907      	ldr	r1, [pc, #28]	; (8001c9c <I2C_MasterRequestWrite+0x100>)
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f888 	bl	8001d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	00010008 	.word	0x00010008
 8001c9c:	00010002 	.word	0x00010002

08001ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb0:	e048      	b.n	8001d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d044      	beq.n	8001d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cba:	f7ff f95f 	bl	8000f7c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d302      	bcc.n	8001cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d139      	bne.n	8001d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	0c1b      	lsrs	r3, r3, #16
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10d      	bne.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	e00c      	b.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4013      	ands	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d116      	bne.n	8001d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e023      	b.n	8001d8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10d      	bne.n	8001d6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	43da      	mvns	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	e00c      	b.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	43da      	mvns	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	4013      	ands	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d093      	beq.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001da2:	e071      	b.n	8001e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	d123      	bne.n	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f043 0204 	orr.w	r2, r3, #4
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e067      	b.n	8001ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e02:	d041      	beq.n	8001e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e04:	f7ff f8ba 	bl	8000f7c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d302      	bcc.n	8001e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d136      	bne.n	8001e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10c      	bne.n	8001e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf14      	ite	ne
 8001e36:	2301      	movne	r3, #1
 8001e38:	2300      	moveq	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	e00b      	b.n	8001e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	43da      	mvns	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf14      	ite	ne
 8001e50:	2301      	movne	r3, #1
 8001e52:	2300      	moveq	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d016      	beq.n	8001e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f043 0220 	orr.w	r2, r3, #32
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e021      	b.n	8001ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	0c1b      	lsrs	r3, r3, #16
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10c      	bne.n	8001eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e00b      	b.n	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f47f af6d 	bne.w	8001da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ee0:	e034      	b.n	8001f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f886 	bl	8001ff4 <I2C_IsAcknowledgeFailed>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e034      	b.n	8001f5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d028      	beq.n	8001f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efa:	f7ff f83f 	bl	8000f7c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d302      	bcc.n	8001f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d11d      	bne.n	8001f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b80      	cmp	r3, #128	; 0x80
 8001f1c:	d016      	beq.n	8001f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f043 0220 	orr.w	r2, r3, #32
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e007      	b.n	8001f5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b80      	cmp	r3, #128	; 0x80
 8001f58:	d1c3      	bne.n	8001ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f70:	e034      	b.n	8001fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f83e 	bl	8001ff4 <I2C_IsAcknowledgeFailed>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e034      	b.n	8001fec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d028      	beq.n	8001fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f8a:	f7fe fff7 	bl	8000f7c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d302      	bcc.n	8001fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d11d      	bne.n	8001fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d016      	beq.n	8001fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0220 	orr.w	r2, r3, #32
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e007      	b.n	8001fec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d1c3      	bne.n	8001f72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200a:	d11b      	bne.n	8002044 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002014:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f043 0204 	orr.w	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e272      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8087 	beq.w	800217e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002070:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b04      	cmp	r3, #4
 800207a:	d00c      	beq.n	8002096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800207c:	4b8f      	ldr	r3, [pc, #572]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d112      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
 8002088:	4b8c      	ldr	r3, [pc, #560]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d10b      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002096:	4b89      	ldr	r3, [pc, #548]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06c      	beq.n	800217c <HAL_RCC_OscConfig+0x12c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d168      	bne.n	800217c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e24c      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x76>
 80020b8:	4b80      	ldr	r3, [pc, #512]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7f      	ldr	r2, [pc, #508]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e02e      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b7b      	ldr	r3, [pc, #492]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7a      	ldr	r2, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b78      	ldr	r3, [pc, #480]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a77      	ldr	r2, [pc, #476]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e01d      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0xbc>
 80020f2:	4b72      	ldr	r3, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a71      	ldr	r2, [pc, #452]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6e      	ldr	r2, [pc, #440]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 800210c:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a6a      	ldr	r2, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a67      	ldr	r2, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe ff26 	bl	8000f7c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7fe ff22 	bl	8000f7c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e200      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0xe4>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe ff12 	bl	8000f7c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7fe ff0e 	bl	8000f7c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1ec      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x10c>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d063      	beq.n	8002252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00b      	beq.n	80021ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002196:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d11c      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
 80021a2:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d116      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e1c0      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4939      	ldr	r1, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	e03a      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d020      	beq.n	8002226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fec7 	bl	8000f7c <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f2:	f7fe fec3 	bl	8000f7c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e1a1      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4927      	ldr	r1, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e015      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fea6 	bl	8000f7c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002234:	f7fe fea2 	bl	8000f7c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e180      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d03a      	beq.n	80022d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d019      	beq.n	800229a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226c:	f7fe fe86 	bl	8000f7c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7fe fe82 	bl	8000f7c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e160      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002292:	2001      	movs	r0, #1
 8002294:	f000 fafe 	bl	8002894 <RCC_Delay>
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7fe fe6c 	bl	8000f7c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a6:	e00f      	b.n	80022c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a8:	f7fe fe68 	bl	8000f7c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d908      	bls.n	80022c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e146      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	42420000 	.word	0x42420000
 80022c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	4b92      	ldr	r3, [pc, #584]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e9      	bne.n	80022a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a6 	beq.w	800242e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b8b      	ldr	r3, [pc, #556]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a87      	ldr	r2, [pc, #540]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b85      	ldr	r3, [pc, #532]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230a:	2301      	movs	r3, #1
 800230c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b82      	ldr	r3, [pc, #520]	; (8002518 <HAL_RCC_OscConfig+0x4c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d118      	bne.n	800234c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231a:	4b7f      	ldr	r3, [pc, #508]	; (8002518 <HAL_RCC_OscConfig+0x4c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7e      	ldr	r2, [pc, #504]	; (8002518 <HAL_RCC_OscConfig+0x4c8>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002326:	f7fe fe29 	bl	8000f7c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7fe fe25 	bl	8000f7c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	; 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e103      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b75      	ldr	r3, [pc, #468]	; (8002518 <HAL_RCC_OscConfig+0x4c8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x312>
 8002354:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a6e      	ldr	r2, [pc, #440]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	e02d      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x334>
 800236a:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a69      	ldr	r2, [pc, #420]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a66      	ldr	r2, [pc, #408]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	e01c      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d10c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x356>
 800238c:	4b61      	ldr	r3, [pc, #388]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a60      	ldr	r2, [pc, #384]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	4b5e      	ldr	r3, [pc, #376]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a5d      	ldr	r2, [pc, #372]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e00b      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 80023a6:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a5a      	ldr	r2, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b58      	ldr	r3, [pc, #352]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a57      	ldr	r2, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d015      	beq.n	80023f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7fe fdd9 	bl	8000f7c <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe fdd5 	bl	8000f7c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0b1      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ee      	beq.n	80023ce <HAL_RCC_OscConfig+0x37e>
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fdc3 	bl	8000f7c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fdbf 	bl	8000f7c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e09b      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	4b40      	ldr	r3, [pc, #256]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4a3b      	ldr	r2, [pc, #236]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8087 	beq.w	8002546 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002438:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d061      	beq.n	8002508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d146      	bne.n	80024da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	4b33      	ldr	r3, [pc, #204]	; (800251c <HAL_RCC_OscConfig+0x4cc>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7fe fd93 	bl	8000f7c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe fd8f 	bl	8000f7c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e06d      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d108      	bne.n	8002494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4921      	ldr	r1, [pc, #132]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a19      	ldr	r1, [r3, #32]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	430b      	orrs	r3, r1
 80024a6:	491b      	ldr	r1, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x4cc>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe fd63 	bl	8000f7c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe fd5f 	bl	8000f7c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e03d      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x46a>
 80024d8:	e035      	b.n	8002546 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_RCC_OscConfig+0x4cc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd4c 	bl	8000f7c <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fd48 	bl	8000f7c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e026      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x498>
 8002506:	e01e      	b.n	8002546 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e019      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
 8002514:	40021000 	.word	0x40021000
 8002518:	40007000 	.word	0x40007000
 800251c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_OscConfig+0x500>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	429a      	cmp	r2, r3
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0d0      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d910      	bls.n	8002598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 0207 	bic.w	r2, r3, #7
 800257e:	4965      	ldr	r1, [pc, #404]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b8      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a52      	ldr	r2, [pc, #328]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	494d      	ldr	r1, [pc, #308]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d040      	beq.n	8002674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07f      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e073      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06b      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4936      	ldr	r1, [pc, #216]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002644:	f7fe fc9a 	bl	8000f7c <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	e00a      	b.n	8002662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264c:	f7fe fc96 	bl	8000f7c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e053      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 020c 	and.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1eb      	bne.n	800264c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b27      	ldr	r3, [pc, #156]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d210      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0207 	bic.w	r2, r3, #7
 800268a:	4922      	ldr	r1, [pc, #136]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4916      	ldr	r1, [pc, #88]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490e      	ldr	r1, [pc, #56]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 f821 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490a      	ldr	r1, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x1c8>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1cc>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1d0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe f810 	bl	8000728 <HAL_InitTick>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40022000 	.word	0x40022000
 8002718:	40021000 	.word	0x40021000
 800271c:	08005540 	.word	0x08005540
 8002720:	20000000 	.word	0x20000000
 8002724:	2000000c 	.word	0x2000000c

08002728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x30>
 8002752:	2b08      	cmp	r3, #8
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x36>
 8002756:	e027      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800275a:	613b      	str	r3, [r7, #16]
      break;
 800275c:	e027      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0c5b      	lsrs	r3, r3, #17
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800278a:	fb03 f202 	mul.w	r2, r3, r2
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e004      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	613b      	str	r3, [r7, #16]
      break;
 80027a6:	e002      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027aa:	613b      	str	r3, [r7, #16]
      break;
 80027ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ae:	693b      	ldr	r3, [r7, #16]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	007a1200 	.word	0x007a1200
 80027c4:	080062b4 	.word	0x080062b4
 80027c8:	080062c4 	.word	0x080062c4
 80027cc:	003d0900 	.word	0x003d0900

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000000 	.word	0x20000000

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e8:	f7ff fff2 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4903      	ldr	r1, [pc, #12]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08005550 	.word	0x08005550

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002810:	f7ff ffde 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0adb      	lsrs	r3, r3, #11
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08005550 	.word	0x08005550

08002834 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	220f      	movs	r2, #15
 8002842:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_GetClockConfig+0x58>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0203 	and.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCC_GetClockConfig+0x58>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_GetClockConfig+0x58>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_RCC_GetClockConfig+0x58>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	08db      	lsrs	r3, r3, #3
 800286e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_GetClockConfig+0x5c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0207 	and.w	r2, r3, #7
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40021000 	.word	0x40021000
 8002890:	40022000 	.word	0x40022000

08002894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <RCC_Delay+0x34>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <RCC_Delay+0x38>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0a5b      	lsrs	r3, r3, #9
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b0:	bf00      	nop
  }
  while (Delay --);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1e5a      	subs	r2, r3, #1
 80028b6:	60fa      	str	r2, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f9      	bne.n	80028b0 <RCC_Delay+0x1c>
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	20000000 	.word	0x20000000
 80028cc:	10624dd3 	.word	0x10624dd3

080028d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e041      	b.n	8002966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f839 	bl	800296e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f000 f9b4 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d001      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e03a      	b.n	8002a0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_TIM_Base_Start_IT+0x98>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x58>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d009      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x58>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_TIM_Base_Start_IT+0x9c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x58>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_TIM_Base_Start_IT+0xa0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d010      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fa:	e007      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800

08002a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0202 	mvn.w	r2, #2
 8002a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8ed 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8e0 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8ef 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d122      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0204 	mvn.w	r2, #4
 8002aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8c3 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8b6 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8c5 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0208 	mvn.w	r2, #8
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2204      	movs	r2, #4
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f899 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f88c 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f89b 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d122      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d11b      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0210 	mvn.w	r2, #16
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2208      	movs	r2, #8
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f86f 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f862 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f871 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d10e      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d107      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0201 	mvn.w	r2, #1
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fcd6 	bl	8000554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8bf 	bl	8002d52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d10e      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d107      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f835 	bl	8002c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d10e      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d107      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0220 	mvn.w	r2, #32
 8002c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f88a 	bl	8002d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00b      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d007      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <TIM_Base_SetConfig+0xbc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_Base_SetConfig+0x30>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d007      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <TIM_Base_SetConfig+0xbc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_Base_SetConfig+0x62>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <TIM_Base_SetConfig+0xc0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <TIM_Base_SetConfig+0xb8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800

08002d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e042      	b.n	8002dfc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fc72 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f91d 	bl	8002fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d16d      	bne.n	8002f00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Transmit+0x2c>
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e066      	b.n	8002f02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2221      	movs	r2, #33	; 0x21
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e42:	f7fe f89b 	bl	8000f7c <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5c:	d108      	bne.n	8002e70 <HAL_UART_Transmit+0x6c>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e003      	b.n	8002e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e78:	e02a      	b.n	8002ed0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2200      	movs	r2, #0
 8002e82:	2180      	movs	r1, #128	; 0x80
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f840 	bl	8002f0a <UART_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e036      	b.n	8002f02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10b      	bne.n	8002eb2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ea8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	3302      	adds	r3, #2
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	e007      	b.n	8002ec2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1cf      	bne.n	8002e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2140      	movs	r1, #64	; 0x40
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f810 	bl	8002f0a <UART_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e006      	b.n	8002f02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b090      	sub	sp, #64	; 0x40
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f1a:	e050      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d04c      	beq.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f2a:	f7fe f827 	bl	8000f7c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d241      	bcs.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f5a:	637a      	str	r2, [r7, #52]	; 0x34
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f62:	e841 2300 	strex	r3, r2, [r1]
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1e5      	bne.n	8002f3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3314      	adds	r3, #20
 8002f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3314      	adds	r3, #20
 8002f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f8e:	623a      	str	r2, [r7, #32]
 8002f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	69f9      	ldr	r1, [r7, #28]
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e00f      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d09f      	beq.n	8002f1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3740      	adds	r7, #64	; 0x40
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003022:	f023 030c 	bic.w	r3, r3, #12
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	430b      	orrs	r3, r1
 800302e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <UART_SetConfig+0x114>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003050:	f7ff fbdc 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	e002      	b.n	800305e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003058:	f7ff fbc4 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 800305c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	4a22      	ldr	r2, [pc, #136]	; (8003100 <UART_SetConfig+0x118>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	0119      	lsls	r1, r3, #4
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009a      	lsls	r2, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fbb2 f2f3 	udiv	r2, r2, r3
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <UART_SetConfig+0x118>)
 8003096:	fba3 0302 	umull	r0, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2064      	movs	r0, #100	; 0x64
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	3332      	adds	r3, #50	; 0x32
 80030a8:	4a15      	ldr	r2, [pc, #84]	; (8003100 <UART_SetConfig+0x118>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b4:	4419      	add	r1, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <UART_SetConfig+0x118>)
 80030ce:	fba3 0302 	umull	r0, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2064      	movs	r0, #100	; 0x64
 80030d6:	fb00 f303 	mul.w	r3, r0, r3
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	3332      	adds	r3, #50	; 0x32
 80030e0:	4a07      	ldr	r2, [pc, #28]	; (8003100 <UART_SetConfig+0x118>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	440a      	add	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40013800 	.word	0x40013800
 8003100:	51eb851f 	.word	0x51eb851f

08003104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f103 0208 	add.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f103 0208 	add.w	r2, r3, #8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f103 0208 	add.w	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d103      	bne.n	80031c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e00c      	b.n	80031da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3308      	adds	r3, #8
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e002      	b.n	80031ce <vListInsert+0x2e>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d2f6      	bcs.n	80031c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6892      	ldr	r2, [r2, #8]
 8003226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6852      	ldr	r2, [r2, #4]
 8003230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d103      	bne.n	8003244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003262:	b580      	push	{r7, lr}
 8003264:	b08e      	sub	sp, #56	; 0x38
 8003266:	af04      	add	r7, sp, #16
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003288:	bf00      	nop
 800328a:	e7fe      	b.n	800328a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	61fb      	str	r3, [r7, #28]
}
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032a8:	2358      	movs	r3, #88	; 0x58
 80032aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b58      	cmp	r3, #88	; 0x58
 80032b0:	d00a      	beq.n	80032c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	61bb      	str	r3, [r7, #24]
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01e      	beq.n	800330c <xTaskCreateStatic+0xaa>
 80032ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032e6:	2300      	movs	r3, #0
 80032e8:	9303      	str	r3, [sp, #12]
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f850 	bl	80033a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003306:	f000 f8d7 	bl	80034b8 <prvAddNewTaskToReadyList>
 800330a:	e001      	b.n	8003310 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003310:	697b      	ldr	r3, [r7, #20]
	}
 8003312:	4618      	mov	r0, r3
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08c      	sub	sp, #48	; 0x30
 800331e:	af04      	add	r7, sp, #16
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f000 ff2e 	bl	8004190 <pvPortMalloc>
 8003334:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800333c:	2058      	movs	r0, #88	; 0x58
 800333e:	f000 ff27 	bl	8004190 <pvPortMalloc>
 8003342:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
 8003350:	e005      	b.n	800335e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f000 ffe6 	bl	8004324 <vPortFree>
 8003358:	e001      	b.n	800335e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	2300      	movs	r3, #0
 8003370:	9303      	str	r3, [sp, #12]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f80e 	bl	80033a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003388:	69f8      	ldr	r0, [r7, #28]
 800338a:	f000 f895 	bl	80034b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800338e:	2301      	movs	r3, #1
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e002      	b.n	800339a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003394:	f04f 33ff 	mov.w	r3, #4294967295
 8003398:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800339a:	69bb      	ldr	r3, [r7, #24]
	}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	461a      	mov	r2, r3
 80033bc:	21a5      	movs	r1, #165	; 0xa5
 80033be:	f001 facd 	bl	800495c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033cc:	3b01      	subs	r3, #1
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f023 0307 	bic.w	r3, r3, #7
 80033da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	617b      	str	r3, [r7, #20]
}
 80033f8:	bf00      	nop
 80033fa:	e7fe      	b.n	80033fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	e012      	b.n	8003428 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	7819      	ldrb	r1, [r3, #0]
 800340a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	4413      	add	r3, r2
 8003410:	3334      	adds	r3, #52	; 0x34
 8003412:	460a      	mov	r2, r1
 8003414:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d9e9      	bls.n	8003402 <prvInitialiseNewTask+0x5e>
 800342e:	e000      	b.n	8003432 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003430:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	2b06      	cmp	r3, #6
 800343e:	d901      	bls.n	8003444 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003440:	2306      	movs	r3, #6
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	2200      	movs	r2, #0
 8003454:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	3304      	adds	r3, #4
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fe71 	bl	8003142 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	3318      	adds	r3, #24
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fe6c 	bl	8003142 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	f1c3 0207 	rsb	r2, r3, #7
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	2200      	movs	r2, #0
 8003484:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	2200      	movs	r2, #0
 800348a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68f9      	ldr	r1, [r7, #12]
 8003498:	69b8      	ldr	r0, [r7, #24]
 800349a:	f000 fcc5 	bl	8003e28 <pxPortInitialiseStack>
 800349e:	4602      	mov	r2, r0
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034b0:	bf00      	nop
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034c0:	f000 fda4 	bl	800400c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034c4:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <prvAddNewTaskToReadyList+0xb8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	4a29      	ldr	r2, [pc, #164]	; (8003570 <prvAddNewTaskToReadyList+0xb8>)
 80034cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034ce:	4b29      	ldr	r3, [pc, #164]	; (8003574 <prvAddNewTaskToReadyList+0xbc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034d6:	4a27      	ldr	r2, [pc, #156]	; (8003574 <prvAddNewTaskToReadyList+0xbc>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <prvAddNewTaskToReadyList+0xb8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d110      	bne.n	8003506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034e4:	f000 fb78 	bl	8003bd8 <prvInitialiseTaskLists>
 80034e8:	e00d      	b.n	8003506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ea:	4b23      	ldr	r3, [pc, #140]	; (8003578 <prvAddNewTaskToReadyList+0xc0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <prvAddNewTaskToReadyList+0xbc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d802      	bhi.n	8003506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003500:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <prvAddNewTaskToReadyList+0xbc>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <prvAddNewTaskToReadyList+0xc4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	4a1b      	ldr	r2, [pc, #108]	; (800357c <prvAddNewTaskToReadyList+0xc4>)
 800350e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	2201      	movs	r2, #1
 8003516:	409a      	lsls	r2, r3
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <prvAddNewTaskToReadyList+0xc8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4313      	orrs	r3, r2
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <prvAddNewTaskToReadyList+0xc8>)
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4a15      	ldr	r2, [pc, #84]	; (8003584 <prvAddNewTaskToReadyList+0xcc>)
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f7ff fe0e 	bl	800315a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800353e:	f000 fd95 	bl	800406c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <prvAddNewTaskToReadyList+0xc0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <prvAddNewTaskToReadyList+0xbc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	429a      	cmp	r2, r3
 8003556:	d207      	bcs.n	8003568 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <prvAddNewTaskToReadyList+0xd0>)
 800355a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200008e0 	.word	0x200008e0
 8003574:	200007e0 	.word	0x200007e0
 8003578:	200008ec 	.word	0x200008ec
 800357c:	200008fc 	.word	0x200008fc
 8003580:	200008e8 	.word	0x200008e8
 8003584:	200007e4 	.word	0x200007e4
 8003588:	e000ed04 	.word	0xe000ed04

0800358c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	617b      	str	r3, [r7, #20]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <vTaskDelayUntil+0x46>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	613b      	str	r3, [r7, #16]
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80035d2:	4b2a      	ldr	r3, [pc, #168]	; (800367c <vTaskDelayUntil+0xf0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <vTaskDelayUntil+0x64>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	60fb      	str	r3, [r7, #12]
}
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80035f0:	f000 f8de 	bl	80037b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <vTaskDelayUntil+0xf4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	4413      	add	r3, r2
 8003602:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	429a      	cmp	r2, r3
 800360c:	d20b      	bcs.n	8003626 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	429a      	cmp	r2, r3
 8003616:	d211      	bcs.n	800363c <vTaskDelayUntil+0xb0>
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	429a      	cmp	r2, r3
 800361e:	d90d      	bls.n	800363c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003620:	2301      	movs	r3, #1
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
 8003624:	e00a      	b.n	800363c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d303      	bcc.n	8003638 <vTaskDelayUntil+0xac>
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	429a      	cmp	r2, r3
 8003636:	d901      	bls.n	800363c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003638:	2301      	movs	r3, #1
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d006      	beq.n	8003656 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fb83 	bl	8003d5c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003656:	f000 f8b9 	bl	80037cc <xTaskResumeAll>
 800365a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <vTaskDelayUntil+0xf8>)
 8003664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003672:	bf00      	nop
 8003674:	3728      	adds	r7, #40	; 0x28
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000908 	.word	0x20000908
 8003680:	200008e4 	.word	0x200008e4
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d017      	beq.n	80036ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <vTaskDelay+0x60>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <vTaskDelay+0x30>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	60bb      	str	r3, [r7, #8]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036b8:	f000 f87a 	bl	80037b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036bc:	2100      	movs	r1, #0
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fb4c 	bl	8003d5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036c4:	f000 f882 	bl	80037cc <xTaskResumeAll>
 80036c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d107      	bne.n	80036e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <vTaskDelay+0x64>)
 80036d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000908 	.word	0x20000908
 80036ec:	e000ed04 	.word	0xe000ed04

080036f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036fe:	463a      	mov	r2, r7
 8003700:	1d39      	adds	r1, r7, #4
 8003702:	f107 0308 	add.w	r3, r7, #8
 8003706:	4618      	mov	r0, r3
 8003708:	f7fc fd32 	bl	8000170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	9202      	str	r2, [sp, #8]
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	2300      	movs	r3, #0
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	2300      	movs	r3, #0
 800371c:	460a      	mov	r2, r1
 800371e:	491e      	ldr	r1, [pc, #120]	; (8003798 <vTaskStartScheduler+0xa8>)
 8003720:	481e      	ldr	r0, [pc, #120]	; (800379c <vTaskStartScheduler+0xac>)
 8003722:	f7ff fd9e 	bl	8003262 <xTaskCreateStatic>
 8003726:	4603      	mov	r3, r0
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <vTaskStartScheduler+0xb0>)
 800372a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800372c:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <vTaskStartScheduler+0xb0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003734:	2301      	movs	r3, #1
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e001      	b.n	800373e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d116      	bne.n	8003772 <vTaskStartScheduler+0x82>
	__asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	613b      	str	r3, [r7, #16]
}
 8003756:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <vTaskStartScheduler+0xb4>)
 800375a:	f04f 32ff 	mov.w	r2, #4294967295
 800375e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <vTaskStartScheduler+0xb8>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <vTaskStartScheduler+0xbc>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800376c:	f000 fbdc 	bl	8003f28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003770:	e00e      	b.n	8003790 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d10a      	bne.n	8003790 <vTaskStartScheduler+0xa0>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	60fb      	str	r3, [r7, #12]
}
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <vTaskStartScheduler+0x9e>
}
 8003790:	bf00      	nop
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	08005538 	.word	0x08005538
 800379c:	08003ba9 	.word	0x08003ba9
 80037a0:	20000904 	.word	0x20000904
 80037a4:	20000900 	.word	0x20000900
 80037a8:	200008ec 	.word	0x200008ec
 80037ac:	200008e4 	.word	0x200008e4

080037b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <vTaskSuspendAll+0x18>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	4a03      	ldr	r2, [pc, #12]	; (80037c8 <vTaskSuspendAll+0x18>)
 80037bc:	6013      	str	r3, [r2, #0]
}
 80037be:	bf00      	nop
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000908 	.word	0x20000908

080037cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <xTaskResumeAll+0x114>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	603b      	str	r3, [r7, #0]
}
 80037f4:	bf00      	nop
 80037f6:	e7fe      	b.n	80037f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037f8:	f000 fc08 	bl	800400c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037fc:	4b38      	ldr	r3, [pc, #224]	; (80038e0 <xTaskResumeAll+0x114>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3b01      	subs	r3, #1
 8003802:	4a37      	ldr	r2, [pc, #220]	; (80038e0 <xTaskResumeAll+0x114>)
 8003804:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003806:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <xTaskResumeAll+0x114>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d161      	bne.n	80038d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800380e:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <xTaskResumeAll+0x118>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d05d      	beq.n	80038d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003816:	e02e      	b.n	8003876 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003818:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <xTaskResumeAll+0x11c>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3318      	adds	r3, #24
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fcf3 	bl	8003210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3304      	adds	r3, #4
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fcee 	bl	8003210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	2201      	movs	r2, #1
 800383a:	409a      	lsls	r2, r3
 800383c:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <xTaskResumeAll+0x120>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <xTaskResumeAll+0x120>)
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4a27      	ldr	r2, [pc, #156]	; (80038f0 <xTaskResumeAll+0x124>)
 8003854:	441a      	add	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7ff fc7c 	bl	800315a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <xTaskResumeAll+0x128>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003870:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <xTaskResumeAll+0x12c>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <xTaskResumeAll+0x11c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1cc      	bne.n	8003818 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003884:	f000 fa46 	bl	8003d14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <xTaskResumeAll+0x130>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d010      	beq.n	80038b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003894:	f000 f844 	bl	8003920 <xTaskIncrementTick>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <xTaskResumeAll+0x12c>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f1      	bne.n	8003894 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <xTaskResumeAll+0x130>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <xTaskResumeAll+0x12c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038be:	2301      	movs	r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <xTaskResumeAll+0x134>)
 80038c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038d2:	f000 fbcb 	bl	800406c <vPortExitCritical>

	return xAlreadyYielded;
 80038d6:	68bb      	ldr	r3, [r7, #8]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000908 	.word	0x20000908
 80038e4:	200008e0 	.word	0x200008e0
 80038e8:	200008a0 	.word	0x200008a0
 80038ec:	200008e8 	.word	0x200008e8
 80038f0:	200007e4 	.word	0x200007e4
 80038f4:	200007e0 	.word	0x200007e0
 80038f8:	200008f4 	.word	0x200008f4
 80038fc:	200008f0 	.word	0x200008f0
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <xTaskGetTickCount+0x18>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003910:	687b      	ldr	r3, [r7, #4]
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	200008e4 	.word	0x200008e4

08003920 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392a:	4b51      	ldr	r3, [pc, #324]	; (8003a70 <xTaskIncrementTick+0x150>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 808d 	bne.w	8003a4e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003934:	4b4f      	ldr	r3, [pc, #316]	; (8003a74 <xTaskIncrementTick+0x154>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800393c:	4a4d      	ldr	r2, [pc, #308]	; (8003a74 <xTaskIncrementTick+0x154>)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d120      	bne.n	800398a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003948:	4b4b      	ldr	r3, [pc, #300]	; (8003a78 <xTaskIncrementTick+0x158>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <xTaskIncrementTick+0x48>
	__asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	603b      	str	r3, [r7, #0]
}
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <xTaskIncrementTick+0x46>
 8003968:	4b43      	ldr	r3, [pc, #268]	; (8003a78 <xTaskIncrementTick+0x158>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <xTaskIncrementTick+0x15c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a41      	ldr	r2, [pc, #260]	; (8003a78 <xTaskIncrementTick+0x158>)
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4a41      	ldr	r2, [pc, #260]	; (8003a7c <xTaskIncrementTick+0x15c>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <xTaskIncrementTick+0x160>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	4a3f      	ldr	r2, [pc, #252]	; (8003a80 <xTaskIncrementTick+0x160>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	f000 f9c5 	bl	8003d14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800398a:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <xTaskIncrementTick+0x164>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d34d      	bcc.n	8003a30 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003994:	4b38      	ldr	r3, [pc, #224]	; (8003a78 <xTaskIncrementTick+0x158>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <xTaskIncrementTick+0x82>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <xTaskIncrementTick+0x84>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <xTaskIncrementTick+0x164>)
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295
 80039ae:	601a      	str	r2, [r3, #0]
					break;
 80039b0:	e03e      	b.n	8003a30 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039b2:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <xTaskIncrementTick+0x158>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d203      	bcs.n	80039d2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039ca:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <xTaskIncrementTick+0x164>)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6013      	str	r3, [r2, #0]
						break;
 80039d0:	e02e      	b.n	8003a30 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fc1a 	bl	8003210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	3318      	adds	r3, #24
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fc11 	bl	8003210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	2201      	movs	r2, #1
 80039f4:	409a      	lsls	r2, r3
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <xTaskIncrementTick+0x168>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <xTaskIncrementTick+0x168>)
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <xTaskIncrementTick+0x16c>)
 8003a0e:	441a      	add	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7ff fb9f 	bl	800315a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a20:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <xTaskIncrementTick+0x170>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3b4      	bcc.n	8003994 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a2e:	e7b1      	b.n	8003994 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <xTaskIncrementTick+0x170>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a36:	4915      	ldr	r1, [pc, #84]	; (8003a8c <xTaskIncrementTick+0x16c>)
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d907      	bls.n	8003a58 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e004      	b.n	8003a58 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <xTaskIncrementTick+0x174>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a0f      	ldr	r2, [pc, #60]	; (8003a94 <xTaskIncrementTick+0x174>)
 8003a56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <xTaskIncrementTick+0x178>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a64:	697b      	ldr	r3, [r7, #20]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000908 	.word	0x20000908
 8003a74:	200008e4 	.word	0x200008e4
 8003a78:	20000898 	.word	0x20000898
 8003a7c:	2000089c 	.word	0x2000089c
 8003a80:	200008f8 	.word	0x200008f8
 8003a84:	20000900 	.word	0x20000900
 8003a88:	200008e8 	.word	0x200008e8
 8003a8c:	200007e4 	.word	0x200007e4
 8003a90:	200007e0 	.word	0x200007e0
 8003a94:	200008f0 	.word	0x200008f0
 8003a98:	200008f4 	.word	0x200008f4

08003a9c <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <vTaskSetApplicationTaskTag+0x34>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e001      	b.n	8003ab8 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8003ab8:	f000 faa8 	bl	800400c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8003ac2:	f000 fad3 	bl	800406c <vPortExitCritical>
	}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200007e0 	.word	0x200007e0

08003ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ada:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <vTaskSwitchContext+0xc0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <vTaskSwitchContext+0xc4>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ae8:	e050      	b.n	8003b8c <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 8003aea:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <vTaskSwitchContext+0xc4>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <vTaskSwitchContext+0xc8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <vTaskSwitchContext+0xc8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d808      	bhi.n	8003b12 <vTaskSwitchContext+0x3e>
 8003b00:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <vTaskSwitchContext+0xc8>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <vTaskSwitchContext+0xc8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3334      	adds	r3, #52	; 0x34
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7fc fb1f 	bl	8000150 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <vTaskSwitchContext+0xcc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	f1c3 031f 	rsb	r3, r3, #31
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	491e      	ldr	r1, [pc, #120]	; (8003ba4 <vTaskSwitchContext+0xd0>)
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <vTaskSwitchContext+0x7e>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	607b      	str	r3, [r7, #4]
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <vTaskSwitchContext+0x7c>
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <vTaskSwitchContext+0xd0>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	3308      	adds	r3, #8
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d104      	bne.n	8003b82 <vTaskSwitchContext+0xae>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <vTaskSwitchContext+0xc8>)
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000908 	.word	0x20000908
 8003b98:	200008f4 	.word	0x200008f4
 8003b9c:	200007e0 	.word	0x200007e0
 8003ba0:	200008e8 	.word	0x200008e8
 8003ba4:	200007e4 	.word	0x200007e4

08003ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bb0:	f000 f852 	bl	8003c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <prvIdleTask+0x28>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d9f9      	bls.n	8003bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <prvIdleTask+0x2c>)
 8003bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bcc:	e7f0      	b.n	8003bb0 <prvIdleTask+0x8>
 8003bce:	bf00      	nop
 8003bd0:	200007e4 	.word	0x200007e4
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bde:	2300      	movs	r3, #0
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	e00c      	b.n	8003bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <prvInitialiseTaskLists+0x60>)
 8003bf0:	4413      	add	r3, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fa86 	bl	8003104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b06      	cmp	r3, #6
 8003c02:	d9ef      	bls.n	8003be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c04:	480d      	ldr	r0, [pc, #52]	; (8003c3c <prvInitialiseTaskLists+0x64>)
 8003c06:	f7ff fa7d 	bl	8003104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c0a:	480d      	ldr	r0, [pc, #52]	; (8003c40 <prvInitialiseTaskLists+0x68>)
 8003c0c:	f7ff fa7a 	bl	8003104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c10:	480c      	ldr	r0, [pc, #48]	; (8003c44 <prvInitialiseTaskLists+0x6c>)
 8003c12:	f7ff fa77 	bl	8003104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c16:	480c      	ldr	r0, [pc, #48]	; (8003c48 <prvInitialiseTaskLists+0x70>)
 8003c18:	f7ff fa74 	bl	8003104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c1c:	480b      	ldr	r0, [pc, #44]	; (8003c4c <prvInitialiseTaskLists+0x74>)
 8003c1e:	f7ff fa71 	bl	8003104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <prvInitialiseTaskLists+0x78>)
 8003c24:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <prvInitialiseTaskLists+0x64>)
 8003c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <prvInitialiseTaskLists+0x7c>)
 8003c2a:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <prvInitialiseTaskLists+0x68>)
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200007e4 	.word	0x200007e4
 8003c3c:	20000870 	.word	0x20000870
 8003c40:	20000884 	.word	0x20000884
 8003c44:	200008a0 	.word	0x200008a0
 8003c48:	200008b4 	.word	0x200008b4
 8003c4c:	200008cc 	.word	0x200008cc
 8003c50:	20000898 	.word	0x20000898
 8003c54:	2000089c 	.word	0x2000089c

08003c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c5e:	e019      	b.n	8003c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c60:	f000 f9d4 	bl	800400c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c64:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <prvCheckTasksWaitingTermination+0x50>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff facd 	bl	8003210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <prvCheckTasksWaitingTermination+0x54>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	4a0b      	ldr	r2, [pc, #44]	; (8003cac <prvCheckTasksWaitingTermination+0x54>)
 8003c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <prvCheckTasksWaitingTermination+0x58>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <prvCheckTasksWaitingTermination+0x58>)
 8003c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c8a:	f000 f9ef 	bl	800406c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f810 	bl	8003cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <prvCheckTasksWaitingTermination+0x58>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e1      	bne.n	8003c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	200008b4 	.word	0x200008b4
 8003cac:	200008e0 	.word	0x200008e0
 8003cb0:	200008c8 	.word	0x200008c8

08003cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d108      	bne.n	8003cd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fb2a 	bl	8004324 <vPortFree>
				vPortFree( pxTCB );
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fb27 	bl	8004324 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cd6:	e018      	b.n	8003d0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d103      	bne.n	8003cea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fb1e 	bl	8004324 <vPortFree>
	}
 8003ce8:	e00f      	b.n	8003d0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d00a      	beq.n	8003d0a <prvDeleteTCB+0x56>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	60fb      	str	r3, [r7, #12]
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <prvDeleteTCB+0x54>
	}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <prvResetNextTaskUnblockTime+0x40>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <prvResetNextTaskUnblockTime+0x14>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <prvResetNextTaskUnblockTime+0x16>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <prvResetNextTaskUnblockTime+0x44>)
 8003d30:	f04f 32ff 	mov.w	r2, #4294967295
 8003d34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d36:	e008      	b.n	8003d4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <prvResetNextTaskUnblockTime+0x40>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <prvResetNextTaskUnblockTime+0x44>)
 8003d48:	6013      	str	r3, [r2, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	20000898 	.word	0x20000898
 8003d58:	20000900 	.word	0x20000900

08003d5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d66:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fa4c 	bl	8003210 <uxListRemove>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10b      	bne.n	8003d96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	2201      	movs	r2, #1
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4013      	ands	r3, r2
 8003d92:	4a20      	ldr	r2, [pc, #128]	; (8003e14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d10a      	bne.n	8003db4 <prvAddCurrentTaskToDelayedList+0x58>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4619      	mov	r1, r3
 8003dac:	481a      	ldr	r0, [pc, #104]	; (8003e18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003dae:	f7ff f9d4 	bl	800315a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003db2:	e026      	b.n	8003e02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dbc:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d209      	bcs.n	8003de0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f7ff f9e1 	bl	80031a0 <vListInsert>
}
 8003dde:	e010      	b.n	8003e02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7ff f9d7 	bl	80031a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d202      	bcs.n	8003e02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003dfc:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6013      	str	r3, [r2, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200008e4 	.word	0x200008e4
 8003e10:	200007e0 	.word	0x200007e0
 8003e14:	200008e8 	.word	0x200008e8
 8003e18:	200008cc 	.word	0x200008cc
 8003e1c:	2000089c 	.word	0x2000089c
 8003e20:	20000898 	.word	0x20000898
 8003e24:	20000900 	.word	0x20000900

08003e28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3b04      	subs	r3, #4
 8003e38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3b04      	subs	r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3b04      	subs	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e58:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <pxPortInitialiseStack+0x54>)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3b14      	subs	r3, #20
 8003e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3b20      	subs	r3, #32
 8003e6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e70:	68fb      	ldr	r3, [r7, #12]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	08003e81 	.word	0x08003e81

08003e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <prvTaskExitError+0x54>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d00a      	beq.n	8003eaa <prvTaskExitError+0x2a>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	60fb      	str	r3, [r7, #12]
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <prvTaskExitError+0x28>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	60bb      	str	r3, [r7, #8]
}
 8003ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ebe:	bf00      	nop
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0fc      	beq.n	8003ec0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000014 	.word	0x20000014
	...

08003ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <pxCurrentTCBConst2>)
 8003ee2:	6819      	ldr	r1, [r3, #0]
 8003ee4:	6808      	ldr	r0, [r1, #0]
 8003ee6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003eea:	f380 8809 	msr	PSP, r0
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f380 8811 	msr	BASEPRI, r0
 8003efa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003efe:	4770      	bx	lr

08003f00 <pxCurrentTCBConst2>:
 8003f00:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f08:	4806      	ldr	r0, [pc, #24]	; (8003f24 <prvPortStartFirstTask+0x1c>)
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	6800      	ldr	r0, [r0, #0]
 8003f0e:	f380 8808 	msr	MSP, r0
 8003f12:	b662      	cpsie	i
 8003f14:	b661      	cpsie	f
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	df00      	svc	0
 8003f20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f22:	bf00      	nop
 8003f24:	e000ed08 	.word	0xe000ed08

08003f28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f2e:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <xPortStartScheduler+0xd0>)
 8003f30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	22ff      	movs	r2, #255	; 0xff
 8003f3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <xPortStartScheduler+0xd4>)
 8003f54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f56:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <xPortStartScheduler+0xd8>)
 8003f58:	2207      	movs	r2, #7
 8003f5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f5c:	e009      	b.n	8003f72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f5e:	4b28      	ldr	r3, [pc, #160]	; (8004000 <xPortStartScheduler+0xd8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	4a26      	ldr	r2, [pc, #152]	; (8004000 <xPortStartScheduler+0xd8>)
 8003f66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d0ef      	beq.n	8003f5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <xPortStartScheduler+0xd8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f1c3 0307 	rsb	r3, r3, #7
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d00a      	beq.n	8003fa0 <xPortStartScheduler+0x78>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60bb      	str	r3, [r7, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fa0:	4b17      	ldr	r3, [pc, #92]	; (8004000 <xPortStartScheduler+0xd8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <xPortStartScheduler+0xd8>)
 8003fa8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <xPortStartScheduler+0xd8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <xPortStartScheduler+0xd8>)
 8003fb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fbe:	4b11      	ldr	r3, [pc, #68]	; (8004004 <xPortStartScheduler+0xdc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a10      	ldr	r2, [pc, #64]	; (8004004 <xPortStartScheduler+0xdc>)
 8003fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <xPortStartScheduler+0xdc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <xPortStartScheduler+0xdc>)
 8003fd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fd6:	f000 f8b9 	bl	800414c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <xPortStartScheduler+0xe0>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fe0:	f7ff ff92 	bl	8003f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003fe4:	f7ff fd76 	bl	8003ad4 <vTaskSwitchContext>
	prvTaskExitError();
 8003fe8:	f7ff ff4a 	bl	8003e80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	e000e400 	.word	0xe000e400
 8003ffc:	2000090c 	.word	0x2000090c
 8004000:	20000910 	.word	0x20000910
 8004004:	e000ed20 	.word	0xe000ed20
 8004008:	20000014 	.word	0x20000014

0800400c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	607b      	str	r3, [r7, #4]
}
 8004024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <vPortEnterCritical+0x58>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3301      	adds	r3, #1
 800402c:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <vPortEnterCritical+0x58>)
 800402e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <vPortEnterCritical+0x58>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10f      	bne.n	8004058 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <vPortEnterCritical+0x5c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <vPortEnterCritical+0x4c>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	603b      	str	r3, [r7, #0]
}
 8004054:	bf00      	nop
 8004056:	e7fe      	b.n	8004056 <vPortEnterCritical+0x4a>
	}
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000014 	.word	0x20000014
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <vPortExitCritical+0x4c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <vPortExitCritical+0x24>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	607b      	str	r3, [r7, #4]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <vPortExitCritical+0x4c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3b01      	subs	r3, #1
 8004096:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <vPortExitCritical+0x4c>)
 8004098:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <vPortExitCritical+0x4c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d105      	bne.n	80040ae <vPortExitCritical+0x42>
 80040a2:	2300      	movs	r3, #0
 80040a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	20000014 	.word	0x20000014
 80040bc:	00000000 	.word	0x00000000

080040c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040c0:	f3ef 8009 	mrs	r0, PSP
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <pxCurrentTCBConst>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040d0:	6010      	str	r0, [r2, #0]
 80040d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80040d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040da:	f380 8811 	msr	BASEPRI, r0
 80040de:	f7ff fcf9 	bl	8003ad4 <vTaskSwitchContext>
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f380 8811 	msr	BASEPRI, r0
 80040ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	6808      	ldr	r0, [r1, #0]
 80040f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040f6:	f380 8809 	msr	PSP, r0
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	4770      	bx	lr

08004100 <pxCurrentTCBConst>:
 8004100:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	607b      	str	r3, [r7, #4]
}
 8004120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004122:	f7ff fbfd 	bl	8003920 <xTaskIncrementTick>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <SysTick_Handler+0x40>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f383 8811 	msr	BASEPRI, r3
}
 800413e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <vPortSetupTimerInterrupt+0x30>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <vPortSetupTimerInterrupt+0x34>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <vPortSetupTimerInterrupt+0x38>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a09      	ldr	r2, [pc, #36]	; (8004188 <vPortSetupTimerInterrupt+0x3c>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	4a08      	ldr	r2, [pc, #32]	; (800418c <vPortSetupTimerInterrupt+0x40>)
 800416a:	3b01      	subs	r3, #1
 800416c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800416e:	4b03      	ldr	r3, [pc, #12]	; (800417c <vPortSetupTimerInterrupt+0x30>)
 8004170:	2207      	movs	r2, #7
 8004172:	601a      	str	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	e000e010 	.word	0xe000e010
 8004180:	e000e018 	.word	0xe000e018
 8004184:	20000000 	.word	0x20000000
 8004188:	10624dd3 	.word	0x10624dd3
 800418c:	e000e014 	.word	0xe000e014

08004190 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800419c:	f7ff fb08 	bl	80037b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041a0:	4b5b      	ldr	r3, [pc, #364]	; (8004310 <pvPortMalloc+0x180>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041a8:	f000 f916 	bl	80043d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041ac:	4b59      	ldr	r3, [pc, #356]	; (8004314 <pvPortMalloc+0x184>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f040 808e 	bne.w	80042d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01d      	beq.n	80041fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041c0:	2208      	movs	r2, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d014      	beq.n	80041fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f023 0307 	bic.w	r3, r3, #7
 80041d8:	3308      	adds	r3, #8
 80041da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <pvPortMalloc+0x6c>
	__asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	617b      	str	r3, [r7, #20]
}
 80041f8:	bf00      	nop
 80041fa:	e7fe      	b.n	80041fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d069      	beq.n	80042d6 <pvPortMalloc+0x146>
 8004202:	4b45      	ldr	r3, [pc, #276]	; (8004318 <pvPortMalloc+0x188>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	d864      	bhi.n	80042d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800420c:	4b43      	ldr	r3, [pc, #268]	; (800431c <pvPortMalloc+0x18c>)
 800420e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004210:	4b42      	ldr	r3, [pc, #264]	; (800431c <pvPortMalloc+0x18c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004216:	e004      	b.n	8004222 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	d903      	bls.n	8004234 <pvPortMalloc+0xa4>
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f1      	bne.n	8004218 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004234:	4b36      	ldr	r3, [pc, #216]	; (8004310 <pvPortMalloc+0x180>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423a:	429a      	cmp	r2, r3
 800423c:	d04b      	beq.n	80042d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2208      	movs	r2, #8
 8004244:	4413      	add	r3, r2
 8004246:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	1ad2      	subs	r2, r2, r3
 8004258:	2308      	movs	r3, #8
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	429a      	cmp	r2, r3
 800425e:	d91f      	bls.n	80042a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4413      	add	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <pvPortMalloc+0xf8>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	613b      	str	r3, [r7, #16]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800429a:	69b8      	ldr	r0, [r7, #24]
 800429c:	f000 f8fe 	bl	800449c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042a0:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <pvPortMalloc+0x188>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <pvPortMalloc+0x188>)
 80042ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042ae:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <pvPortMalloc+0x188>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <pvPortMalloc+0x190>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d203      	bcs.n	80042c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042ba:	4b17      	ldr	r3, [pc, #92]	; (8004318 <pvPortMalloc+0x188>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <pvPortMalloc+0x190>)
 80042c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <pvPortMalloc+0x184>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042d6:	f7ff fa79 	bl	80037cc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80042e0:	f7fb ff40 	bl	8000164 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <pvPortMalloc+0x174>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	60fb      	str	r3, [r7, #12]
}
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <pvPortMalloc+0x172>
	return pvReturn;
 8004304:	69fb      	ldr	r3, [r7, #28]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3728      	adds	r7, #40	; 0x28
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2000151c 	.word	0x2000151c
 8004314:	20001528 	.word	0x20001528
 8004318:	20001520 	.word	0x20001520
 800431c:	20001514 	.word	0x20001514
 8004320:	20001524 	.word	0x20001524

08004324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d048      	beq.n	80043c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004336:	2308      	movs	r3, #8
 8004338:	425b      	negs	r3, r3
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4413      	add	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <vPortFree+0xac>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <vPortFree+0x44>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	60fb      	str	r3, [r7, #12]
}
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <vPortFree+0x62>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60bb      	str	r3, [r7, #8]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <vPortFree+0xac>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d019      	beq.n	80043c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d115      	bne.n	80043c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <vPortFree+0xac>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	401a      	ands	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043ac:	f7ff fa00 	bl	80037b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <vPortFree+0xb0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4413      	add	r3, r2
 80043ba:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <vPortFree+0xb0>)
 80043bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043be:	6938      	ldr	r0, [r7, #16]
 80043c0:	f000 f86c 	bl	800449c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043c4:	f7ff fa02 	bl	80037cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043c8:	bf00      	nop
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20001528 	.word	0x20001528
 80043d4:	20001520 	.word	0x20001520

080043d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043e4:	4b27      	ldr	r3, [pc, #156]	; (8004484 <prvHeapInit+0xac>)
 80043e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00c      	beq.n	800440c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3307      	adds	r3, #7
 80043f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0307 	bic.w	r3, r3, #7
 80043fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <prvHeapInit+0xac>)
 8004408:	4413      	add	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <prvHeapInit+0xb0>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004416:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <prvHeapInit+0xb0>)
 8004418:	2200      	movs	r2, #0
 800441a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	4413      	add	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004424:	2208      	movs	r2, #8
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a15      	ldr	r2, [pc, #84]	; (800448c <prvHeapInit+0xb4>)
 8004438:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <prvHeapInit+0xb4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <prvHeapInit+0xb4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	1ad2      	subs	r2, r2, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <prvHeapInit+0xb4>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <prvHeapInit+0xb8>)
 8004466:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	4a09      	ldr	r2, [pc, #36]	; (8004494 <prvHeapInit+0xbc>)
 800446e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <prvHeapInit+0xc0>)
 8004472:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004476:	601a      	str	r2, [r3, #0]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000914 	.word	0x20000914
 8004488:	20001514 	.word	0x20001514
 800448c:	2000151c 	.word	0x2000151c
 8004490:	20001524 	.word	0x20001524
 8004494:	20001520 	.word	0x20001520
 8004498:	20001528 	.word	0x20001528

0800449c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <prvInsertBlockIntoFreeList+0xa8>)
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e002      	b.n	80044b0 <prvInsertBlockIntoFreeList+0x14>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d8f7      	bhi.n	80044aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d108      	bne.n	80044de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	441a      	add	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	441a      	add	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d118      	bne.n	8004524 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <prvInsertBlockIntoFreeList+0xac>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d00d      	beq.n	800451a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	441a      	add	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	e008      	b.n	800452c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <prvInsertBlockIntoFreeList+0xac>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e003      	b.n	800452c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d002      	beq.n	800453a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	20001514 	.word	0x20001514
 8004548:	2000151c 	.word	0x2000151c

0800454c <std>:
 800454c:	2300      	movs	r3, #0
 800454e:	b510      	push	{r4, lr}
 8004550:	4604      	mov	r4, r0
 8004552:	e9c0 3300 	strd	r3, r3, [r0]
 8004556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800455a:	6083      	str	r3, [r0, #8]
 800455c:	8181      	strh	r1, [r0, #12]
 800455e:	6643      	str	r3, [r0, #100]	; 0x64
 8004560:	81c2      	strh	r2, [r0, #14]
 8004562:	6183      	str	r3, [r0, #24]
 8004564:	4619      	mov	r1, r3
 8004566:	2208      	movs	r2, #8
 8004568:	305c      	adds	r0, #92	; 0x5c
 800456a:	f000 f9f7 	bl	800495c <memset>
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <std+0x58>)
 8004570:	6224      	str	r4, [r4, #32]
 8004572:	6263      	str	r3, [r4, #36]	; 0x24
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <std+0x5c>)
 8004576:	62a3      	str	r3, [r4, #40]	; 0x28
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <std+0x60>)
 800457a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <std+0x64>)
 800457e:	6323      	str	r3, [r4, #48]	; 0x30
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <std+0x68>)
 8004582:	429c      	cmp	r4, r3
 8004584:	d006      	beq.n	8004594 <std+0x48>
 8004586:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800458a:	4294      	cmp	r4, r2
 800458c:	d002      	beq.n	8004594 <std+0x48>
 800458e:	33d0      	adds	r3, #208	; 0xd0
 8004590:	429c      	cmp	r4, r3
 8004592:	d105      	bne.n	80045a0 <std+0x54>
 8004594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459c:	f000 ba56 	b.w	8004a4c <__retarget_lock_init_recursive>
 80045a0:	bd10      	pop	{r4, pc}
 80045a2:	bf00      	nop
 80045a4:	080047ad 	.word	0x080047ad
 80045a8:	080047cf 	.word	0x080047cf
 80045ac:	08004807 	.word	0x08004807
 80045b0:	0800482b 	.word	0x0800482b
 80045b4:	2000152c 	.word	0x2000152c

080045b8 <stdio_exit_handler>:
 80045b8:	4a02      	ldr	r2, [pc, #8]	; (80045c4 <stdio_exit_handler+0xc>)
 80045ba:	4903      	ldr	r1, [pc, #12]	; (80045c8 <stdio_exit_handler+0x10>)
 80045bc:	4803      	ldr	r0, [pc, #12]	; (80045cc <stdio_exit_handler+0x14>)
 80045be:	f000 b869 	b.w	8004694 <_fwalk_sglue>
 80045c2:	bf00      	nop
 80045c4:	20000018 	.word	0x20000018
 80045c8:	080052ed 	.word	0x080052ed
 80045cc:	20000024 	.word	0x20000024

080045d0 <cleanup_stdio>:
 80045d0:	6841      	ldr	r1, [r0, #4]
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <cleanup_stdio+0x34>)
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4299      	cmp	r1, r3
 80045d8:	4604      	mov	r4, r0
 80045da:	d001      	beq.n	80045e0 <cleanup_stdio+0x10>
 80045dc:	f000 fe86 	bl	80052ec <_fflush_r>
 80045e0:	68a1      	ldr	r1, [r4, #8]
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <cleanup_stdio+0x38>)
 80045e4:	4299      	cmp	r1, r3
 80045e6:	d002      	beq.n	80045ee <cleanup_stdio+0x1e>
 80045e8:	4620      	mov	r0, r4
 80045ea:	f000 fe7f 	bl	80052ec <_fflush_r>
 80045ee:	68e1      	ldr	r1, [r4, #12]
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <cleanup_stdio+0x3c>)
 80045f2:	4299      	cmp	r1, r3
 80045f4:	d004      	beq.n	8004600 <cleanup_stdio+0x30>
 80045f6:	4620      	mov	r0, r4
 80045f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045fc:	f000 be76 	b.w	80052ec <_fflush_r>
 8004600:	bd10      	pop	{r4, pc}
 8004602:	bf00      	nop
 8004604:	2000152c 	.word	0x2000152c
 8004608:	20001594 	.word	0x20001594
 800460c:	200015fc 	.word	0x200015fc

08004610 <global_stdio_init.part.0>:
 8004610:	b510      	push	{r4, lr}
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <global_stdio_init.part.0+0x30>)
 8004614:	4c0b      	ldr	r4, [pc, #44]	; (8004644 <global_stdio_init.part.0+0x34>)
 8004616:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <global_stdio_init.part.0+0x38>)
 8004618:	4620      	mov	r0, r4
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	2104      	movs	r1, #4
 800461e:	2200      	movs	r2, #0
 8004620:	f7ff ff94 	bl	800454c <std>
 8004624:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004628:	2201      	movs	r2, #1
 800462a:	2109      	movs	r1, #9
 800462c:	f7ff ff8e 	bl	800454c <std>
 8004630:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004634:	2202      	movs	r2, #2
 8004636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800463a:	2112      	movs	r1, #18
 800463c:	f7ff bf86 	b.w	800454c <std>
 8004640:	20001664 	.word	0x20001664
 8004644:	2000152c 	.word	0x2000152c
 8004648:	080045b9 	.word	0x080045b9

0800464c <__sfp_lock_acquire>:
 800464c:	4801      	ldr	r0, [pc, #4]	; (8004654 <__sfp_lock_acquire+0x8>)
 800464e:	f000 b9fe 	b.w	8004a4e <__retarget_lock_acquire_recursive>
 8004652:	bf00      	nop
 8004654:	2000166d 	.word	0x2000166d

08004658 <__sfp_lock_release>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__sfp_lock_release+0x8>)
 800465a:	f000 b9f9 	b.w	8004a50 <__retarget_lock_release_recursive>
 800465e:	bf00      	nop
 8004660:	2000166d 	.word	0x2000166d

08004664 <__sinit>:
 8004664:	b510      	push	{r4, lr}
 8004666:	4604      	mov	r4, r0
 8004668:	f7ff fff0 	bl	800464c <__sfp_lock_acquire>
 800466c:	6a23      	ldr	r3, [r4, #32]
 800466e:	b11b      	cbz	r3, 8004678 <__sinit+0x14>
 8004670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004674:	f7ff bff0 	b.w	8004658 <__sfp_lock_release>
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <__sinit+0x28>)
 800467a:	6223      	str	r3, [r4, #32]
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <__sinit+0x2c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1f5      	bne.n	8004670 <__sinit+0xc>
 8004684:	f7ff ffc4 	bl	8004610 <global_stdio_init.part.0>
 8004688:	e7f2      	b.n	8004670 <__sinit+0xc>
 800468a:	bf00      	nop
 800468c:	080045d1 	.word	0x080045d1
 8004690:	20001664 	.word	0x20001664

08004694 <_fwalk_sglue>:
 8004694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004698:	4607      	mov	r7, r0
 800469a:	4688      	mov	r8, r1
 800469c:	4614      	mov	r4, r2
 800469e:	2600      	movs	r6, #0
 80046a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046a4:	f1b9 0901 	subs.w	r9, r9, #1
 80046a8:	d505      	bpl.n	80046b6 <_fwalk_sglue+0x22>
 80046aa:	6824      	ldr	r4, [r4, #0]
 80046ac:	2c00      	cmp	r4, #0
 80046ae:	d1f7      	bne.n	80046a0 <_fwalk_sglue+0xc>
 80046b0:	4630      	mov	r0, r6
 80046b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046b6:	89ab      	ldrh	r3, [r5, #12]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d907      	bls.n	80046cc <_fwalk_sglue+0x38>
 80046bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046c0:	3301      	adds	r3, #1
 80046c2:	d003      	beq.n	80046cc <_fwalk_sglue+0x38>
 80046c4:	4629      	mov	r1, r5
 80046c6:	4638      	mov	r0, r7
 80046c8:	47c0      	blx	r8
 80046ca:	4306      	orrs	r6, r0
 80046cc:	3568      	adds	r5, #104	; 0x68
 80046ce:	e7e9      	b.n	80046a4 <_fwalk_sglue+0x10>

080046d0 <iprintf>:
 80046d0:	b40f      	push	{r0, r1, r2, r3}
 80046d2:	b507      	push	{r0, r1, r2, lr}
 80046d4:	4906      	ldr	r1, [pc, #24]	; (80046f0 <iprintf+0x20>)
 80046d6:	ab04      	add	r3, sp, #16
 80046d8:	6808      	ldr	r0, [r1, #0]
 80046da:	f853 2b04 	ldr.w	r2, [r3], #4
 80046de:	6881      	ldr	r1, [r0, #8]
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	f000 fad3 	bl	8004c8c <_vfiprintf_r>
 80046e6:	b003      	add	sp, #12
 80046e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ec:	b004      	add	sp, #16
 80046ee:	4770      	bx	lr
 80046f0:	20000070 	.word	0x20000070

080046f4 <_puts_r>:
 80046f4:	6a03      	ldr	r3, [r0, #32]
 80046f6:	b570      	push	{r4, r5, r6, lr}
 80046f8:	4605      	mov	r5, r0
 80046fa:	460e      	mov	r6, r1
 80046fc:	6884      	ldr	r4, [r0, #8]
 80046fe:	b90b      	cbnz	r3, 8004704 <_puts_r+0x10>
 8004700:	f7ff ffb0 	bl	8004664 <__sinit>
 8004704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004706:	07db      	lsls	r3, r3, #31
 8004708:	d405      	bmi.n	8004716 <_puts_r+0x22>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	0598      	lsls	r0, r3, #22
 800470e:	d402      	bmi.n	8004716 <_puts_r+0x22>
 8004710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004712:	f000 f99c 	bl	8004a4e <__retarget_lock_acquire_recursive>
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	0719      	lsls	r1, r3, #28
 800471a:	d513      	bpl.n	8004744 <_puts_r+0x50>
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	b18b      	cbz	r3, 8004744 <_puts_r+0x50>
 8004720:	3e01      	subs	r6, #1
 8004722:	68a3      	ldr	r3, [r4, #8]
 8004724:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004728:	3b01      	subs	r3, #1
 800472a:	60a3      	str	r3, [r4, #8]
 800472c:	b9e9      	cbnz	r1, 800476a <_puts_r+0x76>
 800472e:	2b00      	cmp	r3, #0
 8004730:	da2e      	bge.n	8004790 <_puts_r+0x9c>
 8004732:	4622      	mov	r2, r4
 8004734:	210a      	movs	r1, #10
 8004736:	4628      	mov	r0, r5
 8004738:	f000 f87b 	bl	8004832 <__swbuf_r>
 800473c:	3001      	adds	r0, #1
 800473e:	d007      	beq.n	8004750 <_puts_r+0x5c>
 8004740:	250a      	movs	r5, #10
 8004742:	e007      	b.n	8004754 <_puts_r+0x60>
 8004744:	4621      	mov	r1, r4
 8004746:	4628      	mov	r0, r5
 8004748:	f000 f8b0 	bl	80048ac <__swsetup_r>
 800474c:	2800      	cmp	r0, #0
 800474e:	d0e7      	beq.n	8004720 <_puts_r+0x2c>
 8004750:	f04f 35ff 	mov.w	r5, #4294967295
 8004754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004756:	07da      	lsls	r2, r3, #31
 8004758:	d405      	bmi.n	8004766 <_puts_r+0x72>
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	059b      	lsls	r3, r3, #22
 800475e:	d402      	bmi.n	8004766 <_puts_r+0x72>
 8004760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004762:	f000 f975 	bl	8004a50 <__retarget_lock_release_recursive>
 8004766:	4628      	mov	r0, r5
 8004768:	bd70      	pop	{r4, r5, r6, pc}
 800476a:	2b00      	cmp	r3, #0
 800476c:	da04      	bge.n	8004778 <_puts_r+0x84>
 800476e:	69a2      	ldr	r2, [r4, #24]
 8004770:	429a      	cmp	r2, r3
 8004772:	dc06      	bgt.n	8004782 <_puts_r+0x8e>
 8004774:	290a      	cmp	r1, #10
 8004776:	d004      	beq.n	8004782 <_puts_r+0x8e>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	6022      	str	r2, [r4, #0]
 800477e:	7019      	strb	r1, [r3, #0]
 8004780:	e7cf      	b.n	8004722 <_puts_r+0x2e>
 8004782:	4622      	mov	r2, r4
 8004784:	4628      	mov	r0, r5
 8004786:	f000 f854 	bl	8004832 <__swbuf_r>
 800478a:	3001      	adds	r0, #1
 800478c:	d1c9      	bne.n	8004722 <_puts_r+0x2e>
 800478e:	e7df      	b.n	8004750 <_puts_r+0x5c>
 8004790:	250a      	movs	r5, #10
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	6022      	str	r2, [r4, #0]
 8004798:	701d      	strb	r5, [r3, #0]
 800479a:	e7db      	b.n	8004754 <_puts_r+0x60>

0800479c <puts>:
 800479c:	4b02      	ldr	r3, [pc, #8]	; (80047a8 <puts+0xc>)
 800479e:	4601      	mov	r1, r0
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	f7ff bfa7 	b.w	80046f4 <_puts_r>
 80047a6:	bf00      	nop
 80047a8:	20000070 	.word	0x20000070

080047ac <__sread>:
 80047ac:	b510      	push	{r4, lr}
 80047ae:	460c      	mov	r4, r1
 80047b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b4:	f000 f8fc 	bl	80049b0 <_read_r>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	bfab      	itete	ge
 80047bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047be:	89a3      	ldrhlt	r3, [r4, #12]
 80047c0:	181b      	addge	r3, r3, r0
 80047c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047c6:	bfac      	ite	ge
 80047c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80047ca:	81a3      	strhlt	r3, [r4, #12]
 80047cc:	bd10      	pop	{r4, pc}

080047ce <__swrite>:
 80047ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d2:	461f      	mov	r7, r3
 80047d4:	898b      	ldrh	r3, [r1, #12]
 80047d6:	4605      	mov	r5, r0
 80047d8:	05db      	lsls	r3, r3, #23
 80047da:	460c      	mov	r4, r1
 80047dc:	4616      	mov	r6, r2
 80047de:	d505      	bpl.n	80047ec <__swrite+0x1e>
 80047e0:	2302      	movs	r3, #2
 80047e2:	2200      	movs	r2, #0
 80047e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e8:	f000 f8d0 	bl	800498c <_lseek_r>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	4632      	mov	r2, r6
 80047f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047f4:	81a3      	strh	r3, [r4, #12]
 80047f6:	4628      	mov	r0, r5
 80047f8:	463b      	mov	r3, r7
 80047fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004802:	f000 b8e7 	b.w	80049d4 <_write_r>

08004806 <__sseek>:
 8004806:	b510      	push	{r4, lr}
 8004808:	460c      	mov	r4, r1
 800480a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480e:	f000 f8bd 	bl	800498c <_lseek_r>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	bf15      	itete	ne
 8004818:	6560      	strne	r0, [r4, #84]	; 0x54
 800481a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800481e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004822:	81a3      	strheq	r3, [r4, #12]
 8004824:	bf18      	it	ne
 8004826:	81a3      	strhne	r3, [r4, #12]
 8004828:	bd10      	pop	{r4, pc}

0800482a <__sclose>:
 800482a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800482e:	f000 b89d 	b.w	800496c <_close_r>

08004832 <__swbuf_r>:
 8004832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004834:	460e      	mov	r6, r1
 8004836:	4614      	mov	r4, r2
 8004838:	4605      	mov	r5, r0
 800483a:	b118      	cbz	r0, 8004844 <__swbuf_r+0x12>
 800483c:	6a03      	ldr	r3, [r0, #32]
 800483e:	b90b      	cbnz	r3, 8004844 <__swbuf_r+0x12>
 8004840:	f7ff ff10 	bl	8004664 <__sinit>
 8004844:	69a3      	ldr	r3, [r4, #24]
 8004846:	60a3      	str	r3, [r4, #8]
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	071a      	lsls	r2, r3, #28
 800484c:	d525      	bpl.n	800489a <__swbuf_r+0x68>
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	b31b      	cbz	r3, 800489a <__swbuf_r+0x68>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	6922      	ldr	r2, [r4, #16]
 8004856:	b2f6      	uxtb	r6, r6
 8004858:	1a98      	subs	r0, r3, r2
 800485a:	6963      	ldr	r3, [r4, #20]
 800485c:	4637      	mov	r7, r6
 800485e:	4283      	cmp	r3, r0
 8004860:	dc04      	bgt.n	800486c <__swbuf_r+0x3a>
 8004862:	4621      	mov	r1, r4
 8004864:	4628      	mov	r0, r5
 8004866:	f000 fd41 	bl	80052ec <_fflush_r>
 800486a:	b9e0      	cbnz	r0, 80048a6 <__swbuf_r+0x74>
 800486c:	68a3      	ldr	r3, [r4, #8]
 800486e:	3b01      	subs	r3, #1
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	6022      	str	r2, [r4, #0]
 8004878:	701e      	strb	r6, [r3, #0]
 800487a:	6962      	ldr	r2, [r4, #20]
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	429a      	cmp	r2, r3
 8004880:	d004      	beq.n	800488c <__swbuf_r+0x5a>
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	07db      	lsls	r3, r3, #31
 8004886:	d506      	bpl.n	8004896 <__swbuf_r+0x64>
 8004888:	2e0a      	cmp	r6, #10
 800488a:	d104      	bne.n	8004896 <__swbuf_r+0x64>
 800488c:	4621      	mov	r1, r4
 800488e:	4628      	mov	r0, r5
 8004890:	f000 fd2c 	bl	80052ec <_fflush_r>
 8004894:	b938      	cbnz	r0, 80048a6 <__swbuf_r+0x74>
 8004896:	4638      	mov	r0, r7
 8004898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	f000 f805 	bl	80048ac <__swsetup_r>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d0d5      	beq.n	8004852 <__swbuf_r+0x20>
 80048a6:	f04f 37ff 	mov.w	r7, #4294967295
 80048aa:	e7f4      	b.n	8004896 <__swbuf_r+0x64>

080048ac <__swsetup_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <__swsetup_r+0xac>)
 80048b0:	4605      	mov	r5, r0
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	460c      	mov	r4, r1
 80048b6:	b118      	cbz	r0, 80048c0 <__swsetup_r+0x14>
 80048b8:	6a03      	ldr	r3, [r0, #32]
 80048ba:	b90b      	cbnz	r3, 80048c0 <__swsetup_r+0x14>
 80048bc:	f7ff fed2 	bl	8004664 <__sinit>
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048c6:	0718      	lsls	r0, r3, #28
 80048c8:	d422      	bmi.n	8004910 <__swsetup_r+0x64>
 80048ca:	06d9      	lsls	r1, r3, #27
 80048cc:	d407      	bmi.n	80048de <__swsetup_r+0x32>
 80048ce:	2309      	movs	r3, #9
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048d6:	f04f 30ff 	mov.w	r0, #4294967295
 80048da:	81a3      	strh	r3, [r4, #12]
 80048dc:	e034      	b.n	8004948 <__swsetup_r+0x9c>
 80048de:	0758      	lsls	r0, r3, #29
 80048e0:	d512      	bpl.n	8004908 <__swsetup_r+0x5c>
 80048e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048e4:	b141      	cbz	r1, 80048f8 <__swsetup_r+0x4c>
 80048e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048ea:	4299      	cmp	r1, r3
 80048ec:	d002      	beq.n	80048f4 <__swsetup_r+0x48>
 80048ee:	4628      	mov	r0, r5
 80048f0:	f000 f8b0 	bl	8004a54 <_free_r>
 80048f4:	2300      	movs	r3, #0
 80048f6:	6363      	str	r3, [r4, #52]	; 0x34
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048fe:	81a3      	strh	r3, [r4, #12]
 8004900:	2300      	movs	r3, #0
 8004902:	6063      	str	r3, [r4, #4]
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	f043 0308 	orr.w	r3, r3, #8
 800490e:	81a3      	strh	r3, [r4, #12]
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	b94b      	cbnz	r3, 8004928 <__swsetup_r+0x7c>
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800491a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491e:	d003      	beq.n	8004928 <__swsetup_r+0x7c>
 8004920:	4621      	mov	r1, r4
 8004922:	4628      	mov	r0, r5
 8004924:	f000 fd2f 	bl	8005386 <__smakebuf_r>
 8004928:	89a0      	ldrh	r0, [r4, #12]
 800492a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800492e:	f010 0301 	ands.w	r3, r0, #1
 8004932:	d00a      	beq.n	800494a <__swsetup_r+0x9e>
 8004934:	2300      	movs	r3, #0
 8004936:	60a3      	str	r3, [r4, #8]
 8004938:	6963      	ldr	r3, [r4, #20]
 800493a:	425b      	negs	r3, r3
 800493c:	61a3      	str	r3, [r4, #24]
 800493e:	6923      	ldr	r3, [r4, #16]
 8004940:	b943      	cbnz	r3, 8004954 <__swsetup_r+0xa8>
 8004942:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004946:	d1c4      	bne.n	80048d2 <__swsetup_r+0x26>
 8004948:	bd38      	pop	{r3, r4, r5, pc}
 800494a:	0781      	lsls	r1, r0, #30
 800494c:	bf58      	it	pl
 800494e:	6963      	ldrpl	r3, [r4, #20]
 8004950:	60a3      	str	r3, [r4, #8]
 8004952:	e7f4      	b.n	800493e <__swsetup_r+0x92>
 8004954:	2000      	movs	r0, #0
 8004956:	e7f7      	b.n	8004948 <__swsetup_r+0x9c>
 8004958:	20000070 	.word	0x20000070

0800495c <memset>:
 800495c:	4603      	mov	r3, r0
 800495e:	4402      	add	r2, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	d100      	bne.n	8004966 <memset+0xa>
 8004964:	4770      	bx	lr
 8004966:	f803 1b01 	strb.w	r1, [r3], #1
 800496a:	e7f9      	b.n	8004960 <memset+0x4>

0800496c <_close_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	2300      	movs	r3, #0
 8004970:	4d05      	ldr	r5, [pc, #20]	; (8004988 <_close_r+0x1c>)
 8004972:	4604      	mov	r4, r0
 8004974:	4608      	mov	r0, r1
 8004976:	602b      	str	r3, [r5, #0]
 8004978:	f7fb ff85 	bl	8000886 <_close>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_close_r+0x1a>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	b103      	cbz	r3, 8004986 <_close_r+0x1a>
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	20001668 	.word	0x20001668

0800498c <_lseek_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4604      	mov	r4, r0
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	2200      	movs	r2, #0
 8004996:	4d05      	ldr	r5, [pc, #20]	; (80049ac <_lseek_r+0x20>)
 8004998:	602a      	str	r2, [r5, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	f7fb ff97 	bl	80008ce <_lseek>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d102      	bne.n	80049aa <_lseek_r+0x1e>
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	b103      	cbz	r3, 80049aa <_lseek_r+0x1e>
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	20001668 	.word	0x20001668

080049b0 <_read_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	2200      	movs	r2, #0
 80049ba:	4d05      	ldr	r5, [pc, #20]	; (80049d0 <_read_r+0x20>)
 80049bc:	602a      	str	r2, [r5, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	f7fb ff44 	bl	800084c <_read>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_read_r+0x1e>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_read_r+0x1e>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	20001668 	.word	0x20001668

080049d4 <_write_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4604      	mov	r4, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	2200      	movs	r2, #0
 80049de:	4d05      	ldr	r5, [pc, #20]	; (80049f4 <_write_r+0x20>)
 80049e0:	602a      	str	r2, [r5, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f7fb fbdc 	bl	80001a0 <_write>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_write_r+0x1e>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_write_r+0x1e>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20001668 	.word	0x20001668

080049f8 <__errno>:
 80049f8:	4b01      	ldr	r3, [pc, #4]	; (8004a00 <__errno+0x8>)
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000070 	.word	0x20000070

08004a04 <__libc_init_array>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	2600      	movs	r6, #0
 8004a08:	4d0c      	ldr	r5, [pc, #48]	; (8004a3c <__libc_init_array+0x38>)
 8004a0a:	4c0d      	ldr	r4, [pc, #52]	; (8004a40 <__libc_init_array+0x3c>)
 8004a0c:	1b64      	subs	r4, r4, r5
 8004a0e:	10a4      	asrs	r4, r4, #2
 8004a10:	42a6      	cmp	r6, r4
 8004a12:	d109      	bne.n	8004a28 <__libc_init_array+0x24>
 8004a14:	f000 fd34 	bl	8005480 <_init>
 8004a18:	2600      	movs	r6, #0
 8004a1a:	4d0a      	ldr	r5, [pc, #40]	; (8004a44 <__libc_init_array+0x40>)
 8004a1c:	4c0a      	ldr	r4, [pc, #40]	; (8004a48 <__libc_init_array+0x44>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	42a6      	cmp	r6, r4
 8004a24:	d105      	bne.n	8004a32 <__libc_init_array+0x2e>
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2c:	4798      	blx	r3
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7ee      	b.n	8004a10 <__libc_init_array+0xc>
 8004a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a36:	4798      	blx	r3
 8004a38:	3601      	adds	r6, #1
 8004a3a:	e7f2      	b.n	8004a22 <__libc_init_array+0x1e>
 8004a3c:	080062fc 	.word	0x080062fc
 8004a40:	080062fc 	.word	0x080062fc
 8004a44:	080062fc 	.word	0x080062fc
 8004a48:	08006300 	.word	0x08006300

08004a4c <__retarget_lock_init_recursive>:
 8004a4c:	4770      	bx	lr

08004a4e <__retarget_lock_acquire_recursive>:
 8004a4e:	4770      	bx	lr

08004a50 <__retarget_lock_release_recursive>:
 8004a50:	4770      	bx	lr
	...

08004a54 <_free_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4605      	mov	r5, r0
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	d040      	beq.n	8004ade <_free_r+0x8a>
 8004a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a60:	1f0c      	subs	r4, r1, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bfb8      	it	lt
 8004a66:	18e4      	addlt	r4, r4, r3
 8004a68:	f000 f8dc 	bl	8004c24 <__malloc_lock>
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <_free_r+0x8c>)
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	b933      	cbnz	r3, 8004a80 <_free_r+0x2c>
 8004a72:	6063      	str	r3, [r4, #4]
 8004a74:	6014      	str	r4, [r2, #0]
 8004a76:	4628      	mov	r0, r5
 8004a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a7c:	f000 b8d8 	b.w	8004c30 <__malloc_unlock>
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d908      	bls.n	8004a96 <_free_r+0x42>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	1821      	adds	r1, r4, r0
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	bf01      	itttt	eq
 8004a8c:	6819      	ldreq	r1, [r3, #0]
 8004a8e:	685b      	ldreq	r3, [r3, #4]
 8004a90:	1809      	addeq	r1, r1, r0
 8004a92:	6021      	streq	r1, [r4, #0]
 8004a94:	e7ed      	b.n	8004a72 <_free_r+0x1e>
 8004a96:	461a      	mov	r2, r3
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b10b      	cbz	r3, 8004aa0 <_free_r+0x4c>
 8004a9c:	42a3      	cmp	r3, r4
 8004a9e:	d9fa      	bls.n	8004a96 <_free_r+0x42>
 8004aa0:	6811      	ldr	r1, [r2, #0]
 8004aa2:	1850      	adds	r0, r2, r1
 8004aa4:	42a0      	cmp	r0, r4
 8004aa6:	d10b      	bne.n	8004ac0 <_free_r+0x6c>
 8004aa8:	6820      	ldr	r0, [r4, #0]
 8004aaa:	4401      	add	r1, r0
 8004aac:	1850      	adds	r0, r2, r1
 8004aae:	4283      	cmp	r3, r0
 8004ab0:	6011      	str	r1, [r2, #0]
 8004ab2:	d1e0      	bne.n	8004a76 <_free_r+0x22>
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4408      	add	r0, r1
 8004aba:	6010      	str	r0, [r2, #0]
 8004abc:	6053      	str	r3, [r2, #4]
 8004abe:	e7da      	b.n	8004a76 <_free_r+0x22>
 8004ac0:	d902      	bls.n	8004ac8 <_free_r+0x74>
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	e7d6      	b.n	8004a76 <_free_r+0x22>
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	1821      	adds	r1, r4, r0
 8004acc:	428b      	cmp	r3, r1
 8004ace:	bf01      	itttt	eq
 8004ad0:	6819      	ldreq	r1, [r3, #0]
 8004ad2:	685b      	ldreq	r3, [r3, #4]
 8004ad4:	1809      	addeq	r1, r1, r0
 8004ad6:	6021      	streq	r1, [r4, #0]
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	6054      	str	r4, [r2, #4]
 8004adc:	e7cb      	b.n	8004a76 <_free_r+0x22>
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	20001670 	.word	0x20001670

08004ae4 <sbrk_aligned>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4e0e      	ldr	r6, [pc, #56]	; (8004b20 <sbrk_aligned+0x3c>)
 8004ae8:	460c      	mov	r4, r1
 8004aea:	6831      	ldr	r1, [r6, #0]
 8004aec:	4605      	mov	r5, r0
 8004aee:	b911      	cbnz	r1, 8004af6 <sbrk_aligned+0x12>
 8004af0:	f000 fca8 	bl	8005444 <_sbrk_r>
 8004af4:	6030      	str	r0, [r6, #0]
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 fca3 	bl	8005444 <_sbrk_r>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	d00a      	beq.n	8004b18 <sbrk_aligned+0x34>
 8004b02:	1cc4      	adds	r4, r0, #3
 8004b04:	f024 0403 	bic.w	r4, r4, #3
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d007      	beq.n	8004b1c <sbrk_aligned+0x38>
 8004b0c:	1a21      	subs	r1, r4, r0
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 fc98 	bl	8005444 <_sbrk_r>
 8004b14:	3001      	adds	r0, #1
 8004b16:	d101      	bne.n	8004b1c <sbrk_aligned+0x38>
 8004b18:	f04f 34ff 	mov.w	r4, #4294967295
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	20001674 	.word	0x20001674

08004b24 <_malloc_r>:
 8004b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b28:	1ccd      	adds	r5, r1, #3
 8004b2a:	f025 0503 	bic.w	r5, r5, #3
 8004b2e:	3508      	adds	r5, #8
 8004b30:	2d0c      	cmp	r5, #12
 8004b32:	bf38      	it	cc
 8004b34:	250c      	movcc	r5, #12
 8004b36:	2d00      	cmp	r5, #0
 8004b38:	4607      	mov	r7, r0
 8004b3a:	db01      	blt.n	8004b40 <_malloc_r+0x1c>
 8004b3c:	42a9      	cmp	r1, r5
 8004b3e:	d905      	bls.n	8004b4c <_malloc_r+0x28>
 8004b40:	230c      	movs	r3, #12
 8004b42:	2600      	movs	r6, #0
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4630      	mov	r0, r6
 8004b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c20 <_malloc_r+0xfc>
 8004b50:	f000 f868 	bl	8004c24 <__malloc_lock>
 8004b54:	f8d8 3000 	ldr.w	r3, [r8]
 8004b58:	461c      	mov	r4, r3
 8004b5a:	bb5c      	cbnz	r4, 8004bb4 <_malloc_r+0x90>
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	4638      	mov	r0, r7
 8004b60:	f7ff ffc0 	bl	8004ae4 <sbrk_aligned>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	4604      	mov	r4, r0
 8004b68:	d155      	bne.n	8004c16 <_malloc_r+0xf2>
 8004b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8004b6e:	4626      	mov	r6, r4
 8004b70:	2e00      	cmp	r6, #0
 8004b72:	d145      	bne.n	8004c00 <_malloc_r+0xdc>
 8004b74:	2c00      	cmp	r4, #0
 8004b76:	d048      	beq.n	8004c0a <_malloc_r+0xe6>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	eb04 0903 	add.w	r9, r4, r3
 8004b82:	f000 fc5f 	bl	8005444 <_sbrk_r>
 8004b86:	4581      	cmp	r9, r0
 8004b88:	d13f      	bne.n	8004c0a <_malloc_r+0xe6>
 8004b8a:	6821      	ldr	r1, [r4, #0]
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	1a6d      	subs	r5, r5, r1
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7ff ffa7 	bl	8004ae4 <sbrk_aligned>
 8004b96:	3001      	adds	r0, #1
 8004b98:	d037      	beq.n	8004c0a <_malloc_r+0xe6>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	442b      	add	r3, r5
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d038      	beq.n	8004c1a <_malloc_r+0xf6>
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	42a2      	cmp	r2, r4
 8004bac:	d12b      	bne.n	8004c06 <_malloc_r+0xe2>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	e00f      	b.n	8004bd4 <_malloc_r+0xb0>
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	1b52      	subs	r2, r2, r5
 8004bb8:	d41f      	bmi.n	8004bfa <_malloc_r+0xd6>
 8004bba:	2a0b      	cmp	r2, #11
 8004bbc:	d917      	bls.n	8004bee <_malloc_r+0xca>
 8004bbe:	1961      	adds	r1, r4, r5
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	6025      	str	r5, [r4, #0]
 8004bc4:	bf18      	it	ne
 8004bc6:	6059      	strne	r1, [r3, #4]
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	bf08      	it	eq
 8004bcc:	f8c8 1000 	streq.w	r1, [r8]
 8004bd0:	5162      	str	r2, [r4, r5]
 8004bd2:	604b      	str	r3, [r1, #4]
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f104 060b 	add.w	r6, r4, #11
 8004bda:	f000 f829 	bl	8004c30 <__malloc_unlock>
 8004bde:	f026 0607 	bic.w	r6, r6, #7
 8004be2:	1d23      	adds	r3, r4, #4
 8004be4:	1af2      	subs	r2, r6, r3
 8004be6:	d0ae      	beq.n	8004b46 <_malloc_r+0x22>
 8004be8:	1b9b      	subs	r3, r3, r6
 8004bea:	50a3      	str	r3, [r4, r2]
 8004bec:	e7ab      	b.n	8004b46 <_malloc_r+0x22>
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	6862      	ldr	r2, [r4, #4]
 8004bf2:	d1dd      	bne.n	8004bb0 <_malloc_r+0x8c>
 8004bf4:	f8c8 2000 	str.w	r2, [r8]
 8004bf8:	e7ec      	b.n	8004bd4 <_malloc_r+0xb0>
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	6864      	ldr	r4, [r4, #4]
 8004bfe:	e7ac      	b.n	8004b5a <_malloc_r+0x36>
 8004c00:	4634      	mov	r4, r6
 8004c02:	6876      	ldr	r6, [r6, #4]
 8004c04:	e7b4      	b.n	8004b70 <_malloc_r+0x4c>
 8004c06:	4613      	mov	r3, r2
 8004c08:	e7cc      	b.n	8004ba4 <_malloc_r+0x80>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	f000 f80e 	bl	8004c30 <__malloc_unlock>
 8004c14:	e797      	b.n	8004b46 <_malloc_r+0x22>
 8004c16:	6025      	str	r5, [r4, #0]
 8004c18:	e7dc      	b.n	8004bd4 <_malloc_r+0xb0>
 8004c1a:	605b      	str	r3, [r3, #4]
 8004c1c:	deff      	udf	#255	; 0xff
 8004c1e:	bf00      	nop
 8004c20:	20001670 	.word	0x20001670

08004c24 <__malloc_lock>:
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <__malloc_lock+0x8>)
 8004c26:	f7ff bf12 	b.w	8004a4e <__retarget_lock_acquire_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	2000166c 	.word	0x2000166c

08004c30 <__malloc_unlock>:
 8004c30:	4801      	ldr	r0, [pc, #4]	; (8004c38 <__malloc_unlock+0x8>)
 8004c32:	f7ff bf0d 	b.w	8004a50 <__retarget_lock_release_recursive>
 8004c36:	bf00      	nop
 8004c38:	2000166c 	.word	0x2000166c

08004c3c <__sfputc_r>:
 8004c3c:	6893      	ldr	r3, [r2, #8]
 8004c3e:	b410      	push	{r4}
 8004c40:	3b01      	subs	r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	6093      	str	r3, [r2, #8]
 8004c46:	da07      	bge.n	8004c58 <__sfputc_r+0x1c>
 8004c48:	6994      	ldr	r4, [r2, #24]
 8004c4a:	42a3      	cmp	r3, r4
 8004c4c:	db01      	blt.n	8004c52 <__sfputc_r+0x16>
 8004c4e:	290a      	cmp	r1, #10
 8004c50:	d102      	bne.n	8004c58 <__sfputc_r+0x1c>
 8004c52:	bc10      	pop	{r4}
 8004c54:	f7ff bded 	b.w	8004832 <__swbuf_r>
 8004c58:	6813      	ldr	r3, [r2, #0]
 8004c5a:	1c58      	adds	r0, r3, #1
 8004c5c:	6010      	str	r0, [r2, #0]
 8004c5e:	7019      	strb	r1, [r3, #0]
 8004c60:	4608      	mov	r0, r1
 8004c62:	bc10      	pop	{r4}
 8004c64:	4770      	bx	lr

08004c66 <__sfputs_r>:
 8004c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c68:	4606      	mov	r6, r0
 8004c6a:	460f      	mov	r7, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	18d5      	adds	r5, r2, r3
 8004c70:	42ac      	cmp	r4, r5
 8004c72:	d101      	bne.n	8004c78 <__sfputs_r+0x12>
 8004c74:	2000      	movs	r0, #0
 8004c76:	e007      	b.n	8004c88 <__sfputs_r+0x22>
 8004c78:	463a      	mov	r2, r7
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c80:	f7ff ffdc 	bl	8004c3c <__sfputc_r>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d1f3      	bne.n	8004c70 <__sfputs_r+0xa>
 8004c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c8c <_vfiprintf_r>:
 8004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c90:	460d      	mov	r5, r1
 8004c92:	4614      	mov	r4, r2
 8004c94:	4698      	mov	r8, r3
 8004c96:	4606      	mov	r6, r0
 8004c98:	b09d      	sub	sp, #116	; 0x74
 8004c9a:	b118      	cbz	r0, 8004ca4 <_vfiprintf_r+0x18>
 8004c9c:	6a03      	ldr	r3, [r0, #32]
 8004c9e:	b90b      	cbnz	r3, 8004ca4 <_vfiprintf_r+0x18>
 8004ca0:	f7ff fce0 	bl	8004664 <__sinit>
 8004ca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ca6:	07d9      	lsls	r1, r3, #31
 8004ca8:	d405      	bmi.n	8004cb6 <_vfiprintf_r+0x2a>
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	059a      	lsls	r2, r3, #22
 8004cae:	d402      	bmi.n	8004cb6 <_vfiprintf_r+0x2a>
 8004cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cb2:	f7ff fecc 	bl	8004a4e <__retarget_lock_acquire_recursive>
 8004cb6:	89ab      	ldrh	r3, [r5, #12]
 8004cb8:	071b      	lsls	r3, r3, #28
 8004cba:	d501      	bpl.n	8004cc0 <_vfiprintf_r+0x34>
 8004cbc:	692b      	ldr	r3, [r5, #16]
 8004cbe:	b99b      	cbnz	r3, 8004ce8 <_vfiprintf_r+0x5c>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f7ff fdf2 	bl	80048ac <__swsetup_r>
 8004cc8:	b170      	cbz	r0, 8004ce8 <_vfiprintf_r+0x5c>
 8004cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ccc:	07dc      	lsls	r4, r3, #31
 8004cce:	d504      	bpl.n	8004cda <_vfiprintf_r+0x4e>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	b01d      	add	sp, #116	; 0x74
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	89ab      	ldrh	r3, [r5, #12]
 8004cdc:	0598      	lsls	r0, r3, #22
 8004cde:	d4f7      	bmi.n	8004cd0 <_vfiprintf_r+0x44>
 8004ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ce2:	f7ff feb5 	bl	8004a50 <__retarget_lock_release_recursive>
 8004ce6:	e7f3      	b.n	8004cd0 <_vfiprintf_r+0x44>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9309      	str	r3, [sp, #36]	; 0x24
 8004cec:	2320      	movs	r3, #32
 8004cee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cf2:	2330      	movs	r3, #48	; 0x30
 8004cf4:	f04f 0901 	mov.w	r9, #1
 8004cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004eac <_vfiprintf_r+0x220>
 8004d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d04:	4623      	mov	r3, r4
 8004d06:	469a      	mov	sl, r3
 8004d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d0c:	b10a      	cbz	r2, 8004d12 <_vfiprintf_r+0x86>
 8004d0e:	2a25      	cmp	r2, #37	; 0x25
 8004d10:	d1f9      	bne.n	8004d06 <_vfiprintf_r+0x7a>
 8004d12:	ebba 0b04 	subs.w	fp, sl, r4
 8004d16:	d00b      	beq.n	8004d30 <_vfiprintf_r+0xa4>
 8004d18:	465b      	mov	r3, fp
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f7ff ffa1 	bl	8004c66 <__sfputs_r>
 8004d24:	3001      	adds	r0, #1
 8004d26:	f000 80a9 	beq.w	8004e7c <_vfiprintf_r+0x1f0>
 8004d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d2c:	445a      	add	r2, fp
 8004d2e:	9209      	str	r2, [sp, #36]	; 0x24
 8004d30:	f89a 3000 	ldrb.w	r3, [sl]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80a1 	beq.w	8004e7c <_vfiprintf_r+0x1f0>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d44:	f10a 0a01 	add.w	sl, sl, #1
 8004d48:	9304      	str	r3, [sp, #16]
 8004d4a:	9307      	str	r3, [sp, #28]
 8004d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d50:	931a      	str	r3, [sp, #104]	; 0x68
 8004d52:	4654      	mov	r4, sl
 8004d54:	2205      	movs	r2, #5
 8004d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5a:	4854      	ldr	r0, [pc, #336]	; (8004eac <_vfiprintf_r+0x220>)
 8004d5c:	f000 fb82 	bl	8005464 <memchr>
 8004d60:	9a04      	ldr	r2, [sp, #16]
 8004d62:	b9d8      	cbnz	r0, 8004d9c <_vfiprintf_r+0x110>
 8004d64:	06d1      	lsls	r1, r2, #27
 8004d66:	bf44      	itt	mi
 8004d68:	2320      	movmi	r3, #32
 8004d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d6e:	0713      	lsls	r3, r2, #28
 8004d70:	bf44      	itt	mi
 8004d72:	232b      	movmi	r3, #43	; 0x2b
 8004d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d78:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7e:	d015      	beq.n	8004dac <_vfiprintf_r+0x120>
 8004d80:	4654      	mov	r4, sl
 8004d82:	2000      	movs	r0, #0
 8004d84:	f04f 0c0a 	mov.w	ip, #10
 8004d88:	9a07      	ldr	r2, [sp, #28]
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d90:	3b30      	subs	r3, #48	; 0x30
 8004d92:	2b09      	cmp	r3, #9
 8004d94:	d94d      	bls.n	8004e32 <_vfiprintf_r+0x1a6>
 8004d96:	b1b0      	cbz	r0, 8004dc6 <_vfiprintf_r+0x13a>
 8004d98:	9207      	str	r2, [sp, #28]
 8004d9a:	e014      	b.n	8004dc6 <_vfiprintf_r+0x13a>
 8004d9c:	eba0 0308 	sub.w	r3, r0, r8
 8004da0:	fa09 f303 	lsl.w	r3, r9, r3
 8004da4:	4313      	orrs	r3, r2
 8004da6:	46a2      	mov	sl, r4
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	e7d2      	b.n	8004d52 <_vfiprintf_r+0xc6>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	1d19      	adds	r1, r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	9103      	str	r1, [sp, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bfbb      	ittet	lt
 8004db8:	425b      	neglt	r3, r3
 8004dba:	f042 0202 	orrlt.w	r2, r2, #2
 8004dbe:	9307      	strge	r3, [sp, #28]
 8004dc0:	9307      	strlt	r3, [sp, #28]
 8004dc2:	bfb8      	it	lt
 8004dc4:	9204      	strlt	r2, [sp, #16]
 8004dc6:	7823      	ldrb	r3, [r4, #0]
 8004dc8:	2b2e      	cmp	r3, #46	; 0x2e
 8004dca:	d10c      	bne.n	8004de6 <_vfiprintf_r+0x15a>
 8004dcc:	7863      	ldrb	r3, [r4, #1]
 8004dce:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd0:	d134      	bne.n	8004e3c <_vfiprintf_r+0x1b0>
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	3402      	adds	r4, #2
 8004dd6:	1d1a      	adds	r2, r3, #4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	9203      	str	r2, [sp, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bfb8      	it	lt
 8004de0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004de4:	9305      	str	r3, [sp, #20]
 8004de6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004eb0 <_vfiprintf_r+0x224>
 8004dea:	2203      	movs	r2, #3
 8004dec:	4650      	mov	r0, sl
 8004dee:	7821      	ldrb	r1, [r4, #0]
 8004df0:	f000 fb38 	bl	8005464 <memchr>
 8004df4:	b138      	cbz	r0, 8004e06 <_vfiprintf_r+0x17a>
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	9b04      	ldr	r3, [sp, #16]
 8004dfa:	eba0 000a 	sub.w	r0, r0, sl
 8004dfe:	4082      	lsls	r2, r0
 8004e00:	4313      	orrs	r3, r2
 8004e02:	3401      	adds	r4, #1
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0a:	2206      	movs	r2, #6
 8004e0c:	4829      	ldr	r0, [pc, #164]	; (8004eb4 <_vfiprintf_r+0x228>)
 8004e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e12:	f000 fb27 	bl	8005464 <memchr>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d03f      	beq.n	8004e9a <_vfiprintf_r+0x20e>
 8004e1a:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <_vfiprintf_r+0x22c>)
 8004e1c:	bb1b      	cbnz	r3, 8004e66 <_vfiprintf_r+0x1da>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	3307      	adds	r3, #7
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	3308      	adds	r3, #8
 8004e28:	9303      	str	r3, [sp, #12]
 8004e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2c:	443b      	add	r3, r7
 8004e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e30:	e768      	b.n	8004d04 <_vfiprintf_r+0x78>
 8004e32:	460c      	mov	r4, r1
 8004e34:	2001      	movs	r0, #1
 8004e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e3a:	e7a6      	b.n	8004d8a <_vfiprintf_r+0xfe>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f04f 0c0a 	mov.w	ip, #10
 8004e42:	4619      	mov	r1, r3
 8004e44:	3401      	adds	r4, #1
 8004e46:	9305      	str	r3, [sp, #20]
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e4e:	3a30      	subs	r2, #48	; 0x30
 8004e50:	2a09      	cmp	r2, #9
 8004e52:	d903      	bls.n	8004e5c <_vfiprintf_r+0x1d0>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0c6      	beq.n	8004de6 <_vfiprintf_r+0x15a>
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	e7c4      	b.n	8004de6 <_vfiprintf_r+0x15a>
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	2301      	movs	r3, #1
 8004e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e64:	e7f0      	b.n	8004e48 <_vfiprintf_r+0x1bc>
 8004e66:	ab03      	add	r3, sp, #12
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	462a      	mov	r2, r5
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <_vfiprintf_r+0x230>)
 8004e70:	a904      	add	r1, sp, #16
 8004e72:	f3af 8000 	nop.w
 8004e76:	4607      	mov	r7, r0
 8004e78:	1c78      	adds	r0, r7, #1
 8004e7a:	d1d6      	bne.n	8004e2a <_vfiprintf_r+0x19e>
 8004e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e7e:	07d9      	lsls	r1, r3, #31
 8004e80:	d405      	bmi.n	8004e8e <_vfiprintf_r+0x202>
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	059a      	lsls	r2, r3, #22
 8004e86:	d402      	bmi.n	8004e8e <_vfiprintf_r+0x202>
 8004e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e8a:	f7ff fde1 	bl	8004a50 <__retarget_lock_release_recursive>
 8004e8e:	89ab      	ldrh	r3, [r5, #12]
 8004e90:	065b      	lsls	r3, r3, #25
 8004e92:	f53f af1d 	bmi.w	8004cd0 <_vfiprintf_r+0x44>
 8004e96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e98:	e71c      	b.n	8004cd4 <_vfiprintf_r+0x48>
 8004e9a:	ab03      	add	r3, sp, #12
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	462a      	mov	r2, r5
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <_vfiprintf_r+0x230>)
 8004ea4:	a904      	add	r1, sp, #16
 8004ea6:	f000 f87d 	bl	8004fa4 <_printf_i>
 8004eaa:	e7e4      	b.n	8004e76 <_vfiprintf_r+0x1ea>
 8004eac:	080062c6 	.word	0x080062c6
 8004eb0:	080062cc 	.word	0x080062cc
 8004eb4:	080062d0 	.word	0x080062d0
 8004eb8:	00000000 	.word	0x00000000
 8004ebc:	08004c67 	.word	0x08004c67

08004ec0 <_printf_common>:
 8004ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	4699      	mov	r9, r3
 8004ec8:	688a      	ldr	r2, [r1, #8]
 8004eca:	690b      	ldr	r3, [r1, #16]
 8004ecc:	4607      	mov	r7, r0
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	bfb8      	it	lt
 8004ed2:	4613      	movlt	r3, r2
 8004ed4:	6033      	str	r3, [r6, #0]
 8004ed6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eda:	460c      	mov	r4, r1
 8004edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee0:	b10a      	cbz	r2, 8004ee6 <_printf_common+0x26>
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	6033      	str	r3, [r6, #0]
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	0699      	lsls	r1, r3, #26
 8004eea:	bf42      	ittt	mi
 8004eec:	6833      	ldrmi	r3, [r6, #0]
 8004eee:	3302      	addmi	r3, #2
 8004ef0:	6033      	strmi	r3, [r6, #0]
 8004ef2:	6825      	ldr	r5, [r4, #0]
 8004ef4:	f015 0506 	ands.w	r5, r5, #6
 8004ef8:	d106      	bne.n	8004f08 <_printf_common+0x48>
 8004efa:	f104 0a19 	add.w	sl, r4, #25
 8004efe:	68e3      	ldr	r3, [r4, #12]
 8004f00:	6832      	ldr	r2, [r6, #0]
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	42ab      	cmp	r3, r5
 8004f06:	dc2b      	bgt.n	8004f60 <_printf_common+0xa0>
 8004f08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f0c:	1e13      	subs	r3, r2, #0
 8004f0e:	6822      	ldr	r2, [r4, #0]
 8004f10:	bf18      	it	ne
 8004f12:	2301      	movne	r3, #1
 8004f14:	0692      	lsls	r2, r2, #26
 8004f16:	d430      	bmi.n	8004f7a <_printf_common+0xba>
 8004f18:	4649      	mov	r1, r9
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f20:	47c0      	blx	r8
 8004f22:	3001      	adds	r0, #1
 8004f24:	d023      	beq.n	8004f6e <_printf_common+0xae>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	6922      	ldr	r2, [r4, #16]
 8004f2a:	f003 0306 	and.w	r3, r3, #6
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	bf14      	ite	ne
 8004f32:	2500      	movne	r5, #0
 8004f34:	6833      	ldreq	r3, [r6, #0]
 8004f36:	f04f 0600 	mov.w	r6, #0
 8004f3a:	bf08      	it	eq
 8004f3c:	68e5      	ldreq	r5, [r4, #12]
 8004f3e:	f104 041a 	add.w	r4, r4, #26
 8004f42:	bf08      	it	eq
 8004f44:	1aed      	subeq	r5, r5, r3
 8004f46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f4a:	bf08      	it	eq
 8004f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f50:	4293      	cmp	r3, r2
 8004f52:	bfc4      	itt	gt
 8004f54:	1a9b      	subgt	r3, r3, r2
 8004f56:	18ed      	addgt	r5, r5, r3
 8004f58:	42b5      	cmp	r5, r6
 8004f5a:	d11a      	bne.n	8004f92 <_printf_common+0xd2>
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e008      	b.n	8004f72 <_printf_common+0xb2>
 8004f60:	2301      	movs	r3, #1
 8004f62:	4652      	mov	r2, sl
 8004f64:	4649      	mov	r1, r9
 8004f66:	4638      	mov	r0, r7
 8004f68:	47c0      	blx	r8
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d103      	bne.n	8004f76 <_printf_common+0xb6>
 8004f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f76:	3501      	adds	r5, #1
 8004f78:	e7c1      	b.n	8004efe <_printf_common+0x3e>
 8004f7a:	2030      	movs	r0, #48	; 0x30
 8004f7c:	18e1      	adds	r1, r4, r3
 8004f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f88:	4422      	add	r2, r4
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f90:	e7c2      	b.n	8004f18 <_printf_common+0x58>
 8004f92:	2301      	movs	r3, #1
 8004f94:	4622      	mov	r2, r4
 8004f96:	4649      	mov	r1, r9
 8004f98:	4638      	mov	r0, r7
 8004f9a:	47c0      	blx	r8
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d0e6      	beq.n	8004f6e <_printf_common+0xae>
 8004fa0:	3601      	adds	r6, #1
 8004fa2:	e7d9      	b.n	8004f58 <_printf_common+0x98>

08004fa4 <_printf_i>:
 8004fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa8:	7e0f      	ldrb	r7, [r1, #24]
 8004faa:	4691      	mov	r9, r2
 8004fac:	2f78      	cmp	r7, #120	; 0x78
 8004fae:	4680      	mov	r8, r0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	469a      	mov	sl, r3
 8004fb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fba:	d807      	bhi.n	8004fcc <_printf_i+0x28>
 8004fbc:	2f62      	cmp	r7, #98	; 0x62
 8004fbe:	d80a      	bhi.n	8004fd6 <_printf_i+0x32>
 8004fc0:	2f00      	cmp	r7, #0
 8004fc2:	f000 80d5 	beq.w	8005170 <_printf_i+0x1cc>
 8004fc6:	2f58      	cmp	r7, #88	; 0x58
 8004fc8:	f000 80c1 	beq.w	800514e <_printf_i+0x1aa>
 8004fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fd4:	e03a      	b.n	800504c <_printf_i+0xa8>
 8004fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fda:	2b15      	cmp	r3, #21
 8004fdc:	d8f6      	bhi.n	8004fcc <_printf_i+0x28>
 8004fde:	a101      	add	r1, pc, #4	; (adr r1, 8004fe4 <_printf_i+0x40>)
 8004fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fe4:	0800503d 	.word	0x0800503d
 8004fe8:	08005051 	.word	0x08005051
 8004fec:	08004fcd 	.word	0x08004fcd
 8004ff0:	08004fcd 	.word	0x08004fcd
 8004ff4:	08004fcd 	.word	0x08004fcd
 8004ff8:	08004fcd 	.word	0x08004fcd
 8004ffc:	08005051 	.word	0x08005051
 8005000:	08004fcd 	.word	0x08004fcd
 8005004:	08004fcd 	.word	0x08004fcd
 8005008:	08004fcd 	.word	0x08004fcd
 800500c:	08004fcd 	.word	0x08004fcd
 8005010:	08005157 	.word	0x08005157
 8005014:	0800507d 	.word	0x0800507d
 8005018:	08005111 	.word	0x08005111
 800501c:	08004fcd 	.word	0x08004fcd
 8005020:	08004fcd 	.word	0x08004fcd
 8005024:	08005179 	.word	0x08005179
 8005028:	08004fcd 	.word	0x08004fcd
 800502c:	0800507d 	.word	0x0800507d
 8005030:	08004fcd 	.word	0x08004fcd
 8005034:	08004fcd 	.word	0x08004fcd
 8005038:	08005119 	.word	0x08005119
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	602a      	str	r2, [r5, #0]
 8005044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800504c:	2301      	movs	r3, #1
 800504e:	e0a0      	b.n	8005192 <_printf_i+0x1ee>
 8005050:	6820      	ldr	r0, [r4, #0]
 8005052:	682b      	ldr	r3, [r5, #0]
 8005054:	0607      	lsls	r7, r0, #24
 8005056:	f103 0104 	add.w	r1, r3, #4
 800505a:	6029      	str	r1, [r5, #0]
 800505c:	d501      	bpl.n	8005062 <_printf_i+0xbe>
 800505e:	681e      	ldr	r6, [r3, #0]
 8005060:	e003      	b.n	800506a <_printf_i+0xc6>
 8005062:	0646      	lsls	r6, r0, #25
 8005064:	d5fb      	bpl.n	800505e <_printf_i+0xba>
 8005066:	f9b3 6000 	ldrsh.w	r6, [r3]
 800506a:	2e00      	cmp	r6, #0
 800506c:	da03      	bge.n	8005076 <_printf_i+0xd2>
 800506e:	232d      	movs	r3, #45	; 0x2d
 8005070:	4276      	negs	r6, r6
 8005072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005076:	230a      	movs	r3, #10
 8005078:	4859      	ldr	r0, [pc, #356]	; (80051e0 <_printf_i+0x23c>)
 800507a:	e012      	b.n	80050a2 <_printf_i+0xfe>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	1d19      	adds	r1, r3, #4
 8005082:	6029      	str	r1, [r5, #0]
 8005084:	0605      	lsls	r5, r0, #24
 8005086:	d501      	bpl.n	800508c <_printf_i+0xe8>
 8005088:	681e      	ldr	r6, [r3, #0]
 800508a:	e002      	b.n	8005092 <_printf_i+0xee>
 800508c:	0641      	lsls	r1, r0, #25
 800508e:	d5fb      	bpl.n	8005088 <_printf_i+0xe4>
 8005090:	881e      	ldrh	r6, [r3, #0]
 8005092:	2f6f      	cmp	r7, #111	; 0x6f
 8005094:	bf0c      	ite	eq
 8005096:	2308      	moveq	r3, #8
 8005098:	230a      	movne	r3, #10
 800509a:	4851      	ldr	r0, [pc, #324]	; (80051e0 <_printf_i+0x23c>)
 800509c:	2100      	movs	r1, #0
 800509e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050a2:	6865      	ldr	r5, [r4, #4]
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	bfa8      	it	ge
 80050a8:	6821      	ldrge	r1, [r4, #0]
 80050aa:	60a5      	str	r5, [r4, #8]
 80050ac:	bfa4      	itt	ge
 80050ae:	f021 0104 	bicge.w	r1, r1, #4
 80050b2:	6021      	strge	r1, [r4, #0]
 80050b4:	b90e      	cbnz	r6, 80050ba <_printf_i+0x116>
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	d04b      	beq.n	8005152 <_printf_i+0x1ae>
 80050ba:	4615      	mov	r5, r2
 80050bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80050c0:	fb03 6711 	mls	r7, r3, r1, r6
 80050c4:	5dc7      	ldrb	r7, [r0, r7]
 80050c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050ca:	4637      	mov	r7, r6
 80050cc:	42bb      	cmp	r3, r7
 80050ce:	460e      	mov	r6, r1
 80050d0:	d9f4      	bls.n	80050bc <_printf_i+0x118>
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d10b      	bne.n	80050ee <_printf_i+0x14a>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	07de      	lsls	r6, r3, #31
 80050da:	d508      	bpl.n	80050ee <_printf_i+0x14a>
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	6861      	ldr	r1, [r4, #4]
 80050e0:	4299      	cmp	r1, r3
 80050e2:	bfde      	ittt	le
 80050e4:	2330      	movle	r3, #48	; 0x30
 80050e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ee:	1b52      	subs	r2, r2, r5
 80050f0:	6122      	str	r2, [r4, #16]
 80050f2:	464b      	mov	r3, r9
 80050f4:	4621      	mov	r1, r4
 80050f6:	4640      	mov	r0, r8
 80050f8:	f8cd a000 	str.w	sl, [sp]
 80050fc:	aa03      	add	r2, sp, #12
 80050fe:	f7ff fedf 	bl	8004ec0 <_printf_common>
 8005102:	3001      	adds	r0, #1
 8005104:	d14a      	bne.n	800519c <_printf_i+0x1f8>
 8005106:	f04f 30ff 	mov.w	r0, #4294967295
 800510a:	b004      	add	sp, #16
 800510c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	f043 0320 	orr.w	r3, r3, #32
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	2778      	movs	r7, #120	; 0x78
 800511a:	4832      	ldr	r0, [pc, #200]	; (80051e4 <_printf_i+0x240>)
 800511c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	6829      	ldr	r1, [r5, #0]
 8005124:	061f      	lsls	r7, r3, #24
 8005126:	f851 6b04 	ldr.w	r6, [r1], #4
 800512a:	d402      	bmi.n	8005132 <_printf_i+0x18e>
 800512c:	065f      	lsls	r7, r3, #25
 800512e:	bf48      	it	mi
 8005130:	b2b6      	uxthmi	r6, r6
 8005132:	07df      	lsls	r7, r3, #31
 8005134:	bf48      	it	mi
 8005136:	f043 0320 	orrmi.w	r3, r3, #32
 800513a:	6029      	str	r1, [r5, #0]
 800513c:	bf48      	it	mi
 800513e:	6023      	strmi	r3, [r4, #0]
 8005140:	b91e      	cbnz	r6, 800514a <_printf_i+0x1a6>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	f023 0320 	bic.w	r3, r3, #32
 8005148:	6023      	str	r3, [r4, #0]
 800514a:	2310      	movs	r3, #16
 800514c:	e7a6      	b.n	800509c <_printf_i+0xf8>
 800514e:	4824      	ldr	r0, [pc, #144]	; (80051e0 <_printf_i+0x23c>)
 8005150:	e7e4      	b.n	800511c <_printf_i+0x178>
 8005152:	4615      	mov	r5, r2
 8005154:	e7bd      	b.n	80050d2 <_printf_i+0x12e>
 8005156:	682b      	ldr	r3, [r5, #0]
 8005158:	6826      	ldr	r6, [r4, #0]
 800515a:	1d18      	adds	r0, r3, #4
 800515c:	6961      	ldr	r1, [r4, #20]
 800515e:	6028      	str	r0, [r5, #0]
 8005160:	0635      	lsls	r5, r6, #24
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	d501      	bpl.n	800516a <_printf_i+0x1c6>
 8005166:	6019      	str	r1, [r3, #0]
 8005168:	e002      	b.n	8005170 <_printf_i+0x1cc>
 800516a:	0670      	lsls	r0, r6, #25
 800516c:	d5fb      	bpl.n	8005166 <_printf_i+0x1c2>
 800516e:	8019      	strh	r1, [r3, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	4615      	mov	r5, r2
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	e7bc      	b.n	80050f2 <_printf_i+0x14e>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	2100      	movs	r1, #0
 800517c:	1d1a      	adds	r2, r3, #4
 800517e:	602a      	str	r2, [r5, #0]
 8005180:	681d      	ldr	r5, [r3, #0]
 8005182:	6862      	ldr	r2, [r4, #4]
 8005184:	4628      	mov	r0, r5
 8005186:	f000 f96d 	bl	8005464 <memchr>
 800518a:	b108      	cbz	r0, 8005190 <_printf_i+0x1ec>
 800518c:	1b40      	subs	r0, r0, r5
 800518e:	6060      	str	r0, [r4, #4]
 8005190:	6863      	ldr	r3, [r4, #4]
 8005192:	6123      	str	r3, [r4, #16]
 8005194:	2300      	movs	r3, #0
 8005196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800519a:	e7aa      	b.n	80050f2 <_printf_i+0x14e>
 800519c:	462a      	mov	r2, r5
 800519e:	4649      	mov	r1, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	47d0      	blx	sl
 80051a6:	3001      	adds	r0, #1
 80051a8:	d0ad      	beq.n	8005106 <_printf_i+0x162>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	079b      	lsls	r3, r3, #30
 80051ae:	d413      	bmi.n	80051d8 <_printf_i+0x234>
 80051b0:	68e0      	ldr	r0, [r4, #12]
 80051b2:	9b03      	ldr	r3, [sp, #12]
 80051b4:	4298      	cmp	r0, r3
 80051b6:	bfb8      	it	lt
 80051b8:	4618      	movlt	r0, r3
 80051ba:	e7a6      	b.n	800510a <_printf_i+0x166>
 80051bc:	2301      	movs	r3, #1
 80051be:	4632      	mov	r2, r6
 80051c0:	4649      	mov	r1, r9
 80051c2:	4640      	mov	r0, r8
 80051c4:	47d0      	blx	sl
 80051c6:	3001      	adds	r0, #1
 80051c8:	d09d      	beq.n	8005106 <_printf_i+0x162>
 80051ca:	3501      	adds	r5, #1
 80051cc:	68e3      	ldr	r3, [r4, #12]
 80051ce:	9903      	ldr	r1, [sp, #12]
 80051d0:	1a5b      	subs	r3, r3, r1
 80051d2:	42ab      	cmp	r3, r5
 80051d4:	dcf2      	bgt.n	80051bc <_printf_i+0x218>
 80051d6:	e7eb      	b.n	80051b0 <_printf_i+0x20c>
 80051d8:	2500      	movs	r5, #0
 80051da:	f104 0619 	add.w	r6, r4, #25
 80051de:	e7f5      	b.n	80051cc <_printf_i+0x228>
 80051e0:	080062d7 	.word	0x080062d7
 80051e4:	080062e8 	.word	0x080062e8

080051e8 <__sflush_r>:
 80051e8:	898a      	ldrh	r2, [r1, #12]
 80051ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ec:	4605      	mov	r5, r0
 80051ee:	0710      	lsls	r0, r2, #28
 80051f0:	460c      	mov	r4, r1
 80051f2:	d457      	bmi.n	80052a4 <__sflush_r+0xbc>
 80051f4:	684b      	ldr	r3, [r1, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	dc04      	bgt.n	8005204 <__sflush_r+0x1c>
 80051fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	dc01      	bgt.n	8005204 <__sflush_r+0x1c>
 8005200:	2000      	movs	r0, #0
 8005202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005206:	2e00      	cmp	r6, #0
 8005208:	d0fa      	beq.n	8005200 <__sflush_r+0x18>
 800520a:	2300      	movs	r3, #0
 800520c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005210:	682f      	ldr	r7, [r5, #0]
 8005212:	6a21      	ldr	r1, [r4, #32]
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	d032      	beq.n	800527e <__sflush_r+0x96>
 8005218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	075a      	lsls	r2, r3, #29
 800521e:	d505      	bpl.n	800522c <__sflush_r+0x44>
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	1ac0      	subs	r0, r0, r3
 8005224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005226:	b10b      	cbz	r3, 800522c <__sflush_r+0x44>
 8005228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800522a:	1ac0      	subs	r0, r0, r3
 800522c:	2300      	movs	r3, #0
 800522e:	4602      	mov	r2, r0
 8005230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005232:	4628      	mov	r0, r5
 8005234:	6a21      	ldr	r1, [r4, #32]
 8005236:	47b0      	blx	r6
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	d106      	bne.n	800524c <__sflush_r+0x64>
 800523e:	6829      	ldr	r1, [r5, #0]
 8005240:	291d      	cmp	r1, #29
 8005242:	d82b      	bhi.n	800529c <__sflush_r+0xb4>
 8005244:	4a28      	ldr	r2, [pc, #160]	; (80052e8 <__sflush_r+0x100>)
 8005246:	410a      	asrs	r2, r1
 8005248:	07d6      	lsls	r6, r2, #31
 800524a:	d427      	bmi.n	800529c <__sflush_r+0xb4>
 800524c:	2200      	movs	r2, #0
 800524e:	6062      	str	r2, [r4, #4]
 8005250:	6922      	ldr	r2, [r4, #16]
 8005252:	04d9      	lsls	r1, r3, #19
 8005254:	6022      	str	r2, [r4, #0]
 8005256:	d504      	bpl.n	8005262 <__sflush_r+0x7a>
 8005258:	1c42      	adds	r2, r0, #1
 800525a:	d101      	bne.n	8005260 <__sflush_r+0x78>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b903      	cbnz	r3, 8005262 <__sflush_r+0x7a>
 8005260:	6560      	str	r0, [r4, #84]	; 0x54
 8005262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005264:	602f      	str	r7, [r5, #0]
 8005266:	2900      	cmp	r1, #0
 8005268:	d0ca      	beq.n	8005200 <__sflush_r+0x18>
 800526a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800526e:	4299      	cmp	r1, r3
 8005270:	d002      	beq.n	8005278 <__sflush_r+0x90>
 8005272:	4628      	mov	r0, r5
 8005274:	f7ff fbee 	bl	8004a54 <_free_r>
 8005278:	2000      	movs	r0, #0
 800527a:	6360      	str	r0, [r4, #52]	; 0x34
 800527c:	e7c1      	b.n	8005202 <__sflush_r+0x1a>
 800527e:	2301      	movs	r3, #1
 8005280:	4628      	mov	r0, r5
 8005282:	47b0      	blx	r6
 8005284:	1c41      	adds	r1, r0, #1
 8005286:	d1c8      	bne.n	800521a <__sflush_r+0x32>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0c5      	beq.n	800521a <__sflush_r+0x32>
 800528e:	2b1d      	cmp	r3, #29
 8005290:	d001      	beq.n	8005296 <__sflush_r+0xae>
 8005292:	2b16      	cmp	r3, #22
 8005294:	d101      	bne.n	800529a <__sflush_r+0xb2>
 8005296:	602f      	str	r7, [r5, #0]
 8005298:	e7b2      	b.n	8005200 <__sflush_r+0x18>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	e7ae      	b.n	8005202 <__sflush_r+0x1a>
 80052a4:	690f      	ldr	r7, [r1, #16]
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	d0aa      	beq.n	8005200 <__sflush_r+0x18>
 80052aa:	0793      	lsls	r3, r2, #30
 80052ac:	bf18      	it	ne
 80052ae:	2300      	movne	r3, #0
 80052b0:	680e      	ldr	r6, [r1, #0]
 80052b2:	bf08      	it	eq
 80052b4:	694b      	ldreq	r3, [r1, #20]
 80052b6:	1bf6      	subs	r6, r6, r7
 80052b8:	600f      	str	r7, [r1, #0]
 80052ba:	608b      	str	r3, [r1, #8]
 80052bc:	2e00      	cmp	r6, #0
 80052be:	dd9f      	ble.n	8005200 <__sflush_r+0x18>
 80052c0:	4633      	mov	r3, r6
 80052c2:	463a      	mov	r2, r7
 80052c4:	4628      	mov	r0, r5
 80052c6:	6a21      	ldr	r1, [r4, #32]
 80052c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80052cc:	47e0      	blx	ip
 80052ce:	2800      	cmp	r0, #0
 80052d0:	dc06      	bgt.n	80052e0 <__sflush_r+0xf8>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	e790      	b.n	8005202 <__sflush_r+0x1a>
 80052e0:	4407      	add	r7, r0
 80052e2:	1a36      	subs	r6, r6, r0
 80052e4:	e7ea      	b.n	80052bc <__sflush_r+0xd4>
 80052e6:	bf00      	nop
 80052e8:	dfbffffe 	.word	0xdfbffffe

080052ec <_fflush_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	690b      	ldr	r3, [r1, #16]
 80052f0:	4605      	mov	r5, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	b913      	cbnz	r3, 80052fc <_fflush_r+0x10>
 80052f6:	2500      	movs	r5, #0
 80052f8:	4628      	mov	r0, r5
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	b118      	cbz	r0, 8005306 <_fflush_r+0x1a>
 80052fe:	6a03      	ldr	r3, [r0, #32]
 8005300:	b90b      	cbnz	r3, 8005306 <_fflush_r+0x1a>
 8005302:	f7ff f9af 	bl	8004664 <__sinit>
 8005306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f3      	beq.n	80052f6 <_fflush_r+0xa>
 800530e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005310:	07d0      	lsls	r0, r2, #31
 8005312:	d404      	bmi.n	800531e <_fflush_r+0x32>
 8005314:	0599      	lsls	r1, r3, #22
 8005316:	d402      	bmi.n	800531e <_fflush_r+0x32>
 8005318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800531a:	f7ff fb98 	bl	8004a4e <__retarget_lock_acquire_recursive>
 800531e:	4628      	mov	r0, r5
 8005320:	4621      	mov	r1, r4
 8005322:	f7ff ff61 	bl	80051e8 <__sflush_r>
 8005326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005328:	4605      	mov	r5, r0
 800532a:	07da      	lsls	r2, r3, #31
 800532c:	d4e4      	bmi.n	80052f8 <_fflush_r+0xc>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	059b      	lsls	r3, r3, #22
 8005332:	d4e1      	bmi.n	80052f8 <_fflush_r+0xc>
 8005334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005336:	f7ff fb8b 	bl	8004a50 <__retarget_lock_release_recursive>
 800533a:	e7dd      	b.n	80052f8 <_fflush_r+0xc>

0800533c <__swhatbuf_r>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	460c      	mov	r4, r1
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	4615      	mov	r5, r2
 8005346:	2900      	cmp	r1, #0
 8005348:	461e      	mov	r6, r3
 800534a:	b096      	sub	sp, #88	; 0x58
 800534c:	da0c      	bge.n	8005368 <__swhatbuf_r+0x2c>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	2100      	movs	r1, #0
 8005352:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005356:	bf0c      	ite	eq
 8005358:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800535c:	2340      	movne	r3, #64	; 0x40
 800535e:	2000      	movs	r0, #0
 8005360:	6031      	str	r1, [r6, #0]
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	b016      	add	sp, #88	; 0x58
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	466a      	mov	r2, sp
 800536a:	f000 f849 	bl	8005400 <_fstat_r>
 800536e:	2800      	cmp	r0, #0
 8005370:	dbed      	blt.n	800534e <__swhatbuf_r+0x12>
 8005372:	9901      	ldr	r1, [sp, #4]
 8005374:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005378:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800537c:	4259      	negs	r1, r3
 800537e:	4159      	adcs	r1, r3
 8005380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005384:	e7eb      	b.n	800535e <__swhatbuf_r+0x22>

08005386 <__smakebuf_r>:
 8005386:	898b      	ldrh	r3, [r1, #12]
 8005388:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800538a:	079d      	lsls	r5, r3, #30
 800538c:	4606      	mov	r6, r0
 800538e:	460c      	mov	r4, r1
 8005390:	d507      	bpl.n	80053a2 <__smakebuf_r+0x1c>
 8005392:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	6123      	str	r3, [r4, #16]
 800539a:	2301      	movs	r3, #1
 800539c:	6163      	str	r3, [r4, #20]
 800539e:	b002      	add	sp, #8
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	466a      	mov	r2, sp
 80053a4:	ab01      	add	r3, sp, #4
 80053a6:	f7ff ffc9 	bl	800533c <__swhatbuf_r>
 80053aa:	9900      	ldr	r1, [sp, #0]
 80053ac:	4605      	mov	r5, r0
 80053ae:	4630      	mov	r0, r6
 80053b0:	f7ff fbb8 	bl	8004b24 <_malloc_r>
 80053b4:	b948      	cbnz	r0, 80053ca <__smakebuf_r+0x44>
 80053b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ba:	059a      	lsls	r2, r3, #22
 80053bc:	d4ef      	bmi.n	800539e <__smakebuf_r+0x18>
 80053be:	f023 0303 	bic.w	r3, r3, #3
 80053c2:	f043 0302 	orr.w	r3, r3, #2
 80053c6:	81a3      	strh	r3, [r4, #12]
 80053c8:	e7e3      	b.n	8005392 <__smakebuf_r+0xc>
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	6020      	str	r0, [r4, #0]
 80053ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d2:	81a3      	strh	r3, [r4, #12]
 80053d4:	9b00      	ldr	r3, [sp, #0]
 80053d6:	6120      	str	r0, [r4, #16]
 80053d8:	6163      	str	r3, [r4, #20]
 80053da:	9b01      	ldr	r3, [sp, #4]
 80053dc:	b15b      	cbz	r3, 80053f6 <__smakebuf_r+0x70>
 80053de:	4630      	mov	r0, r6
 80053e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053e4:	f000 f81e 	bl	8005424 <_isatty_r>
 80053e8:	b128      	cbz	r0, 80053f6 <__smakebuf_r+0x70>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	f023 0303 	bic.w	r3, r3, #3
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	431d      	orrs	r5, r3
 80053fa:	81a5      	strh	r5, [r4, #12]
 80053fc:	e7cf      	b.n	800539e <__smakebuf_r+0x18>
	...

08005400 <_fstat_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	2300      	movs	r3, #0
 8005404:	4d06      	ldr	r5, [pc, #24]	; (8005420 <_fstat_r+0x20>)
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	f7fb fa45 	bl	800089c <_fstat>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d102      	bne.n	800541c <_fstat_r+0x1c>
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	b103      	cbz	r3, 800541c <_fstat_r+0x1c>
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	bd38      	pop	{r3, r4, r5, pc}
 800541e:	bf00      	nop
 8005420:	20001668 	.word	0x20001668

08005424 <_isatty_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	2300      	movs	r3, #0
 8005428:	4d05      	ldr	r5, [pc, #20]	; (8005440 <_isatty_r+0x1c>)
 800542a:	4604      	mov	r4, r0
 800542c:	4608      	mov	r0, r1
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	f7fb fa43 	bl	80008ba <_isatty>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_isatty_r+0x1a>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b103      	cbz	r3, 800543e <_isatty_r+0x1a>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	20001668 	.word	0x20001668

08005444 <_sbrk_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	2300      	movs	r3, #0
 8005448:	4d05      	ldr	r5, [pc, #20]	; (8005460 <_sbrk_r+0x1c>)
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	f7fb fa4a 	bl	80008e8 <_sbrk>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_sbrk_r+0x1a>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_sbrk_r+0x1a>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	20001668 	.word	0x20001668

08005464 <memchr>:
 8005464:	4603      	mov	r3, r0
 8005466:	b510      	push	{r4, lr}
 8005468:	b2c9      	uxtb	r1, r1
 800546a:	4402      	add	r2, r0
 800546c:	4293      	cmp	r3, r2
 800546e:	4618      	mov	r0, r3
 8005470:	d101      	bne.n	8005476 <memchr+0x12>
 8005472:	2000      	movs	r0, #0
 8005474:	e003      	b.n	800547e <memchr+0x1a>
 8005476:	7804      	ldrb	r4, [r0, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	428c      	cmp	r4, r1
 800547c:	d1f6      	bne.n	800546c <memchr+0x8>
 800547e:	bd10      	pop	{r4, pc}

08005480 <_init>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr

0800548c <_fini>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr
